/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                             __ ___   ____     _   __      __  _               ____  _           ___
//	  / ____/___  _________  ____  __  __/ /|__ \ / __ \   / | / /___ _/ /_(_)   _____     / __ )(_)___  ____/ (_)___  ____ ______
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/_/ // / / /  /  |/ / __ `/ __/ / | / / _ \   / __  / / __ \/ __  / / __ \/ __ `/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_/ __// /_/ /  / /|  / /_/ / /_/ /| |/ /  __/  / /_/ / / / / / /_/ / / / / / /_/ (__  )
//	\____/\____/\___/\____/_/ /_/\__,_/\__/____/_____/  /_/ |_/\__,_/\__/_/ |___/\___/  /_____/_/_/ /_/\__,_/_/_/ /_/\__, /____/
//	                                                                                                                /____/
// ==================================================================================================================================

/*
function __registerManager(manager) {};
function __registerCallback(uid, type) {};
function __unRegisterCallback(uid, type) {};
function __ImageData_loadImage(data) {};

function __Audio_load(url:String,obj:Audio) :Integer {}
function __Audio_get_position(id:Integer):Float  {}
function __Audio_set_position(id:Integer,time:Time)  {}
function __Audio_play(id:Integer) {};
function __Audio_pause(id:Integer) {};
function __Audio_stop(id:Integer) {};

function __WebGLRenderingContext_activeTexture(uid, texture) {};
function __WebGLRenderingContext_attachShader(uid, program_uid, shader_uid) {};
function __WebGLRenderingContext_bindAttribLocation(uid, program_uid, index, name) {};
function __WebGLRenderingContext_bindBuffer(uid, target, buffer_uid) {};
function __WebGLRenderingContext_bindFramebuffer(uid, target, framebuffer_uid) {};
function __WebGLRenderingContext_bindRenderbuffer(uid, target, renderbuffer_uid) {};
function __WebGLRenderingContext_bindTexture(uid, target, texture_uid) {};
function __WebGLRenderingContext_blendColor(uid, red, green, blue, alpha) {};
function __WebGLRenderingContext_blendEquation(uid, mode) {};
function __WebGLRenderingContext_blendEquationSeparate(uid, modeRGB, modeAlpha) {};
function __WebGLRenderingContext_blendFunc(uid, sfactor, dfactor) {};
function __WebGLRenderingContext_blendFuncSeparate(uid, srcRGB, dstRGB, srcAlpha, dstAlpha) {};
function __WebGLRenderingContext_bufferData() {};
function __WebGLRenderingContext_bufferSubData(uid, target, offset, data_buffer_uid, data_byteOffset, data_length) {};
function __WebGLRenderingContext_checkFramebufferStatus(uid, target):Integer {};
function __WebGLRenderingContext_clear(uid, mask) {};
function __WebGLRenderingContext_clearColor(uid, red, green, blue, alpha) {};
function __WebGLRenderingContext_clearDepth(uid, depth) {};
function __WebGLRenderingContext_clearStencil(uid, s) {};
function __WebGLRenderingContext_colorMask(uid, red, green, blue, alpha) {};
function __WebGLRenderingContext_compileShader(uid, shader_uid) {};
function __WebGLRenderingContext_compressedTexImage2D(uid, target, level, internalformat, width, height, border, data_buffer_uid, data_byteOffset, data_length) {};
function __WebGLRenderingContext_compressedTexSubImage2D(uid, target, level, xoffset, yoffset, width, height, format, data_buffer_uid, data_byteOffset, data_length) {};
function __WebGLRenderingContext_copyTexImage2D(uid, target, level, internalformat, x, y, width, height, border) {};
function __WebGLRenderingContext_copyTexSubImage2D(uid, target, level, xoffset, yoffset, x, y, width, height) {};
function __WebGLRenderingContext_createBuffer(uid):Integer {};
function __WebGLRenderingContext_createFramebuffer(uid):Integer {};
function __WebGLRenderingContext_createProgram(uid):Integer {};
function __WebGLRenderingContext_createRenderbuffer(uid):Integer {};
function __WebGLRenderingContext_createShader(uid, type):Integer {};
function __WebGLRenderingContext_createTexture(uid):Integer {};
function __WebGLRenderingContext_cullFace(uid, mode) {};
function __WebGLRenderingContext_deleteBuffer(uid, buffer_uid) {};
function __WebGLRenderingContext_deleteFramebuffer(uid, framebuffer_uid) {};
function __WebGLRenderingContext_deleteProgram(uid, program_uid) {};
function __WebGLRenderingContext_deleteRenderbuffer(uid, renderbuffer_uid) {};
function __WebGLRenderingContext_deleteShader(uid, shader_uid) {};
function __WebGLRenderingContext_deleteTexture(uid, texture_uid) {};
function __WebGLRenderingContext_depthFunc(uid, func) {};
function __WebGLRenderingContext_depthMask(uid, flag) {};
function __WebGLRenderingContext_depthRange(uid, zNear, zFar) {};
function __WebGLRenderingContext_detachShader(uid, program_uid, shader_uid) {};
function __WebGLRenderingContext_disable(uid, cap) {};
function __WebGLRenderingContext_disableVertexAttribArray(uid, index) {};
function __WebGLRenderingContext_drawArrays(uid, mode, first, count) {};
function __WebGLRenderingContext_drawElements(uid, mode, count, type, offset) {};
function __WebGLRenderingContext_enable(uid, cap) {};
function __WebGLRenderingContext_enableVertexAttribArray(uid, index) {};
function __WebGLRenderingContext_execute(uid, payload) {};
function __WebGLRenderingContext_finish(uid) {};
function __WebGLRenderingContext_flush(uid) {};
function __WebGLRenderingContext_framebufferRenderbuffer(uid, target, attachment, renderbuffertarget, renderbuffer_uid) {};
function __WebGLRenderingContext_framebufferTexture2D(uid, target, attachment, textarget, texture_uid, level) {};
function __WebGLRenderingContext_frontFace(uid, mode) {};
function __WebGLRenderingContext_generateMipmap(uid, target) {};
function __WebGLRenderingContext_getActiveAttrib(uid, program_uid, index):Integer {};
function __WebGLRenderingContext_getActiveUniform(uid, program_uid, index):Integer {};
function __WebGLRenderingContext_getAttachedShaders(uid, program_uid):Array<WebGLShader> {};
function __WebGLRenderingContext_getAttribLocation(uid, program_uid, name):Integer {};
function __WebGLRenderingContext_getBufferParameter(uid, target, pname):String {};
function __WebGLRenderingContext_getContextAttributes(uid):Integer {};
function __WebGLRenderingContext_getError(uid):Integer {};
function __WebGLRenderingContext_getExtension(uid, name):Object {};
function __WebGLRenderingContext_getFramebufferAttachmentParameter(uid, target, attachment, pname):String {};
function __WebGLRenderingContext_getParameter(uid, pname):String {};
function __WebGLRenderingContext_getProgramInfoLog(uid, program_uid):String {};
function __WebGLRenderingContext_getProgramParameter(uid, program_uid, pname):Boolean {};
function __WebGLRenderingContext_getRenderbufferParameter(uid, target, pname):String {};
function __WebGLRenderingContext_getShaderInfoLog(uid, shader_uid):String {};
function __WebGLRenderingContext_getShaderParameter(uid, shader_uid, pname):Boolean {};
function __WebGLRenderingContext_getShaderPrecisionFormat(uid, shadertype, precisiontype):Integer {};
function __WebGLRenderingContext_getShaderSource(uid, shader_uid):String {};
function __WebGLRenderingContext_getSupportedExtensions(uid):Array<String> {};
function __WebGLRenderingContext_getTexParameter(uid, target, pname):String {};
function __WebGLRenderingContext_getUniform(uid, program_uid, location_uid):String {};
function __WebGLRenderingContext_getUniformLocation(uid, program_uid, name):Integer {};
function __WebGLRenderingContext_getVertexAttrib(uid, index, pname):String {};
function __WebGLRenderingContext_getVertexAttribOffset(uid, index, pname):Integer {};
function __WebGLRenderingContext_hint(uid, target, mode) {};
function __WebGLRenderingContext_isBuffer(uid, buffer_uid):Boolean {};
function __WebGLRenderingContext_isContextLost(uid):Boolean {};
function __WebGLRenderingContext_isEnabled(uid, cap):Boolean {};
function __WebGLRenderingContext_isFramebuffer(uid, framebuffer_uid):Boolean {};
function __WebGLRenderingContext_isProgram(uid, program_uid):Boolean {};
function __WebGLRenderingContext_isRenderbuffer(uid, renderbuffer_uid):Boolean {};
function __WebGLRenderingContext_isShader(uid, shader_uid):Boolean {};
function __WebGLRenderingContext_isTexture(uid, texture_uid):Boolean {};
function __WebGLRenderingContext_lineWidth(uid, width) {};
function __WebGLRenderingContext_linkProgram(uid, program_uid) {};
function __WebGLRenderingContext_pixelStorei(uid, pname, param) {};
function __WebGLRenderingContext_polygonOffset(uid, factor, units) {};
function __WebGLRenderingContext_readPixels(uid, x, y, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length) {};
function __WebGLRenderingContext_renderbufferStorage(uid, target, internalformat, width, height) {};
function __WebGLRenderingContext_sampleCoverage(uid, value, invert) {};
function __WebGLRenderingContext_scissor(uid, x, y, width, height) {};
function __WebGLRenderingContext_shaderSource(uid, shader_uid, source) {};
function __WebGLRenderingContext_stencilFunc(uid, func, ref, mask) {};
function __WebGLRenderingContext_stencilFuncSeparate(uid, face, func, ref, mask) {};
function __WebGLRenderingContext_stencilMask(uid, mask) {};
function __WebGLRenderingContext_stencilMaskSeparate(uid, face, mask) {};
function __WebGLRenderingContext_stencilOp(uid, fail, zfail, zpass) {};
function __WebGLRenderingContext_stencilOpSeparate(uid, face, fail, zfail, zpass) {};
function __WebGLRenderingContext_texImage2D() {};
function __WebGLRenderingContext_texParameterf(uid, target, pname, param) {};
function __WebGLRenderingContext_texParameteri(uid, target, pname, param) {};
function __WebGLRenderingContext_texSubImage2D(uid, target, level, xoffset, yoffset, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length) {};
function __WebGLRenderingContext_uniform1f(uid, location_uid, x) {};
function __WebGLRenderingContext_uniform1fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform1i(uid, location_uid, x) {};
function __WebGLRenderingContext_uniform1iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform2f(uid, location_uid, x, y) {};
function __WebGLRenderingContext_uniform2fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform2i(uid, location_uid, x, y) {};
function __WebGLRenderingContext_uniform2iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform3f(uid, location_uid, x, y, z) {};
function __WebGLRenderingContext_uniform3fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform3i(uid, location_uid, x, y, z) {};
function __WebGLRenderingContext_uniform3iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform4f(uid, location_uid, x, y, z, w) {};
function __WebGLRenderingContext_uniform4fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform4i(uid, location_uid, x, y, z, w) {};
function __WebGLRenderingContext_uniform4iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniformMatrix2fv(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_uniformMatrix3fv(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_uniformMatrix4fv(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_useProgram(uid, program_uid) {};
function __WebGLRenderingContext_validateProgram(uid, program_uid) {};
function __WebGLRenderingContext_vertexAttrib1f(uid, indx, x) {};
function __WebGLRenderingContext_vertexAttrib1fv(uid, indx, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttrib2f(uid, indx, x, y) {};
function __WebGLRenderingContext_vertexAttrib2fv(uid, indx, value__buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttrib3f(uid, indx, x, y, z) {};
function __WebGLRenderingContext_vertexAttrib3fv(uid, indx, value__buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttrib4f(uid, indx, x, y, z, w) {};
function __WebGLRenderingContext_vertexAttrib4fv(uid, indx, value__buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttribPointer(uid, indx, size, type, normalized, stride, offset) {};
function __WebGLRenderingContext_viewport(uid, x, y, width, height) {};
*/

var __registerManager = function(manager){};
var __registerCallback = function(uid, type){};
var __unRegisterCallback = function(uid, type){};
var __ImageData_loadImage = function(data){};

function __Audio_load(url:String,obj:Audio) :Integer {}
var __Audio_get_position:Float = function(id:Integer) {}
var __Audio_set_position = function(id:Integer,time:Time) {}
var __Audio_play = function(id:Integer){};
var __Audio_pause = function(id:Integer){};
var __Audio_stop = function(id:Integer){};

var __Canvas2DRenderingContext_flush = function(uid, length, width, height){};
var __WebGLRenderingContext_activeTexture = function(uid, texture){};
var __WebGLRenderingContext_attachShader = function(uid, program_uid, shader_uid){};
var __WebGLRenderingContext_bindAttribLocation = function(uid, program_uid, index, name){};
var __WebGLRenderingContext_bindBuffer = function(uid, target, buffer_uid){};
var __WebGLRenderingContext_bindFramebuffer = function(uid, target, framebuffer_uid){};
var __WebGLRenderingContext_bindRenderbuffer = function(uid, target, renderbuffer_uid){};
var __WebGLRenderingContext_bindTexture = function(uid, target, texture_uid){};
var __WebGLRenderingContext_blendColor = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_blendEquation = function(uid, mode){};
var __WebGLRenderingContext_blendEquationSeparate = function(uid, modeRGB, modeAlpha){};
var __WebGLRenderingContext_blendFunc = function(uid, sfactor, dfactor){};
var __WebGLRenderingContext_blendFuncSeparate = function(uid, srcRGB, dstRGB, srcAlpha, dstAlpha){};
var __WebGLRenderingContext_bufferData = function(){};
var __WebGLRenderingContext_bufferSubData = function(uid, target, offset, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_checkFramebufferStatus:Integer = function(uid, target){};
var __WebGLRenderingContext_clear = function(uid, mask){};
var __WebGLRenderingContext_clearColor = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_clearDepth = function(uid, depth){};
var __WebGLRenderingContext_clearStencil = function(uid, s){};
var __WebGLRenderingContext_colorMask = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_compileShader = function(uid, shader_uid){};
var __WebGLRenderingContext_compressedTexImage2D = function(uid, target, level, internalformat, width, height, border, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_compressedTexSubImage2D = function(uid, target, level, xoffset, yoffset, width, height, format, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_copyTexImage2D = function(uid, target, level, internalformat, x, y, width, height, border){};
var __WebGLRenderingContext_copyTexSubImage2D = function(uid, target, level, xoffset, yoffset, x, y, width, height){};
var __WebGLRenderingContext_createBuffer:Integer = function(uid){};
var __WebGLRenderingContext_createFramebuffer:Integer = function(uid){};
var __WebGLRenderingContext_createProgram:Integer = function(uid){};
var __WebGLRenderingContext_createRenderbuffer:Integer = function(uid){};
var __WebGLRenderingContext_createShader:Integer = function(uid, type){};
var __WebGLRenderingContext_createTexture:Integer = function(uid){};
var __WebGLRenderingContext_cullFace = function(uid, mode){};
var __WebGLRenderingContext_deleteBuffer = function(uid, buffer_uid){};
var __WebGLRenderingContext_deleteFramebuffer = function(uid, framebuffer_uid){};
var __WebGLRenderingContext_deleteProgram = function(uid, program_uid){};
var __WebGLRenderingContext_deleteRenderbuffer = function(uid, renderbuffer_uid){};
var __WebGLRenderingContext_deleteShader = function(uid, shader_uid){};
var __WebGLRenderingContext_deleteTexture = function(uid, texture_uid){};
var __WebGLRenderingContext_depthFunc = function(uid, func){};
var __WebGLRenderingContext_depthMask = function(uid, flag){};
var __WebGLRenderingContext_depthRange = function(uid, zNear, zFar){};
var __WebGLRenderingContext_detachShader = function(uid, program_uid, shader_uid){};
var __WebGLRenderingContext_disable = function(uid, cap){};
var __WebGLRenderingContext_disableVertexAttribArray = function(uid, index){};
var __WebGLRenderingContext_drawArrays = function(uid, mode, first, count){};
var __WebGLRenderingContext_drawElements = function(uid, mode, count, type, offset){};
var __WebGLRenderingContext_enable = function(uid, cap){};
var __WebGLRenderingContext_enableVertexAttribArray = function(uid, index){};
var __WebGLRenderingContext_execute = function(uid, payload){};
var __WebGLRenderingContext_finish = function(uid){};
var __WebGLRenderingContext_flush = function(uid){};
var __WebGLRenderingContext_framebufferRenderbuffer = function(uid, target, attachment, renderbuffertarget, renderbuffer_uid){};
var __WebGLRenderingContext_framebufferTexture2D = function(uid, target, attachment, textarget, texture_uid, level){};
var __WebGLRenderingContext_frontFace = function(uid, mode){};
var __WebGLRenderingContext_generateMipmap = function(uid, target){};
var __WebGLRenderingContext_getActiveAttrib:Integer = function(uid, program_uid, index){};
var __WebGLRenderingContext_getActiveUniform:Integer = function(uid, program_uid, index){};
var __WebGLRenderingContext_getAttachedShaders:Array<WebGLShader> = function(uid, program_uid){};
var __WebGLRenderingContext_getAttribLocation:Integer = function(uid, program_uid, name){};
var __WebGLRenderingContext_getBufferParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getContextAttributes:Integer = function(uid){};
var __WebGLRenderingContext_getError:Integer = function(uid){};
var __WebGLRenderingContext_getExtension:Object = function(uid, name){};
var __WebGLRenderingContext_getFramebufferAttachmentParameter:String = function(uid, target, attachment, pname){};
var __WebGLRenderingContext_getParameter:String = function(uid, pname){};
var __WebGLRenderingContext_getProgramInfoLog:String = function(uid, program_uid){};
var __WebGLRenderingContext_getProgramParameter:Boolean = function(uid, program_uid, pname){};
var __WebGLRenderingContext_getRenderbufferParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getShaderInfoLog:String = function(uid, shader_uid){};
var __WebGLRenderingContext_getShaderParameter:Boolean = function(uid, shader_uid, pname){};
var __WebGLRenderingContext_getShaderPrecisionFormat:Integer = function(uid, shadertype, precisiontype){};
var __WebGLRenderingContext_getShaderSource:String = function(uid, shader_uid){};
var __WebGLRenderingContext_getSupportedExtensions:Array<String> = function(uid){};
var __WebGLRenderingContext_getTexParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getUniform:String = function(uid, program_uid, location_uid){};
var __WebGLRenderingContext_getUniformLocation:Integer = function(uid, program_uid, name){};
var __WebGLRenderingContext_getVertexAttrib:String = function(uid, index, pname){};
var __WebGLRenderingContext_getVertexAttribOffset:Integer = function(uid, index, pname){};
var __WebGLRenderingContext_hint = function(uid, target, mode){};
var __WebGLRenderingContext_isBuffer:Boolean = function(uid, buffer_uid){};
var __WebGLRenderingContext_isContextLost:Boolean = function(uid){};
var __WebGLRenderingContext_isEnabled:Boolean = function(uid, cap){};
var __WebGLRenderingContext_isFramebuffer:Boolean = function(uid, framebuffer_uid){};
var __WebGLRenderingContext_isProgram:Boolean = function(uid, program_uid){};
var __WebGLRenderingContext_isRenderbuffer:Boolean = function(uid, renderbuffer_uid){};
var __WebGLRenderingContext_isShader:Boolean = function(uid, shader_uid){};
var __WebGLRenderingContext_isTexture:Boolean = function(uid, texture_uid){};
var __WebGLRenderingContext_lineWidth = function(uid, width){};
var __WebGLRenderingContext_linkProgram = function(uid, program_uid){};
var __WebGLRenderingContext_pixelStorei = function(uid, pname, param){};
var __WebGLRenderingContext_polygonOffset = function(uid, factor, units){};
var __WebGLRenderingContext_readPixels = function(uid, x, y, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length){};
var __WebGLRenderingContext_renderbufferStorage = function(uid, target, internalformat, width, height){};
var __WebGLRenderingContext_sampleCoverage = function(uid, value, invert){};
var __WebGLRenderingContext_scissor = function(uid, x, y, width, height){};
var __WebGLRenderingContext_shaderSource = function(uid, shader_uid, source){};
var __WebGLRenderingContext_stencilFunc = function(uid, func, ref, mask){};
var __WebGLRenderingContext_stencilFuncSeparate = function(uid, face, func, ref, mask){};
var __WebGLRenderingContext_stencilMask = function(uid, mask){};
var __WebGLRenderingContext_stencilMaskSeparate = function(uid, face, mask){};
var __WebGLRenderingContext_stencilOp = function(uid, fail, zfail, zpass){};
var __WebGLRenderingContext_stencilOpSeparate = function(uid, face, fail, zfail, zpass){};
var __WebGLRenderingContext_texImage2D = function(){};
var __WebGLRenderingContext_texParameterf = function(uid, target, pname, param){};
var __WebGLRenderingContext_texParameteri = function(uid, target, pname, param){};
var __WebGLRenderingContext_texSubImage2D = function(uid, target, level, xoffset, yoffset, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length){};
var __WebGLRenderingContext_uniform1f = function(uid, location_uid, x){};
var __WebGLRenderingContext_uniform1fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform1i = function(uid, location_uid, x){};
var __WebGLRenderingContext_uniform1iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform2f = function(uid, location_uid, x, y){};
var __WebGLRenderingContext_uniform2fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform2i = function(uid, location_uid, x, y){};
var __WebGLRenderingContext_uniform2iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform3f = function(uid, location_uid, x, y, z){};
var __WebGLRenderingContext_uniform3fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform3i = function(uid, location_uid, x, y, z){};
var __WebGLRenderingContext_uniform3iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform4f = function(uid, location_uid, x, y, z, w){};
var __WebGLRenderingContext_uniform4fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform4i = function(uid, location_uid, x, y, z, w){};
var __WebGLRenderingContext_uniform4iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniformMatrix2fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_uniformMatrix3fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_uniformMatrix4fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_useProgram = function(uid, program_uid){};
var __WebGLRenderingContext_validateProgram = function(uid, program_uid){};
var __WebGLRenderingContext_vertexAttrib1f = function(uid, indx, x){};
var __WebGLRenderingContext_vertexAttrib1fv = function(uid, indx, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib2f = function(uid, indx, x, y){};
var __WebGLRenderingContext_vertexAttrib2fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib3f = function(uid, indx, x, y, z){};
var __WebGLRenderingContext_vertexAttrib3fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib4f = function(uid, indx, x, y, z, w){};
var __WebGLRenderingContext_vertexAttrib4fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttribPointer = function(uid, indx, size, type, normalized, stride, offset){};
var __WebGLRenderingContext_viewport = function(uid, x, y, width, height){};

// ==================================================================================================================================
//	    ______________  ______           __                  _____           _       __     ____  __      _           __
//	   / ____/ ____/  |/  /   |         / /___ __   ______ _/ ___/__________(_)___  / /_   / __ \/ /_    (_)__  _____/ /______
//	  / __/ / /   / /|_/ / /| |    __  / / __ `/ | / / __ `/\__ \/ ___/ ___/ / __ \/ __/  / / / / __ \  / / _ \/ ___/ __/ ___/
//	 / /___/ /___/ /  / / ___ |   / /_/ / /_/ /| |/ / /_/ /___/ / /__/ /  / / /_/ / /_   / /_/ / /_/ / / /  __/ /__/ /_(__  )
//	/_____/\____/_/  /_/_/  |_|   \____/\__,_/ |___/\__,_//____/\___/_/  /_/ .___/\__/   \____/_.___/_/ /\___/\___/\__/____/
//	                                                                      /_/                      /___/
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
class Null {}
class Untyped {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Object
{
	public var prototype:Object;
	public function Destructor() {}
	public function toString():String {}
	public function toLocaleString():String {}
	public function valueOf():Object {}
	public function hasOwnProperty(name:String):Boolean {}
	public function isPrototypeOf(o:Object):Boolean {}
	public function propertyIsEnumerable(name:String):Boolean {}
	public function defineProperty(object:Object, name:String, params:Object){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Array
{
	public var length:Number;
	public function clone():Array {}
	public function concat(args:Array):Array {}
	public function join(seperator:String):String {}
	public function pop():Object {}
	public function push(args:Object):Object {}
	public function reverse():Array {}
	public function shift():Array {}
	public function slice(start:Number, optional end:Number):Array {}
	public function sort(funct:Function):Array {}
	public function splice(start:Number, deletecount:Number, optional items:Object):Object {}
	public function unshift(start:Number):Array {}
	public function forEach(item:Object):Array {}
	public function size():Number {}
	public function clear() {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Function
{
	public var length:Number;
	public function apply(thisObject:Object, optional args:Array):Object {}
	public function call(thisObject:Object, ...):Object {}
}

callback CocoAction() {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Global
{
	public var NaN:Number;
	public var Infinity:Number;
	public var innerWidth:Float;
	public var innerHeight:Float;
	public var deviceRotation:Float;
	public var devicePixelRatio:Float;
	public var __native:Boolean;
	public function Destructor() {}
	public function eval(s:String):Object {}
	public function parseInt(s:String, optional radix:Number):Integer {}
	public function parseFloat(s:String):Float {}
	public function escape(s:String):String {}
	public function unescape(s:String):String {}
	public function isNaN(number:Object):Boolean {}
	public function isFinite(number:Object):Boolean {}
	public function decodeURI(encodedURI:String):String {}
	public function decodeURIComponent(uriComponent:String):String {}
	public function encodeURIComponent(uriComponent:String):String {}
	public function encodeURI(URI:String):String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class String
{
	public var length:Number;
	public static function fromCharCode(charCode:Number):String {}
	public function charAt(position:Number):String {}
	public function charCodeAt(position:Number):Number {}
	public function concat(value:String):String {}
	public function indexOf(searchString:String, optional startPosition:Number):Number {}
	public function lastIndexOf(searchString:String, startPosition:Number):Number {}
	public function localeCompare(otherString:String):Number {}
	public function match(regexp:RegExp):Array {}
	public function replace(regexp:RegExp, replaceValue:String):String {}
	public function search(regexp:RegExp):Number {}
	public function slice(start:Number, end:Number):String {}
	public function split(separator:String, optional limit:Number):Array<String> {}
	public function substring(start:Number, optional end:Number):String {}
	public function substr(start:Number, optional size:Number):String {}
	public function toLowerCase():String {}
	public function toLocaleLowerCase():String {}
	public function toUpperCase():String {}
	public function toLocaleUpperCase():String {}
	public function size():Integer {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Number
{
	public var MIN_VALUE:Number;
	public var MAX_VALUE:Number;
	public var NEGATIVE_INFINITY:Number;
	public var POSITIVE_INFINITY:Number;
	public function toFixed(fractionDigits:Number):String {}
	public function toExponential(fractionDigits:Number):String {}
	public function toPrecision(fractionDigits:Number):String {}
}

class Integer : Number 	{}
class Float : Number 	{}
class Time : Number		{}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Boolean
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Date
{
	public function UTC(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function parse(string:String):Number {}
	public function toDateString():String {}
	public function toTimeString():String {}
	public function toLocaleString():String {}
	public function toLocaleDateString():String {}
	public function toLocaleTimeString():String {}
	public function valueOf():Object {}
	public function getFullYear():Number {}
	public function getTime():Number {}
	public function getUTCFullYear():Number {}
	public function getMonth():Number {}
	public function getUTCMonth():Number {}
	public function getDate():Number {}
	public function getUTCDate():Number {}
	public function getDay():Number {}
	public function getUTCDay():Number {}
	public function getHours():Number {}
	public function getUTCHours():Number {}
	public function getMinutes():Number {}
	public function getUTCMinutes():Number {}
	public function getSeconds():Number {}
	public function getUTCSeconds():Number {}
	public function getMilliseconds():Number {}
	public function getUTCMilliseconds():Number {}
	public function getTimezoneOffset():Number {}
	public function setTime(value:Number):Number {}
	public function setMilliseconds(value:Number):Number {}
	public function setUTCMilliseconds(ms:Number):Number {}
	public function setSeconds(sec:Number, ms:Number):Number {}
	public function setUTCSeconds(sec:Number, ms:Number):Number {}
	public function setMinutes(min:Number, sec:Number, ms:Number):Number {}
	public function setUTCMinute(min:Number, sec:Number, ms:Number):Number {}
	public function setHours(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function setDate(date:Number):Number {}
	public function setUTCDate(date:Number):Number {}
	public function setMonth(month:Number, date:Number):Number {}
	public function setUTCMonth(month:Number, date:Number):Number {}
	public function setFullYear(year:Number, month:Number, date:Number):Number {}
	public function setUTCFullYear(year:Number, month:Number, date:Number){};
	public function toUTCString():String {}
	public function toJSON():String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Math
{
	public static var E:Float;
	public static var LN10:Float;
	public static var LN2:Float;
	public static var LOG2E:Float;
	public static var LOG10E:Float;
	public static var PI:Float;
	public static var SQRT1_2:Float;
	public static var SQRT2:Float;
	public static function abs(x:Number):Number {}
	public static function acos(x:Number):Float {}
	public static function asin(x:Number):Float {}
	public static function atan(x:Number):Float {}
	public static function atan2(x:Number, y:Number):Float {}
	public static function ceil(x:Number):Number {}
	public static function cos(x:Number):Float {}
	public static function exp(x:Number):Float {}
	public static function floor(x:Number):Integer {}
	public static function log(x:Number):Float {}
	public static function max(a:Number, b:Number):Number {}
	public static function min(a:Number, b:Number):Number {}
	public static function pow(x:Number, y:Number):Float {}
	public static function random():Float {}
	public static function round(x:Number):Number {}
	public static function sin(x:Number):Float {}
	public static function sqrt(x:Number):Float {}
	public static function tan(x:Number):Float {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class RegExp
{
	public var source:String;
	public var global:Boolean;
	public var ignoreCase:Boolean;
	public var multiline:Boolean;
	public var lastIndex:Number;
	public function exec(string:String):Array {}
	public function test(string:String):Boolean {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBuffer
{
	public var byteLength:Number;
    public function slice(begin:Number, end:Number): ArrayBuffer {}
    public function encodeAsPNG(width:Number, height:Number):ArrayBuffer {}
    public function encodeAsBase64():String {}
    public var __uid:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBufferView
{
	public var buffer:ArrayBuffer;
	public var byteOffset:Integer;
	public var byteLength:Integer;
	public var __uid:Integer;
	public function Destructor() {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class TypedArray : ArrayBufferView
{
	public var length:Integer;
	public var BYTES_PER_ELEMENT:Integer;
	public function set(array:TypedArray, optional offset:Integer) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Float32Array : TypedArray
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Int32Array : TypedArray
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Uint8Array : TypedArray
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Error
{
	public var name:String;
	public var message:String
}

class EvalError :Error {}
class RangeError :Error {}
class ReferenceError :Error {}
class SyntaxError :Error {}
class TypeError :Error {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ImageDataBuffer
{
	public var buffer:ArrayBuffer;
	public var width:Float;
	public var height:Float;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class DataView : ArrayBufferView
{
	public function Constructor(buffer:ArrayBuffer, optional byteOffset:Integer, optional byteLength:Integer)
	{
	}

    public function getInt8(byteOffset:Integer):Integer {}
    public function getUint8(byteOffset:Integer):Integer {}
    public function getInt16(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getUint16(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getInt32(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getUint32(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getFloat32(byteOffset:Integer, optional littleEndian:Boolean):Float {}
    public function getFloat64(byteOffset:Integer, optional littleEndian:Boolean):Float {}

    public function setInt8(byteOffset:Integer, value:Integer) {}
    public function setUint8(byteOffset:Integer, value:Integer) {}
    public function setInt16(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setUint16(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setInt32(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setUint32(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setFloat32(byteOffset:Integer, value:Float, optional littleEndian:Boolean) {}
    public function setFloat64(byteOffset:Integer, value:Float, optional littleEndian:Boolean) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class XMLHttpRequest
{
	public const UNSENT:Integer = 0;
	public const OPENED:Integer = 1;
	public const HEADERS_RECEIVED:Integer = 2;
	public const LOADING:Integer = 3;
	public const DONE:Integer = 4;

	// request
	public var timeout:Integer;
	public var readyState:Integer;
	public function open(method:String, url:String, optional async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send() {}
	public function send(data:String) {}
	public function send(data:ArrayBufferView) {}
	public function abort() {}

	// response
	public var status:Integer;
	public var statusText:String;
	public var responseText:String;
	public var responseType:Integer;//XMLHttpRequestResponseType;
	public function getAllResponseHeaders():String {}
	public function getResponseHeader(header:String):String {}
}

// ==================================================================================================================================
//	   ______                             __     _   __      __  _
//	  / ____/___  _________  ____  __  __/ /_   / | / /___ _/ /_(_)   _____
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/  /  |/ / __ `/ __/ / | / / _ \
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_   / /|  / /_/ / /_/ /| |/ /  __/
//	\____/\____/\___/\____/_/ /_/\__,_/\__/  /_/ |_/\__,_/\__/_/ |___/\___/
//
// ==================================================================================================================================

class CocoFont
{
	public var height:Float;
	public function Constructor(FontName:String, FontSize:Float, Bold:Boolean, Italic:Boolean){}
	public function fillText(imageDataBuffer:ArrayBuffer, width:Float, text:String, x:Float, y:Float, R:Float, G:Float, B:Float, A:Float){}
	public function measureText(text:String):Float {}
}

// ==================================================================================================================================
//	   __  __                  ____      __            ____
//	  / / / /_______  _____   /  _/___  / /____  _____/ __/___ _________
//	 / / / / ___/ _ \/ ___/   / // __ \/ __/ _ \/ ___/ /_/ __ `/ ___/ _ \
//	/ /_/ (__  )  __/ /     _/ // / / / /_/  __/ /  / __/ /_/ / /__/  __/
//	\____/____/\___/_/     /___/_/ /_/\__/\___/_/  /_/  \__,_/\___/\___/
//
// ==================================================================================================================================

class Color : Number {}
class Gradient: String {}

// ==================================================================================================================================
//	   ________      __          __   _    __           _       __    __
//	  / ____/ /___  / /_  ____ _/ /  | |  / /___ ______(_)___ _/ /_  / /__  _____
//	 / / __/ / __ \/ __ \/ __ `/ /   | | / / __ `/ ___/ / __ `/ __ \/ / _ \/ ___/
//	/ /_/ / / /_/ / /_/ / /_/ / /    | |/ / /_/ / /  / / /_/ / /_/ / /  __(__  )
//	\____/_/\____/_.___/\__,_/_/     |___/\__,_/_/  /_/\__,_/_.___/_/\___/____/
//
// ==================================================================================================================================

var global:Global;
var engine:CocoEngine;
var window:HTMLWindow;
var document:HTMLDocument;
var graphics:CocoGraphics;
