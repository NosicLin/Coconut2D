/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                             __ ___   ____     _   __      __  _               ____  _           ___
//	  / ____/___  _________  ____  __  __/ /|__ \ / __ \   / | / /___ _/ /_(_)   _____     / __ )(_)___  ____/ (_)___  ____ ______
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/_/ // / / /  /  |/ / __ `/ __/ / | / / _ \   / __  / / __ \/ __  / / __ \/ __ `/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_/ __// /_/ /  / /|  / /_/ / /_/ /| |/ /  __/  / /_/ / / / / / /_/ / / / / / /_/ (__  )
//	\____/\____/\___/\____/_/ /_/\__,_/\__/____/_____/  /_/ |_/\__,_/\__/_/ |___/\___/  /_____/_/_/ /_/\__,_/_/_/ /_/\__, /____/
//	                                                                                                                /____/
// ==================================================================================================================================

/*
function __registerManager(manager) {};
function __registerCallback(uid, type) {};
function __unRegisterCallback(uid, type) {};
function __ImageData_loadImage(data) {};

function __Audio_load(url:String,obj:Audio) :Integer {}
function __Audio_get_position(id:Integer):Float  {}
function __Audio_set_position(id:Integer,time:Time)  {}
function __Audio_play(id:Integer) {};
function __Audio_pause(id:Integer) {};
function __Audio_stop(id:Integer) {};

function __WebGLRenderingContext_activeTexture(uid, texture) {};
function __WebGLRenderingContext_attachShader(uid, program_uid, shader_uid) {};
function __WebGLRenderingContext_bindAttribLocation(uid, program_uid, index, name) {};
function __WebGLRenderingContext_bindBuffer(uid, target, buffer_uid) {};
function __WebGLRenderingContext_bindFramebuffer(uid, target, framebuffer_uid) {};
function __WebGLRenderingContext_bindRenderbuffer(uid, target, renderbuffer_uid) {};
function __WebGLRenderingContext_bindTexture(uid, target, texture_uid) {};
function __WebGLRenderingContext_blendColor(uid, red, green, blue, alpha) {};
function __WebGLRenderingContext_blendEquation(uid, mode) {};
function __WebGLRenderingContext_blendEquationSeparate(uid, modeRGB, modeAlpha) {};
function __WebGLRenderingContext_blendFunc(uid, sfactor, dfactor) {};
function __WebGLRenderingContext_blendFuncSeparate(uid, srcRGB, dstRGB, srcAlpha, dstAlpha) {};
function __WebGLRenderingContext_bufferData() {};
function __WebGLRenderingContext_bufferSubData(uid, target, offset, data_buffer_uid, data_byteOffset, data_length) {};
function __WebGLRenderingContext_checkFramebufferStatus(uid, target):Integer {};
function __WebGLRenderingContext_clear(uid, mask) {};
function __WebGLRenderingContext_clearColor(uid, red, green, blue, alpha) {};
function __WebGLRenderingContext_clearDepth(uid, depth) {};
function __WebGLRenderingContext_clearStencil(uid, s) {};
function __WebGLRenderingContext_colorMask(uid, red, green, blue, alpha) {};
function __WebGLRenderingContext_compileShader(uid, shader_uid) {};
function __WebGLRenderingContext_compressedTexImage2D(uid, target, level, internalformat, width, height, border, data_buffer_uid, data_byteOffset, data_length) {};
function __WebGLRenderingContext_compressedTexSubImage2D(uid, target, level, xoffset, yoffset, width, height, format, data_buffer_uid, data_byteOffset, data_length) {};
function __WebGLRenderingContext_copyTexImage2D(uid, target, level, internalformat, x, y, width, height, border) {};
function __WebGLRenderingContext_copyTexSubImage2D(uid, target, level, xoffset, yoffset, x, y, width, height) {};
function __WebGLRenderingContext_createBuffer(uid):Integer {};
function __WebGLRenderingContext_createFramebuffer(uid):Integer {};
function __WebGLRenderingContext_createProgram(uid):Integer {};
function __WebGLRenderingContext_createRenderbuffer(uid):Integer {};
function __WebGLRenderingContext_createShader(uid, type):Integer {};
function __WebGLRenderingContext_createTexture(uid):Integer {};
function __WebGLRenderingContext_cullFace(uid, mode) {};
function __WebGLRenderingContext_deleteBuffer(uid, buffer_uid) {};
function __WebGLRenderingContext_deleteFramebuffer(uid, framebuffer_uid) {};
function __WebGLRenderingContext_deleteProgram(uid, program_uid) {};
function __WebGLRenderingContext_deleteRenderbuffer(uid, renderbuffer_uid) {};
function __WebGLRenderingContext_deleteShader(uid, shader_uid) {};
function __WebGLRenderingContext_deleteTexture(uid, texture_uid) {};
function __WebGLRenderingContext_depthFunc(uid, func) {};
function __WebGLRenderingContext_depthMask(uid, flag) {};
function __WebGLRenderingContext_depthRange(uid, zNear, zFar) {};
function __WebGLRenderingContext_detachShader(uid, program_uid, shader_uid) {};
function __WebGLRenderingContext_disable(uid, cap) {};
function __WebGLRenderingContext_disableVertexAttribArray(uid, index) {};
function __WebGLRenderingContext_drawArrays(uid, mode, first, count) {};
function __WebGLRenderingContext_drawElements(uid, mode, count, type, offset) {};
function __WebGLRenderingContext_enable(uid, cap) {};
function __WebGLRenderingContext_enableVertexAttribArray(uid, index) {};
function __WebGLRenderingContext_execute(uid, payload) {};
function __WebGLRenderingContext_finish(uid) {};
function __WebGLRenderingContext_flush(uid) {};
function __WebGLRenderingContext_framebufferRenderbuffer(uid, target, attachment, renderbuffertarget, renderbuffer_uid) {};
function __WebGLRenderingContext_framebufferTexture2D(uid, target, attachment, textarget, texture_uid, level) {};
function __WebGLRenderingContext_frontFace(uid, mode) {};
function __WebGLRenderingContext_generateMipmap(uid, target) {};
function __WebGLRenderingContext_getActiveAttrib(uid, program_uid, index):Integer {};
function __WebGLRenderingContext_getActiveUniform(uid, program_uid, index):Integer {};
function __WebGLRenderingContext_getAttachedShaders(uid, program_uid):Array<WebGLShader> {};
function __WebGLRenderingContext_getAttribLocation(uid, program_uid, name):Integer {};
function __WebGLRenderingContext_getBufferParameter(uid, target, pname):String {};
function __WebGLRenderingContext_getContextAttributes(uid):Integer {};
function __WebGLRenderingContext_getError(uid):Integer {};
function __WebGLRenderingContext_getExtension(uid, name):Object {};
function __WebGLRenderingContext_getFramebufferAttachmentParameter(uid, target, attachment, pname):String {};
function __WebGLRenderingContext_getParameter(uid, pname):String {};
function __WebGLRenderingContext_getProgramInfoLog(uid, program_uid):String {};
function __WebGLRenderingContext_getProgramParameter(uid, program_uid, pname):Boolean {};
function __WebGLRenderingContext_getRenderbufferParameter(uid, target, pname):String {};
function __WebGLRenderingContext_getShaderInfoLog(uid, shader_uid):String {};
function __WebGLRenderingContext_getShaderParameter(uid, shader_uid, pname):Boolean {};
function __WebGLRenderingContext_getShaderPrecisionFormat(uid, shadertype, precisiontype):Integer {};
function __WebGLRenderingContext_getShaderSource(uid, shader_uid):String {};
function __WebGLRenderingContext_getSupportedExtensions(uid):Array<String> {};
function __WebGLRenderingContext_getTexParameter(uid, target, pname):String {};
function __WebGLRenderingContext_getUniform(uid, program_uid, location_uid):String {};
function __WebGLRenderingContext_getUniformLocation(uid, program_uid, name):Integer {};
function __WebGLRenderingContext_getVertexAttrib(uid, index, pname):String {};
function __WebGLRenderingContext_getVertexAttribOffset(uid, index, pname):Integer {};
function __WebGLRenderingContext_hint(uid, target, mode) {};
function __WebGLRenderingContext_isBuffer(uid, buffer_uid):Boolean {};
function __WebGLRenderingContext_isContextLost(uid):Boolean {};
function __WebGLRenderingContext_isEnabled(uid, cap):Boolean {};
function __WebGLRenderingContext_isFramebuffer(uid, framebuffer_uid):Boolean {};
function __WebGLRenderingContext_isProgram(uid, program_uid):Boolean {};
function __WebGLRenderingContext_isRenderbuffer(uid, renderbuffer_uid):Boolean {};
function __WebGLRenderingContext_isShader(uid, shader_uid):Boolean {};
function __WebGLRenderingContext_isTexture(uid, texture_uid):Boolean {};
function __WebGLRenderingContext_lineWidth(uid, width) {};
function __WebGLRenderingContext_linkProgram(uid, program_uid) {};
function __WebGLRenderingContext_pixelStorei(uid, pname, param) {};
function __WebGLRenderingContext_polygonOffset(uid, factor, units) {};
function __WebGLRenderingContext_readPixels(uid, x, y, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length) {};
function __WebGLRenderingContext_renderbufferStorage(uid, target, internalformat, width, height) {};
function __WebGLRenderingContext_sampleCoverage(uid, value, invert) {};
function __WebGLRenderingContext_scissor(uid, x, y, width, height) {};
function __WebGLRenderingContext_shaderSource(uid, shader_uid, source) {};
function __WebGLRenderingContext_stencilFunc(uid, func, ref, mask) {};
function __WebGLRenderingContext_stencilFuncSeparate(uid, face, func, ref, mask) {};
function __WebGLRenderingContext_stencilMask(uid, mask) {};
function __WebGLRenderingContext_stencilMaskSeparate(uid, face, mask) {};
function __WebGLRenderingContext_stencilOp(uid, fail, zfail, zpass) {};
function __WebGLRenderingContext_stencilOpSeparate(uid, face, fail, zfail, zpass) {};
function __WebGLRenderingContext_texImage2D() {};
function __WebGLRenderingContext_texParameterf(uid, target, pname, param) {};
function __WebGLRenderingContext_texParameteri(uid, target, pname, param) {};
function __WebGLRenderingContext_texSubImage2D(uid, target, level, xoffset, yoffset, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length) {};
function __WebGLRenderingContext_uniform1f(uid, location_uid, x) {};
function __WebGLRenderingContext_uniform1fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform1i(uid, location_uid, x) {};
function __WebGLRenderingContext_uniform1iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform2f(uid, location_uid, x, y) {};
function __WebGLRenderingContext_uniform2fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform2i(uid, location_uid, x, y) {};
function __WebGLRenderingContext_uniform2iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform3f(uid, location_uid, x, y, z) {};
function __WebGLRenderingContext_uniform3fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform3i(uid, location_uid, x, y, z) {};
function __WebGLRenderingContext_uniform3iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform4f(uid, location_uid, x, y, z, w) {};
function __WebGLRenderingContext_uniform4fv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniform4i(uid, location_uid, x, y, z, w) {};
function __WebGLRenderingContext_uniform4iv(uid, location_uid, v_buffer_uid, v_byteOffset, v_length) {};
function __WebGLRenderingContext_uniformMatrix2fv(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_uniformMatrix3fv(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_uniformMatrix4fv(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_useProgram(uid, program_uid) {};
function __WebGLRenderingContext_validateProgram(uid, program_uid) {};
function __WebGLRenderingContext_vertexAttrib1f(uid, indx, x) {};
function __WebGLRenderingContext_vertexAttrib1fv(uid, indx, value_buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttrib2f(uid, indx, x, y) {};
function __WebGLRenderingContext_vertexAttrib2fv(uid, indx, value__buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttrib3f(uid, indx, x, y, z) {};
function __WebGLRenderingContext_vertexAttrib3fv(uid, indx, value__buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttrib4f(uid, indx, x, y, z, w) {};
function __WebGLRenderingContext_vertexAttrib4fv(uid, indx, value__buffer_uid, value_byteOffset, value_length) {};
function __WebGLRenderingContext_vertexAttribPointer(uid, indx, size, type, normalized, stride, offset) {};
function __WebGLRenderingContext_viewport(uid, x, y, width, height) {};
*/

var __registerManager = function(manager){};
var __registerCallback = function(uid, type){};
var __unRegisterCallback = function(uid, type){};
var __ImageData_loadImage = function(data){};

function __Audio_load(url:String,obj:Audio) :Integer {}
var __Audio_get_position:Float = function(id:Integer) {}
var __Audio_set_position = function(id:Integer,time:Time) {}
var __Audio_play = function(id:Integer){};
var __Audio_pause = function(id:Integer){};
var __Audio_stop = function(id:Integer){};

var __Canvas2DRenderingContext_flush = function(uid, length, width, height){};
var __WebGLRenderingContext_activeTexture = function(uid, texture){};
var __WebGLRenderingContext_attachShader = function(uid, program_uid, shader_uid){};
var __WebGLRenderingContext_bindAttribLocation = function(uid, program_uid, index, name){};
var __WebGLRenderingContext_bindBuffer = function(uid, target, buffer_uid){};
var __WebGLRenderingContext_bindFramebuffer = function(uid, target, framebuffer_uid){};
var __WebGLRenderingContext_bindRenderbuffer = function(uid, target, renderbuffer_uid){};
var __WebGLRenderingContext_bindTexture = function(uid, target, texture_uid){};
var __WebGLRenderingContext_blendColor = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_blendEquation = function(uid, mode){};
var __WebGLRenderingContext_blendEquationSeparate = function(uid, modeRGB, modeAlpha){};
var __WebGLRenderingContext_blendFunc = function(uid, sfactor, dfactor){};
var __WebGLRenderingContext_blendFuncSeparate = function(uid, srcRGB, dstRGB, srcAlpha, dstAlpha){};
var __WebGLRenderingContext_bufferData = function(){};
var __WebGLRenderingContext_bufferSubData = function(uid, target, offset, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_checkFramebufferStatus:Integer = function(uid, target){};
var __WebGLRenderingContext_clear = function(uid, mask){};
var __WebGLRenderingContext_clearColor = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_clearDepth = function(uid, depth){};
var __WebGLRenderingContext_clearStencil = function(uid, s){};
var __WebGLRenderingContext_colorMask = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_compileShader = function(uid, shader_uid){};
var __WebGLRenderingContext_compressedTexImage2D = function(uid, target, level, internalformat, width, height, border, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_compressedTexSubImage2D = function(uid, target, level, xoffset, yoffset, width, height, format, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_copyTexImage2D = function(uid, target, level, internalformat, x, y, width, height, border){};
var __WebGLRenderingContext_copyTexSubImage2D = function(uid, target, level, xoffset, yoffset, x, y, width, height){};
var __WebGLRenderingContext_createBuffer:Integer = function(uid){};
var __WebGLRenderingContext_createFramebuffer:Integer = function(uid){};
var __WebGLRenderingContext_createProgram:Integer = function(uid){};
var __WebGLRenderingContext_createRenderbuffer:Integer = function(uid){};
var __WebGLRenderingContext_createShader:Integer = function(uid, type){};
var __WebGLRenderingContext_createTexture:Integer = function(uid){};
var __WebGLRenderingContext_cullFace = function(uid, mode){};
var __WebGLRenderingContext_deleteBuffer = function(uid, buffer_uid){};
var __WebGLRenderingContext_deleteFramebuffer = function(uid, framebuffer_uid){};
var __WebGLRenderingContext_deleteProgram = function(uid, program_uid){};
var __WebGLRenderingContext_deleteRenderbuffer = function(uid, renderbuffer_uid){};
var __WebGLRenderingContext_deleteShader = function(uid, shader_uid){};
var __WebGLRenderingContext_deleteTexture = function(uid, texture_uid){};
var __WebGLRenderingContext_depthFunc = function(uid, func){};
var __WebGLRenderingContext_depthMask = function(uid, flag){};
var __WebGLRenderingContext_depthRange = function(uid, zNear, zFar){};
var __WebGLRenderingContext_detachShader = function(uid, program_uid, shader_uid){};
var __WebGLRenderingContext_disable = function(uid, cap){};
var __WebGLRenderingContext_disableVertexAttribArray = function(uid, index){};
var __WebGLRenderingContext_drawArrays = function(uid, mode, first, count){};
var __WebGLRenderingContext_drawElements = function(uid, mode, count, type, offset){};
var __WebGLRenderingContext_enable = function(uid, cap){};
var __WebGLRenderingContext_enableVertexAttribArray = function(uid, index){};
var __WebGLRenderingContext_execute = function(uid, payload){};
var __WebGLRenderingContext_finish = function(uid){};
var __WebGLRenderingContext_flush = function(uid){};
var __WebGLRenderingContext_framebufferRenderbuffer = function(uid, target, attachment, renderbuffertarget, renderbuffer_uid){};
var __WebGLRenderingContext_framebufferTexture2D = function(uid, target, attachment, textarget, texture_uid, level){};
var __WebGLRenderingContext_frontFace = function(uid, mode){};
var __WebGLRenderingContext_generateMipmap = function(uid, target){};
var __WebGLRenderingContext_getActiveAttrib:Integer = function(uid, program_uid, index){};
var __WebGLRenderingContext_getActiveUniform:Integer = function(uid, program_uid, index){};
var __WebGLRenderingContext_getAttachedShaders:Array<WebGLShader> = function(uid, program_uid){};
var __WebGLRenderingContext_getAttribLocation:Integer = function(uid, program_uid, name){};
var __WebGLRenderingContext_getBufferParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getContextAttributes:Integer = function(uid){};
var __WebGLRenderingContext_getError:Integer = function(uid){};
var __WebGLRenderingContext_getExtension:Object = function(uid, name){};
var __WebGLRenderingContext_getFramebufferAttachmentParameter:String = function(uid, target, attachment, pname){};
var __WebGLRenderingContext_getParameter:String = function(uid, pname){};
var __WebGLRenderingContext_getProgramInfoLog:String = function(uid, program_uid){};
var __WebGLRenderingContext_getProgramParameter:Boolean = function(uid, program_uid, pname){};
var __WebGLRenderingContext_getRenderbufferParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getShaderInfoLog:String = function(uid, shader_uid){};
var __WebGLRenderingContext_getShaderParameter:Boolean = function(uid, shader_uid, pname){};
var __WebGLRenderingContext_getShaderPrecisionFormat:Integer = function(uid, shadertype, precisiontype){};
var __WebGLRenderingContext_getShaderSource:String = function(uid, shader_uid){};
var __WebGLRenderingContext_getSupportedExtensions:Array<String> = function(uid){};
var __WebGLRenderingContext_getTexParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getUniform:String = function(uid, program_uid, location_uid){};
var __WebGLRenderingContext_getUniformLocation:Integer = function(uid, program_uid, name){};
var __WebGLRenderingContext_getVertexAttrib:String = function(uid, index, pname){};
var __WebGLRenderingContext_getVertexAttribOffset:Integer = function(uid, index, pname){};
var __WebGLRenderingContext_hint = function(uid, target, mode){};
var __WebGLRenderingContext_isBuffer:Boolean = function(uid, buffer_uid){};
var __WebGLRenderingContext_isContextLost:Boolean = function(uid){};
var __WebGLRenderingContext_isEnabled:Boolean = function(uid, cap){};
var __WebGLRenderingContext_isFramebuffer:Boolean = function(uid, framebuffer_uid){};
var __WebGLRenderingContext_isProgram:Boolean = function(uid, program_uid){};
var __WebGLRenderingContext_isRenderbuffer:Boolean = function(uid, renderbuffer_uid){};
var __WebGLRenderingContext_isShader:Boolean = function(uid, shader_uid){};
var __WebGLRenderingContext_isTexture:Boolean = function(uid, texture_uid){};
var __WebGLRenderingContext_lineWidth = function(uid, width){};
var __WebGLRenderingContext_linkProgram = function(uid, program_uid){};
var __WebGLRenderingContext_pixelStorei = function(uid, pname, param){};
var __WebGLRenderingContext_polygonOffset = function(uid, factor, units){};
var __WebGLRenderingContext_readPixels = function(uid, x, y, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length){};
var __WebGLRenderingContext_renderbufferStorage = function(uid, target, internalformat, width, height){};
var __WebGLRenderingContext_sampleCoverage = function(uid, value, invert){};
var __WebGLRenderingContext_scissor = function(uid, x, y, width, height){};
var __WebGLRenderingContext_shaderSource = function(uid, shader_uid, source){};
var __WebGLRenderingContext_stencilFunc = function(uid, func, ref, mask){};
var __WebGLRenderingContext_stencilFuncSeparate = function(uid, face, func, ref, mask){};
var __WebGLRenderingContext_stencilMask = function(uid, mask){};
var __WebGLRenderingContext_stencilMaskSeparate = function(uid, face, mask){};
var __WebGLRenderingContext_stencilOp = function(uid, fail, zfail, zpass){};
var __WebGLRenderingContext_stencilOpSeparate = function(uid, face, fail, zfail, zpass){};
var __WebGLRenderingContext_texImage2D = function(){};
var __WebGLRenderingContext_texParameterf = function(uid, target, pname, param){};
var __WebGLRenderingContext_texParameteri = function(uid, target, pname, param){};
var __WebGLRenderingContext_texSubImage2D = function(uid, target, level, xoffset, yoffset, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length){};
var __WebGLRenderingContext_uniform1f = function(uid, location_uid, x){};
var __WebGLRenderingContext_uniform1fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform1i = function(uid, location_uid, x){};
var __WebGLRenderingContext_uniform1iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform2f = function(uid, location_uid, x, y){};
var __WebGLRenderingContext_uniform2fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform2i = function(uid, location_uid, x, y){};
var __WebGLRenderingContext_uniform2iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform3f = function(uid, location_uid, x, y, z){};
var __WebGLRenderingContext_uniform3fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform3i = function(uid, location_uid, x, y, z){};
var __WebGLRenderingContext_uniform3iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform4f = function(uid, location_uid, x, y, z, w){};
var __WebGLRenderingContext_uniform4fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform4i = function(uid, location_uid, x, y, z, w){};
var __WebGLRenderingContext_uniform4iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniformMatrix2fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_uniformMatrix3fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_uniformMatrix4fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_useProgram = function(uid, program_uid){};
var __WebGLRenderingContext_validateProgram = function(uid, program_uid){};
var __WebGLRenderingContext_vertexAttrib1f = function(uid, indx, x){};
var __WebGLRenderingContext_vertexAttrib1fv = function(uid, indx, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib2f = function(uid, indx, x, y){};
var __WebGLRenderingContext_vertexAttrib2fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib3f = function(uid, indx, x, y, z){};
var __WebGLRenderingContext_vertexAttrib3fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib4f = function(uid, indx, x, y, z, w){};
var __WebGLRenderingContext_vertexAttrib4fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttribPointer = function(uid, indx, size, type, normalized, stride, offset){};
var __WebGLRenderingContext_viewport = function(uid, x, y, width, height){};

// ==================================================================================================================================
//	    ______________  ______           __                  _____           _       __     ____  __      _           __
//	   / ____/ ____/  |/  /   |         / /___ __   ______ _/ ___/__________(_)___  / /_   / __ \/ /_    (_)__  _____/ /______
//	  / __/ / /   / /|_/ / /| |    __  / / __ `/ | / / __ `/\__ \/ ___/ ___/ / __ \/ __/  / / / / __ \  / / _ \/ ___/ __/ ___/
//	 / /___/ /___/ /  / / ___ |   / /_/ / /_/ /| |/ / /_/ /___/ / /__/ /  / / /_/ / /_   / /_/ / /_/ / / /  __/ /__/ /_(__  )
//	/_____/\____/_/  /_/_/  |_|   \____/\__,_/ |___/\__,_//____/\___/_/  /_/ .___/\__/   \____/_.___/_/ /\___/\___/\__/____/
//	                                                                      /_/                      /___/
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
class Null {}
class Untyped {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Object
{
	public var prototype:Object;
	public function Destructor() {}
	public function toString():String {}
	public function toLocaleString():String {}
	public function valueOf():Object {}
	public function hasOwnProperty(name:String):Boolean {}
	public function isPrototypeOf(o:Object):Boolean {}
	public function propertyIsEnumerable(name:String):Boolean {}
	public function defineProperty(object:Object, name:String, params:Object){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Array
{
	public var length:Number;
	public function clone():Array {}
	public function concat(args:Array):Array {}
	public function join(seperator:String):String {}
	public function pop():Object {}
	public function push(args:Object):Object {}
	public function reverse():Array {}
	public function shift():Array {}
	public function slice(start:Number, optional end:Number):Array {}
	public function sort(funct:Function):Array {}
	public function splice(start:Number, deletecount:Number, optional items:Object):Object {}
	public function unshift(start:Number):Array {}
	public function forEach(item:Object):Array {}
	public function size():Number {}
	public function clear() {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Function
{
	public var length:Number;
	public function apply(thisObject:Object, optional args:Array):Object {}
	public function call(thisObject:Object, ...):Object {}
}

callback CocoAction() {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Global
{
	public var NaN:Number;
	public var Infinity:Number;
	public var innerWidth:Float;
	public var innerHeight:Float;
	public var deviceRotation:Float;
	public var devicePixelRatio:Float;
	public var __native:Boolean;
	public function Destructor() {}
	public function eval(s:String):Object {}
	public function parseInt(s:String, optional radix:Number):Integer {}
	public function parseFloat(s:String):Float {}
	public function escape(s:String):String {}
	public function unescape(s:String):String {}
	public function isNaN(number:Object):Boolean {}
	public function isFinite(number:Object):Boolean {}
	public function decodeURI(encodedURI:String):String {}
	public function decodeURIComponent(uriComponent:String):String {}
	public function encodeURIComponent(uriComponent:String):String {}
	public function encodeURI(URI:String):String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class String
{
	public var length:Number;
	public static function fromCharCode(charCode:Number):String {}
	public function charAt(position:Number):String {}
	public function charCodeAt(position:Number):Number {}
	public function concat(value:String):String {}
	public function indexOf(searchString:String, optional startPosition:Number):Number {}
	public function lastIndexOf(searchString:String, startPosition:Number):Number {}
	public function localeCompare(otherString:String):Number {}
	public function match(regexp:RegExp):Array {}
	public function replace(regexp:RegExp, replaceValue:String):String {}
	public function search(regexp:RegExp):Number {}
	public function slice(start:Number, end:Number):String {}
	public function split(separator:String, optional limit:Number):Array<String> {}
	public function substring(start:Number, optional end:Number):String {}
	public function substr(start:Number, optional size:Number):String {}
	public function toLowerCase():String {}
	public function toLocaleLowerCase():String {}
	public function toUpperCase():String {}
	public function toLocaleUpperCase():String {}
	public function size():Integer {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Number
{
	public var MIN_VALUE:Number;
	public var MAX_VALUE:Number;
	public var NEGATIVE_INFINITY:Number;
	public var POSITIVE_INFINITY:Number;
	public function toFixed(fractionDigits:Number):String {}
	public function toExponential(fractionDigits:Number):String {}
	public function toPrecision(fractionDigits:Number):String {}
}

class Integer : Number 	{}
class Float : Number 	{}
class Time : Number		{}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Boolean
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Date
{
	public function UTC(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function parse(string:String):Number {}
	public function toDateString():String {}
	public function toTimeString():String {}
	public function toLocaleString():String {}
	public function toLocaleDateString():String {}
	public function toLocaleTimeString():String {}
	public function valueOf():Object {}
	public function getFullYear():Number {}
	public function getTime():Number {}
	public function getUTCFullYear():Number {}
	public function getMonth():Number {}
	public function getUTCMonth():Number {}
	public function getDate():Number {}
	public function getUTCDate():Number {}
	public function getDay():Number {}
	public function getUTCDay():Number {}
	public function getHours():Number {}
	public function getUTCHours():Number {}
	public function getMinutes():Number {}
	public function getUTCMinutes():Number {}
	public function getSeconds():Number {}
	public function getUTCSeconds():Number {}
	public function getMilliseconds():Number {}
	public function getUTCMilliseconds():Number {}
	public function getTimezoneOffset():Number {}
	public function setTime(value:Number):Number {}
	public function setMilliseconds(value:Number):Number {}
	public function setUTCMilliseconds(ms:Number):Number {}
	public function setSeconds(sec:Number, ms:Number):Number {}
	public function setUTCSeconds(sec:Number, ms:Number):Number {}
	public function setMinutes(min:Number, sec:Number, ms:Number):Number {}
	public function setUTCMinute(min:Number, sec:Number, ms:Number):Number {}
	public function setHours(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function setDate(date:Number):Number {}
	public function setUTCDate(date:Number):Number {}
	public function setMonth(month:Number, date:Number):Number {}
	public function setUTCMonth(month:Number, date:Number):Number {}
	public function setFullYear(year:Number, month:Number, date:Number):Number {}
	public function setUTCFullYear(year:Number, month:Number, date:Number){};
	public function toUTCString():String {}
	public function toJSON():String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Math
{
	public static var E:Float;
	public static var LN10:Float;
	public static var LN2:Float;
	public static var LOG2E:Float;
	public static var LOG10E:Float;
	public static var PI:Float;
	public static var SQRT1_2:Float;
	public static var SQRT2:Float;
	public static function abs(x:Number):Number {}
	public static function acos(x:Number):Float {}
	public static function asin(x:Number):Float {}
	public static function atan(x:Number):Float {}
	public static function atan2(x:Number, y:Number):Float {}
	public static function ceil(x:Number):Number {}
	public static function cos(x:Number):Float {}
	public static function exp(x:Number):Float {}
	public static function floor(x:Number):Integer {}
	public static function log(x:Number):Float {}
	public static function max(a:Number, b:Number):Number {}
	public static function min(a:Number, b:Number):Number {}
	public static function pow(x:Number, y:Number):Float {}
	public static function random():Float {}
	public static function round(x:Number):Number {}
	public static function sin(x:Number):Float {}
	public static function sqrt(x:Number):Float {}
	public static function tan(x:Number):Float {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class RegExp
{
	public var source:String;
	public var global:Boolean;
	public var ignoreCase:Boolean;
	public var multiline:Boolean;
	public var lastIndex:Number;
	public function exec(string:String):Array {}
	public function test(string:String):Boolean {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBuffer
{
	public var byteLength:Number;
    public function slice(begin:Number, end:Number): ArrayBuffer {}
    public function encodeAsPNG(width:Number, height:Number):ArrayBuffer {}
    public function encodeAsBase64():String {}
    public var __uid:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBufferView
{
	public var buffer:ArrayBuffer;
	public var byteOffset:Integer;
	public var byteLength:Integer;
	public var __uid:Integer;
	public function Destructor() {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class TypedArray : ArrayBufferView
{
	public var length:Integer;
	public var BYTES_PER_ELEMENT:Integer;
	public function set(array:TypedArray, optional offset:Integer) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Float32Array : TypedArray
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Int32Array : TypedArray
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Uint8Array : TypedArray
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Error
{
	public var name:String;
	public var message:String
}

class EvalError :Error {}
class RangeError :Error {}
class ReferenceError :Error {}
class SyntaxError :Error {}
class TypeError :Error {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ImageDataBuffer
{
	public var buffer:ArrayBuffer;
	public var width:Float;
	public var height:Float;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class DataView : ArrayBufferView
{
	public function Constructor(buffer:ArrayBuffer, optional byteOffset:Integer, optional byteLength:Integer)
	{
	}

    public function getInt8(byteOffset:Integer):Integer {}
    public function getUint8(byteOffset:Integer):Integer {}
    public function getInt16(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getUint16(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getInt32(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getUint32(byteOffset:Integer, optional littleEndian:Boolean):Integer {}
    public function getFloat32(byteOffset:Integer, optional littleEndian:Boolean):Float {}
    public function getFloat64(byteOffset:Integer, optional littleEndian:Boolean):Float {}

    public function setInt8(byteOffset:Integer, value:Integer) {}
    public function setUint8(byteOffset:Integer, value:Integer) {}
    public function setInt16(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setUint16(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setInt32(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setUint32(byteOffset:Integer, value:Integer, optional littleEndian:Boolean) {}
    public function setFloat32(byteOffset:Integer, value:Float, optional littleEndian:Boolean) {}
    public function setFloat64(byteOffset:Integer, value:Float, optional littleEndian:Boolean) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class XMLHttpRequest
{
	public const UNSENT:Integer = 0;
	public const OPENED:Integer = 1;
	public const HEADERS_RECEIVED:Integer = 2;
	public const LOADING:Integer = 3;
	public const DONE:Integer = 4;

	// request
	public var timeout:Integer;
	public var readyState:Integer;
	public function open(method:String, url:String, optional async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send() {}
	public function send(data:String) {}
	public function send(data:ArrayBufferView) {}
	public function abort() {}

	// response
	public var status:Integer;
	public var statusText:String;
	public var responseText:String;
	public var responseType:Integer;//XMLHttpRequestResponseType;
	public function getAllResponseHeaders():String {}
	public function getResponseHeader(header:String):String {}
}

// ==================================================================================================================================
//	   ______                             __     _   __      __  _
//	  / ____/___  _________  ____  __  __/ /_   / | / /___ _/ /_(_)   _____
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/  /  |/ / __ `/ __/ / | / / _ \
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_   / /|  / /_/ / /_/ /| |/ /  __/
//	\____/\____/\___/\____/_/ /_/\__,_/\__/  /_/ |_/\__,_/\__/_/ |___/\___/
//
// ==================================================================================================================================

class CocoFont
{
	public var height:Float;
	public function Constructor(FontName:String, FontSize:Float, Bold:Boolean, Italic:Boolean){}
	public function fillText(imageDataBuffer:ArrayBuffer, width:Float, text:String, x:Float, y:Float, R:Float, G:Float, B:Float, A:Float){}
	public function measureText(text:String):Float {}
}

// ==================================================================================================================================
//	   __  __                  ____      __            ____
//	  / / / /_______  _____   /  _/___  / /____  _____/ __/___ _________
//	 / / / / ___/ _ \/ ___/   / // __ \/ __/ _ \/ ___/ /_/ __ `/ ___/ _ \
//	/ /_/ (__  )  __/ /     _/ // / / / /_/  __/ /  / __/ /_/ / /__/  __/
//	\____/____/\___/_/     /___/_/ /_/\__/\___/_/  /_/  \__,_/\___/\___/
//
// ==================================================================================================================================

class Color : Number {}
class Gradient: String {}

// ==================================================================================================================================
//	   ________      __          __   _    __           _       __    __
//	  / ____/ /___  / /_  ____ _/ /  | |  / /___ ______(_)___ _/ /_  / /__  _____
//	 / / __/ / __ \/ __ \/ __ `/ /   | | / / __ `/ ___/ / __ `/ __ \/ / _ \/ ___/
//	/ /_/ / / /_/ / /_/ / /_/ / /    | |/ / /_/ / /  / / /_/ / /_/ / /  __(__  )
//	\____/_/\____/_.___/\__,_/_/     |___/\__,_/_/  /_/\__,_/_.___/_/\___/____/
//
// ==================================================================================================================================

var global:Global;
var engine:CocoEngine;
var window:HTMLWindow;
var document:HTMLDocument;
var graphics:CocoGraphics;

//#ifndef EMS_BOX2D
enum b2ManifoldType
{
	e_circles 			= 0,
	e_faceA   			= 1,
	e_faceB   			= 2
};

enum b2BodyType
{
	b2_staticBody 		= 0,
	b2_kinematicBody 	= 1,
	b2_dynamicBody 		= 2
};


enum b2JointType
{
	e_unknownJoint		= 0,
	e_revoluteJoint     = 1,
	e_prismaticJoint    = 2,
	e_distanceJoint     = 3,
	e_pulleyJoint       = 4,
	e_mouseJoint        = 5,
	e_gearJoint         = 6,
	e_wheelJoint        = 7,
    e_weldJoint         = 8,
	e_frictionJoint     = 9,
	e_ropeJoint         = 10
};
//#endif

struct b2Manifold
{
	points: Array<b2ManifoldPoint>;
	localNormal:b2Vec2;
	localPoint:b2Vec2;
	type:b2ManifoldType;
	pointCount:Integer;
};

struct b2MassData
{
	mass:Float;
	center:b2Vec2;
	I:Float;
};

struct b2RayCastInput
{
	p1:b2Vec2;
	p2:b2Vec2;
	maxFraction:Float;
};

struct b2RayCastOutput
{
	normal:b2Vec2;
	fraction:Float;
};

struct b2ContactImpulse
{
	normalImpulses:Array<Float>;
	tangentImpulses:Array<Float>;
	count:Integer;
};

class b2WorldManifold
{
	public var normal:b2Vec2;
	public var points:Array<b2Vec2>;
	public function Initialize(manifold:b2Manifold, xfA:b2Transform, radiusA:Float, xfB:b2Transform, radiusB:Float) {}
};

class b2ContactFilter
{
	public virtual function ShouldCollide(fixtureA:b2Fixture, fixtureB:b2Fixture) :Boolean {}
};

var createPolygonShape:b2PolygonShape = function(vertices:Array<b2Vec2>) {};

// BEGIN EMSCRIPTEN EXTERNS FOR EMS_BOX2D //

// ==================================================================================================================================
//	    ____            ___   ____     ____  __               _              ______            _
//	   / __ )____  _  _|__ \ / __ \   / __ \/ /_  __  _______(_)_________   / ____/___  ____ _(_)___  ___
//	  / __  / __ \| |/_/_/ // / / /  / /_/ / __ \/ / / / ___/ / ___/ ___/  / __/ / __ \/ __ `/ / __ \/ _ \
//	 / /_/ / /_/ />  </ __// /_/ /  / ____/ / / / /_/ (__  ) / /__(__  )  / /___/ / / / /_/ / / / / /  __/
//	/_____/\____/_/|_/____/_____/  /_/   /_/ /_/\__, /____/_/\___/____/  /_____/_/ /_/\__, /_/_/ /_/\___/
//	                                           /____/                                /____/
// ==================================================================================================================================

emscripten class b2ContactManager
{
	public function get_m_contactFilter() : b2ContactFilter {}
	public function get_m_contactCount() : Integer {}
	public function set_m_contactFilter(arg0:b2ContactFilter) {}
	public function Constructor() {}
	public function AddPair(arg0:Object, arg1:Object) {}
	public function set_m_allocator(arg0:b2BlockAllocator) {}
	public function set_m_contactCount(arg0:Integer) {}
	public function Collide() {}
	public function set_m_contactList(arg0:b2Contact) {}
	public function FindNewContacts() {}
	public function get_m_contactListener() : b2ContactListener {}
	public function Destructor() {}
	public function set_m_contactListener(arg0:b2ContactListener) {}
	public function get_m_broadPhase() : b2BroadPhase {}
	public function Destroy(arg0:b2Contact) {}
	public function set_m_broadPhase(arg0:b2BroadPhase) {}
	public function get_m_contactList() : b2Contact {}
	public function get_m_allocator() : b2BlockAllocator {}
}

emscripten class b2DistanceJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() : Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetFrequency() : Float {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetLength() : Float {}
	public function GetDampingRatio() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function Destructor() {}
	public function Dump() {}
	public function GetType() : Integer {}
	public function Constructor() {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function SetLength(arg0:Float) {}
	public function IsActive() : Boolean {}
}

emscripten class b2Fixture
{
	public function GetRestitution() : Float {}
	public function SetFilterData(arg0:b2Filter) {}
	public function SetFriction(arg0:Float) {}
	public function Constructor() {}
	public function GetShape() : b2Shape {}
	public function SetRestitution(arg0:Float) {}
	public function GetBody() : b2Body {}
	public function GetNext() : b2Fixture {}
	public function GetFriction() : Float {}
	public function GetUserData() : Object {}
	public function SetDensity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function SetSensor(arg0:Boolean) {}
	public function GetAABB(arg0:Integer) : b2AABB {}
	public function TestPoint(arg0:b2Vec2) : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function Destructor() {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:Integer) : Boolean {}
	public function Refilter() {}
	public function Dump(arg0:Integer) {}
	public function GetFilterData() : b2Filter {}
	public function IsSensor() : Boolean {}
	public function GetType() : Integer {}
	public function GetDensity() : Float {}
}

emscripten class b2MouseJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() : Object {}
	public function SetMaxForce(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function Constructor() {}
	public function GetNext() : b2Joint {}
	public function GetMaxForce() : Float {}
	public function GetTarget() : b2Vec2 {}
	public function GetFrequency() : Float {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetDampingRatio() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function Destructor() {}
	public function Dump() {}
	public function SetTarget(arg0:b2Vec2) {}
	public function GetType() : Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function IsActive() : Boolean {}
}

emscripten class b2PulleyJoint
{
	public function GetBodyA() : b2Body {}
	public function Destructor() {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetType() : Integer {}
	public function GetGroundAnchorB() : b2Vec2 {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function Dump() {}
	public function GetGroundAnchorA() : b2Vec2 {}
	public function GetLengthB() : Float {}
	public function GetUserData() : Object {}
	public function GetLengthA() : Float {}
	public function GetBodyB() : b2Body {}
	public function GetCollideConnected() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function Constructor() {}
	public function IsActive() : Boolean {}
	public function GetRatio() : Float {}
}

emscripten class b2BroadPhase
{
	public function GetTreeQuality() : Float {}
	public function GetFatAABB(arg0:Integer) : b2AABB {}
	public function GetUserData(arg0:Integer) : Object {}
	public function Destructor() {}
	public function GetTreeHeight() : Integer {}
	public function Constructor() {}
	public function GetProxyCount() : Integer {}
	public function GetTreeBalance() : Integer {}
	public function TestOverlap(arg0:Integer, arg1:Integer) : Boolean {}
	public function TouchProxy(arg0:Integer) {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) : Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) {}
	public function DestroyProxy(arg0:Integer) {}
}

emscripten class b2World
{
	public function QueryAABB(arg0:b2QueryCallback, arg1:b2AABB) {}
	public function SetSubStepping(arg0:Boolean) {}
	public function GetTreeQuality() : Float {}
	public function GetTreeHeight() : Integer {}
	public function GetProfile() : b2Profile {}
	public function GetTreeBalance() : Integer {}
	public function GetSubStepping() : Boolean {}
	public function GetContactManager() : b2ContactManager {}
	public function SetContactListener(arg0:b2ContactListener) {}
	public function DrawDebugData() {}
	public function SetContinuousPhysics(arg0:Boolean) {}
	public function SetGravity(arg0:b2Vec2) {}
	public function GetBodyCount() : Integer {}
	public function GetAutoClearForces() : Boolean {}
	public function GetContinuousPhysics() : Boolean {}
	public function GetJointList() : b2Joint {}
	public function CreateBody(arg0:b2BodyDef) : b2Body {}
	public function GetBodyList() : b2Body {}
	public function SetDestructionListener(arg0:b2DestructionListener) {}
	public function DestroyJoint(arg0:b2Joint) {}
	public function Constructor(v:b2Vec2) {}
	public function GetJointCount() : Integer {}
	public function Step(arg0:Float, arg1:Integer, arg2:Integer) {}
	public function ClearForces() {}
	public function GetWarmStarting() : Boolean {}
	public function SetAllowSleeping(arg0:Boolean) {}
	public function DestroyBody(arg0:b2Body) {}
	public function GetAllowSleeping() : Boolean {}
	public function CreateJoint(arg0:b2JointDef) : b2Joint {}
	public function GetProxyCount() : Integer {}
	public function RayCast(arg0:b2RayCastCallback, arg1:b2Vec2, arg2:b2Vec2) {}
	public function IsLocked() : Boolean {}
	public function GetContactList() : b2Contact {}
	public function SetDebugDraw(arg0:b2Draw) {}
	public function Destructor() {}
	public function Dump() {}
	public function SetAutoClearForces(arg0:Boolean) {}
	public function GetGravity() : b2Vec2 {}
	public function GetContactCount() : Integer {}
	public function SetWarmStarting(arg0:Boolean) {}
	public function SetContactFilter(arg0:b2ContactFilter) {}
}

emscripten class b2PrismaticJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetUserData() : Object {}
	public function GetLocalAxisA() : b2Vec2 {}
	public function GetLowerLimit() : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function Constructor() {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetMotorSpeed() : Float {}
	public function SetMaxMotorForce(arg0:Float) {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetMaxMotorForce() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function GetJointSpeed() : Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Destructor() {}
	public function GetReferenceAngle() : Float {}
	public function Dump() {}
	public function GetMotorForce(arg0:Float) : Float {}
	public function GetJointTranslation() : Float {}
	public function GetType() : Integer {}
	public function IsLimitEnabled() : Boolean {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetUpperLimit() : Float {}
	public function IsActive() : Boolean {}
	public function GetAnchorB() : b2Vec2 {}
}

emscripten class b2CircleShape
{
	public function Destructor() {}
	public function GetType() : Integer {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function GetVertex(arg0:Integer) : b2Vec2 {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetSupportVertex(arg0:b2Vec2) : b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetVertexCount() : Integer {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function Constructor() {}
	public function GetSupport(arg0:b2Vec2) : Integer {}
	public function set_m_p(arg0:b2Vec2) {}
	public function get_m_p() : b2Vec2 {}
}

emscripten class b2WheelJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetUserData() : Object {}
	public function GetDefinition(arg0:b2WheelJointDef) {}
	public function GetLocalAxisA() : b2Vec2 {}
	public function SetSpringDampingRatio(arg0:Float) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function GetSpringFrequencyHz() : Float {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetMotorSpeed() : Float {}
	public function GetMotorTorque(arg0:Float) : Float {}
	public function Constructor() {}
	public function IsMotorEnabled() : Boolean {}
	public function GetJointTranslation() : Float {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetSpringDampingRatio() : Float {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() : Boolean {}
	public function GetJointSpeed() : Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Destructor() {}
	public function Dump() {}
	public function GetMaxMotorTorque() : Float {}
	public function GetType() : Integer {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function SetSpringFrequencyHz(arg0:Float) {}
	public function IsActive() : Boolean {}
}

emscripten class b2Draw
{
	public function Destructor() {}
	public function AppendFlags(arg0:Integer) {}
	public function DrawTransform(arg0:b2Transform) {}
	public function ClearFlags(arg0:Integer) {}
	public function DrawPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawSolidCircle(arg0:b2Vec2, arg1:Float, arg2:b2Vec2, arg3:b2Color) {}
	public function DrawSolidPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawCircle(arg0:b2Vec2, arg1:Float, arg2:b2Color) {}
	public function SetFlags(arg0:Integer) {}
	public function DrawSegment(arg0:b2Vec2, arg1:b2Vec2, arg2:b2Color) {}
	public function Constructor() {}
	public function GetFlags() : Integer {}
}

emscripten class b2Joint
{
	public function GetNext() : b2Joint {}
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetUserData() : Object {}
	public function GetType() : Integer {}
	public function SetUserData(arg0:Object) {}
	public function GetCollideConnected() : Boolean {}
	public function Dump() {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function IsActive() : Boolean {}
}

emscripten class b2GearJoint
{
	public function GetJoint1() : b2Joint {}
	public function Constructor() {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetJoint2() : b2Joint {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function Dump() {}
	public function Destructor() {}
	public function SetRatio(arg0:Float) {}
	public function GetType() : Integer {}
	public function GetUserData() : Object {}
	public function GetBodyB() : b2Body {}
	public function GetCollideConnected() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetBodyA() : b2Body {}
	public function GetNext() : b2Joint {}
	public function IsActive() : Boolean {}
	public function GetRatio() : Float {}
}

emscripten class b2RayCastCallback
{
	public function ReportFixture(arg0:b2Fixture, arg1:b2Vec2, arg2:b2Vec2, arg3:Float) : Float {}
	public function Constructor() {}
	public function Destructor() {}
}

emscripten class b2DynamicTree
{
	public function Destructor() {}
	public function Constructor() {}
	public function GetFatAABB(arg0:Integer) : b2AABB {}
	public function GetUserData(arg0:Integer) : Object {}
	public function GetMaxBalance() : Integer {}
	public function GetHeight() : Integer {}
	public function GetAreaRatio() : Float {}
	public function RebuildBottomUp() {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) : Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) : Boolean {}
	public function Validate() {}
	public function DestroyProxy(arg0:Integer) {}
}

emscripten class b2WeldJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() : Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetFrequency() : Float {}
	public function Constructor() {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetDampingRatio() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function Destructor() {}
	public function GetReferenceAngle() : Float {}
	public function Dump() {}
	public function GetType() : Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function IsActive() : Boolean {}
}

emscripten class b2RevoluteJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetUserData() : Object {}
	public function GetLowerLimit() : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function Constructor() {}
	public function GetNext() : b2Joint {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetJointAngle() : Float {}
	public function GetMotorSpeed() : Float {}
	public function GetMotorTorque(arg0:Float) : Float {}
	public function IsLimitEnabled() : Boolean {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() : Boolean {}
	public function GetJointSpeed() : Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Destructor() {}
	public function GetReferenceAngle() : Float {}
	public function Dump() {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetMaxMotorTorque() : Float {}
	public function GetType() : Integer {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function GetUpperLimit() : Float {}
	public function IsActive() : Boolean {}
	public function GetAnchorB() : b2Vec2 {}
}

emscripten class b2Timer
{
	public function Constructor() {}
	public function Reset() {}
	public function Destructor() {}
	public function GetMilliseconds() : Float {}
}

emscripten class b2ContactListener
{
	public function Destructor() {}
	public function Constructor() {}
	public function EndContact(arg0:b2Contact) {}
	public function BeginContact(arg0:b2Contact) {}
	public function PreSolve(arg0:b2Contact, arg1:b2Manifold) {}
	public function PostSolve(arg0:b2Contact, arg1:b2ContactImpulse) {}
}

emscripten class b2ChainShape
{
	public function Destructor() {}
	public function GetType() : Integer {}
	public function CreateChain(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function get_m_vertices() : b2Vec2 {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function get_m_count() : Integer {}
	public function GetChildEdge(arg0:b2EdgeShape, arg1:Integer) {}
	public function Constructor() {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function SetPrevVertex(arg0:b2Vec2) {}
	public function CreateLoop(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function SetNextVertex(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
}

emscripten class b2QueryCallback
{
	public function ReportFixture(arg0:b2Fixture) : Boolean {}
	public function Destructor() {}
	public function Constructor() {}
}

emscripten class b2BlockAllocator
{
	public function Destructor() {}
	public function Clear() {}
	public function Free(arg0:Object, arg1:Integer) {}
	public function Allocate(arg0:Integer) : Object {}
	public function Constructor() {}
}

emscripten class b2RopeJoint
{
	public function GetNext() : b2Joint {}
	public function Destructor() {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function GetMaxLength() : Float {}
	public function GetBodyA() : b2Body {}
	public function GetCollideConnected() : Boolean {}
	public function GetUserData() : Object {}
	public function GetType() : Integer {}
	public function GetBodyB() : b2Body {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function Dump() {}
	public function SetMaxLength(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function Constructor() {}
	public function GetLimitState() : Integer {}
	public function IsActive() : Boolean {}
}

emscripten class b2PolygonShape : b2Shape
{
	public function Destructor() {}
	public function Set(arg0:b2Vec2, arg1:Integer) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetVertex(arg0:Integer) : b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function SetAsBox(arg0:Float, arg1:Float) {}
	public function SetAsBox(arg0:Float, arg1:Float, arg2:b2Vec2, arg3:Float) {}
	public function set_m_centroid(arg0:b2Vec2) {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function set_m_vertexCount(arg0:Integer) {}
	public function GetVertexCount() : Integer {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function GetType() : Integer {}
	public function Constructor() {}
	public function get_m_vertexCount() : Integer {}
	public function get_m_centroid() : b2Vec2 {}
}

emscripten class b2EdgeShape
{
	public function Destructor() {}
	public function Set(arg0:b2Vec2, arg1:b2Vec2) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetType() : Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function Constructor() {}
}

emscripten class b2Contact
{
	public function GetNext() : b2Contact {}
	public function SetEnabled(arg0:Boolean) {}
	public function GetWorldManifold(arg0:b2WorldManifold) {}
	public function GetRestitution() : Float {}
	public function ResetFriction() {}
	public function GetFriction() : Float {}
	public function IsTouching() : Boolean {}
	public function IsEnabled() : Boolean {}
	public function GetFixtureB() : b2Fixture {}
	public function SetFriction(arg0:Float) {}
	public function GetFixtureA() : b2Fixture {}
	public function GetChildIndexA() : Integer {}
	public function GetChildIndexB() : Integer {}
	public function Evaluate(arg0:b2Manifold, arg1:b2Transform, arg2:b2Transform) {}
	public function SetRestitution(arg0:Float) {}
	public function GetManifold() : b2Manifold {}
	public function ResetRestitution() {}
}

emscripten class b2Shape
{
	public function get_m_radius() : Float {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetType() : Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
}

emscripten class b2Body
{
	public function GetAngle() : Float {}
	public function GetUserData() : Object {}
	public function IsSleepingAllowed() : Boolean {}
	public function SetAngularDamping(arg0:Float) {}
	public function SetActive(arg0:Boolean) {}
	public function SetGravityScale(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAngularVelocity() : Float {}
	public function GetFixtureList() : b2Fixture {}
	public function ApplyForce(arg0:b2Vec2, arg1:b2Vec2) {}
	public function GetLocalPoint(arg0:b2Vec2) : b2Vec2 {}
	public function SetLinearVelocity(arg0:b2Vec2) {}
	public function GetJointList() : b2JointEdge {}
	public function GetLinearVelocity() : b2Vec2 {}
	public function GetNext() : b2Body {}
	public function SetSleepingAllowed(arg0:Boolean) {}
	public function SetTransform(arg0:b2Vec2, arg1:Float) {}
	public function GetMass() : Float {}
	public function SetAngularVelocity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function GetLinearVelocityFromWorldPoint(arg0:b2Vec2) : b2Vec2 {}
	public function ResetMassData() {}
	public function ApplyForceToCenter(arg0:b2Vec2) {}
	public function ApplyTorque(arg0:Float) {}
	public function IsAwake() : Boolean {}
	public function SetType(arg0:b2BodyType) {}
	public function CreateFixture(arg0:b2FixtureDef) : b2Fixture {}
	public function CreateFixture(arg0:b2Shape, arg1:Float) : b2Fixture {}
	public function SetMassData(arg0:b2MassData) {}
	public function GetTransform() : b2Transform {}
	public function GetWorldCenter() : b2Vec2 {}
	public function GetAngularDamping() : Float {}
	public function ApplyLinearImpulse(arg0:b2Vec2, arg1:b2Vec2) {}
	public function IsFixedRotation() : Boolean {}
	public function GetLocalCenter() : b2Vec2 {}
	public function GetWorldVector(arg0:b2Vec2) : b2Vec2 {}
	public function GetLinearVelocityFromLocalPoint(arg0:b2Vec2) : b2Vec2 {}
	public function GetContactList() : b2ContactEdge {}
	public function GetWorldPoint(arg0:b2Vec2) : b2Vec2 {}
	public function SetAwake(arg0:Boolean) {}
	public function GetLinearDamping() : Float {}
	public function IsBullet() : Boolean {}
	public function GetWorld() : b2World {}
	public function GetLocalVector(arg0:b2Vec2) : b2Vec2 {}
	public function SetLinearDamping(arg0:Float) {}
	public function Dump() {}
	public function SetBullet(arg0:Boolean) {}
	public function GetType() : Integer {}
	public function GetGravityScale() : Float {}
	public function DestroyFixture(arg0:b2Fixture) {}
	public function GetInertia() : Float {}
	public function IsActive() : Boolean {}
	public function SetFixedRotation(arg0:Boolean) {}
	public function ApplyAngularImpulse(arg0:Float) {}
	public function GetPosition() : b2Vec2 {}
}

emscripten class b2FrictionJoint
{
	public function SetMaxTorque(arg0:Float) {}
	public function GetMaxForce() : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function Dump() {}
	public function Destructor() {}
	public function GetCollideConnected() : Boolean {}
	public function GetUserData() : Object {}
	public function GetType() : Integer {}
	public function SetMaxForce(arg0:Float) {}
	public function GetBodyB() : b2Body {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function Constructor() {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetBodyA() : b2Body {}
	public function GetNext() : b2Joint {}
	public function GetMaxTorque() : Float {}
	public function IsActive() : Boolean {}
}

emscripten class b2StackAllocator
{
	public function GetMaxAllocation() : Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public function Allocate(arg0:Integer) : Object {}
	public function Free(arg0:Object) {}
}

emscripten class b2DestructionListener
{
	public function Destructor() {}
	public function SayGoodbye(arg0:b2Joint) {}
	public function Constructor() {}
}

emscripten class b2Filter
{
	public function Destructor() {}
	public function set_maskBits(arg0:Integer) {}
	public function set_categoryBits(arg0:Integer) {}
	public function get_groupIndex() : Integer {}
	public function set_groupIndex(arg0:Integer) {}
	public function get_maskBits() : Integer {}
	public function Constructor() {}
	public function get_categoryBits() : Integer {}
}

emscripten class b2RopeJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_maxLength() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
	public function set_maxLength(arg0:Float) {}
}

emscripten class b2FrictionJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function get_maxForce() : Float {}
	public function Constructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function set_maxForce(arg0:Float) {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function set_maxTorque(arg0:Float) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_maxTorque() : Float {}
}

emscripten class b2BodyDef
{
	public function get_linearDamping() : Float {}
	public function get_awake() : Boolean {}
	public function get_type() : b2BodyType {}
	public function get_allowSleep() : Boolean {}
	public function set_position(arg0:b2Vec2) {}
	public function set_linearVelocity(arg0:b2Vec2) {}
	public function Constructor() {}
	public function get_bullet() : Boolean {}
	public function get_userData() : Object {}
	public function set_angularDamping(arg0:Float) {}
	public function set_fixedRotation(arg0:Boolean) {}
	public function set_allowSleep(arg0:Boolean) {}
	public function get_gravityScale() : Float {}
	public function set_angularVelocity(arg0:Float) {}
	public function set_userData(arg0:Object) {}
	public function get_position() : b2Vec2 {}
	public function Destructor() {}
	public function set_type(arg0:b2BodyType) {}
	public function set_gravityScale(arg0:Float) {}
	public function get_angularDamping() : Float {}
	public function set_bullet(arg0:Boolean) {}
	public function set_active(arg0:Boolean) {}
	public function set_angle(arg0:Float) {}
	public function get_angle() : Float {}
	public function get_angularVelocity() : Float {}
	public function get_linearVelocity() : b2Vec2 {}
	public function get_active() : Boolean {}
	public function set_linearDamping(arg0:Float) {}
	public function get_fixedRotation() : Boolean {}
	public function set_awake(arg0:Boolean) {}
}

emscripten class b2Vec2
{
	public function Normalize() : Float {}
	public function set_x(arg0:Float) {}
	public function Constructor(x:Float, y:Float) {}
	public function Set(arg0:Float, arg1:Float) {}
	public function get_x() : Float {}
	public function get_y() : Float {}
	public function set_y(arg0:Float) {}
	public function IsValid() : Boolean {}
	public function Skew() : b2Vec2 {}
	public function LengthSquared() : Float {}
	public function op_add(arg0:b2Vec2) {}
	public function SetZero() {}
	public function Length() : Float {}
	public function Destructor() {}
	public function op_mul(arg0:Float) {}
	public function op_sub() : b2Vec2 {}
}

emscripten class b2Vec3
{
	public function Destructor() {}
	public function set_z(arg0:Float) {}
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function get_z() : Float {}
	public function op_add(arg0:b2Vec3) {}
	public function SetZero() {}
	public function Constructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public function op_mul(arg0:Float) {}
	public function op_sub() : b2Vec3 {}
}

emscripten class b2AABB
{
	public function Destructor() {}
	public function Constructor() {}
	public function set_upperBound(arg0:b2Vec2) {}
	public function IsValid() : Boolean {}
	public function Contains(arg0:b2AABB) : Boolean {}
	public function GetExtents() : b2Vec2 {}
	public function GetCenter() : b2Vec2 {}
	public function get_upperBound() : b2Vec2 {}
	public function GetPerimeter() : Float {}
	public function Combine(arg0:b2AABB) {}
	public function Combine(arg0:b2AABB, arg1:b2AABB) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput) : Boolean {}
	public function set_lowerBound(arg0:b2Vec2) {}
	public function get_lowerBound() : b2Vec2 {}
}

emscripten class b2FixtureDef
{
	public function Destructor() {}
	public function get_isSensor() : Boolean {}
	public function set_userData(arg0:Object) {}
	public function set_shape(arg0:b2Shape) {}
	public function get_density() : Float {}
	public function get_shape() : b2Shape {}
	public function Constructor() {}
	public function set_density(arg0:Float) {}
	public function set_restitution(arg0:Float) {}
	public function get_restitution() : Float {}
	public function set_isSensor(arg0:Boolean) {}
	public function get_filter() : b2Filter {}
	public function get_friction() : Float {}
	public function set_friction(arg0:Float) {}
	public function get_userData() : Object {}
	public function set_filter(arg0:b2Filter) {}
}

emscripten class b2PrismaticJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() : Float {}
	public function get_enableMotor() : Boolean {}
	public function get_referenceAngle() : Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() : b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Constructor() {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function set_lowerTranslation(arg0:Float) {}
	public function get_upperTranslation() : Float {}
	public function get_enableLimit() : Boolean {}
	public function Destructor() {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_upperTranslation(arg0:Float) {}
	public function get_maxMotorForce() : Float {}
	public function set_maxMotorForce(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_lowerTranslation() : Float {}
	public function set_localAxisA(arg0:b2Vec2) {}
}

emscripten class b2WheelJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() : Float {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() : b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function Constructor() {}
	public function get_frequencyHz() : Float {}
	public function set_dampingRatio(arg0:Float) {}
	public function Destructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_maxMotorTorque() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_enableMotor() : Boolean {}
	public function get_dampingRatio() : Float {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_localAxisA(arg0:b2Vec2) {}
}

emscripten class b2RevoluteJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_lowerAngle() : Float {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_lowerAngle(arg0:Float) {}
	public function get_enableMotor() : Boolean {}
	public function set_upperAngle(arg0:Float) {}
	public function get_referenceAngle() : Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function get_motorSpeed() : Float {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_maxMotorTorque() : Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Constructor() {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_enableLimit() : Boolean {}
	public function Destructor() {}
	public function get_upperAngle() : Float {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
}

emscripten class b2PulleyJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_ratio(arg0:Float) {}
	public function set_groundAnchorB(arg0:b2Vec2) {}
	public function set_groundAnchorA(arg0:b2Vec2) {}
	public function get_groundAnchorB() : b2Vec2 {}
	public function get_groundAnchorA() : b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2, arg4:b2Vec2, arg5:b2Vec2, arg6:Float) {}
	public function get_ratio() : Float {}
	public function Destructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function set_lengthB(arg0:Float) {}
	public function set_lengthA(arg0:Float) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function get_lengthB() : Float {}
	public function get_lengthA() : Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
}

emscripten class b2JointDef
{
	public function get_bodyA() : b2Body {}
	public function set_userData(arg0:Object) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function get_bodyB() : b2Body {}
	public function set_type(arg0:b2JointType) {}
	public function get_collideConnected() : Boolean {}
	public function get_type() : b2JointType {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
	public function get_userData() : Object {}
}

emscripten class b2Transform
{
	public function Destructor() {}
	public function Set(arg0:b2Vec2, arg1:Float) {}
	public function set_p(arg0:b2Vec2) {}
	public function set_q(arg0:b2Rot) {}
	public function get_p() : b2Vec2 {}
	public function get_q() : b2Rot {}
	public function Constructor() {}
	public function Constructor(arg1:b2Rot) {}
	public function SetIdentity() {}
}

emscripten class b2Color
{
	public function Destructor() {}
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function set_r(arg0:Float) {}
	public function get_r() : Float {}
	public function Constructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public function set_b(arg0:Float) {}
	public function get_g() : Float {}
	public function get_b() : Float {}
	public function set_g(arg0:Float) {}
}

emscripten class b2Rot
{
	public function Destructor() {}
	public function Set(arg0:Float) {}
	public function GetAngle() : Float {}
	public function GetYAxis() : b2Vec2 {}
	public function GetXAxis() : b2Vec2 {}
	public function set_c(arg0:Float) {}
	public function SetIdentity() {}
	public function Constructor() {}
	public function Constructor() {}
	public function get_c() : Float {}
}

emscripten class b2WeldJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_frequencyHz() : Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_referenceAngle() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_dampingRatio() : Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function Constructor() {}
}

emscripten class b2MouseJointDef
{
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Constructor() {}
	public function get_maxForce() : Float {}
	public function set_target(arg0:b2Vec2) {}
	public function set_maxForce(arg0:Float) {}
	public function get_frequencyHz() : Float {}
	public function get_target() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function Destructor() {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function get_dampingRatio() : Float {}
}

emscripten class b2DistanceProxy
{
	public function get_m_radius() : Float {}
	public function Set(arg0:b2Shape, arg1:Integer) {}
	public function Constructor() {}
	public function set_m_radius(arg0:Float) {}
	public function Destructor() {}
	public function get_m_vertices() : b2Vec2 {}
	public function GetSupportVertex(arg0:b2Vec2) : b2Vec2 {}
	public function get_m_count() : Integer {}
	public function GetVertexCount() : Integer {}
	public function GetVertex(arg0:Integer) : b2Vec2 {}
	public function GetSupport(arg0:b2Vec2) : Integer {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
}

emscripten class b2DistanceJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_length() : Float {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_frequencyHz() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_dampingRatio() : Float {}
	public function Constructor() {}
	public function Destructor() {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_length(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
}

emscripten class b2GearJointDef
{
	public function Destructor() {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function get_joint1() : b2Joint {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function set_joint2(arg0:b2Joint) {}
	public function set_ratio(arg0:Float) {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_joint2() : b2Joint {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
	public function get_ratio() : Float {}
	public function set_joint1(arg0:b2Joint) {}
}

emscripten class b2ContactEdge
{
	public function Destructor() {}
	public function set_contact(arg0:b2Contact) {}
	public function get_prev() : b2ContactEdge {}
	public function get_other() : b2Body {}
	public function set_prev(arg0:b2ContactEdge) {}
	public function get_next() : b2ContactEdge {}
	public function set_other(arg0:b2Body) {}
	public function set_next(arg0:b2ContactEdge) {}
	public function Constructor() {}
	public function get_contact() : b2Contact {}
}

// END EMSCRIPTEN EXTERNS FOR EMS_BOX2D //