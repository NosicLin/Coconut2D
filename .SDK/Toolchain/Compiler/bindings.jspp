////////////////////////////////////////////////////////////////////////////////////////////////////
var global = this;
var engine = null;
var gl = null;

global.__native = false;
global.__touchEvents = false;
global.__iOS = false;

if(!global.window) 		{ global.window = new HTMLWindow(); global.__native = true; }
if(!global.document)	global.document = window.document;

////////////////////////////////////////////////////////////////////////////////////////////////////
if(!global.trace) global.trace = function(msg)
{
	console.log(msg);

	/*
	try
	{
		var xhttp = new XMLHttpRequest();
		xhttp.open("POST", "http://192.168.1.168/__trace", true);
		xhttp.setRequestHeader("Content-Type", "text/plain; charset=UTF-8");
		xhttp.send(msg);
	}
	catch(e)
	{
	}
	*/

};

if(!global.console)		global.console = { log: trace };

////////////////////////////////////////////////////////////////////////////////////////////////////
if(global && global.navigator && navigator.userAgent && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))
{
	global.__touchEvents = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
if(global && global.navigator && navigator.userAgent && /iPhone|iPad|iPod/i.test(navigator.userAgent))
{
	global.__iOS = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
if(global["EventTarget"]) global.EventTarget = function() {};
global.EventTarget = function() {};

////////////////////////////////////////////////////////////////////////////////////////////////////
if(!window.requestAnimationFrame)
{
	window.requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback)
	{
		window.setTimeout(callback, 1000 / 60);
	};
}

////////////////////////////////////////////////////////////////////////////////////////////////////
function fixTouch(touch)
{
    if(!global.__touchEvents) return;

    var winPageX = window.pageXOffset,
        winPageY = window.pageYOffset,
        x = touch.clientX,
        y = touch.clientY;

    if (touch.pageY === 0 && Math.floor(y) > Math.floor(touch.pageY) || touch.pageX === 0 && Math.floor(x) > Math.floor(touch.pageX))
    {
        // iOS4 clientX/clientY have the value that should have been
        // in pageX/pageY. While pageX/page/ have the value 0
        x = x - winPageX;
        y = y - winPageY;
    }
    else if (y < (touch.pageY - winPageY) || x < (touch.pageX - winPageX) )
    {
        // Some Android browsers have totally bogus values for clientX/Y
        // when scrolling/zooming a page. Detectable since clientX/clientY
        // should never be smaller than pageX/pageY minus page scroll
        x = touch.pageX - winPageX;
        y = touch.pageY - winPageY;
    }

    touch.clientX = x;
    touch.clientY = y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
function __close_window()
{
	try
	{
		window.parent.jQuery.fancybox.close();
	}
	catch(e)
	{
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
function show_stack()
{
	try
	{
		throw true;
	}
	catch(e)
	{
		var _e = new Error();
		trace(_e.stack);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
function State(){};

////////////////////////////////////////////////////////////////////////////////////////////////////
Image.prototype.load = function(src, cocoimage)
{
	this.__src = src;

	this.onerror = function(e)
	{
		trace("ERROR: image failed to download: " + this.__src);
		this.__failed_to_download = this.__failed_to_download ? this.__failed_to_download+1 : 1;
		if(this.__failed_to_download==3)
		{
			alert("Image keeps failing to download: " + this.__src);
		}

		if(!cocoimage || (cocoimage && cocoimage.__error(this)))
			this.src = this.__src;
	};

	this.onload = function(e)
	{
		if(cocoimage)
			cocoimage.__loaded(this);
	};

	this.src = src;
};

if(!window.__Facebook_Initialize) __Facebook_Initialize = function(a,b)
{
	CocoFacebook.DebugMode = true;
	CocoFacebook.Init(294194444062993);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// Extensions of JavaScript Array and Object classes to match C++ Vector and Map.
////////////////////////////////////////////////////////////////////////////////////////////////////

Object.defineProperty(Array.prototype, "size", { value: function()
{
	return this.length;
}});

Object.defineProperty(Array.prototype, "clear", { value: function()
{
	while(this.length) { this.pop(); }
}});

Object.defineProperty(Array.prototype, "clone", { value: function()
{
	return [].concat(this);
}});

////////////////////////////////////////////////////////////////////////////////////////////////////
Object.defineProperty(String.prototype, "size", { value: function()
{
	return this.length;
}});

////////////////////////////////////////////////////////////////////////////////////////////////////
WebGLRenderingContext.prototype.getShaderParameter_enum = function(shader, pname)
{
	return this.getShaderParameter(shader, pname);
}

WebGLRenderingContext.prototype.getShaderParameter_boolean = function(shader, pname)
{
	return this.getShaderParameter(shader, pname);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Object.defineProperty(HTMLCanvasElement.prototype, "getImage", { value: function()
{
	var img = new Image();
	img.src = this.toDataURL();
	return img;
}});

////////////////////////////////////////////////////////////////////////////////////////////////////
// Required for Box2D
////////////////////////////////////////////////////////////////////////////////////////////////////
if(global.Module)
{
	var b2_staticBody = 0;
	var b2_kinematicBody = 1;
	var b2_dynamicBody = 2;

	this['Box2D'] = Module;
	Module['b2_staticBody']    = 0;
	Module['b2_kinematicBody'] = 1;
	Module['b2_dynamicBody']   = 2;

	function importScripts(){}

	function createPolygonShape(vertices)
	{
	    var shape = new b2PolygonShape();
	    var buffer = allocate(vertices.length * 8, 'float', ALLOC_STACK);
	    var offset = 0;
	    for (var i=0;i<vertices.length;i++) {
	        setValue(buffer+(offset), vertices[i].get_x(), 'float'); // x
	        setValue(buffer+(offset+4), vertices[i].get_y(), 'float'); // y
	        offset += 8;
	    }
	    var ptr_wrapped = wrapPointer(buffer, b2Vec2);
	    shape.Set(ptr_wrapped, vertices.length);
	    return shape;
	}
}
