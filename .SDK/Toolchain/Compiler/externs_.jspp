// Auto-generated Project Externs

class Object
{
	public function toString() :String {}
	public function toLocaleString() :String {}
	public function valueOf() :Object {}
	public function hasOwnProperty(name:String) :Boolean {}
	public function isPrototypeOf(o:Object) :Boolean {}
	public function propertyIsEnumerable(name:String) :Boolean {}
	public function defineProperty(object:Object, name:String, params:Object) {}
	public function Destructor() {}
	public  var __className :String;
} //Object

class Array
{
	public function concat(args:Array) :Array<Object> {}
	public function join(seperator:String) :String {}
	public function pop() :Object {}
	public function push(args:Object) :Object {}
	public function reverse() :Array<Object> {}
	public function shift() :Array<Object> {}
	public function slice(start:Number, end:Number) :Array<Object> {}
	public function sort(funct:Function) :Array<Object> {}
	public function splice(start:Number, deletecount:Number, items:Object) :Object {}
	public function unshift(start:Number) :Array<Object> {}
	public function forEach(item:Object) :Array<Object> {}
	public function size() :Integer {}
	public function clear() {}
	public function indexOf(item:Object) :Integer {}
	public  var length :Number;
	public  var __className :String;
} //Array

class Dictionary : Object
{
	public  var __className :String;
} //Dictionary

class Function
{
	public function apply(thisObject:Object, args:Array<Object>) :Object {}
	public function call(thisObject:Object) :Object {}
	public  var length :Number;
	public  var __className :String;
} //Function

class CocoAction : Function
{
} //CocoAction

class Global
{
	public function __Audio_load(url:String, obj:Audio) :Integer {}
	public function __Video_load(url:String, obj:HTMLVideoElement) :Integer {}
	public function __Facebook_Initialize(AppID:String, ImageSize:Integer) {}
	public function __Facebook_Login(Permissions:String, ImageSize:Integer) {}
	public function __Facebook_Share(URL:String) {}
	public function __Facebook_Post(toUserID:String, URL:String) {}
	public function __Facebook_Invite(message:String) {}
	public function __Twitter_Share(URL:String) {}
	public function __close_window() {}
	public function fixTouch(touch:Touch) {}
	public function require(module:String) :Object {}
	public function md5(str:String) :String {}
	public function atob(str:String) :String {}
	public function btoa(str:String) :String {}
	public function eval(s:String) :Object {}
	public function parseInt(s:String, radix:Number) :Integer {}
	public function parseFloat(s:String) :Float {}
	public function escape(s:String) :String {}
	public function unescape(s:String) :String {}
	public function isNaN(number:Object) :Boolean {}
	public function isFinite(number:Object) :Boolean {}
	public function decodeURI(encodedURI:String) :String {}
	public function decodeURIComponent(uriComponent:String) :String {}
	public function encodeURIComponent(uriComponent:String) :String {}
	public function encodeURI(URI:String) :String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
	public function Destructor() {}
	public var __registerManager;
	public var __registerCallback;
	public var __unRegisterCallback;
	public var __ImageData_loadImage :ImageDataBuffer;
	public var __Audio_get_position :Float;
	public var __Audio_set_position;
	public var __Audio_play;
	public var __Audio_pause;
	public var __Audio_stop;
	public var __Audio_delete;
	public var __Video_get_position :Float;
	public var __Video_set_position;
	public var __Video_play;
	public var __Video_pause;
	public var __Video_stop;
	public var __Video_delete;
	public var __Canvas2DRenderingContext_flush;
	public var __WebGLRenderingContext_activeTexture;
	public var __WebGLRenderingContext_attachShader;
	public var __WebGLRenderingContext_bindAttribLocation;
	public var __WebGLRenderingContext_bindBuffer;
	public var __WebGLRenderingContext_bindFramebuffer;
	public var __WebGLRenderingContext_bindRenderbuffer;
	public var __WebGLRenderingContext_bindTexture;
	public var __WebGLRenderingContext_blendColor;
	public var __WebGLRenderingContext_blendEquation;
	public var __WebGLRenderingContext_blendEquationSeparate;
	public var __WebGLRenderingContext_blendFunc;
	public var __WebGLRenderingContext_blendFuncSeparate;
	public var __WebGLRenderingContext_bufferData;
	public var __WebGLRenderingContext_bufferSubData;
	public var __WebGLRenderingContext_checkFramebufferStatus :Integer;
	public var __WebGLRenderingContext_clear;
	public var __WebGLRenderingContext_clearColor;
	public var __WebGLRenderingContext_clearDepth;
	public var __WebGLRenderingContext_clearStencil;
	public var __WebGLRenderingContext_colorMask;
	public var __WebGLRenderingContext_compileShader;
	public var __WebGLRenderingContext_compressedTexImage2D;
	public var __WebGLRenderingContext_compressedTexSubImage2D;
	public var __WebGLRenderingContext_copyTexImage2D;
	public var __WebGLRenderingContext_copyTexSubImage2D;
	public var __WebGLRenderingContext_createBuffer :Integer;
	public var __WebGLRenderingContext_createFramebuffer :Integer;
	public var __WebGLRenderingContext_createProgram :Integer;
	public var __WebGLRenderingContext_createRenderbuffer :Integer;
	public var __WebGLRenderingContext_createShader :Integer;
	public var __WebGLRenderingContext_createTexture :Integer;
	public var __WebGLRenderingContext_cullFace;
	public var __WebGLRenderingContext_deleteBuffer;
	public var __WebGLRenderingContext_deleteFramebuffer;
	public var __WebGLRenderingContext_deleteProgram;
	public var __WebGLRenderingContext_deleteRenderbuffer;
	public var __WebGLRenderingContext_deleteShader;
	public var __WebGLRenderingContext_deleteTexture;
	public var __WebGLRenderingContext_depthFunc;
	public var __WebGLRenderingContext_depthMask;
	public var __WebGLRenderingContext_depthRange;
	public var __WebGLRenderingContext_detachShader;
	public var __WebGLRenderingContext_disable;
	public var __WebGLRenderingContext_disableVertexAttribArray;
	public var __WebGLRenderingContext_drawArrays;
	public var __WebGLRenderingContext_drawElements;
	public var __WebGLRenderingContext_enable;
	public var __WebGLRenderingContext_enableVertexAttribArray;
	public var __WebGLRenderingContext_execute;
	public var __WebGLRenderingContext_finish;
	public var __WebGLRenderingContext_flush;
	public var __WebGLRenderingContext_framebufferRenderbuffer;
	public var __WebGLRenderingContext_framebufferTexture2D;
	public var __WebGLRenderingContext_frontFace;
	public var __WebGLRenderingContext_generateMipmap;
	public var __WebGLRenderingContext_getActiveAttrib :Integer;
	public var __WebGLRenderingContext_getActiveUniform :Integer;
	public var __WebGLRenderingContext_getAttachedShaders :Array<WebGLShader>;
	public var __WebGLRenderingContext_getAttribLocation :Integer;
	public var __WebGLRenderingContext_getBufferParameter :String;
	public var __WebGLRenderingContext_getContextAttributes :Integer;
	public var __WebGLRenderingContext_getError :Integer;
	public var __WebGLRenderingContext_getExtension :Object;
	public var __WebGLRenderingContext_getFramebufferAttachmentParameter :String;
	public var __WebGLRenderingContext_getParameter :String;
	public var __WebGLRenderingContext_getProgramInfoLog :String;
	public var __WebGLRenderingContext_getProgramParameter :Boolean;
	public var __WebGLRenderingContext_getRenderbufferParameter :String;
	public var __WebGLRenderingContext_getShaderInfoLog :String;
	public var __WebGLRenderingContext_getShaderParameter_boolean :Boolean;
	public var __WebGLRenderingContext_getShaderParameter_enum :Integer;
	public var __WebGLRenderingContext_getShaderPrecisionFormat :Integer;
	public var __WebGLRenderingContext_getShaderSource :String;
	public var __WebGLRenderingContext_getSupportedExtensions :Array<String>;
	public var __WebGLRenderingContext_getTexParameter :String;
	public var __WebGLRenderingContext_getUniform :String;
	public var __WebGLRenderingContext_getUniformLocation :Integer;
	public var __WebGLRenderingContext_getVertexAttrib :String;
	public var __WebGLRenderingContext_getVertexAttribOffset :Integer;
	public var __WebGLRenderingContext_hint;
	public var __WebGLRenderingContext_isBuffer :Boolean;
	public var __WebGLRenderingContext_isContextLost :Boolean;
	public var __WebGLRenderingContext_isEnabled :Boolean;
	public var __WebGLRenderingContext_isFramebuffer :Boolean;
	public var __WebGLRenderingContext_isProgram :Boolean;
	public var __WebGLRenderingContext_isRenderbuffer :Boolean;
	public var __WebGLRenderingContext_isShader :Boolean;
	public var __WebGLRenderingContext_isTexture :Boolean;
	public var __WebGLRenderingContext_lineWidth;
	public var __WebGLRenderingContext_linkProgram;
	public var __WebGLRenderingContext_pixelStorei;
	public var __WebGLRenderingContext_polygonOffset;
	public var __WebGLRenderingContext_readPixels;
	public var __WebGLRenderingContext_renderbufferStorage;
	public var __WebGLRenderingContext_sampleCoverage;
	public var __WebGLRenderingContext_scissor;
	public var __WebGLRenderingContext_shaderSource;
	public var __WebGLRenderingContext_stencilFunc;
	public var __WebGLRenderingContext_stencilFuncSeparate;
	public var __WebGLRenderingContext_stencilMask;
	public var __WebGLRenderingContext_stencilMaskSeparate;
	public var __WebGLRenderingContext_stencilOp;
	public var __WebGLRenderingContext_stencilOpSeparate;
	public var __WebGLRenderingContext_texImage2D;
	public var __WebGLRenderingContext_texParameterf;
	public var __WebGLRenderingContext_texParameteri;
	public var __WebGLRenderingContext_texSubImage2D;
	public var __WebGLRenderingContext_uniform1f;
	public var __WebGLRenderingContext_uniform1fv;
	public var __WebGLRenderingContext_uniform1i;
	public var __WebGLRenderingContext_uniform1iv;
	public var __WebGLRenderingContext_uniform2f;
	public var __WebGLRenderingContext_uniform2fv;
	public var __WebGLRenderingContext_uniform2i;
	public var __WebGLRenderingContext_uniform2iv;
	public var __WebGLRenderingContext_uniform3f;
	public var __WebGLRenderingContext_uniform3fv;
	public var __WebGLRenderingContext_uniform3i;
	public var __WebGLRenderingContext_uniform3iv;
	public var __WebGLRenderingContext_uniform4f;
	public var __WebGLRenderingContext_uniform4fv;
	public var __WebGLRenderingContext_uniform4i;
	public var __WebGLRenderingContext_uniform4iv;
	public var __WebGLRenderingContext_uniformMatrix2fv;
	public var __WebGLRenderingContext_uniformMatrix3fv;
	public var __WebGLRenderingContext_uniformMatrix4fv;
	public var __WebGLRenderingContext_useProgram;
	public var __WebGLRenderingContext_validateProgram;
	public var __WebGLRenderingContext_vertexAttrib1f;
	public var __WebGLRenderingContext_vertexAttrib1fv;
	public var __WebGLRenderingContext_vertexAttrib2f;
	public var __WebGLRenderingContext_vertexAttrib2fv;
	public var __WebGLRenderingContext_vertexAttrib3f;
	public var __WebGLRenderingContext_vertexAttrib3fv;
	public var __WebGLRenderingContext_vertexAttrib4f;
	public var __WebGLRenderingContext_vertexAttrib4fv;
	public var __WebGLRenderingContext_vertexAttribPointer;
	public var __WebGLRenderingContext_viewport;
	public var Object :Object;
	public var Array :Array;
	public var Dictionary :Dictionary;
	public var Function :Function;
	public var CocoAction :CocoAction;
	public var Global :Global;
	public  var NaN :Number;
	public  var Infinity :Number;
	public  var innerWidth :Float;
	public  var innerHeight :Float;
	public  var deviceRotation :Float;
	public  var devicePixelRatio :Float;
	public  var __native :Boolean;
	public  var __Coconut2DPlayer :Boolean;
	public  var __touchEvents :Boolean;
	public  var __className :String;
	public var String :String;
	public var Number :Number;
	public var Integer :Integer;
	public var Float :Float;
	public var Time :Time;
	public var Boolean :Boolean;
	public var Date :Date;
	public var Math :Math;
	public var ECMARegExpMatches :ECMARegExpMatches;
	public var RegExp :RegExp;
	public var ArrayBuffer :ArrayBuffer;
	public var ArrayBufferView :ArrayBufferView;
	public var TypedArray :TypedArray;
	public var Int8Array :Int8Array;
	public var Int16Array :Int16Array;
	public var Int32Array :Int32Array;
	public var Int64Array :Int64Array;
	public var Uint8Array :Uint8Array;
	public var Uint16Array :Uint16Array;
	public var Uint32Array :Uint32Array;
	public var Uint64Array :Uint64Array;
	public var Float32Array :Float32Array;
	public var Float64Array :Float64Array;
	public var Uint8ClampedArray :Uint8ClampedArray;
	public var Error :Error;
	public var EvalError :EvalError;
	public var RangeError :RangeError;
	public var ReferenceError :ReferenceError;
	public var SyntaxError :SyntaxError;
	public var TypeError :TypeError;
	public var JSON :JSON;
	public var ImageDataBuffer :ImageDataBuffer;
	public var DataView :DataView;
	public var XMLHttpRequest :XMLHttpRequest;
	public var Console :Console;
	public var CocoFont :CocoFont;
	public var Color :Color;
	public var Gradient :Gradient;
	public var global :Global;
	public var engine :CocoEngine;
	public var window :HTMLWindow;
	public var document :HTMLDocument;
	public var location :HTMLLocation;
	public var graphics :CocoGraphics;
	public var console :Console;
	public var DEVICE_WRAPPER :COCO_DEVICE_WRAPPER;
	public var Data :Data;
	public var NULL_DATA_VALUE :String;
	public var DBTYPEENUM :DBTYPEENUM;
	public var DBTYPE_EMPTY :DBTYPEENUM;
	public var DBTYPE_NULL :DBTYPEENUM;
	public var DBTYPE_I2 :DBTYPEENUM;
	public var DBTYPE_I4 :DBTYPEENUM;
	public var DBTYPE_R4 :DBTYPEENUM;
	public var DBTYPE_R8 :DBTYPEENUM;
	public var DBTYPE_CY :DBTYPEENUM;
	public var DBTYPE_DATE :DBTYPEENUM;
	public var DBTYPE_BSTR :DBTYPEENUM;
	public var DBTYPE_IDISPATCH :DBTYPEENUM;
	public var DBTYPE_ERROR :DBTYPEENUM;
	public var DBTYPE_BOOL :DBTYPEENUM;
	public var DBTYPE_VARIANT :DBTYPEENUM;
	public var DBTYPE_IUNKNOWN :DBTYPEENUM;
	public var DBTYPE_DECIMAL :DBTYPEENUM;
	public var DBTYPE_UI1 :DBTYPEENUM;
	public var DBTYPE_ARRAY :DBTYPEENUM;
	public var DBTYPE_BYREF :DBTYPEENUM;
	public var DBTYPE_I1 :DBTYPEENUM;
	public var DBTYPE_UI2 :DBTYPEENUM;
	public var DBTYPE_UI4 :DBTYPEENUM;
	public var DBTYPE_I8 :DBTYPEENUM;
	public var DBTYPE_UI8 :DBTYPEENUM;
	public var DBTYPE_GUID :DBTYPEENUM;
	public var DBTYPE_VECTOR :DBTYPEENUM;
	public var DBTYPE_RESERVED :DBTYPEENUM;
	public var DBTYPE_BYTES :DBTYPEENUM;
	public var DBTYPE_STR :DBTYPEENUM;
	public var DBTYPE_WSTR :DBTYPEENUM;
	public var DBTYPE_NUMERIC :DBTYPEENUM;
	public var DBTYPE_UDT :DBTYPEENUM;
	public var DBTYPE_DBDATE :DBTYPEENUM;
	public var DBTYPE_DBTIME :DBTYPEENUM;
	public var DBTYPE_DBTIMESTAMP :DBTYPEENUM;
	public var DBTYPE_HCHAPTER :DBTYPEENUM;
	public var DBTYPE_FILETIME :DBTYPEENUM;
	public var DBTYPE_PROPVARIANT :DBTYPEENUM;
	public var DBTYPE_VARNUMERIC :DBTYPEENUM;
	public var DBTYPE_BLOB :DBTYPEENUM;
	public var SQLITE_RECORD_STATUS :SQLITE_RECORD_STATUS;
	public var RECORD_NO_RECORD :SQLITE_RECORD_STATUS;
	public var RECORD_UNCHANGED :SQLITE_RECORD_STATUS;
	public var RECORD_CHANGED :SQLITE_RECORD_STATUS;
	public var RECORD_DELETED :SQLITE_RECORD_STATUS;
	public var RECORD_INSERTED :SQLITE_RECORD_STATUS;
	public var RECORD_ALL :SQLITE_RECORD_STATUS;
	public var SQLITE_TABLE_ACCESS :SQLITE_TABLE_ACCESS;
	public var CAN_SELECT :SQLITE_TABLE_ACCESS;
	public var CAN_INSERT :SQLITE_TABLE_ACCESS;
	public var CAN_UPDATE :SQLITE_TABLE_ACCESS;
	public var CAN_DELETE :SQLITE_TABLE_ACCESS;
	public var CAN_CRUD :SQLITE_TABLE_ACCESS;
	public var SQLITE_COLUMN_FLAGS :SQLITE_COLUMN_FLAGS;
	public var IS_UNIQUE :SQLITE_COLUMN_FLAGS;
	public var IS_KEYCOLUMN :SQLITE_COLUMN_FLAGS;
	public var IS_SEARCHABLE :SQLITE_COLUMN_FLAGS;
	public var IS_COMPUTED :SQLITE_COLUMN_FLAGS;
	public var IS_AUTOINCREMENT :SQLITE_COLUMN_FLAGS;
	public var IS_SORTABLE :SQLITE_COLUMN_FLAGS;
	public var IS_WRITABLE :SQLITE_COLUMN_FLAGS;
	public var IS_SEARCHABLE_LIKE :SQLITE_COLUMN_FLAGS;
	public var IS_NULLABLE :SQLITE_COLUMN_FLAGS;
	public var IS_ROWID :SQLITE_COLUMN_FLAGS;
	public var IS_FIXED_LENGTH :SQLITE_COLUMN_FLAGS;
	public var HAS_DEFAULT :SQLITE_COLUMN_FLAGS;
	public var DEFAULT_FLAGS :SQLITE_COLUMN_FLAGS;
	public var SQLITE_SCHEMA_ENUM :SQLITE_SCHEMA_ENUM;
	public var SQLITE_TABLES :SQLITE_SCHEMA_ENUM;
	public var SQLITE_VIEWS :SQLITE_SCHEMA_ENUM;
	public var SQLITE_COLUMNS :SQLITE_SCHEMA_ENUM;
	public var SQLITE_FOREIGN_KEYS :SQLITE_SCHEMA_ENUM;
	public var SQLITE_INTERNAL_TYPE :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_INTGER :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_FLOAT :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_TEXT :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_BLOB :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_NULL :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VARTYPE :SQLITE_VARTYPE;
	public var VARTYPE_I1 :SQLITE_VARTYPE;
	public var VARTYPE_I2 :SQLITE_VARTYPE;
	public var VARTYPE_I4 :SQLITE_VARTYPE;
	public var VARTYPE_I8 :SQLITE_VARTYPE;
	public var VARTYPE_UI1 :SQLITE_VARTYPE;
	public var VARTYPE_UI2 :SQLITE_VARTYPE;
	public var VARTYPE_UI4 :SQLITE_VARTYPE;
	public var VARTYPE_UI8 :SQLITE_VARTYPE;
	public var VARTYPE_R4 :SQLITE_VARTYPE;
	public var VARTYPE_R8 :SQLITE_VARTYPE;
	public var VARTYPE_BOOL :SQLITE_VARTYPE;
	public var VARTYPE_DBDATE :SQLITE_VARTYPE;
	public var VARTYPE_DBTIME :SQLITE_VARTYPE;
	public var VARTYPE_DBTIMESTAMP :SQLITE_VARTYPE;
	public var VARTYPE_DATE :SQLITE_VARTYPE;
	public var VARTYPE_CY :SQLITE_VARTYPE;
	public var VARTYPE_DECIMAL :SQLITE_VARTYPE;
	public var VARTYPE_BLOB :SQLITE_VARTYPE;
	public var VARTYPE_BSTR :SQLITE_VARTYPE;
	public var VARTYPE_WSTR :SQLITE_VARTYPE;
	public var CocoDataStream :CocoDataStream;
	public var CocoDataField :CocoDataField;
	public var CocoDataRow :CocoDataRow;
	public var CocoDataset :CocoDataset;
	public var BOX2D_SCALE :Float;
	public var COCO_STOP_ON_CURRENT_FRAME :Integer;
	public var COCO_DEFAULT_CONTROL_HEIGHT :Float;
	public var COCO_DEFAULT_FONT_SIZE :Float;
	public var COCO_CONTROL_MOVE_SNAP_PIXELS :Float;
	public var M_PI :Float;
	public var M_PI_2 :Float;
	public var RADIANS :Float;
	public var DEGREES :Number;
	public var SCREEN_RESOLUTION_DPI_ENUM :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_nodpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_DefaultDpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_ldpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_mdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_tvdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_hdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_xhdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_xxhdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_MIN_DPI :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_MAX_DPI :SCREEN_RESOLUTION_DPI_ENUM;
	public var COCO_CLIP_SYMBOL_LOOP_ENUM :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_CONTINUOUS :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_SYNCHRONIZED_WITH_PARENT :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_ONCE :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var COCO_KEYFRAME_INTERPOLATION_ENUM :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_NONE :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_MOTION_TWEEN :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_ECHO :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_PHYSICS :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var COCO_FILTER_ENUM :COCO_FILTER_ENUM;
	public var FILTER_INHERIT :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE_WITH_ALPHA :COCO_FILTER_ENUM;
	public var FILTER_SATURATION_WITH_ALPHA :COCO_FILTER_ENUM;
	public var FILTER_PARALLAX_HOR :COCO_FILTER_ENUM;
	public var COCO_TEXT_ALIGN_ENUM :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_NEAR :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_CENTER :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_FAR :COCO_TEXT_ALIGN_ENUM;
	public var COCO_TEXT_TRIMMING_ENUM :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingNone :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisPath :COCO_TEXT_TRIMMING_ENUM;
	public var COCO_CONTROL_BORDER_STYLE_ENUM :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_NONE :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_SOLID :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_DOTTED :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var COCO_CONTROL_ANCHOR_ENUM :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_NONE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_CENTER :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var COCO_SKIN_TILE_ENUM :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_NONE :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_X :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_Y :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_XY :COCO_SKIN_TILE_ENUM;
	public var CocoDOM :CocoDOM;
	public var COCO_VARTYPE :COCO_VARTYPE;
	public var CVT_UNKNOWN :COCO_VARTYPE;
	public var CVT_EMPTY :COCO_VARTYPE;
	public var CVT_NULL :COCO_VARTYPE;
	public var CVT_INTEGER :COCO_VARTYPE;
	public var CVT_FLOAT :COCO_VARTYPE;
	public var CVT_TIME :COCO_VARTYPE;
	public var CVT_DATE :COCO_VARTYPE;
	public var CVT_STRING :COCO_VARTYPE;
	public var CVT_BOOLEAN :COCO_VARTYPE;
	public var CVT_OBJECT :COCO_VARTYPE;
	public var CVT_ARRAY :COCO_VARTYPE;
	public var CocoVariant :CocoVariant;
	public var TOKEN_KIND_ENUM :TOKEN_KIND_ENUM;
	public var TOKEN_EOF :TOKEN_KIND_ENUM;
	public var TOKEN_WHITESPACE :TOKEN_KIND_ENUM;
	public var TOKEN_COMMENT :TOKEN_KIND_ENUM;
	public var TOKEN_OPERATOR :TOKEN_KIND_ENUM;
	public var TOKEN_NUMBER :TOKEN_KIND_ENUM;
	public var TOKEN_STRING :TOKEN_KIND_ENUM;
	public var TOKEN_KEYWORD :TOKEN_KIND_ENUM;
	public var TOKEN_IDENTIFIER :TOKEN_KIND_ENUM;
	public var TOKEN_TEXT :TOKEN_KIND_ENUM;
	public var TOKEN_RULE :TOKEN_RULE;
	public var TOKEN :TOKEN;
	public var COCO_PARSER_STATE :COCO_PARSER_STATE;
	public var CocoTokenizer :CocoTokenizer;
	public var CocoJSONParser :CocoJSONParser;
	public var CocoXMLParser :CocoXMLParser;
	public var CocoXPathParser :CocoXPathParser;
	public var CocoDOMAttribute :CocoDOMAttribute;
	public var CocoDOMNode :CocoDOMNode;
	public var CocoDOMDocument :CocoDOMDocument;
	public var Encode :Encode;
	public var CocoEncode :CocoEncode;
	public var RX :RX;
	public var REGULAR_EXPRESSION_FLAGS :REGULAR_EXPRESSION_FLAGS;
	public var RX_IGNORE_CASE :REGULAR_EXPRESSION_FLAGS;
	public var RX_MULTILINE :REGULAR_EXPRESSION_FLAGS;
	public var RX_GLOBAL :REGULAR_EXPRESSION_FLAGS;
	public var RX_ALL :REGULAR_EXPRESSION_FLAGS;
	public var Match :Match;
	public var MatchCollection :MatchCollection;
	public var RegEx :RegEx;
	public var PathLine :PathLine;
	public var HTMLCanvasPattern :HTMLCanvasPattern;
	public var HTMLCanvasGradient :HTMLCanvasGradient;
	public var HTMLTextMetrics :HTMLTextMetrics;
	public var CanvasRenderingContext2D :CanvasRenderingContext2D;
	public var Audio :Audio;
	public var ContextArguments :ContextArguments;
	public var HTMLCanvasElement :HTMLCanvasElement;
	public var HTMLDocument :HTMLDocument;
	public var OnClickHandler :OnClickHandler;
	public var HTMLElement :HTMLElement;
	public var HTMLStyleElement :HTMLStyleElement;
	public var HTMLDivElement :HTMLDivElement;
	public var HTMLAnchorElement :HTMLAnchorElement;
	public var Image :Image;
	public var HTMLVideoElement :HTMLVideoElement;
	public var HTMLWindow :HTMLWindow;
	public var HTMLLocation :HTMLLocation;
	public var HTMLScreen :HTMLScreen;
	public var HTMLNavigator :HTMLNavigator;
	public var ImageData :ImageData;
	public var WebGLObject :WebGLObject;
	public var WebGLActiveInfo :WebGLActiveInfo;
	public var WebGLBuffer :WebGLBuffer;
	public var WebGLContextAttributes :WebGLContextAttributes;
	public var WebGLFramebuffer :WebGLFramebuffer;
	public var WebGLProgram :WebGLProgram;
	public var WebGLRenderbuffer :WebGLRenderbuffer;
	public var WebGLRenderingContext :WebGLRenderingContext;
	public var WebGLShader :WebGLShader;
	public var WebGLShaderPrecisionFormat :WebGLShaderPrecisionFormat;
	public var WebGLTexture :WebGLTexture;
	public var WebGLUniformLocation :WebGLUniformLocation;
	public var CocoKeyFrame :CocoKeyFrame;
	public var CocoTimeLabel :CocoTimeLabel;
	public var CocoTimeline :CocoTimeline;
	public var CocoClip :CocoClip;
	public var CocoClipOnClickEvent :CocoClipOnClickEvent;
	public var CocoClipOnTouchStartEvent :CocoClipOnTouchStartEvent;
	public var CocoClipOnTouchMoveEvent :CocoClipOnTouchMoveEvent;
	public var CocoClipOnTouchEndEvent :CocoClipOnTouchEndEvent;
	public var CocoClipOnAnimationSequenceBeginEvent :CocoClipOnAnimationSequenceBeginEvent;
	public var CocoClipOnAnimationSequenceEndEvent :CocoClipOnAnimationSequenceEndEvent;
	public var CocoSelfTexturedClip :CocoSelfTexturedClip;
	public var CocoTextClip :CocoTextClip;
	public var COCO_MASK_TYPE :COCO_MASK_TYPE;
	public var MASK_SHAPE :COCO_MASK_TYPE;
	public var MASK_IMAGE :COCO_MASK_TYPE;
	public var CocoMaskClip :CocoMaskClip;
	public var ANIMATION_FUNCTIONS :ANIMATION_FUNCTIONS;
	public var FN_LINEAR :ANIMATION_FUNCTIONS;
	public var FN_EASE :ANIMATION_FUNCTIONS;
	public var FN_EASE_IN :ANIMATION_FUNCTIONS;
	public var FN_EASE_OUT :ANIMATION_FUNCTIONS;
	public var FN_EASE_IN_OUT :ANIMATION_FUNCTIONS;
	public var FN_CUSTOM :ANIMATION_FUNCTIONS;
	public var CocoBezier :CocoBezier;
	public var CocoVector :CocoVector;
	public var CocoMatrixData :CocoMatrixData;
	public var CocoMatrix :CocoMatrix;
	public var CocoScene :CocoScene;
	public var CocoVideo :CocoVideo;
	public var COCO_RENDERING_CONTEXT_ENUM :COCO_RENDERING_CONTEXT_ENUM;
	public var COCO_RENDERING_CONTEXT_WEBGL :COCO_RENDERING_CONTEXT_ENUM;
	public var COCO_RENDERING_CONTEXT_2D_CANVAS :COCO_RENDERING_CONTEXT_ENUM;
	public var COCO_RENDERING_CONTEXT_CSS3 :COCO_RENDERING_CONTEXT_ENUM;
	public var ICocoRenderContext :ICocoRenderContext;
	public var CocoRenderContext :CocoRenderContext;
	public var CocoRenderContext2D :CocoRenderContext2D;
	public var CocoRenderContextCSS3 :CocoRenderContextCSS3;
	public var CocoRenderContextGL :CocoRenderContextGL;
	public var CocoShader :CocoShader;
	public var CocoShaderBoundingBox :CocoShaderBoundingBox;
	public var CocoShaderCommon :CocoShaderCommon;
	public var CocoShaderSimple :CocoShaderSimple;
	public var CocoShaderSimpleWithAlpha :CocoShaderSimpleWithAlpha;
	public var CocoShaderSaturationWithAlpha :CocoShaderSaturationWithAlpha;
	public var CocoShaderParallaxHor :CocoShaderParallaxHor;
	public var IEventListener :IEventListener;
	public var IEventTarget :IEventTarget;
	public var ITickable :ITickable;
	public var CocoPoint :CocoPoint;
	public var CocoRect :CocoRect;
	public var CocoSkinCacheItem :CocoSkinCacheItem;
	public var CocoHVAlign :CocoHVAlign;
	public var CocoGraphics :CocoGraphics;
	public var CocoSequence :CocoSequence;
	public var CocoImageResolution :CocoImageResolution;
	public var ICocoImageRenderData :ICocoImageRenderData;
	public var CocoImageRenderData2D :CocoImageRenderData2D;
	public var CocoImageRenderDataGL :CocoImageRenderDataGL;
	public var CocoImage :CocoImage;
	public var CocoTextStyle :CocoTextStyle;
	public var CocoText :CocoText;
	public var CocoTextBlock :CocoTextBlock;
	public var COCO_SCREEN_ORIENTATION :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_PORTRAIT :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE :COCO_SCREEN_ORIENTATION;
	public var COCO_DEVICE :COCO_DEVICE;
	public var DEVICE_GENERIC_MDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_HDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_XHDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_XXHDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_TVDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_LDPI :COCO_DEVICE;
	public var DEVICE_IPHONE_3GS :COCO_DEVICE;
	public var DEVICE_IPHONE_4 :COCO_DEVICE;
	public var DEVICE_IPHONE_4S :COCO_DEVICE;
	public var DEVICE_IPHONE_5 :COCO_DEVICE;
	public var DEVICE_IPHONE_5S :COCO_DEVICE;
	public var DEVICE_IPHONE_5C :COCO_DEVICE;
	public var DEVICE_IPHONE_6 :COCO_DEVICE;
	public var DEVICE_IPHONE_6_PLUS :COCO_DEVICE;
	public var DEVICE_IPAD :COCO_DEVICE;
	public var DEVICE_IPAD_2 :COCO_DEVICE;
	public var DEVICE_IPAD_3 :COCO_DEVICE;
	public var DEVICE_IPAD_MINI :COCO_DEVICE;
	public var DEVICE_IPAD_AIR :COCO_DEVICE;
	public var DEVICE_IPAD_MINI_RETINA :COCO_DEVICE;
	public var CocoDevice :CocoDevice;
	public var COCO_IMAGE_LOADING_MODE_ENUM :COCO_IMAGE_LOADING_MODE_ENUM;
	public var LOAD_BY_DPI :COCO_IMAGE_LOADING_MODE_ENUM;
	public var LOAD_BY_EXMINING_KEYFRAMES :COCO_IMAGE_LOADING_MODE_ENUM;
	public var CocoEngine :CocoEngine;
	public var CocoEvent :CocoEvent;
	public var CocoEventConnectionPoint :CocoEventConnectionPoint;
	public var CocoEventSource :CocoEventSource;
	public var State :State;
	public var Touch :Touch;
	public var TouchList :TouchList;
	public var HTMLEvent :HTMLEvent;
	public var DEVICE_MESSAGE_ENUM :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_NONE :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_MASK :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_START :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_MOVE :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_END :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_KEY_DOWN :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_KEY_UP :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_HTTP_MASK :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_HTTP_DONE :DEVICE_MESSAGE_ENUM;
	public var DEVICE_MESSAGE :DEVICE_MESSAGE;
	public var COCO_DATA_PROVIDER_ENUM :COCO_DATA_PROVIDER_ENUM;
	public var PROVIDER_HTTP_POST :COCO_DATA_PROVIDER_ENUM;
	public var PROVIDER_HTTP_GET :COCO_DATA_PROVIDER_ENUM;
	public var PROVIDER_FILESYSTEM :COCO_DATA_PROVIDER_ENUM;
	public var COCO_REQUEST_DATA_FORMAT_ENUM :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_URL_QUERY_STRING :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_URL_ENCODED_FORM :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_XML :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_JSON :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var COCO_PERSISTENT_STORAGE_ENUM :COCO_PERSISTENT_STORAGE_ENUM;
	public var PERSIST_IN_SESSION :COCO_PERSISTENT_STORAGE_ENUM;
	public var PERSIST_IN_LOCAL_STORAGE :COCO_PERSISTENT_STORAGE_ENUM;
	public var CocoRequestNameValuePair :CocoRequestNameValuePair;
	public var CocoDataSource :CocoDataSource;
	public var CocoLocalStorage :CocoLocalStorage;
	public var CocoAudio :CocoAudio;
	public var SlotMachine :SlotMachine;
	public var VRGS_REQUEST_HEADER :VRGS_REQUEST_HEADER;
	public var VRGS_RESPONSE_HEADER :VRGS_RESPONSE_HEADER;
	public var VRGS_GET_GAME_SETTINGS_REQUEST :VRGS_GET_GAME_SETTINGS_REQUEST;
	public var VRGS_GET_GAME_SETTINGS_RESPONSE :VRGS_GET_GAME_SETTINGS_RESPONSE;
	public var VRGS_PAY_TABLE :VRGS_PAY_TABLE;
	public var PAY_LINE_ITEM :PAY_LINE_ITEM;
	public var VRGS_PAY_LINE :VRGS_PAY_LINE;
	public var VRGS_SPIN_ACTION_TYPE :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_ERROR :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_SPIN :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_WIN :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_FREE_SPIN :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_FREE_SPIN_WIN :VRGS_SPIN_ACTION_TYPE;
	public var VRGS_SPIN_REQUEST :VRGS_SPIN_REQUEST;
	public var VRGS_SPIN_RESPONSE :VRGS_SPIN_RESPONSE;
	public var VRGS_SPIN_ACTION :VRGS_SPIN_ACTION;
	public var VRGS_SPIN_REELVIEW_MATRIX :VRGS_SPIN_REELVIEW_MATRIX;
	public var VRGS_SPIN_WIN :VRGS_SPIN_WIN;
	public var VRGS_SPIN_WIN_FREE_SPIN :VRGS_SPIN_WIN_FREE_SPIN;
	public var VermatiaSlotGameEngine :VermatiaSlotGameEngine;
	public var GameEngine :GameEngine;
	public var GameScene :GameScene;
} //Global

class String
{
	public function fromCharCode(charCode:Number) :String {}
	public function charAt(position:Number) :String {}
	public function charCodeAt(position:Number) :Number {}
	public function concat(value:String) :String {}
	public function indexOf(searchString:String, startPosition:Number) :Number {}
	public function lastIndexOf(searchString:String, startPosition:Number) :Number {}
	public function localeCompare(otherString:String) :Number {}
	public function match(regexp:RegExp) :Array<Object> {}
	public function replace(regexp:RegExp, replaceValue:String) :String {}
	public function replace$1(find:String, replaceValue:String) :String {}
	public function search(regexp:RegExp) :Number {}
	public function slice(start:Number, end:Number) :String {}
	public function split(separator:String, limit:Number) :Array<String> {}
	public function substring(start:Number, end:Number) :String {}
	public function substr(start:Number, size:Number) :String {}
	public function toLowerCase() :String {}
	public function toLocaleLowerCase() :String {}
	public function toUpperCase() :String {}
	public function toLocaleUpperCase() :String {}
	public function size() :Integer {}
	public function trim() :String {}
	public  var length :Number;
	public  var __className :String;
} //String

class Number
{
	public function toFixed(fractionDigits:Number) :String {}
	public function toExponential(fractionDigits:Number) :String {}
	public function toPrecision(fractionDigits:Number) :String {}
	public  var MIN_VALUE :Number;
	public  var MAX_VALUE :Number;
	public  var NEGATIVE_INFINITY :Number;
	public  var POSITIVE_INFINITY :Number;
	public  var __className :String;
} //Number

class Integer : Number
{
	public  var __className :String;
} //Integer

class Float : Number
{
	public  var __className :String;
} //Float

class Time : Number
{
	public  var __className :String;
} //Time

class Boolean
{
	public  var __className :String;
} //Boolean

class Date
{
	public function UTC(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function parse(string:String) :Number {}
	public function toDateString() :String {}
	public function toTimeString() :String {}
	public function toLocaleString() :String {}
	public function toLocaleDateString() :String {}
	public function toLocaleTimeString() :String {}
	public function valueOf() :Object {}
	public function getFullYear() :Number {}
	public function getTime() :Number {}
	public function getUTCFullYear() :Number {}
	public function getMonth() :Number {}
	public function getUTCMonth() :Number {}
	public function getDate() :Number {}
	public function getUTCDate() :Number {}
	public function getDay() :Number {}
	public function getUTCDay() :Number {}
	public function getHours() :Number {}
	public function getUTCHours() :Number {}
	public function getMinutes() :Number {}
	public function getUTCMinutes() :Number {}
	public function getSeconds() :Number {}
	public function getUTCSeconds() :Number {}
	public function getMilliseconds() :Number {}
	public function getUTCMilliseconds() :Number {}
	public function getTimezoneOffset() :Number {}
	public function setTime(value:Number) :Number {}
	public function setMilliseconds(value:Number) :Number {}
	public function setUTCMilliseconds(ms:Number) :Number {}
	public function setSeconds(sec:Number, ms:Number) :Number {}
	public function setUTCSeconds(sec:Number, ms:Number) :Number {}
	public function setMinutes(min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCMinute(min:Number, sec:Number, ms:Number) :Number {}
	public function setHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setDate(date:Number) :Number {}
	public function setUTCDate(date:Number) :Number {}
	public function setMonth(month:Number, date:Number) :Number {}
	public function setUTCMonth(month:Number, date:Number) :Number {}
	public function setFullYear(year:Number, month:Number, date:Number) :Number {}
	public function setUTCFullYear(year:Number, month:Number, date:Number) {}
	public function toUTCString() :String {}
	public function toJSON() :String {}
	public  var __className :String;
} //Date

class Math
{
	public function abs(x:Number) :Number {}
	public function acos(x:Number) :Float {}
	public function asin(x:Number) :Float {}
	public function atan(x:Number) :Float {}
	public function atan2(x:Number, y:Number) :Float {}
	public function ceil(x:Number) :Number {}
	public function cos(x:Number) :Float {}
	public function exp(x:Number) :Float {}
	public function floor(x:Number) :Integer {}
	public function log(x:Number) :Float {}
	public function max(a:Number, b:Number) :Number {}
	public function min(a:Number, b:Number) :Number {}
	public function pow(x:Number, y:Number) :Float {}
	public function random() :Float {}
	public function round(x:Number) :Number {}
	public function sin(x:Number) :Float {}
	public function sqrt(x:Number) :Float {}
	public function tan(x:Number) :Float {}
	public static  var E :Float;
	public static  var LN10 :Float;
	public static  var LN2 :Float;
	public static  var LOG2E :Float;
	public static  var LOG10E :Float;
	public static  var PI :Float;
	public static  var SQRT1_2 :Float;
	public static  var SQRT2 :Float;
	public  var __className :String;
} //Math

class ECMARegExpMatches : Array
{
	public  var index :Integer;
	public  var __className :String;
} //ECMARegExpMatches

class RegExp
{
	public function exec(string:String) :ECMARegExpMatches {}
	public function test(string:String) :Boolean {}
	public  var source :String;
	public  var global :Boolean;
	public  var ignoreCase :Boolean;
	public  var multiline :Boolean;
	public  var lastIndex :Number;
	public  var __className :String;
} //RegExp

class ArrayBuffer
{
	public function slice(begin:Number, end:Number) :ArrayBuffer {}
	public function encodeAsPNG(width:Number, height:Number) :ArrayBuffer {}
	public function encodeAsBase64() :String {}
	public  var byteLength :Number;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBuffer

class ArrayBufferView
{
	public function Destructor() {}
	public  var buffer :ArrayBuffer;
	public  var byteOffset :Integer;
	public  var byteLength :Integer;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBufferView

class TypedArray : ArrayBufferView
{
	public function set(array:TypedArray, offset:Integer) {}
	public  var length :Integer;
	public  var BYTES_PER_ELEMENT :Integer;
	public  var __className :String;
} //TypedArray

class Int8Array : TypedArray
{
	public  var __className :String;
} //Int8Array

class Int16Array : TypedArray
{
	public  var __className :String;
} //Int16Array

class Int32Array : TypedArray
{
	public  var __className :String;
} //Int32Array

class Int64Array : TypedArray
{
	public  var __className :String;
} //Int64Array

class Uint8Array : TypedArray
{
	public  var __className :String;
} //Uint8Array

class Uint16Array : TypedArray
{
	public  var __className :String;
} //Uint16Array

class Uint32Array : TypedArray
{
	public  var __className :String;
} //Uint32Array

class Uint64Array : TypedArray
{
	public  var __className :String;
} //Uint64Array

class Float32Array : TypedArray
{
	public  var __className :String;
} //Float32Array

class Float64Array : TypedArray
{
	public  var __className :String;
} //Float64Array

class Uint8ClampedArray : TypedArray
{
	public  var __className :String;
} //Uint8ClampedArray

class Error
{
	public function toString() :String {}
	public  var name :String;
	public  var message :String;
	public  var __className :String;
} //Error

class EvalError : Error
{
	public  var __className :String;
} //EvalError

class RangeError : Error
{
	public  var __className :String;
} //RangeError

class ReferenceError : Error
{
	public  var __className :String;
} //ReferenceError

class SyntaxError : Error
{
	public  var __className :String;
} //SyntaxError

class TypeError : Error
{
	public  var __className :String;
} //TypeError

class JSON
{
	public function parse(json:String) :Dictionary {}
	public function stringify(obj:Dictionary) :String {}
	public  var __className :String;
} //JSON

class ImageDataBuffer
{
	public  var buffer :ArrayBuffer;
	public  var width :Float;
	public  var height :Float;
	public  var __className :String;
} //ImageDataBuffer

class DataView : ArrayBufferView
{
	public function getInt8(byteOffset:Integer) :Integer {}
	public function getUint8(byteOffset:Integer) :Integer {}
	public function getInt16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getInt32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getFloat32(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function getFloat64(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function setInt8(byteOffset:Integer, value:Integer) {}
	public function setUint8(byteOffset:Integer, value:Integer) {}
	public function setInt16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setInt32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setFloat32(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function setFloat64(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function Constructor(buffer:ArrayBuffer, byteOffset:Integer, byteLength:Integer) {}
	public  var __className :String;
} //DataView

class XMLHttpRequest
{
	public function open(method:String, url:String, async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send(data:String) {}
	public function send$1(data:ArrayBuffer) {}
	public function send$2(data:ArrayBufferView) {}
	public function send$3() {}
	public function abort() {}
	public function getAllResponseHeaders() :String {}
	public function getResponseHeader(header:String) :String {}
	public  var UNSENT :Integer;
	public  var OPENED :Integer;
	public  var HEADERS_RECEIVED :Integer;
	public  var LOADING :Integer;
	public  var DONE :Integer;
	public  var timeout :Integer;
	public  var readyState :Integer;
	public  var status :Integer;
	public  var statusText :String;
	public  var responseText :String;
	public  var responseType :String;
	public  var response :ArrayBuffer;
	public  var __className :String;
} //XMLHttpRequest

class Console
{
	public function log(msg:String) {}
	public  var __className :String;
} //Console

class CocoFont
{
	public function fillText(imageDataBuffer:ArrayBuffer, width:Float, text:String, x:Float, y:Float, R:Float, G:Float, B:Float, A:Float) {}
	public function measureText(text:String) :Float {}
	public function Constructor(FontName:String, FontSize:Float, Bold:Boolean, Italic:Boolean) {}
	public  var height :Float;
	public  var __className :String;
} //CocoFont

class Color : Number
{
	public  var __className :String;
} //Color

class Gradient : String
{
	public  var __className :String;
} //Gradient

class Data
{
} //Data

class DBTYPEENUM
{
	public var DBTYPE_EMPTY :DBTYPEENUM;
	public var DBTYPE_NULL :DBTYPEENUM;
	public var DBTYPE_I2 :DBTYPEENUM;
	public var DBTYPE_I4 :DBTYPEENUM;
	public var DBTYPE_R4 :DBTYPEENUM;
	public var DBTYPE_R8 :DBTYPEENUM;
	public var DBTYPE_CY :DBTYPEENUM;
	public var DBTYPE_DATE :DBTYPEENUM;
	public var DBTYPE_BSTR :DBTYPEENUM;
	public var DBTYPE_IDISPATCH :DBTYPEENUM;
	public var DBTYPE_ERROR :DBTYPEENUM;
	public var DBTYPE_BOOL :DBTYPEENUM;
	public var DBTYPE_VARIANT :DBTYPEENUM;
	public var DBTYPE_IUNKNOWN :DBTYPEENUM;
	public var DBTYPE_DECIMAL :DBTYPEENUM;
	public var DBTYPE_UI1 :DBTYPEENUM;
	public var DBTYPE_ARRAY :DBTYPEENUM;
	public var DBTYPE_BYREF :DBTYPEENUM;
	public var DBTYPE_I1 :DBTYPEENUM;
	public var DBTYPE_UI2 :DBTYPEENUM;
	public var DBTYPE_UI4 :DBTYPEENUM;
	public var DBTYPE_I8 :DBTYPEENUM;
	public var DBTYPE_UI8 :DBTYPEENUM;
	public var DBTYPE_GUID :DBTYPEENUM;
	public var DBTYPE_VECTOR :DBTYPEENUM;
	public var DBTYPE_RESERVED :DBTYPEENUM;
	public var DBTYPE_BYTES :DBTYPEENUM;
	public var DBTYPE_STR :DBTYPEENUM;
	public var DBTYPE_WSTR :DBTYPEENUM;
	public var DBTYPE_NUMERIC :DBTYPEENUM;
	public var DBTYPE_UDT :DBTYPEENUM;
	public var DBTYPE_DBDATE :DBTYPEENUM;
	public var DBTYPE_DBTIME :DBTYPEENUM;
	public var DBTYPE_DBTIMESTAMP :DBTYPEENUM;
	public var DBTYPE_HCHAPTER :DBTYPEENUM;
	public var DBTYPE_FILETIME :DBTYPEENUM;
	public var DBTYPE_PROPVARIANT :DBTYPEENUM;
	public var DBTYPE_VARNUMERIC :DBTYPEENUM;
	public var DBTYPE_BLOB :DBTYPEENUM;
} //DBTYPEENUM

class SQLITE_RECORD_STATUS
{
	public var RECORD_NO_RECORD :SQLITE_RECORD_STATUS;
	public var RECORD_UNCHANGED :SQLITE_RECORD_STATUS;
	public var RECORD_CHANGED :SQLITE_RECORD_STATUS;
	public var RECORD_DELETED :SQLITE_RECORD_STATUS;
	public var RECORD_INSERTED :SQLITE_RECORD_STATUS;
	public var RECORD_ALL :SQLITE_RECORD_STATUS;
} //SQLITE_RECORD_STATUS

class SQLITE_TABLE_ACCESS
{
	public var CAN_SELECT :SQLITE_TABLE_ACCESS;
	public var CAN_INSERT :SQLITE_TABLE_ACCESS;
	public var CAN_UPDATE :SQLITE_TABLE_ACCESS;
	public var CAN_DELETE :SQLITE_TABLE_ACCESS;
	public var CAN_CRUD :SQLITE_TABLE_ACCESS;
} //SQLITE_TABLE_ACCESS

class SQLITE_COLUMN_FLAGS
{
	public var IS_UNIQUE :SQLITE_COLUMN_FLAGS;
	public var IS_KEYCOLUMN :SQLITE_COLUMN_FLAGS;
	public var IS_SEARCHABLE :SQLITE_COLUMN_FLAGS;
	public var IS_COMPUTED :SQLITE_COLUMN_FLAGS;
	public var IS_AUTOINCREMENT :SQLITE_COLUMN_FLAGS;
	public var IS_SORTABLE :SQLITE_COLUMN_FLAGS;
	public var IS_WRITABLE :SQLITE_COLUMN_FLAGS;
	public var IS_SEARCHABLE_LIKE :SQLITE_COLUMN_FLAGS;
	public var IS_NULLABLE :SQLITE_COLUMN_FLAGS;
	public var IS_ROWID :SQLITE_COLUMN_FLAGS;
	public var IS_FIXED_LENGTH :SQLITE_COLUMN_FLAGS;
	public var HAS_DEFAULT :SQLITE_COLUMN_FLAGS;
	public var DEFAULT_FLAGS :SQLITE_COLUMN_FLAGS;
} //SQLITE_COLUMN_FLAGS

class SQLITE_SCHEMA_ENUM
{
	public var SQLITE_TABLES :SQLITE_SCHEMA_ENUM;
	public var SQLITE_VIEWS :SQLITE_SCHEMA_ENUM;
	public var SQLITE_COLUMNS :SQLITE_SCHEMA_ENUM;
	public var SQLITE_FOREIGN_KEYS :SQLITE_SCHEMA_ENUM;
} //SQLITE_SCHEMA_ENUM

class SQLITE_INTERNAL_TYPE
{
	public var SQLITE_VT_INTGER :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_FLOAT :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_TEXT :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_BLOB :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_NULL :SQLITE_INTERNAL_TYPE;
} //SQLITE_INTERNAL_TYPE

class SQLITE_VARTYPE
{
	public var VARTYPE_I1 :SQLITE_VARTYPE;
	public var VARTYPE_I2 :SQLITE_VARTYPE;
	public var VARTYPE_I4 :SQLITE_VARTYPE;
	public var VARTYPE_I8 :SQLITE_VARTYPE;
	public var VARTYPE_UI1 :SQLITE_VARTYPE;
	public var VARTYPE_UI2 :SQLITE_VARTYPE;
	public var VARTYPE_UI4 :SQLITE_VARTYPE;
	public var VARTYPE_UI8 :SQLITE_VARTYPE;
	public var VARTYPE_R4 :SQLITE_VARTYPE;
	public var VARTYPE_R8 :SQLITE_VARTYPE;
	public var VARTYPE_BOOL :SQLITE_VARTYPE;
	public var VARTYPE_DBDATE :SQLITE_VARTYPE;
	public var VARTYPE_DBTIME :SQLITE_VARTYPE;
	public var VARTYPE_DBTIMESTAMP :SQLITE_VARTYPE;
	public var VARTYPE_DATE :SQLITE_VARTYPE;
	public var VARTYPE_CY :SQLITE_VARTYPE;
	public var VARTYPE_DECIMAL :SQLITE_VARTYPE;
	public var VARTYPE_BLOB :SQLITE_VARTYPE;
	public var VARTYPE_BSTR :SQLITE_VARTYPE;
	public var VARTYPE_WSTR :SQLITE_VARTYPE;
} //SQLITE_VARTYPE

class CocoDataStream
{
	public function openFromArrayBuffer(data:ArrayBuffer) :Boolean {}
	public function increaseSize(s:Integer) {}
	public function shrink() {}
	public function writeInteger(v:Integer) {}
	public function writeFloat(v:Float) {}
	public function writeString(v:String) {}
	public function writeBoolean(v:Boolean) {}
	public function writeInt32Array(v:Int32Array) {}
	public function writeFloat32Array(v:Float32Array) {}
	public function writeDataStream(v:CocoDataStream) {}
	public function readCocoDataStream() :CocoDataStream {}
	protected function set(v:Int32Array) {}
	public function readUint8Array() :Uint8Array {}
	public function readInt32Array() :Int32Array {}
	public function readFloat32Array() :Float32Array {}
	public function readInteger() :Integer {}
	public function readFloat() :Float {}
	public function readString() :String {}
	public function readBoolean() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	private  var ELEMENTS_INCREMENT :Integer;
	private  var bi :Int32Array;
	private  var bf :Float32Array;
	private  var __offset :Integer;
	private  var __length :Integer;
	public  var buffer :Int32Array;
	public  var offset :Integer;
	public  var __className :String;
} //CocoDataStream

class CocoDataField
{
	public function copy(col:CocoDataField) {}
	public function write(ds:CocoDataStream) {}
	public function read(ds:CocoDataStream) {}
	public function toJSON() :String {}
	public function intValue() :Integer {}
	public function boolValue() :Boolean {}
	public function floatValue() :Float {}
	public function timeValue() :Time {}
	public function Destructor() {}
	public function Constructor(dataset:CocoDataset) {}
	private  var dataset :CocoDataset;
	public  var ORDINAL :Integer;
	public  var NAME :String;
	public  var BASECOLUMNNAME :String;
	public  var BASETABLENAME :String;
	public  var ID :String;
	public  var TYPE :SQLITE_VARTYPE;
	public  var LCID :Integer;
	public  var PRECISION :Integer;
	public  var SCALE :Integer;
	public  var SIZE :Integer;
	public  var LENGTH :Integer;
	public  var FLAGS :SQLITE_COLUMN_FLAGS;
	public  var SQLITE_DECLARED_TYPE :String;
	public  var SQLITE_PK_COLUMN :String;
	public  var SQLITE_PK_TABLE :String;
	public  var SQLITE_DATATYPE :SQLITE_INTERNAL_TYPE;
	public  var DEFAULTVALUE :String;
	public  var value :String;
	public  var __className :String;
} //CocoDataField

class CocoDataRow
{
	public function write(ds:CocoDataStream) {}
	public function read(ds:CocoDataStream) {}
	public function toJSON() :String {}
	public function Destructor() {}
	public function Constructor(dataset:CocoDataset) {}
	private  var dataset :CocoDataset;
	public  var STATUS :SQLITE_RECORD_STATUS;
	public  var FieldValues :Array<String>;
	public  var __className :String;
} //CocoDataRow

class CocoDataset
{
	public function openFromArrayBuffer(ab:ArrayBuffer) :Boolean {}
	public function openFromDataStream(ds:CocoDataStream) :Boolean {}
	public function write(ds:CocoDataStream) :Boolean {}
	public function close() {}
	public function ADD_META(ORDINAL:Integer, NAME:String, TYPE:SQLITE_VARTYPE, PRECISION:Integer, SCALE:Integer, LENGTH:Integer, FLAGS:SQLITE_COLUMN_FLAGS, BASECOLUMNNAME:String, BASETABLENAME:String, ID:String, LCID:Integer, SIZE:Integer, SQLITE_DECLARED_TYPE:String, SQLITE_PK_COLUMN:String, SQLITE_PK_TABLE:String, SQLITE_DATATYPE:SQLITE_INTERNAL_TYPE, DEFAULTVALUE:String) {}
	public function ADD_DATA(length:Integer) {}
	private function isSet(v:SQLITE_RECORD_STATUS, flags:SQLITE_RECORD_STATUS) :Boolean {}
	public function recordCount(Status:SQLITE_RECORD_STATUS) :Integer {}
	private function row_to_record(rowIndex:Integer, Status:SQLITE_RECORD_STATUS) :Integer {}
	public function getMatrix(Row:Integer, Col:Integer) :String {}
	public function putMatrix(Row:Integer, Col:Integer, value:String) :Boolean {}
	public function status() :SQLITE_RECORD_STATUS {}
	public function move(recordIndex:Integer) :Boolean {}
	public function moveFirst() :Boolean {}
	public function moveLast() :Boolean {}
	public function moveNext() :Boolean {}
	public function movePrev() :Boolean {}
	public function moved() :Boolean {}
	public function fieldByName(name:String) :CocoDataField {}
	public function fieldByIndex(ordinal:Integer) :CocoDataField {}
	public function insertRecord() :Boolean {}
	public function deleteRecord() :Boolean {}
	public function locate(fieldName:String, fieldValue:String) :Boolean {}
	public function getBookmark() :String {}
	public function setBookmark(bookmark:String) :Boolean {}
	public function toArrayBuffer() :ArrayBuffer {}
	public function toBase64() :String {}
	public function toJSON() :String {}
	public function toDebugString() :String {}
	public function Destructor() {}
	public function Constructor() {}
	public  var fileName :String;
	public  var SQL :String;
	public  var METADATA :Array<CocoDataField>;
	public  var DATA :Array<CocoDataRow>;
	public  var ACCESS :SQLITE_TABLE_ACCESS;
	public  var __recordIndex :Integer;
	public  var DB_EOF :Boolean;
	public  var DB_BOF :Boolean;
	public  var stringForNull :String;
	public  var StatusFilter :SQLITE_RECORD_STATUS;
	private  var ds :CocoDataStream;
	public  var fieldCount :Integer;
	public  var __className :String;
} //CocoDataset

class SCREEN_RESOLUTION_DPI_ENUM
{
	public var RESOLUTION_nodpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_DefaultDpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_ldpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_mdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_tvdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_hdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_xhdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_xxhdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_MIN_DPI :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_MAX_DPI :SCREEN_RESOLUTION_DPI_ENUM;
} //SCREEN_RESOLUTION_DPI_ENUM

class COCO_CLIP_SYMBOL_LOOP_ENUM
{
	public var CLIP_SYMBOL_LOOP_CONTINUOUS :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_SYNCHRONIZED_WITH_PARENT :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_ONCE :COCO_CLIP_SYMBOL_LOOP_ENUM;
} //COCO_CLIP_SYMBOL_LOOP_ENUM

class COCO_KEYFRAME_INTERPOLATION_ENUM
{
	public var KEYFRAME_INTERPOLATION_NONE :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_MOTION_TWEEN :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_ECHO :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_PHYSICS :COCO_KEYFRAME_INTERPOLATION_ENUM;
} //COCO_KEYFRAME_INTERPOLATION_ENUM

class COCO_FILTER_ENUM
{
	public var FILTER_INHERIT :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE_WITH_ALPHA :COCO_FILTER_ENUM;
	public var FILTER_SATURATION_WITH_ALPHA :COCO_FILTER_ENUM;
	public var FILTER_PARALLAX_HOR :COCO_FILTER_ENUM;
} //COCO_FILTER_ENUM

class COCO_TEXT_ALIGN_ENUM
{
	public var TEXT_ALIGN_NEAR :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_CENTER :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_FAR :COCO_TEXT_ALIGN_ENUM;
} //COCO_TEXT_ALIGN_ENUM

class COCO_TEXT_TRIMMING_ENUM
{
	public var StringTrimmingNone :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisPath :COCO_TEXT_TRIMMING_ENUM;
} //COCO_TEXT_TRIMMING_ENUM

class COCO_CONTROL_BORDER_STYLE_ENUM
{
	public var BORDER_NONE :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_SOLID :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_DOTTED :COCO_CONTROL_BORDER_STYLE_ENUM;
} //COCO_CONTROL_BORDER_STYLE_ENUM

class COCO_CONTROL_ANCHOR_ENUM
{
	public var ANCHOR_NONE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_CENTER :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
} //COCO_CONTROL_ANCHOR_ENUM

class COCO_SKIN_TILE_ENUM
{
	public var TILE_REPEAT_NONE :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_X :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_Y :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_XY :COCO_SKIN_TILE_ENUM;
} //COCO_SKIN_TILE_ENUM

class CocoDOM
{
} //CocoDOM

class COCO_VARTYPE
{
	public var CVT_UNKNOWN :COCO_VARTYPE;
	public var CVT_EMPTY :COCO_VARTYPE;
	public var CVT_NULL :COCO_VARTYPE;
	public var CVT_INTEGER :COCO_VARTYPE;
	public var CVT_FLOAT :COCO_VARTYPE;
	public var CVT_TIME :COCO_VARTYPE;
	public var CVT_DATE :COCO_VARTYPE;
	public var CVT_STRING :COCO_VARTYPE;
	public var CVT_BOOLEAN :COCO_VARTYPE;
	public var CVT_OBJECT :COCO_VARTYPE;
	public var CVT_ARRAY :COCO_VARTYPE;
} //COCO_VARTYPE

class CocoVariant
{
	public function toJSON() :String {}
	public var vt :COCO_VARTYPE;
	public var iVal :Integer;
	public var fVal :Float;
	public var tVal :Time;
	public var dVal :Date;
	public var sVal :String;
	public var bVal :Boolean;
	public var oVal :Object;
	public var aiVal :Array<Integer>;
	public var afVal :Array<Float>;
	public var atVal :Array<Time>;
	public var adVal :Array<Date>;
	public var asVal :Array<String>;
	public var abVal :Array<Boolean>;
	public var aoVal :Array<Object>;
} //CocoVariant

class TOKEN_KIND_ENUM
{
	public var TOKEN_EOF :TOKEN_KIND_ENUM;
	public var TOKEN_WHITESPACE :TOKEN_KIND_ENUM;
	public var TOKEN_COMMENT :TOKEN_KIND_ENUM;
	public var TOKEN_OPERATOR :TOKEN_KIND_ENUM;
	public var TOKEN_NUMBER :TOKEN_KIND_ENUM;
	public var TOKEN_STRING :TOKEN_KIND_ENUM;
	public var TOKEN_KEYWORD :TOKEN_KIND_ENUM;
	public var TOKEN_IDENTIFIER :TOKEN_KIND_ENUM;
	public var TOKEN_TEXT :TOKEN_KIND_ENUM;
} //TOKEN_KIND_ENUM

class TOKEN_RULE
{
	public function toJSON() :String {}
	public var name :String;
	public var pattern :String;
	public var kind :TOKEN_KIND_ENUM;
	public var rx :RegExp;
} //TOKEN_RULE

class TOKEN
{
	public function toJSON() :String {}
	public var type :String;
	public var value :String;
	public var start :Integer;
	public var end :Integer;
	public var line_start :Integer;
	public var line_end :Integer;
} //TOKEN

class COCO_PARSER_STATE
{
	public function toJSON() :String {}
	public var cursor :Integer;
	public var tokenIndex :Integer;
	public var lookahead :Integer;
	public var scanNewlines :Boolean;
	public var line_start :Integer;
	public var scopeId :Integer;
} //COCO_PARSER_STATE

class CocoTokenizer
{
	public function AddTokenRule(name:String, kind:TOKEN_KIND_ENUM, pattern:String) {}
	private function getTokenRule(name:String) :TOKEN_RULE {}
	public function save() {}
	public function restore() {}
	public function get() :String {}
	public function parse(source:String) :CocoDOMDocument {}
	public function NewScopeId() :Integer {}
	public function ScopeId() :Integer {}
	public function input() :String {}
	public function done() :Boolean {}
	public function token() :TOKEN {}
	public function match(tt:String) :Boolean {}
	public function mustMatch(tt:String) :TOKEN {}
	public function peek() :String {}
	public function peekOnSameLine() :String {}
	public function unget() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var HAS_COMMENTS_RULE :Boolean;
	public  var tokenRules :Array<TOKEN_RULE>;
	public  var tokenRulesPrecedence :Array<TOKEN_KIND_ENUM>;
	public  var source :String;
	public  var currState :COCO_PARSER_STATE;
	public  var states :Array<COCO_PARSER_STATE>;
	public  var tokens :Array<TOKEN>;
	private  var rxCRLF :RegExp;
	private  var rxCOMMENT :RegExp;
	private  var rxFLOAT :RegExp;
	private  var rxNUMBER :RegExp;
	private  var rxIDENTIFIER :RegExp;
	private  var rxSTRING :RegExp;
	private  var rxNewLines :RegExp;
	public  var __className :String;
} //CocoTokenizer

class CocoJSONParser : CocoTokenizer
{
	public function parse(source:String) :CocoDOMDocument {}
	private function parse_object(p:CocoDOMNode) {}
	private function parse_array(p:CocoDOMNode) {}
	private function parse_value(p:CocoDOMNode) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoJSONParser

class CocoXMLParser : CocoTokenizer
{
	public function parse(source:String) :CocoDOMDocument {}
	private function parse_tag(p:CocoDOMNode) :CocoDOMNode {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoXMLParser

class CocoXPathParser : CocoTokenizer
{
	public function select(xPath:String, xDOM:CocoDOMDocument) :Array<CocoDOMNode> {}
	private function visit_node(ctx:CocoDOMNode) {}
	private function visit_children(ctx:CocoDOMNode) {}
	private function visit_attribute(ctx:CocoDOMNode) {}
	private function push_node(n:CocoDOMNode) {}
	public function Destructor() {}
	public function Constructor() {}
	private  var xDOM :CocoDOMDocument;
	private  var result :Array<CocoDOMNode>;
	public  var __className :String;
} //CocoXPathParser

class CocoDOMAttribute
{
	public function toJSON() :String {}
	public var name :String;
	public var value :String;
} //CocoDOMAttribute

class CocoDOMNode
{
	public function appendChild(node:CocoDOMNode) :CocoDOMNode {}
	public function removeChild(node:CocoDOMNode) :CocoDOMNode {}
	public function setAttribute(name:String, value:String) {}
	public function getAttribute(name:String) :String {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var parent :CocoDOMNode;
	public  var nodeName :String;
	public  var nodeValue :String;
	public  var children :Array<CocoDOMNode>;
	public  var attributes :Array<CocoDOMAttribute>;
	public  var __className :String;
} //CocoDOMNode

class CocoDOMDocument : CocoDOMNode
{
	public function all() :Array<CocoDOMNode> {}
	private function node_all(n:CocoDOMNode, arr:Array<CocoDOMNode>) {}
	public function selectSingleNode(xPath:String) :CocoDOMNode {}
	public function selectNodes(xPath:String) :Array<CocoDOMNode> {}
	public function toXML() :String {}
	private function nodeXML(n:CocoDOMNode, tabs:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var root :CocoDOMNode;
	private  var out :Array<String>;
	public  var __className :String;
} //CocoDOMDocument

class Encode
{
} //Encode

class CocoEncode
{
	public function HTMLEncode(Text:String) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoEncode

class RX
{
} //RX

class REGULAR_EXPRESSION_FLAGS
{
	public var RX_IGNORE_CASE :REGULAR_EXPRESSION_FLAGS;
	public var RX_MULTILINE :REGULAR_EXPRESSION_FLAGS;
	public var RX_GLOBAL :REGULAR_EXPRESSION_FLAGS;
	public var RX_ALL :REGULAR_EXPRESSION_FLAGS;
} //REGULAR_EXPRESSION_FLAGS

class Match
{
	public function subMatches(index:Integer) :String {}
	public function Destructor() {}
	public function Constructor(arr:ECMARegExpMatches) {}
	public  var index :Integer;
	public  var value :String;
	public  var length :Integer;
	private  var submatches :Array<String>;
	public  var __className :String;
} //Match

class MatchCollection : Array
{
	public function size() :Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //MatchCollection

class RegEx
{
	public function toPattern(string:String) :String {}
	private function init(pattern:String, flags:REGULAR_EXPRESSION_FLAGS) {}
	public function parse(buff:String, pattern:String, flags:REGULAR_EXPRESSION_FLAGS) :MatchCollection {}
	public function test(buff:String, pattern:String, flags:REGULAR_EXPRESSION_FLAGS) :Boolean {}
	public function replace(buff:String, findPattern:String, replacePattern:String, flags:REGULAR_EXPRESSION_FLAGS) :String {}
	public function Destructor() {}
	public function Constructor(pattern:String, flags:REGULAR_EXPRESSION_FLAGS) {}
	private  var rx :RegExp;
	public  var __className :String;
} //RegEx

class PathLine
{
	public function Destructor() {}
	public function Constructor(_x0:Float, _y0:Float, _x1:Float, _y1:Float) {}
	public  var x0 :Float;
	public  var y0 :Float;
	public  var x1 :Float;
	public  var y1 :Float;
	public  var __className :String;
} //PathLine

class HTMLCanvasPattern
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLCanvasPattern

class HTMLCanvasGradient
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLCanvasGradient

class HTMLTextMetrics
{
	public function Destructor() {}
	public function Constructor() {}
	public  var width :Float;
	public  var __className :String;
} //HTMLTextMetrics

class CanvasRenderingContext2D
{
	public function clip() {}
	public function closePath() {}
	public function createPattern(image:Image, repetition:String) :HTMLCanvasPattern {}
	public function drawCustomFocusRing(element:HTMLElement) :Boolean {}
	public function drawSystemFocusRing(element:HTMLElement) {}
	public function getLineDash() {}
	public function isPointInPath(x:Float, y:Float) :Boolean {}
	public function isPointInStroke(x:Float, y:Float) :Boolean {}
	public function scrollPathIntoView() {}
	public function setLineDash(segments:Array<Float>) {}
	public function strokeRect(x:Float, y:Float, w:Float, h:Float) {}
	public function strokeText(text:String, x:Float, y:Float, maxWidth:Float) {}
	public function restore() {}
	public function save() {}
	public function scale(x:Float, y:Float) {}
	public function translate(x:Float, y:Float) {}
	public function rotate(angle:Float) {}
	public function createLinearGradient(x0:Float, y0:Float, x1:Float, y1:Float) :HTMLCanvasGradient {}
	public function createRadialGradient(x0:Float, y0:Float, r0:Float, x1:Float, y1:Float, r1:Float) :HTMLCanvasGradient {}
	public function arc(x:Float, y:Float, radius:Float, startAngle:Float, endAngle:Float, anticlockwise:Boolean) {}
	public function arcTo(x1:Float, y1:Float, x2:Float, y2:Float, radius:Float) {}
	public function bezierCurveTo(cp1x:Float, cp1y:Float, cp2x:Float, cp2y:Float, x:Float, y:Float) {}
	public function quadraticCurveTo(cpx:Float, cpy:Float, x:Float, y:Float) {}
	public function rect(x:Float, y:Float, width:Float, height:Float) {}
	public function fill() {}
	public function setTransform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float) {}
	public function transform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float) {}
	public function beginPath() {}
	public function moveTo(x:Float, y:Float) {}
	public function lineTo(x:Float, y:Float) {}
	public function stroke() {}
	public function fillText(text:String, x:Float, y:Float, maxWidth:Float) {}
	public function fillRect(x:Float, y:Float, width:Float, height:Float) {}
	public function clearRect(x:Float, y:Float, width:Float, height:Float) {}
	public function measureText(text:String) :HTMLTextMetrics {}
	public function drawImage(image:Image, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function drawImage$1(image:Image, dx:Float, dy:Float) {}
	public function drawImage$2(image:Image, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function drawImage$3(image:HTMLCanvasElement, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function drawImageNearestNeighbour(image:Image, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float, blend:Boolean) {}
	public function createImageData(sw:Float, sh:Float) :ImageData {}
	public function createImageData$1(imagedata:ImageData) :ImageData {}
	public function getImageData(sx:Float, sy:Float, sw:Float, sh:Float) :ImageData {}
	public function putImageData(imagedata:ImageData, dx:Float, dy:Float) {}
	public function putImageData1(imagedata:ImageData, dx:Float, dy:Float, dirtyX:Float, dirtyY:Float, dirtyWidth:Float, dirtyHeight:Float) {}
	public function Destructor() {}
	public function Constructor(canvas:HTMLCanvasElement) {}
	public  var canvas :HTMLCanvasElement;
	public  var DRAWWINDOW_DRAW_CARET :Integer;
	public  var DRAWWINDOW_DO_NOT_FLUSH :Integer;
	public  var DRAWWINDOW_DRAW_VIEW :Integer;
	public  var DRAWWINDOW_USE_WIDGET_LAYERS :Integer;
	public  var DRAWWINDOW_ASYNC_DECODE_IMAGES :Integer;
	public  var globalAlpha :Float;
	public  var lineCap :String;
	public  var lineDashOffset :Float;
	public  var lineJoin :String;
	public  var miterLimit :Float;
	public  var shadowBlur :Float;
	public  var shadowColor :String;
	public  var shadowOffsetX :Float;
	public  var shadowOffsetY :Float;
	public  var textAlign :String;
	public  var textBaseline :String;
	public  var globalCompositeOperation :String;
	public  var imageSmoothingEnabled :Boolean;
	public  var webkitImageSmoothingEnabled :Boolean;
	public  var oImageSmoothingEnabled :Boolean;
	public  var mozImageSmoothingEnabled :Boolean;
	private  var __lineWidth :Float;
	private  var __fillStyle :String;
	private  var __fillColor :Array<Float>;
	private  var __strokeStyle :String;
	private  var __strokeColor :Array<Float>;
	private  var __fontSetting :String;
	private  var __font :CocoFont;
	private  var __curX :Float;
	private  var __curY :Float;
	private  var __pathLines :Array<PathLine>;
	private  var __m11 :Float;
	private  var __m12 :Float;
	private  var __m21 :Float;
	private  var __m22 :Float;
	private  var __dx :Float;
	private  var __dy :Float;
	public  var fillStyle :String;
	public  var strokeStyle :String;
	public  var lineWidth :Float;
	public  var font :String;
	public  var __className :String;
} //CanvasRenderingContext2D

class Audio
{
	public function play() {}
	public function pause() {}
	public function Destructor() {}
	public function Constructor(url:String) {}
	private  var __uid :Integer;
	private  var __currentTime :Time;
	public  var duration :Float;
	public  var paused :Boolean;
	public  var ended :Boolean;
	public  var autoplay :Boolean;
	public  var loop :Boolean;
	public  var src :String;
	public  var currentTime :Float;
	public  var readyState :Integer;
	public  var __className :String;
} //Audio

class ContextArguments
{
	public function toJSON() :String {}
	public var stencil :Boolean;
} //ContextArguments

class HTMLCanvasElement : HTMLElement
{
	public function getContext(contextId:String, args:ContextArguments) :Object {}
	public function toDataURL(mime:String) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public  var width :Float;
	public  var height :Float;
	public  var __imageData :ImageData;
	private  var c2d :CanvasRenderingContext2D;
	private  var gl :WebGLRenderingContext;
	public  var __className :String;
} //HTMLCanvasElement

class HTMLDocument
{
	public function __add(el:HTMLElement) {}
	public function __remove(el:HTMLElement) {}
	public function createElement(tagName:String) :HTMLElement {}
	public function getElementById(id:String) :HTMLElement {}
	public function Destructor() {}
	public function Constructor() {}
	public  var body :HTMLElement;
	public  var all :Array<HTMLElement>;
	public  var __className :String;
} //HTMLDocument

class OnClickHandler : Function
{
} //OnClickHandler

class HTMLElement
{
	public function appendChild(node:HTMLElement) :HTMLElement {}
	public function replaceChild(newChild:HTMLElement, oldChild:HTMLElement) :HTMLElement {}
	public function removeChild(node:HTMLElement) :HTMLElement {}
	public function setAttribute(name:String, value:String) {}
	public function getAttribute(name:String) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public  var id :String;
	public  var offsetWidth :Float;
	public  var offsetHeight :Float;
	public  var innerHTML :String;
	public  var style :HTMLStyleElement;
	public  var parentNode :HTMLElement;
	public  var document :HTMLDocument;
	public  var onclick :OnClickHandler;
	public  var parentElement :HTMLElement;
	public  var __className :String;
} //HTMLElement

class HTMLStyleElement
{
	public function Destructor() {}
	public function Constructor() {}
	public  var cssText :String;
	public  var backfaceVisibility :String;
	public  var background :String;
	public  var backgroundAttachment :String;
	public  var backgroundBlendMode :String;
	public  var backgroundClip :String;
	public  var backgroundColor :String;
	public  var backgroundImage :String;
	public  var backgroundOrigin :String;
	public  var backgroundPosition :String;
	public  var backgroundPositionX :String;
	public  var backgroundPositionY :String;
	public  var backgroundRepeat :String;
	public  var backgroundRepeatX :String;
	public  var backgroundRepeatY :String;
	public  var backgroundSize :String;
	public  var baselineShift :String;
	public  var border :String;
	public  var borderBottom :String;
	public  var borderBottomColor :String;
	public  var borderBottomLeftRadius :String;
	public  var borderBottomRightRadius :String;
	public  var borderBottomStyle :String;
	public  var borderBottomWidth :String;
	public  var borderCollapse :String;
	public  var borderColor :String;
	public  var borderImage :String;
	public  var borderImageOutset :String;
	public  var borderImageRepeat :String;
	public  var borderImageSlice :String;
	public  var borderImageSource :String;
	public  var borderImageWidth :String;
	public  var borderLeft :String;
	public  var borderLeftColor :String;
	public  var borderLeftStyle :String;
	public  var borderLeftWidth :String;
	public  var borderRadius :String;
	public  var borderRight :String;
	public  var borderRightColor :String;
	public  var borderRightStyle :String;
	public  var borderRightWidth :String;
	public  var borderSpacing :Float;
	public  var borderStyle :String;
	public  var borderTop :String;
	public  var borderTopColor :String;
	public  var borderTopLeftRadius :String;
	public  var borderTopRightRadius :String;
	public  var borderTopStyle :String;
	public  var borderTopWidth :String;
	public  var borderWidth :Float;
	public  var bottom :String;
	public  var boxShadow :String;
	public  var boxSizing :String;
	public  var bufferedRendering :String;
	public  var captionSide :String;
	public  var clear :String;
	public  var clip :String;
	public  var clipPath :String;
	public  var clipRule :String;
	public  var color :String;
	public  var colorInterpolation :String;
	public  var colorInterpolationFilters :String;
	public  var colorRendering :String;
	public  var content :String;
	public  var counterIncrement :String;
	public  var counterReset :String;
	public  var cursor :String;
	public  var direction :String;
	public  var display :String;
	public  var dominantBaseline :String;
	public  var emptyCells :String;
	public  var enableBackground :String;
	public  var fill :String;
	public  var fillOpacity :String;
	public  var fillRule :String;
	public  var filter :String;
	public  var flex :String;
	public  var flexBasis :String;
	public  var flexDirection :String;
	public  var flexFlow :String;
	public  var flexGrow :String;
	public  var flexShrink :String;
	public  var flexWrap :String;
	public  var floodColor :String;
	public  var floodOpacity :String;
	public  var font :String;
	public  var fontFamily :String;
	public  var fontKerning :String;
	public  var fontSize :String;
	public  var fontStretch :String;
	public  var fontStyle :String;
	public  var fontVariant :String;
	public  var fontVariantLigatures :String;
	public  var fontWeight :String;
	public  var glyphOrientationHorizontal :String;
	public  var glyphOrientationVertical :String;
	public  var height :String;
	public  var imageRendering :String;
	public  var justifyContent :String;
	public  var left :String;
	public  var letterSpacing :String;
	public  var lightingColor :String;
	public  var lineHeight :String;
	public  var listStyle :String;
	public  var listStyleImage :String;
	public  var listStylePosition :String;
	public  var listStyleType :String;
	public  var margin :String;
	public  var marginBottom :String;
	public  var marginLeft :String;
	public  var marginRight :String;
	public  var marginTop :String;
	public  var marker :String;
	public  var markerEnd :String;
	public  var markerMid :String;
	public  var markerStart :String;
	public  var mask :String;
	public  var maskType :String;
	public  var maxHeight :String;
	public  var maxWidth :String;
	public  var maxZoom :String;
	public  var minHeight :String;
	public  var minWidth :String;
	public  var minZoom :String;
	public  var objectFit :String;
	public  var objectPosition :String;
	public  var opacity :Float;
	public  var order :String;
	public  var orientation :String;
	public  var orphans :String;
	public  var outline :String;
	public  var outlineColor :String;
	public  var outlineOffset :String;
	public  var outlineStyle :String;
	public  var outlineWidth :String;
	public  var overflow :String;
	public  var overflowWrap :String;
	public  var overflowX :String;
	public  var overflowY :String;
	public  var padding :String;
	public  var paddingBottom :String;
	public  var paddingLeft :String;
	public  var paddingRight :String;
	public  var paddingTop :String;
	public  var page :String;
	public  var pageBreakAfter :String;
	public  var pageBreakBefore :String;
	public  var pageBreakInside :String;
	public  var paintOrder :String;
	public  var perspective :String;
	public  var perspectiveOrigin :String;
	public  var pointerEvents :String;
	public  var position :String;
	public  var quotes :String;
	public  var resize :String;
	public  var right :String;
	public  var shapeImageThreshold :String;
	public  var shapeMargin :String;
	public  var shapeOutside :String;
	public  var shapeRendering :String;
	public  var size :String;
	public  var speak :String;
	public  var src :String;
	public  var stopColor :String;
	public  var stopOpacity :String;
	public  var stroke :String;
	public  var strokeDasharray :String;
	public  var strokeDashoffset :String;
	public  var strokeLinecap :String;
	public  var strokeLinejoin :String;
	public  var strokeMiterlimit :String;
	public  var strokeOpacity :String;
	public  var strokeWidth :String;
	public  var tabSize :String;
	public  var tableLayout :String;
	public  var textAlign :String;
	public  var textAnchor :String;
	public  var textDecoration :String;
	public  var textIndent :String;
	public  var textLineThroughColor :String;
	public  var textLineThroughMode :String;
	public  var textLineThroughStyle :String;
	public  var textLineThroughWidth :String;
	public  var textOverflow :String;
	public  var textOverlineColor :String;
	public  var textOverlineMode :String;
	public  var textOverlineStyle :String;
	public  var textOverlineWidth :String;
	public  var textRendering :String;
	public  var textShadow :String;
	public  var textTransform :String;
	public  var textUnderlineColor :String;
	public  var textUnderlineMode :String;
	public  var textUnderlineStyle :String;
	public  var textUnderlineWidth :String;
	public  var top :String;
	public  var touchAction :String;
	public  var transform :String;
	public  var transformOrigin :String;
	public  var transformStyle :String;
	public  var transition :String;
	public  var transitionDelay :String;
	public  var transitionDuration :String;
	public  var transitionProperty :String;
	public  var transitionTimingFunction :String;
	public  var unicodeBidi :String;
	public  var unicodeRange :String;
	public  var userZoom :String;
	public  var vectorEffect :String;
	public  var verticalAlign :String;
	public  var visibility :String;
	public  var webkitAnimation :String;
	public  var webkitAnimationDelay :String;
	public  var webkitAnimationDirection :String;
	public  var webkitAnimationDuration :String;
	public  var webkitAnimationFillMode :String;
	public  var webkitAnimationIterationCount :String;
	public  var webkitAnimationName :String;
	public  var webkitAnimationPlayState :String;
	public  var webkitAnimationTimingFunction :String;
	public  var webkitAppRegion :String;
	public  var webkitAppearance :String;
	public  var webkitAspectRatio :String;
	public  var webkitBackfaceVisibility :String;
	public  var webkitBackgroundClip :String;
	public  var webkitBackgroundComposite :String;
	public  var webkitBackgroundOrigin :String;
	public  var webkitBackgroundSize :String;
	public  var webkitBorderAfter :String;
	public  var webkitBorderAfterColor :String;
	public  var webkitBorderAfterStyle :String;
	public  var webkitBorderAfterWidth :String;
	public  var webkitBorderBefore :String;
	public  var webkitBorderBeforeColor :String;
	public  var webkitBorderBeforeStyle :String;
	public  var webkitBorderBeforeWidth :String;
	public  var webkitBorderEnd :String;
	public  var webkitBorderEndColor :String;
	public  var webkitBorderEndStyle :String;
	public  var webkitBorderEndWidth :String;
	public  var webkitBorderFit :String;
	public  var webkitBorderHorizontalSpacing :String;
	public  var webkitBorderImage :String;
	public  var webkitBorderRadius :String;
	public  var webkitBorderStart :String;
	public  var webkitBorderStartColor :String;
	public  var webkitBorderStartStyle :String;
	public  var webkitBorderStartWidth :String;
	public  var webkitBorderVerticalSpacing :String;
	public  var webkitBoxAlign :String;
	public  var webkitBoxDecorationBreak :String;
	public  var webkitBoxDirection :String;
	public  var webkitBoxFlex :String;
	public  var webkitBoxFlexGroup :String;
	public  var webkitBoxLines :String;
	public  var webkitBoxOrdinalGroup :String;
	public  var webkitBoxOrient :String;
	public  var webkitBoxPack :String;
	public  var webkitBoxReflect :String;
	public  var webkitBoxShadow :String;
	public  var webkitClipPath :String;
	public  var webkitColumnBreakAfter :String;
	public  var webkitColumnBreakBefore :String;
	public  var webkitColumnBreakInside :String;
	public  var webkitColumnCount :String;
	public  var webkitColumnGap :String;
	public  var webkitColumnRule :String;
	public  var webkitColumnRuleColor :String;
	public  var webkitColumnRuleStyle :String;
	public  var webkitColumnRuleWidth :String;
	public  var webkitColumnSpan :String;
	public  var webkitColumnWidth :String;
	public  var webkitColumns :String;
	public  var webkitFilter :String;
	public  var webkitFontFeatureSettings :String;
	public  var webkitFontSizeDelta :String;
	public  var webkitFontSmoothing :String;
	public  var webkitHighlight :String;
	public  var webkitHyphenateCharacter :String;
	public  var webkitLineBoxContain :String;
	public  var webkitLineBreak :String;
	public  var webkitLineClamp :String;
	public  var webkitLocale :String;
	public  var webkitLogicalHeight :String;
	public  var webkitLogicalWidth :String;
	public  var webkitMarginAfter :String;
	public  var webkitMarginAfterCollapse :String;
	public  var webkitMarginBefore :String;
	public  var webkitMarginBeforeCollapse :String;
	public  var webkitMarginBottomCollapse :String;
	public  var webkitMarginCollapse :String;
	public  var webkitMarginEnd :String;
	public  var webkitMarginStart :String;
	public  var webkitMarginTopCollapse :String;
	public  var webkitMask :String;
	public  var webkitMaskBoxImage :String;
	public  var webkitMaskBoxImageOutset :String;
	public  var webkitMaskBoxImageRepeat :String;
	public  var webkitMaskBoxImageSlice :String;
	public  var webkitMaskBoxImageSource :String;
	public  var webkitMaskBoxImageWidth :String;
	public  var webkitMaskClip :String;
	public  var webkitMaskComposite :String;
	public  var webkitMaskImage :String;
	public  var webkitMaskOrigin :String;
	public  var webkitMaskPosition :String;
	public  var webkitMaskPositionX :String;
	public  var webkitMaskPositionY :String;
	public  var webkitMaskRepeat :String;
	public  var webkitMaskRepeatX :String;
	public  var webkitMaskRepeatY :String;
	public  var webkitMaskSize :String;
	public  var webkitMaxLogicalHeight :String;
	public  var webkitMaxLogicalWidth :String;
	public  var webkitMinLogicalHeight :String;
	public  var webkitMinLogicalWidth :String;
	public  var webkitPaddingAfter :String;
	public  var webkitPaddingBefore :String;
	public  var webkitPaddingEnd :String;
	public  var webkitPaddingStart :String;
	public  var webkitPerspective :String;
	public  var webkitPerspectiveOrigin :String;
	public  var webkitPerspectiveOriginX :String;
	public  var webkitPerspectiveOriginY :String;
	public  var webkitPrintColorAdjust :String;
	public  var webkitRtlOrdering :String;
	public  var webkitRubyPosition :String;
	public  var webkitTapHighlightColor :String;
	public  var webkitTextCombine :String;
	public  var webkitTextDecorationsInEffect :String;
	public  var webkitTextEmphasis :String;
	public  var webkitTextEmphasisColor :String;
	public  var webkitTextEmphasisPosition :String;
	public  var webkitTextEmphasisStyle :String;
	public  var webkitTextFillColor :String;
	public  var webkitTextOrientation :String;
	public  var webkitTextSecurity :String;
	public  var webkitTextStroke :String;
	public  var webkitTextStrokeColor :String;
	public  var webkitTextStrokeWidth :String;
	public  var webkitTransform :String;
	public  var webkitTransformOrigin :String;
	public  var webkitTransformOriginX :String;
	public  var webkitTransformOriginY :String;
	public  var webkitTransformOriginZ :String;
	public  var webkitTransformStyle :String;
	public  var webkitTransition :String;
	public  var webkitTransitionDelay :String;
	public  var webkitTransitionDuration :String;
	public  var webkitTransitionProperty :String;
	public  var webkitTransitionTimingFunction :String;
	public  var webkitUserDrag :String;
	public  var webkitUserModify :String;
	public  var webkitUserSelect :String;
	public  var webkitWritingMode :String;
	public  var whiteSpace :String;
	public  var widows :String;
	public  var width :String;
	public  var willChange :String;
	public  var wordBreak :String;
	public  var wordSpacing :String;
	public  var wordWrap :String;
	public  var writingMode :String;
	public  var zIndex :Integer;
	public  var zoom :String;
	public  var __className :String;
} //HTMLStyleElement

class HTMLDivElement : HTMLElement
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLDivElement

class HTMLAnchorElement : HTMLElement
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLAnchorElement

class Image : HTMLElement
{
	public function load(url:String, cocoimage:CocoImage) {}
	public function cloneNode(deep:Boolean) :Image {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __imageData :ImageData;
	public  var src :String;
	public  var width :Float;
	public  var height :Float;
	public  var naturalWidth :Float;
	public  var naturalHeight :Float;
	public  var crossOrigin :String;
	private  var __complete :Boolean;
	public  var complete :Boolean;
	public  var __className :String;
} //Image

class HTMLVideoElement : HTMLElement
{
	private function resize() {}
	public function play() {}
	public function pause() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __imageData :ImageData;
	private  var __uid :Integer;
	private  var __currentTime :Time;
	private  var __width :Float;
	private  var __height :Float;
	public  var duration :Float;
	public  var paused :Boolean;
	public  var ended :Boolean;
	public  var autoplay :Boolean;
	public  var loop :Boolean;
	private  var __src :String;
	public  var src :String;
	public  var width :Float;
	public  var height :Float;
	public  var currentTime :Float;
	public  var readyState :Integer;
	public  var __className :String;
} //HTMLVideoElement

class HTMLWindow
{
	public function addEventListener(eventType:String, listener:Function, useCapture:Boolean) {}
	public function removeEventListener(eventType:String, listener:Function, useCapture:Boolean) {}
	public function dispatchEvent(uid:Integer, eventType:String) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __uid :Integer;
	public  var document :HTMLDocument;
	public  var location :HTMLLocation;
	public  var navigator :HTMLNavigator;
	public  var screen :HTMLScreen;
	public  var innerHeight :Float;
	public  var innerWidth :Float;
	public  var devicePixelRatio :Float;
	public  var orientation :Integer;
	public  var __elements :Array<Function>;
	public  var e :HTMLEvent;
	public  var __className :String;
} //HTMLWindow

class HTMLLocation
{
	public function Destructor() {}
	public function Constructor() {}
	public  var href :String;
	public  var search :String;
	public  var __className :String;
} //HTMLLocation

class HTMLScreen
{
	public function Destructor() {}
	public function Constructor() {}
	public  var width :Float;
	public  var height :Float;
	public  var availWidth :Float;
	public  var availHeight :Float;
	public  var __className :String;
} //HTMLScreen

class HTMLNavigator
{
	public function Destructor() {}
	public function Constructor() {}
	public  var userAgent :String;
	public  var __className :String;
} //HTMLNavigator

class ImageData
{
	public function Destructor() {}
	public function Constructor(a0:String, a1:String) {}
	public  var data :Uint8Array;
	public  var src :String;
	public  var width :Float;
	public  var height :Float;
	public  var __className :String;
} //ImageData

class WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __uid :Integer;
	public  var __className :String;
} //WebGLObject

class WebGLActiveInfo : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, program_uid:Integer, index:Integer) {}
	public  var __className :String;
} //WebGLActiveInfo

class WebGLBuffer : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLBuffer

class WebGLContextAttributes : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLContextAttributes

class WebGLFramebuffer : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLFramebuffer

class WebGLProgram : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var GLSLiTexCoords :Integer;
	public  var GLSLiVec2Coords :Integer;
	public  var GLSLiVecCoords :Integer;
	public  var GLSLuColor :WebGLUniformLocation;
	public  var GLSLuAlpha :WebGLUniformLocation;
	public  var GLSLuMVMat :WebGLUniformLocation;
	public  var GLSLuProjMat :WebGLUniformLocation;
	public  var GLSLuSampler :WebGLUniformLocation;
	public  var GLSLuSprFrame :WebGLUniformLocation;
	public  var GLSLuSprSize :WebGLUniformLocation;
	public  var GLSLuSprFlip :WebGLUniformLocation;
	public  var __className :String;
} //WebGLProgram

class WebGLRenderbuffer : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLRenderbuffer

class WebGLRenderingContext
{
	public function activeTexture(texture:Integer) {}
	public function attachShader(program:WebGLProgram, shader:WebGLShader) {}
	public function bindAttribLocation(program:WebGLProgram, index:Integer, name:String) {}
	public function bindBuffer(target:Integer, buffer:WebGLBuffer) {}
	public function bindFramebuffer(target:Integer, framebuffer:WebGLFramebuffer) {}
	public function bindRenderbuffer(target:Integer, renderbuffer:WebGLRenderbuffer) {}
	public function bindTexture(target:Integer, texture:WebGLTexture) {}
	public function blendColor(red:Float, green:Float, blue:Float, alpha:Float) {}
	public function blendEquation(mode:Integer) {}
	public function blendEquationSeparate(modeRGB:Integer, modeAlpha:Integer) {}
	public function blendFunc(sfactor:Integer, dfactor:Integer) {}
	public function blendFuncSeparate(srcRGB:Integer, dstRGB:Integer, srcAlpha:Integer, dstAlpha:Integer) {}
	public function bufferData(target:Integer, data:Float32Array, usage:Integer) {}
	public function bufferSubData(target:Integer, offset:Integer, data:Float32Array) {}
	public function checkFramebufferStatus(target:Integer) :Integer {}
	public function clear(mask:Integer) {}
	public function clearColor(red:Float, green:Float, blue:Float, alpha:Float) {}
	public function clearDepth(depth:Float) {}
	public function clearStencil(s:Integer) {}
	public function colorMask(red:Boolean, green:Boolean, blue:Boolean, alpha:Boolean) {}
	public function compileShader(shader:WebGLShader) {}
	public function compressedTexImage2D(target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, data:Float32Array) {}
	public function compressedTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, data:Float32Array) {}
	public function copyTexImage2D(target:Integer, level:Integer, internalformat:Integer, x:Integer, y:Integer, width:Integer, height:Integer, border:Integer) {}
	public function copyTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function createBuffer() :WebGLBuffer {}
	public function createFramebuffer() :WebGLFramebuffer {}
	public function createProgram() :WebGLProgram {}
	public function createRenderbuffer() :WebGLRenderbuffer {}
	public function createShader(type:Integer) :WebGLShader {}
	public function createTexture() :WebGLTexture {}
	public function cullFace(mode:Integer) {}
	public function deleteBuffer(buffer:WebGLBuffer) {}
	public function deleteFramebuffer(framebuffer:WebGLFramebuffer) {}
	public function deleteProgram(program:WebGLProgram) {}
	public function deleteRenderbuffer(renderbuffer:WebGLRenderbuffer) {}
	public function deleteShader(shader:WebGLShader) {}
	public function deleteTexture(texture:WebGLTexture) {}
	public function depthFunc(func:Integer) {}
	public function depthMask(flag:Boolean) {}
	public function depthRange(zNear:Float, zFar:Float) {}
	public function detachShader(program:WebGLProgram, shader:WebGLShader) {}
	public function disable(cap:Integer) {}
	public function disableVertexAttribArray(index:Integer) {}
	public function drawArrays(mode:Integer, first:Integer, count:Integer) {}
	public function drawElements(mode:Integer, count:Integer, type:Integer, offset:Integer) {}
	public function enable(cap:Integer) {}
	public function enableVertexAttribArray(index:Integer) {}
	public function finish() {}
	public function flush() {}
	public function framebufferRenderbuffer(target:Integer, attachment:Integer, renderbuffertarget:Integer, renderbuffer:WebGLRenderbuffer) {}
	public function framebufferTexture2D(target:Integer, attachment:Integer, textarget:Integer, texture:WebGLTexture, level:Integer) {}
	public function frontFace(mode:Integer) {}
	public function generateMipmap(target:Integer) {}
	public function getActiveAttrib(program:WebGLProgram, index:Integer) :WebGLActiveInfo {}
	public function getActiveUniform(program:WebGLProgram, index:Integer) :WebGLActiveInfo {}
	public function getAttachedShaders(program:WebGLProgram) :Array<WebGLShader> {}
	public function getAttribLocation(program:WebGLProgram, name:String) :Integer {}
	public function getBufferParameter(target:Integer, pname:Integer) :String {}
	public function getContextAttributes() :WebGLContextAttributes {}
	public function getError() :Integer {}
	public function getExtension(name:String) :Object {}
	public function getFramebufferAttachmentParameter(target:Integer, attachment:Integer, pname:Integer) :String {}
	public function getParameter(pname:Integer) :String {}
	public function getProgramInfoLog(program:WebGLProgram) :String {}
	public function getProgramParameter(program:WebGLProgram, pname:Integer) :Boolean {}
	public function getRenderbufferParameter(target:Integer, pname:Integer) :String {}
	public function getShaderInfoLog(shader:WebGLShader) :String {}
	public function getShaderParameter_boolean(shader:WebGLShader, pname:Integer) :Boolean {}
	public function getShaderParameter_enum(shader:WebGLShader, pname:Integer) :Integer {}
	public function getShaderPrecisionFormat(shadertype:Integer, precisiontype:Integer) :WebGLShaderPrecisionFormat {}
	public function getShaderSource(shader:WebGLShader) :String {}
	public function getSupportedExtensions() :Array<String> {}
	public function getTexParameter(target:Integer, pname:Integer) :String {}
	public function getUniform(program:WebGLProgram, location:WebGLUniformLocation) :String {}
	public function getUniformLocation(program:WebGLProgram, name:String) :WebGLUniformLocation {}
	public function getVertexAttrib(index:Integer, pname:Integer) :String {}
	public function getVertexAttribOffset(index:Integer, pname:Integer) :Integer {}
	public function hint(target:Integer, mode:Integer) {}
	public function isBuffer(buffer:WebGLBuffer) :Boolean {}
	public function isContextLost() :Boolean {}
	public function isEnabled(cap:Integer) :Boolean {}
	public function isFramebuffer(framebuffer:WebGLFramebuffer) :Boolean {}
	public function isProgram(program:WebGLProgram) :Boolean {}
	public function isRenderbuffer(renderbuffer:WebGLRenderbuffer) :Boolean {}
	public function isShader(shader:WebGLShader) :Boolean {}
	public function isTexture(texture:WebGLTexture) :Boolean {}
	public function lineWidth(width:Float) {}
	public function linkProgram(program:WebGLProgram) {}
	public function pixelStorei(pname:Integer, param:Integer) {}
	public function polygonOffset(factor:Float, units:Float) {}
	public function readPixels(x:Integer, y:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array) {}
	public function renderbufferStorage(target:Integer, internalformat:Integer, width:Integer, height:Integer) {}
	public function sampleCoverage(value:Float, invert:Boolean) {}
	public function scissor(x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function shaderSource(shader:WebGLShader, source:String) {}
	public function stencilFunc(func:Integer, ref:Integer, mask:Integer) {}
	public function stencilFuncSeparate(face:Integer, func:Integer, ref:Integer, mask:Integer) {}
	public function stencilMask(mask:Integer) {}
	public function stencilMaskSeparate(face:Integer, mask:Integer) {}
	public function stencilOp(fail:Integer, zfail:Integer, zpass:Integer) {}
	public function stencilOpSeparate(face:Integer, fail:Integer, zfail:Integer, zpass:Integer) {}
	public function texImage2D(target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, format:Integer, type:Integer, pixels:ArrayBufferView) {}
	public function texImage2D$1(target:Integer, level:Integer, internalformat:Integer, format:Integer, type:Integer, image:Image) {}
	public function texImage2D$2(target:Integer, level:Integer, internalformat:Integer, format:Integer, type:Integer, video:HTMLVideoElement) {}
	public function texParameterf(target:Integer, pname:Integer, param:Float) {}
	public function texParameteri(target:Integer, pname:Integer, param:Integer) {}
	public function texSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array) {}
	public function texSubImage2D$1(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, format:Integer, type:Integer, video:HTMLVideoElement) {}
	public function uniform1f(location:WebGLUniformLocation, x:Float) {}
	public function uniform1fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform1i(location:WebGLUniformLocation, x:Integer) {}
	public function uniform1iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform2f(location:WebGLUniformLocation, x:Float, y:Float) {}
	public function uniform2fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform2i(location:WebGLUniformLocation, x:Integer, y:Integer) {}
	public function uniform2iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform3f(location:WebGLUniformLocation, x:Float, y:Float, z:Float) {}
	public function uniform3fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform3i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer) {}
	public function uniform3iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform4f(location:WebGLUniformLocation, x:Float, y:Float, z:Float, w:Float) {}
	public function uniform4fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform4i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer, w:Integer) {}
	public function uniform4iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniformMatrix2fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function uniformMatrix3fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function uniformMatrix4fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function useProgram(program:WebGLProgram) {}
	public function validateProgram(program:WebGLProgram) {}
	public function vertexAttrib1f(indx:Integer, x:Float) {}
	public function vertexAttrib1fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib2f(indx:Integer, x:Float, y:Float) {}
	public function vertexAttrib2fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib3f(indx:Integer, x:Float, y:Float, z:Float) {}
	public function vertexAttrib3fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib4f(indx:Integer, x:Float, y:Float, z:Float, w:Float) {}
	public function vertexAttrib4fv(indx:Integer, values:Float32Array) {}
	public function vertexAttribPointer(indx:Integer, size:Integer, type:Integer, normalized:Boolean, stride:Integer, offset:Integer) {}
	public function viewport(x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function Destructor() {}
	public function Constructor(canvas:HTMLCanvasElement) {}
	public  var ACTIVE_ATTRIBUTES :Integer;
	public  var ACTIVE_TEXTURE :Integer;
	public  var ACTIVE_UNIFORMS :Integer;
	public  var ALIASED_LINE_WIDTH_RANGE :Integer;
	public  var ALIASED_POINT_SIZE_RANGE :Integer;
	public  var ALPHA :Integer;
	public  var ALPHA_BITS :Integer;
	public  var ALWAYS :Integer;
	public  var ARRAY_BUFFER :Integer;
	public  var ARRAY_BUFFER_BINDING :Integer;
	public  var ATTACHED_SHADERS :Integer;
	public  var BACK :Integer;
	public  var BLEND :Integer;
	public  var BLEND_COLOR :Integer;
	public  var BLEND_DST_ALPHA :Integer;
	public  var BLEND_DST_RGB :Integer;
	public  var BLEND_EQUATION :Integer;
	public  var BLEND_EQUATION_ALPHA :Integer;
	public  var BLEND_EQUATION_RGB :Integer;
	public  var BLEND_SRC_ALPHA :Integer;
	public  var BLEND_SRC_RGB :Integer;
	public  var BLUE_BITS :Integer;
	public  var BOOL :Integer;
	public  var BOOL_VEC2 :Integer;
	public  var BOOL_VEC3 :Integer;
	public  var BOOL_VEC4 :Integer;
	public  var BROWSER_DEFAULT_WEBGL :Integer;
	public  var BUFFER_SIZE :Integer;
	public  var BUFFER_USAGE :Integer;
	public  var BYTE :Integer;
	public  var CCW :Integer;
	public  var CLAMP_TO_EDGE :Integer;
	public  var COLOR_ATTACHMENT0 :Integer;
	public  var COLOR_BUFFER_BIT :Integer;
	public  var COLOR_CLEAR_VALUE :Integer;
	public  var COLOR_WRITEMASK :Integer;
	public  var COMPILE_STATUS :Integer;
	public  var COMPRESSED_TEXTURE_FORMATS :Integer;
	public  var CONSTANT_ALPHA :Integer;
	public  var CONSTANT_COLOR :Integer;
	public  var CONTEXT_LOST_WEBGL :Integer;
	public  var CULL_FACE :Integer;
	public  var CULL_FACE_MODE :Integer;
	public  var CURRENT_PROGRAM :Integer;
	public  var CURRENT_VERTEX_ATTRIB :Integer;
	public  var CW :Integer;
	public  var DECR :Integer;
	public  var DECR_WRAP :Integer;
	public  var DELETE_STATUS :Integer;
	public  var DEPTH_ATTACHMENT :Integer;
	public  var DEPTH_BITS :Integer;
	public  var DEPTH_BUFFER_BIT :Integer;
	public  var DEPTH_CLEAR_VALUE :Integer;
	public  var DEPTH_COMPONENT :Integer;
	public  var DEPTH_COMPONENT16 :Integer;
	public  var DEPTH_FUNC :Integer;
	public  var DEPTH_RANGE :Integer;
	public  var DEPTH_STENCIL :Integer;
	public  var DEPTH_STENCIL_ATTACHMENT :Integer;
	public  var DEPTH_TEST :Integer;
	public  var DEPTH_WRITEMASK :Integer;
	public  var DITHER :Integer;
	public  var DONT_CARE :Integer;
	public  var DST_ALPHA :Integer;
	public  var DST_COLOR :Integer;
	public  var DYNAMIC_DRAW :Integer;
	public  var ELEMENT_ARRAY_BUFFER :Integer;
	public  var ELEMENT_ARRAY_BUFFER_BINDING :Integer;
	public  var EQUAL :Integer;
	public  var FASTEST :Integer;
	public  var FLOAT :Integer;
	public  var FLOAT_MAT2 :Integer;
	public  var FLOAT_MAT3 :Integer;
	public  var FLOAT_MAT4 :Integer;
	public  var FLOAT_VEC2 :Integer;
	public  var FLOAT_VEC3 :Integer;
	public  var FLOAT_VEC4 :Integer;
	public  var FRAGMENT_SHADER :Integer;
	public  var FRAMEBUFFER :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :Integer;
	public  var FRAMEBUFFER_BINDING :Integer;
	public  var FRAMEBUFFER_COMPLETE :Integer;
	public  var FRAMEBUFFER_INCOMPLETE_ATTACHMENT :Integer;
	public  var FRAMEBUFFER_INCOMPLETE_DIMENSIONS :Integer;
	public  var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :Integer;
	public  var FRAMEBUFFER_UNSUPPORTED :Integer;
	public  var FRONT :Integer;
	public  var FRONT_AND_BACK :Integer;
	public  var FRONT_FACE :Integer;
	public  var FUNC_ADD :Integer;
	public  var FUNC_REVERSE_SUBTRACT :Integer;
	public  var FUNC_SUBTRACT :Integer;
	public  var GENERATE_MIPMAP_HINT :Integer;
	public  var GEQUAL :Integer;
	public  var GREATER :Integer;
	public  var GREEN_BITS :Integer;
	public  var HIGH_FLOAT :Integer;
	public  var HIGH_INT :Integer;
	public  var INCR :Integer;
	public  var INCR_WRAP :Integer;
	public  var INT :Integer;
	public  var INT_VEC2 :Integer;
	public  var INT_VEC3 :Integer;
	public  var INT_VEC4 :Integer;
	public  var INVALID_ENUM :Integer;
	public  var INVALID_FRAMEBUFFER_OPERATION :Integer;
	public  var INVALID_OPERATION :Integer;
	public  var INVALID_VALUE :Integer;
	public  var INVERT :Integer;
	public  var KEEP :Integer;
	public  var LEQUAL :Integer;
	public  var LESS :Integer;
	public  var LINE_LOOP :Integer;
	public  var LINE_STRIP :Integer;
	public  var LINE_WIDTH :Integer;
	public  var LINEAR :Integer;
	public  var LINEAR_MIPMAP_LINEAR :Integer;
	public  var LINEAR_MIPMAP_NEAREST :Integer;
	public  var LINES :Integer;
	public  var LINK_STATUS :Integer;
	public  var LOW_FLOAT :Integer;
	public  var LOW_INT :Integer;
	public  var LUMINANCE :Integer;
	public  var LUMINANCE_ALPHA :Integer;
	public  var MAX_COMBINED_TEXTURE_IMAGE_UNITS :Integer;
	public  var MAX_CUBE_MAP_TEXTURE_SIZE :Integer;
	public  var MAX_FRAGMENT_UNIFORM_VECTORS :Integer;
	public  var MAX_RENDERBUFFER_SIZE :Integer;
	public  var MAX_TEXTURE_IMAGE_UNITS :Integer;
	public  var MAX_TEXTURE_SIZE :Integer;
	public  var MAX_VARYING_VECTORS :Integer;
	public  var MAX_VERTEX_ATTRIBS :Integer;
	public  var MAX_VERTEX_TEXTURE_IMAGE_UNITS :Integer;
	public  var MAX_VERTEX_UNIFORM_VECTORS :Integer;
	public  var MAX_VIEWPORT_DIMS :Integer;
	public  var MEDIUM_FLOAT :Integer;
	public  var MEDIUM_INT :Integer;
	public  var MIRRORED_REPEAT :Integer;
	public  var NEAREST :Integer;
	public  var NEAREST_MIPMAP_LINEAR :Integer;
	public  var NEAREST_MIPMAP_NEAREST :Integer;
	public  var NEVER :Integer;
	public  var NICEST :Integer;
	public  var NO_ERROR :Integer;
	public  var NONE :Integer;
	public  var NOTEQUAL :Integer;
	public  var ONE :Integer;
	public  var ONE_MINUS_CONSTANT_ALPHA :Integer;
	public  var ONE_MINUS_CONSTANT_COLOR :Integer;
	public  var ONE_MINUS_DST_ALPHA :Integer;
	public  var ONE_MINUS_DST_COLOR :Integer;
	public  var ONE_MINUS_SRC_ALPHA :Integer;
	public  var ONE_MINUS_SRC_COLOR :Integer;
	public  var OUT_OF_MEMORY :Integer;
	public  var PACK_ALIGNMENT :Integer;
	public  var POINTS :Integer;
	public  var POLYGON_OFFSET_FACTOR :Integer;
	public  var POLYGON_OFFSET_FILL :Integer;
	public  var POLYGON_OFFSET_UNITS :Integer;
	public  var RED_BITS :Integer;
	public  var RENDERBUFFER :Integer;
	public  var RENDERBUFFER_ALPHA_SIZE :Integer;
	public  var RENDERBUFFER_BINDING :Integer;
	public  var RENDERBUFFER_BLUE_SIZE :Integer;
	public  var RENDERBUFFER_DEPTH_SIZE :Integer;
	public  var RENDERBUFFER_GREEN_SIZE :Integer;
	public  var RENDERBUFFER_HEIGHT :Integer;
	public  var RENDERBUFFER_INTERNAL_FORMAT :Integer;
	public  var RENDERBUFFER_RED_SIZE :Integer;
	public  var RENDERBUFFER_STENCIL_SIZE :Integer;
	public  var RENDERBUFFER_WIDTH :Integer;
	public  var RENDERER :Integer;
	public  var REPEAT :Integer;
	public  var REPLACE :Integer;
	public  var RGB :Integer;
	public  var RGB5_A1 :Integer;
	public  var RGB565 :Integer;
	public  var RGBA :Integer;
	public  var RGBA4 :Integer;
	public  var SAMPLE_ALPHA_TO_COVERAGE :Integer;
	public  var SAMPLE_BUFFERS :Integer;
	public  var SAMPLE_COVERAGE :Integer;
	public  var SAMPLE_COVERAGE_INVERT :Integer;
	public  var SAMPLE_COVERAGE_VALUE :Integer;
	public  var SAMPLER_2D :Integer;
	public  var SAMPLER_CUBE :Integer;
	public  var SAMPLES :Integer;
	public  var SCISSOR_BOX :Integer;
	public  var SCISSOR_TEST :Integer;
	public  var SHADER_TYPE :Integer;
	public  var SHADING_LANGUAGE_VERSION :Integer;
	public  var SHORT :Integer;
	public  var SRC_ALPHA :Integer;
	public  var SRC_ALPHA_SATURATE :Integer;
	public  var SRC_COLOR :Integer;
	public  var STATIC_DRAW :Integer;
	public  var STENCIL_ATTACHMENT :Integer;
	public  var STENCIL_BACK_FAIL :Integer;
	public  var STENCIL_BACK_FUNC :Integer;
	public  var STENCIL_BACK_PASS_DEPTH_FAIL :Integer;
	public  var STENCIL_BACK_PASS_DEPTH_PASS :Integer;
	public  var STENCIL_BACK_REF :Integer;
	public  var STENCIL_BACK_VALUE_MASK :Integer;
	public  var STENCIL_BACK_WRITEMASK :Integer;
	public  var STENCIL_BITS :Integer;
	public  var STENCIL_BUFFER_BIT :Integer;
	public  var STENCIL_CLEAR_VALUE :Integer;
	public  var STENCIL_FAIL :Integer;
	public  var STENCIL_FUNC :Integer;
	public  var STENCIL_INDEX :Integer;
	public  var STENCIL_INDEX8 :Integer;
	public  var STENCIL_PASS_DEPTH_FAIL :Integer;
	public  var STENCIL_PASS_DEPTH_PASS :Integer;
	public  var STENCIL_REF :Integer;
	public  var STENCIL_TEST :Integer;
	public  var STENCIL_VALUE_MASK :Integer;
	public  var STENCIL_WRITEMASK :Integer;
	public  var STREAM_DRAW :Integer;
	public  var SUBPIXEL_BITS :Integer;
	public  var TEXTURE :Integer;
	public  var TEXTURE_2D :Integer;
	public  var TEXTURE_BINDING_2D :Integer;
	public  var TEXTURE_BINDING_CUBE_MAP :Integer;
	public  var TEXTURE_CUBE_MAP :Integer;
	public  var TEXTURE_CUBE_MAP_NEGATIVE_X :Integer;
	public  var TEXTURE_CUBE_MAP_NEGATIVE_Y :Integer;
	public  var TEXTURE_CUBE_MAP_NEGATIVE_Z :Integer;
	public  var TEXTURE_CUBE_MAP_POSITIVE_X :Integer;
	public  var TEXTURE_CUBE_MAP_POSITIVE_Y :Integer;
	public  var TEXTURE_CUBE_MAP_POSITIVE_Z :Integer;
	public  var TEXTURE_MAG_FILTER :Integer;
	public  var TEXTURE_MIN_FILTER :Integer;
	public  var TEXTURE_WRAP_S :Integer;
	public  var TEXTURE_WRAP_T :Integer;
	public  var TEXTURE0 :Integer;
	public  var TEXTURE1 :Integer;
	public  var TEXTURE10 :Integer;
	public  var TEXTURE11 :Integer;
	public  var TEXTURE12 :Integer;
	public  var TEXTURE13 :Integer;
	public  var TEXTURE14 :Integer;
	public  var TEXTURE15 :Integer;
	public  var TEXTURE16 :Integer;
	public  var TEXTURE17 :Integer;
	public  var TEXTURE18 :Integer;
	public  var TEXTURE19 :Integer;
	public  var TEXTURE2 :Integer;
	public  var TEXTURE20 :Integer;
	public  var TEXTURE21 :Integer;
	public  var TEXTURE22 :Integer;
	public  var TEXTURE23 :Integer;
	public  var TEXTURE24 :Integer;
	public  var TEXTURE25 :Integer;
	public  var TEXTURE26 :Integer;
	public  var TEXTURE27 :Integer;
	public  var TEXTURE28 :Integer;
	public  var TEXTURE29 :Integer;
	public  var TEXTURE3 :Integer;
	public  var TEXTURE30 :Integer;
	public  var TEXTURE31 :Integer;
	public  var TEXTURE4 :Integer;
	public  var TEXTURE5 :Integer;
	public  var TEXTURE6 :Integer;
	public  var TEXTURE7 :Integer;
	public  var TEXTURE8 :Integer;
	public  var TEXTURE9 :Integer;
	public  var TRIANGLE_FAN :Integer;
	public  var TRIANGLE_STRIP :Integer;
	public  var TRIANGLES :Integer;
	public  var UNPACK_ALIGNMENT :Integer;
	public  var UNPACK_COLORSPACE_CONVERSION_WEBGL :Integer;
	public  var UNPACK_FLIP_Y_WEBGL :Integer;
	public  var UNPACK_PREMULTIPLY_ALPHA_WEBGL :Integer;
	public  var UNSIGNED_BYTE :Integer;
	public  var UNSIGNED_INT :Integer;
	public  var UNSIGNED_SHORT :Integer;
	public  var UNSIGNED_SHORT_4_4_4_4 :Integer;
	public  var UNSIGNED_SHORT_5_5_5_1 :Integer;
	public  var UNSIGNED_SHORT_5_6_5 :Integer;
	public  var VALIDATE_STATUS :Integer;
	public  var VENDOR :Integer;
	public  var VERSION :Integer;
	public  var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :Integer;
	public  var VERTEX_ATTRIB_ARRAY_ENABLED :Integer;
	public  var VERTEX_ATTRIB_ARRAY_NORMALIZED :Integer;
	public  var VERTEX_ATTRIB_ARRAY_POINTER :Integer;
	public  var VERTEX_ATTRIB_ARRAY_SIZE :Integer;
	public  var VERTEX_ATTRIB_ARRAY_STRIDE :Integer;
	public  var VERTEX_ATTRIB_ARRAY_TYPE :Integer;
	public  var VERTEX_SHADER :Integer;
	public  var VIEWPORT :Integer;
	public  var ZERO :Integer;
	public  var __uid :Integer;
	public  var canvas :HTMLCanvasElement;
	public  var __className :String;
} //WebGLRenderingContext

class WebGLShader : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, type:Integer) {}
	protected  var type :Integer;
	public  var __className :String;
} //WebGLShader

class WebGLShaderPrecisionFormat : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, shadertype:Integer, precisiontype:Integer) {}
	public  var __className :String;
} //WebGLShaderPrecisionFormat

class WebGLTexture : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLTexture

class WebGLUniformLocation : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, program_uid:Integer, name:String) {}
	public  var __className :String;
} //WebGLUniformLocation

class CocoKeyFrame
{
	public function toJSON() :String {}
	public var frameIndex :Integer;
	public var __frameIndex :Float;
	public var frameInterpolation :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var handleEvents :Boolean;
	public var visible :Boolean;
	public var filter :Integer;
	public var red :Float;
	public var green :Float;
	public var blue :Float;
	public var alpha :Float;
	public var x :Float;
	public var y :Float;
	public var pivotX :Float;
	public var pivotY :Float;
	public var scaleX :Float;
	public var scaleY :Float;
	public var rotation :Float;
	public var action :CocoAction;
	public var nextState :State;
	public var audio :CocoAudio;
	public var flipH :Boolean;
	public var flipV :Boolean;
	public var spriteSequenceName :String;
	public var spriteSequenceFPS :Float;
	public var __isCloned :Boolean;
	public var __Preserve :Boolean;
} //CocoKeyFrame

class CocoTimeLabel
{
	public function Destructor() {}
	public function Constructor(FrameIndex:Integer, LabelName:String) {}
	public  var frameIndex :Integer;
	public  var name :String;
	public  var __className :String;
} //CocoTimeLabel

class CocoTimeline
{
	public function NewKeyFrame() :CocoKeyFrame {}
	public function CloneKeyFrame(F:CocoKeyFrame, exact:Boolean) :CocoKeyFrame {}
	public function prepare(scene:CocoScene, clip:CocoClip) {}
	public function clear() {}
	public function reset() {}
	public function addLabel(Label:CocoTimeLabel) :CocoTimeLabel {}
	public function addLabelEx(FrameIndex:Integer, LabelName:String) :CocoTimeLabel {}
	public function findLabelByName(LabelName:String) :CocoTimeLabel {}
	public function keyFrame(frameIndex:Integer) :CocoKeyFrame {}
	public function firstKeyFrame() :CocoKeyFrame {}
	public function lastKeyFrame() :CocoKeyFrame {}
	public function addKeyFrame(KeyFrame:CocoKeyFrame) :CocoKeyFrame {}
	public function addKeyFrameEx(nextState:State, actionCallback:CocoAction, frameIndex:Integer, frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM, handleEvents:Boolean, visible:Boolean, x:Float, y:Float, scaleX:Float, scaleY:Float, rotation:Float, pivotX:Float, pivotY:Float, filter:Integer, red:Float, green:Float, blue:Float, alpha:Float, audio:CocoAudio, flipH:Boolean, flipV:Boolean, spriteSequenceName:String, spriteSequenceFPS:Float) :CocoKeyFrame {}
	public function normalizetimeline() {}
	public function translateTo(x:Float, y:Float) {}
	public function translateBy(dx:Float, dy:Float) {}
	public function findKeyFrameBeforeframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame {}
	public function findKeyFrameAfterframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame {}
	public function interpolate(frameIndex:Float) :CocoKeyFrame {}
	private function interpolate$1(F:CocoKeyFrame, F1:CocoKeyFrame, F2:CocoKeyFrame, s:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __labels :Array<CocoTimeLabel>;
	public  var __keyFrames :Array<CocoKeyFrame>;
	public  var __singleFrameDurationTime :Time;
	public  var __durationInTime :Time;
	public  var __durationInFrames :Integer;
	public  var __paused :Boolean;
	public  var __fps :Float;
	public  var __currentFrameIndex :Integer;
	public  var __firstKeyFrameIndex :Integer;
	public  var __lastKeyFrameIndex :Integer;
	public  var __className :String;
} //CocoTimeline

class CocoClip : CocoEventSource
{
	public function prepare(ctx:ICocoRenderContext, scene:CocoScene) {}
	public function reindex_z() {}
	public function analyze(sx:Float, sy:Float) {}
	public function reset() {}
	public function clear() {}
	public function addChild(clipInstance:CocoClip) :CocoClip {}
	public function removeChild(clipInstance:CocoClip) :CocoClip {}
	public function moveChild(child:CocoClip, zIndex:Integer) {}
	public function getChildByName(instanceName:String) :CocoClip {}
	public function getChildIndex(child:CocoClip) :Integer {}
	public function getChildrenByClassName(className:String) :Array<CocoClip> {}
	public function moveTo(x:Float, y:Float, frames:Integer) {}
	private function normalize() {}
	public function gotoFrameByName(LabelName:String, pause:Boolean) :Boolean {}
	public function gotoFrameByIndex(FrameIndex:Integer, pause:Boolean) :Boolean {}
	public function paused() :Boolean {}
	private function __advanceTime() {}
	public function tick(time:Time) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	private function combine(F1:CocoKeyFrame, F2:CocoKeyFrame) {}
	public function hitTest(wx:Float, wy:Float) :Boolean {}
	public function initBoundingBoxFromRect(ctx:ICocoRenderContext, mv:CocoMatrix, W2:Float, H2:Float) {}
	public function initBoundingBoxFromChildren(ctx:ICocoRenderContext, scene:CocoScene, mv:CocoMatrix) {}
	public function createInplaceHTML(update:Boolean, tag:String, href:String) :HTMLElement {}
	public function destroyInplaceHTML() {}
	public function Destructor() {}
	public function Constructor(image:CocoImage) {}
	public  var __uniqueID :String;
	public  var __zIndex :Integer;
	public  var __instanceName :String;
	public  var __clipPath :String;
	public  var __symbolLoop :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public  var __children :Array<CocoClip>;
	public  var __timeline :CocoTimeline;
	public  var __scene :CocoScene;
	public  var __image :CocoImage;
	public  var __parent :CocoClip;
	public  var __currentFrame :CocoKeyFrame;
	public  var __childWithMaxTimelineDuration :CocoClip;
	public  var __currentSequence :CocoSequence;
	public  var __currentAudio :CocoAudio;
	public  var __ANCHOR :HTMLElement;
	public  var __currentTime :Time;
	public  var __loopTime :Time;
	public  var __loops :Integer;
	public  var __currentSequenceStartTime :Time;
	public  var __currentSequenceFrameIndex :Integer;
	public  var __pauseTicks :Integer;
	public  var __visible :Boolean;
	public  var __x :Float;
	public  var __y :Float;
	public  var __width :Float;
	public  var __height :Float;
	public  var __hasBoundingBox :Boolean;
	public  var __vABS_TOP_LEFT :CocoVector;
	public  var __vABS_TOP_RIGHT :CocoVector;
	public  var __vABS_BOTTOM_LEFT :CocoVector;
	public  var __vABS_BOTTOM_RIGHT :CocoVector;
	public  var __vREL_TOP_LEFT :CocoVector;
	public  var __vREL_TOP_RIGHT :CocoVector;
	public  var __vREL_BOTTOM_LEFT :CocoVector;
	public  var __vREL_BOTTOM_RIGHT :CocoVector;
	public  var __vBBoxVrtx :CocoVector;
	public  var __mBBox :CocoMatrix;
	public  var __touch_start_time :Time;
	public  var __touch_start_point :CocoPoint;
	public  var __touch_moved :Boolean;
	public var OnClick :CocoClipOnClickEvent;
	public var OnTouchStart :CocoClipOnTouchStartEvent;
	public var OnTouchMove :CocoClipOnTouchMoveEvent;
	public var OnTouchEnd :CocoClipOnTouchEndEvent;
	public var OnAnimationSequenceBegin :CocoClipOnAnimationSequenceBeginEvent;
	public var OnAnimationSequenceEnd :CocoClipOnAnimationSequenceEndEvent;
	public static  var __uniqueIDCounter :Integer;
	public static  var __zIndexCounter :Integer;
	public  var __className :String;
} //CocoClip

class CocoClipOnClickEvent : CocoEvent
{
} //CocoClipOnClickEvent

class CocoClipOnTouchStartEvent : CocoEvent
{
	public var x :Float;
	public var y :Float;
} //CocoClipOnTouchStartEvent

class CocoClipOnTouchMoveEvent : CocoEvent
{
	public var x :Float;
	public var y :Float;
} //CocoClipOnTouchMoveEvent

class CocoClipOnTouchEndEvent : CocoEvent
{
	public var x :Float;
	public var y :Float;
} //CocoClipOnTouchEndEvent

class CocoClipOnAnimationSequenceBeginEvent : CocoEvent
{
	public var sequence :CocoSequence;
} //CocoClipOnAnimationSequenceBeginEvent

class CocoClipOnAnimationSequenceEndEvent : CocoEvent
{
	public var sequence :CocoSequence;
} //CocoClipOnAnimationSequenceEndEvent

class CocoSelfTexturedClip : CocoClip
{
	public function prepare(ctx:ICocoRenderContext, scene:CocoScene) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var InvalidTexture :Boolean;
	protected  var buffer :CocoImage;
	public  var __className :String;
} //CocoSelfTexturedClip

class CocoTextClip : CocoSelfTexturedClip
{
	public function prepare(ctx:ICocoRenderContext, scene:CocoScene) {}
	public function Destructor() {}
	public function Constructor() {}
	private  var m_Text :String;
	private  var m_FontFamily :String;
	private  var m_FontSizePixels :Integer;
	private  var m_FontBold :Boolean;
	private  var m_FontItalic :Boolean;
	private  var m_FontUnderline :Boolean;
	private  var m_FontColor :Color;
	private  var m_TextHorizAlign :COCO_TEXT_ALIGN_ENUM;
	private  var m_TextVertAlign :COCO_TEXT_ALIGN_ENUM;
	public  var Text :String;
	public  var FontFamily :String;
	public  var FontSizePixels :Integer;
	public  var FontBold :Boolean;
	public  var FontItalic :Boolean;
	public  var FontUnderline :Boolean;
	public  var FontColor :Color;
	public  var TextHorizAlign :COCO_TEXT_ALIGN_ENUM;
	public  var TextVertAlign :COCO_TEXT_ALIGN_ENUM;
	public  var __className :String;
} //CocoTextClip

class COCO_MASK_TYPE
{
	public var MASK_SHAPE :COCO_MASK_TYPE;
	public var MASK_IMAGE :COCO_MASK_TYPE;
} //COCO_MASK_TYPE

class CocoMaskClip : CocoSelfTexturedClip
{
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var MaskType :COCO_MASK_TYPE;
	public  var FillColor :Color;
	public  var Invert :Boolean;
	public  var Rectangles :Array<Float>;
	public  var __className :String;
} //CocoMaskClip

class ANIMATION_FUNCTIONS
{
	public var FN_LINEAR :ANIMATION_FUNCTIONS;
	public var FN_EASE :ANIMATION_FUNCTIONS;
	public var FN_EASE_IN :ANIMATION_FUNCTIONS;
	public var FN_EASE_OUT :ANIMATION_FUNCTIONS;
	public var FN_EASE_IN_OUT :ANIMATION_FUNCTIONS;
	public var FN_CUSTOM :ANIMATION_FUNCTIONS;
} //ANIMATION_FUNCTIONS

class CocoBezier
{
	public function DefaultMatrix(fn:ANIMATION_FUNCTIONS) :Float32Array {}
	private function A(aA1:Float, aA2:Float) :Float {}
	private function B(aA1:Float, aA2:Float) :Float {}
	private function C(aA1:Float) :Float {}
	private function calcBezier(aT:Float, aA1:Float, aA2:Float) :Float {}
	private function getSlope(aT:Float, aA1:Float, aA2:Float) :Float {}
	private function binarySubdivide(aX:Float, aA:Float, aB:Float) :Float {}
	private function newtonRaphsonIterate(aX:Float, aGuessT:Float) :Float {}
	private function calcSampleValues() {}
	private function getTForX(aX:Float) :Float {}
	private function precompute() {}
	public function interpolate(x:Float) :Float {}
	public function getControlPoints() :Float32Array {}
	public function toCSS3() :String {}
	public function Destructor() {}
	public function Constructor(m:Float32Array) {}
	public  var NEWTON_ITERATIONS :Float;
	public  var NEWTON_MIN_SLOPE :Float;
	public  var SUBDIVISION_PRECISION :Float;
	public  var SUBDIVISION_MAX_ITERATIONS :Float;
	private  var kSplineTableSize :Float;
	private  var kSampleStepSize :Float;
	public  var mX1 :Float;
	public  var mY1 :Float;
	public  var mX2 :Float;
	public  var mY2 :Float;
	private  var mSampleValues :Float32Array;
	private  var _precomputed :Boolean;
	public  var __className :String;
} //CocoBezier

class CocoVector
{
	public function reset(x:Float, y:Float, z:Float, w:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var X :Float;
	public  var Y :Float;
	public  var Z :Float;
	public  var W :Float;
	public  var __className :String;
} //CocoVector

class CocoMatrixData
{
	public function toJSON() :String {}
	public var rc11 :Float;
	public var rc12 :Float;
	public var rc13 :Float;
	public var rc14 :Float;
	public var rc21 :Float;
	public var rc22 :Float;
	public var rc23 :Float;
	public var rc24 :Float;
	public var rc31 :Float;
	public var rc32 :Float;
	public var rc33 :Float;
	public var rc34 :Float;
	public var rc41 :Float;
	public var rc42 :Float;
	public var rc43 :Float;
	public var rc44 :Float;
} //CocoMatrixData

class CocoMatrix
{
	public function Unproject(x:Float, y:Float, mv:CocoMatrix, pm:CocoMatrix, viewOriginX:Float, viewOriginY:Float, viewWidth:Float, viewHeight:Float) :CocoVector {}
	public function copyFrom(m:CocoMatrixData) {}
	public function identity() {}
	public function ortho(left:Float, right:Float, bottom:Float, top:Float, near:Float, far:Float) {}
	public function transpose() {}
	public function determinant() :Float {}
	public function invert() {}
	public function multiplyByVector(v:CocoVector) :CocoVector {}
	public function multiplyByMatrix(v:CocoMatrix, setMatrix:Boolean, swap:Boolean) :CocoMatrix {}
	public function translate(tx:Float, ty:Float) {}
	public function scale(sx:Float, sy:Float) {}
	public function rotateZ(rz:Float) {}
	public function refresh() {}
	public function push() {}
	public function pop() {}
	public function getRotateX() :Float {}
	public function getRotateY() :Float {}
	public function getTranslateX() :Float {}
	public function getTranslateY() :Float {}
	public function getTranslateZ() :Float {}
	public function toCSS3D(identity:Boolean) :String {}
	public function toCSS2D(identity:Boolean) :String {}
	public function Destructor() {}
	public function Constructor(M:CocoMatrix) {}
	public  var __m :CocoMatrixData;
	public  var __stack :Array<CocoMatrixData>;
	public  var __data :Float32Array;
	public  var __dirty :Boolean;
	public  var __className :String;
} //CocoMatrix

class CocoScene
{
	public function getImageSymbol(symbolName:String) :CocoImage {}
	public function getImageSymbolHeight(symbolName:String) :Float {}
	public function getClipByPath(ClipPath:String) :CocoClip {}
	public function getClipsByClassName(className:String) :Array<CocoClip> {}
	public function newResourceImage(symbolName:String, baseUrl:String) :CocoImage {}
	public function prepare(ctx:ICocoRenderContext) {}
	public function tick(time:Time) {}
	public function paint(ctx:ICocoRenderContext, time:Time) {}
	public function resourcesLoaded(ctx:ICocoRenderContext) :Boolean {}
	public function loadingProgress() :Integer {}
	public function gotoAndPlayByName(LabelName:String) {}
	public function gotoAndStopByName(LabelName:String) {}
	public function gotoAndPlayByIndex(FrameIndex:Integer) {}
	public function gotoAndStopyByIndex(FrameIndex:Integer) {}
	public function stop() {}
	public function worldX(deviceX:Float) :Float {}
	public function worldY(deviceY:Float) :Float {}
	public function viewX(worldX:Float) :Float {}
	public function viewY(worldY:Float) :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __sceneName :String;
	public  var __imageSymbols :Array<CocoImage>;
	public  var __fps :Float;
	public  var __view_width :Float;
	public  var __view_height :Float;
	public  var __view_pixel_ratio :Float;
	public  var __view_scale :Float;
	public  var __root :CocoClip;
	public  var __levelParents :Array<CocoClip>;
	public  var __ready :Boolean;
	public  var __loaded_assets :Float;
	public  var __finished :Boolean;
	private  var m_ctx :ICocoRenderContext;
	private  var m_width :Float;
	private  var m_height :Float;
	public  var __className :String;
} //CocoScene

class CocoVideo : CocoSelfTexturedClip
{
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function play() {}
	public function pause() {}
	public function stop() {}
	public function duration() :Float {}
	public function ended() :Boolean {}
	public function getCurrentTime() :Float {}
	public function setCurrentTime(t:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	private  var video :HTMLVideoElement;
	public  var src :String;
	public  var __className :String;
} //CocoVideo

class COCO_RENDERING_CONTEXT_ENUM
{
	public var COCO_RENDERING_CONTEXT_WEBGL :COCO_RENDERING_CONTEXT_ENUM;
	public var COCO_RENDERING_CONTEXT_2D_CANVAS :COCO_RENDERING_CONTEXT_ENUM;
	public var COCO_RENDERING_CONTEXT_CSS3 :COCO_RENDERING_CONTEXT_ENUM;
} //COCO_RENDERING_CONTEXT_ENUM

class ICocoRenderContext
{
	public function getName() :String {}
	public function getType() :COCO_RENDERING_CONTEXT_ENUM {}
	public function getModelViewMatrix() :CocoMatrix {}
	public function getProjectionMatrix() :CocoMatrix {}
	public function apply(clip:CocoClip, F:CocoKeyFrame, matrix:CocoMatrix) {}
	public function getDisplayWidth() :Float {}
	public function getDisplayHeight() :Float {}
	public function getBufferWidth() :Float {}
	public function getBufferHeight() :Float {}
	public function cls() {}
	public function clip(x:Float, y:Float, w:Float, h:Float) {}
	public function flush() {}
	public function ready() :Boolean {}
	public function prepare(viewScale:Float) {}
	public function prepareClip(clip:CocoClip) {}
	public function prepareVideoFrame(img:CocoImage, video:HTMLVideoElement) :CocoImage {}
	public function prepareImage(img:CocoImage) :ICocoImageRenderData {}
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer) {}
	public function drawMaskBegin() {}
	public function drawMaskEnd(invert:Boolean) {}
	public function drawBoundingBox(clip:CocoClip) {}
	public function hide() {}
	public function show() {}
	public function getHtmlElement() :HTMLElement {}
} //ICocoRenderContext

class CocoRenderContext
{
	public function createContext() :ICocoRenderContext {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoRenderContext

class CocoRenderContext2D
{
	public function getName() :String {}
	public function getType() :COCO_RENDERING_CONTEXT_ENUM {}
	public function getDisplayWidth() :Float {}
	public function getDisplayHeight() :Float {}
	public function getBufferWidth() :Float {}
	public function getBufferHeight() :Float {}
	public function getModelViewMatrix() :CocoMatrix {}
	public function getProjectionMatrix() :CocoMatrix {}
	public function hide() {}
	public function show() {}
	public function ready() :Boolean {}
	public function getHtmlElement() :HTMLElement {}
	public function cls() {}
	public function clip(x:Float, y:Float, w:Float, h:Float) {}
	public function flush() {}
	public function prepare(viewScale:Float) {}
	public function prepareVideoFrame(image:CocoImage, video:HTMLVideoElement) :CocoImage {}
	public function prepareImage(img:CocoImage) :ICocoImageRenderData {}
	public function prepareClip(clip:CocoClip) {}
	public function apply(clip:CocoClip, keyFrame:CocoKeyFrame, matrix:CocoMatrix) {}
	private function hideClipCanvas(clip:CocoClip) :Boolean {}
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer) {}
	public function drawMaskBegin() {}
	public function drawMaskEnd(invert:Boolean) {}
	public function drawBoundingBox(clip:CocoClip) {}
	public function Destructor() {}
	public function Constructor(ctx:CanvasRenderingContext2D) {}
	private  var __ctx :CanvasRenderingContext2D;
	private  var __modelViewMatrix :CocoMatrix;
	private  var __projectionMatrix :CocoMatrix;
	private  var __modelViewMatrixCSS3 :CocoMatrix;
	public  var __className :String;
} //CocoRenderContext2D

class CocoRenderContextCSS3
{
	public function getName() :String {}
	public function getType() :COCO_RENDERING_CONTEXT_ENUM {}
	public function getDisplayWidth() :Float {}
	public function getDisplayHeight() :Float {}
	public function getBufferWidth() :Float {}
	public function getBufferHeight() :Float {}
	public function getModelViewMatrix() :CocoMatrix {}
	public function getProjectionMatrix() :CocoMatrix {}
	public function hide() {}
	public function show() {}
	public function ready() :Boolean {}
	public function getHtmlElement() :HTMLElement {}
	public function cls() {}
	public function clip(x:Float, y:Float, w:Float, h:Float) {}
	public function flush() {}
	public function prepare(viewScale:Float) {}
	private function prepareContainer() {}
	public function prepareImage(img:CocoImage) :ICocoImageRenderData {}
	public function prepareClip(clip:CocoClip) {}
	public function prepareVideoFrame(img:CocoImage, video:HTMLVideoElement) :CocoImage {}
	public function apply(clip:CocoClip, keyFrame:CocoKeyFrame, matrix:CocoMatrix) {}
	private function hideClipChildren(clip:CocoClip) :Boolean {}
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer) {}
	public function drawMaskBegin() {}
	public function drawMaskEnd(invert:Boolean) {}
	public function drawBoundingBox(clip:CocoClip) {}
	public function Destructor() {}
	public function Constructor(ctx:HTMLDivElement) {}
	private  var __CONTAINER :HTMLDivElement;
	private  var __modelViewMatrix :CocoMatrix;
	private  var __projectionMatrix :CocoMatrix;
	private  var __modelViewMatrixCSS3 :CocoMatrix;
	public  var __className :String;
} //CocoRenderContextCSS3

class CocoRenderContextGL
{
	public function getName() :String {}
	public function getType() :COCO_RENDERING_CONTEXT_ENUM {}
	public function getDisplayWidth() :Float {}
	public function getDisplayHeight() :Float {}
	public function getBufferWidth() :Float {}
	public function getBufferHeight() :Float {}
	public function getModelViewMatrix() :CocoMatrix {}
	public function getProjectionMatrix() :CocoMatrix {}
	public function hide() {}
	public function show() {}
	public function ready() :Boolean {}
	public function getHtmlElement() :HTMLElement {}
	public function cls() {}
	public function clip(x:Float, y:Float, w:Float, h:Float) {}
	public function flush() {}
	public function prepare(viewScale:Float) {}
	public function prepareVideoFrame(image:CocoImage, video:HTMLVideoElement) :CocoImage {}
	public function prepareImage(img:CocoImage) :ICocoImageRenderData {}
	public function prepareClip(clip:CocoClip) {}
	private function update(m:CocoMatrix, ul:WebGLUniformLocation) {}
	public function apply(clip:CocoClip, F:CocoKeyFrame, matrix:CocoMatrix) {}
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer) {}
	private function setFilter(filter:Integer) :Boolean {}
	public function drawMaskBegin() {}
	public function drawMaskEnd(invert:Boolean) {}
	public function drawBoundingBox(clip:CocoClip) {}
	public function Destructor() {}
	public function Constructor(ctx:WebGLRenderingContext) {}
	private  var gl :WebGLRenderingContext;
	private  var __modelViewMatrix :CocoMatrix;
	private  var __projectionMatrix :CocoMatrix;
	private  var __viewportVector :CocoVector;
	private  var __modelViewMatrixCSS3 :CocoMatrix;
	private  var __projectionMatrixCSS3 :CocoMatrix;
	private  var maskDraw :Boolean;
	private  var activeShader :CocoShaderCommon;
	private  var shaderSimple :Array<CocoShaderSimple>;
	private  var shaderSimpleWithAlpha :Array<CocoShaderSimpleWithAlpha>;
	private  var shaderSaturationWithAlpha :Array<CocoShaderSaturationWithAlpha>;
	private  var shaderParallaxHor :Array<CocoShaderParallaxHor>;
	private  var shaderBoundingBox :CocoShaderBoundingBox;
	public  var __className :String;
} //CocoRenderContextGL

class CocoShader
{
	public function init(gl:WebGLRenderingContext) {}
	public function quit(gl:WebGLRenderingContext) {}
	public function begin(gl:WebGLRenderingContext) {}
	public function end(gl:WebGLRenderingContext) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var vertex_shader :String;
	public  var fragment_shader :String;
	public  var program :WebGLProgram;
	public  var __className :String;
} //CocoShader

class CocoShaderBoundingBox : CocoShader
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix) {}
	public function quit(gl:WebGLRenderingContext) {}
	public function begin(gl:WebGLRenderingContext) {}
	public function end(gl:WebGLRenderingContext) {}
	public function draw(gl:WebGLRenderingContext, data:Float32Array) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var vbo :WebGLBuffer;
	public  var iVecCoords :Integer;
	public  var uProjMat :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderBoundingBox

class CocoShaderCommon : CocoShader
{
	public function init(gl:WebGLRenderingContext) {}
	public function begin(gl:WebGLRenderingContext) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function drawFrame(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function end(gl:WebGLRenderingContext) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var iTexCoords :Integer;
	public  var iVecCoords :Integer;
	public  var uProjMat :WebGLUniformLocation;
	public  var uMVMat :WebGLUniformLocation;
	public  var uSprFrame :WebGLUniformLocation;
	public  var uSprSize :WebGLUniformLocation;
	public  var uSprFlip :WebGLUniformLocation;
	public  var uSampler :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderCommon

class CocoShaderSimple : CocoShaderCommon
{
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var __className :String;
} //CocoShaderSimple

class CocoShaderSimpleWithAlpha : CocoShaderCommon
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var uAlpha :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderSimpleWithAlpha

class CocoShaderSaturationWithAlpha : CocoShaderCommon
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var uColor :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderSaturationWithAlpha

class CocoShaderParallaxHor : CocoShaderCommon
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix, viewportVector:CocoVector) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var uTextureSize :WebGLUniformLocation;
	public  var uDelta :WebGLUniformLocation;
	public  var uViewport :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderParallaxHor

class IEventListener
{
} //IEventListener

class IEventTarget
{
} //IEventTarget

class ITickable
{
	public function tick(source:ITickable, time:Time) {}
} //ITickable

class CocoPoint
{
	public function toJSON() :String {}
	public var x :Float;
	public var y :Float;
} //CocoPoint

class CocoRect
{
	public function toJSON() :String {}
	public var left :Float;
	public var top :Float;
	public var right :Float;
	public var bottom :Float;
} //CocoRect

class CocoSkinCacheItem
{
	public function toJSON() :String {}
	public var symbolName :String;
	public var width :Float;
	public var height :Float;
	public var image :CocoImage;
} //CocoSkinCacheItem

class CocoHVAlign
{
	public function toJSON() :String {}
	public var horiz :Float;
	public var vert :Float;
} //CocoHVAlign

class CocoGraphics
{
	public function POT(n:Float) :Float {}
	public function NewCanvas(width:Float, height:Float, pot:Boolean) :HTMLCanvasElement {}
	public function ColorToHtmlRGBA(c:Color) :String {}
	public function DpiToPixelRatio(dpi:SCREEN_RESOLUTION_DPI_ENUM) :Float {}
	public function GetSkinFromCache(skinImage:CocoImage, width:Float, height:Float) :CocoImage {}
	public function CocoImageFromHTMLCanvas(canvas:HTMLCanvasElement, textureWidth:Float, textureHeight:Float, mime:String) :CocoImage {}
	public function DrawSkin(ctx:CanvasRenderingContext2D, skinImage:CocoImage, x:Float, y:Float, width:Float, height:Float) {}
	private function __drawSlice(ctx:CanvasRenderingContext2D, skin:CocoImage, cx:Float, cy:Float, cw:Float, ch:Float, sx:Float, sy:Float, sw:Float, sh:Float, r:COCO_SKIN_TILE_ENUM) {}
	private function __countFixed(v:Array<Float>) :Integer {}
	private function __fixedW(v:Array<COCO_SKIN_TILE_ENUM>) :Boolean {}
	private function __fixedH(v:Array<COCO_SKIN_TILE_ENUM>) :Boolean {}
	private function __tileSkin(ctx:CanvasRenderingContext2D, image:CocoImage, cellX:Float, cellY:Float, cellWidth:Float, cellHeight:Float, x:Float, y:Float, width:Float, height:Float) {}
	private function __drawRegion(ctx:CanvasRenderingContext2D, image:CocoImage, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function AlignToCocoHVAlign(h:COCO_TEXT_ALIGN_ENUM, v:COCO_TEXT_ALIGN_ENUM) :CocoHVAlign {}
	public function AnchorToCocoHVAlign(anchor:COCO_CONTROL_ANCHOR_ENUM) :CocoHVAlign {}
	public function Destructor() {}
	public function Constructor() {}
	public static  var skinsCache :Array<CocoSkinCacheItem>;
	public  var __className :String;
} //CocoGraphics

class CocoSequence
{
	public function Destructor() {}
	public function Constructor(name:String, framesArray:Array<Integer>) {}
	public  var name :String;
	public  var frames :Array<Integer>;
	public  var __className :String;
} //CocoSequence

class CocoImageResolution
{
	public function Destructor() {}
	public function Constructor(url:String, pixelRatio:Float, textureWidth:Float, textureHeight:Float, tileWidth:Float, tileHeight:Float, tileMap:Int32Array, binpack:CocoImage, binpackX:Float, binpackY:Float, skin:Float32Array) {}
	public  var url :String;
	public  var pixelRatio :Float;
	public  var textureCellWidth :Float;
	public  var textureCellHeight :Float;
	public  var binpack :CocoImage;
	public  var binpackX :Float;
	public  var binpackY :Float;
	public  var skin :Float32Array;
	public  var tileWidth :Float;
	public  var tileHeight :Float;
	public  var tileMap :Int32Array;
	public  var __className :String;
} //CocoImageResolution

class ICocoImageRenderData
{
	public function castRenderDataGL() :CocoImageRenderDataGL {}
	public function castRenderData2D() :CocoImageRenderData2D {}
} //ICocoImageRenderData

class CocoImageRenderData2D
{
	public function castRenderDataGL() :CocoImageRenderDataGL {}
	public function castRenderData2D() :CocoImageRenderData2D {}
	public function Destructor() {}
	public function Constructor() {}
	public  var imageData :ImageData;
	public  var __className :String;
} //CocoImageRenderData2D

class CocoImageRenderDataGL
{
	public function castRenderDataGL() :CocoImageRenderDataGL {}
	public function castRenderData2D() :CocoImageRenderData2D {}
	public function Destructor() {}
	public function Constructor() {}
	public  var gl :WebGLRenderingContext;
	public  var texture :WebGLTexture;
	public  var buffer :WebGLBuffer;
	public  var drawType :Integer;
	public  var vertexCount :Integer;
	public  var __className :String;
} //CocoImageRenderDataGL

class CocoImage
{
	public function createFromURL(url:String, resizeWidth:Float, resizeHeight:Float) :CocoImage {}
	public function __error(hImage:Image) :Boolean {}
	public function __loaded(hImage:Image) {}
	public function createFromCanvas(canvas:HTMLCanvasElement, width:Float, height:Float) {}
	public function createFromBase64(url:String, width:Float, height:Float) {}
	public function addResolution(sibling:CocoImageResolution) :CocoImageResolution {}
	public function addSequence(sequence:CocoSequence) :CocoSequence {}
	public function getSequence(name:String) :CocoSequence {}
	public function load() {}
	private function loadImageByDpi(dpi:SCREEN_RESOLUTION_DPI_ENUM, strict:Boolean) :Boolean {}
	private function setResolution(sibling:CocoImageResolution) {}
	public function loaded() :Boolean {}
	public function unload() {}
	public function resizeToOptimalTextureSize() {}
	public function kernel(filterSize:Integer, x:Float) :Float {}
	public function createCache(cachePrecision:Integer, filterSize:Integer) :Array<Float> {}
	public function LanczosResize(source:ImageData, srcWidth:Integer, srcHeight:Integer, dstWidth:Integer, dstHeight:Integer) :ImageData {}
	public function Destructor() {}
	public function Constructor() {}
	public  var symbolName :String;
	public  var hImage :Image;
	public  var scene :CocoScene;
	public  var binpack :CocoImage;
	public  var binpackX :Float;
	public  var binpackY :Float;
	public  var textureCellWidth :Float;
	public  var textureCellHeight :Float;
	public  var textureGrid :Float32Array;
	public  var textureTileMap :Float32Array;
	public  var color :Float32Array;
	public  var texSize :Float32Array;
	public  var isSpriteSheet :Boolean;
	public  var sequences :Array<CocoSequence>;
	public  var skin :Float32Array;
	public  var tileWidth :Integer;
	public  var tileHeight :Integer;
	public  var tileMap :Int32Array;
	public  var renderData :ICocoImageRenderData;
	public  var onLoadResizeWidth :Float;
	public  var onLoadResizeHeight :Float;
	public  var baseUrl :String;
	public  var textureViewWidth :Float;
	public  var textureViewHeight :Float;
	public  var textureViewScaleX :Float;
	public  var textureViewScaleY :Float;
	public  var viewSiblings :Array<CocoImageResolution>;
	public  var pixelRatio :Float;
	public  var scaleX :Float;
	public  var scaleY :Float;
	public static  var CACHE :Array<Float>;
	public static  var CACHE_PRECISION :Integer;
	public static  var FILTER_SIZE :Integer;
	public  var __className :String;
} //CocoImage

class CocoTextStyle
{
	public function Destructor() {}
	public function Constructor(ff:String, fsp:Integer, fs:String, fw:String, u:Boolean, r:Integer, g:Integer, b:Integer, a:Integer, br:Integer, bg:Integer, bb:Integer, ba:Integer) {}
	public  var fontFamily :String;
	public  var fontSizePixels :Integer;
	public  var fontStyle :String;
	public  var fontWeight :String;
	public  var underline :Boolean;
	public  var color :Array<Integer>;
	public  var bgcolor :Array<Integer>;
	public  var __className :String;
} //CocoTextStyle

class CocoText
{
	public function npo2(i:Integer) :Integer {}
	public function init(width:Integer, height:Integer) {}
	public function drawSimpleText(ctx:CanvasRenderingContext2D, text:String, FontName:String, FontSizePx:Integer, FontBold:Boolean, FontItalic:Boolean, FontUnderline:Boolean, FontColor:Color, x:Float, y:Float, width:Float, height:Float, halign:Float, valign:Float, FontShadowX:Integer, FontShadowY:Integer, FontBlur:Integer, FontShadowColor:Color) {}
	public function wrap(width:Integer) {}
	public function wrapSimple(width:Integer, fontStyle:String) {}
	public function drawSimple(ctx:CanvasRenderingContext2D, fontStyle:String, underline:Boolean, color:String, x:Float, y:Float, width:Float, height:Float, halign:Float, valign:Float) {}
	public function draw(width:Float, height:Float, halign:Float, valign:Float, bgR:Integer, bgG:Integer, bgB:Integer, bgA:Integer) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public static  var ctx :CanvasRenderingContext2D;
	public  var str :String;
	public  var styles :Array<CocoTextStyle>;
	public  var indices :Array<Integer>;
	public  var mappings :Array<Integer>;
	public  var lineBreaks :Array<Integer>;
	public  var lineWidths :Array<Float>;
	public  var lineHeights :Array<Float>;
	public  var totalHeight :Float;
	public  var lineSpacing :Float;
	public  var __className :String;
} //CocoText

class CocoTextBlock
{
	public function SetTextRect(left:Float, top:Float, width:Float, height:Float) {}
	public function toImage(selected:Boolean, scale:Float) :CocoImage {}
	public function Destructor() {}
	public function Constructor(Text:String, align:COCO_CONTROL_ANCHOR_ENUM) {}
	public  var text :String;
	public  var multiline :Boolean;
	public  var parent :CocoClip;
	public  var Left :Float;
	public  var Top :Float;
	public  var Width :Float;
	public  var Height :Float;
	public  var anchor :COCO_CONTROL_ANCHOR_ENUM;
	public  var fontColor :Color;
	public  var fontColorSel :Color;
	public  var fontName :String;
	public  var fontSize :Float;
	public  var fontBold :Boolean;
	public  var fontItalic :Boolean;
	public  var fontUnderline :Boolean;
	public  var fontShadowX :Integer;
	public  var fontShadowY :Integer;
	public  var fontBlur :Integer;
	public  var fontShadowColor :Color;
	public  var fontShadowColorSel :Color;
	public  var __className :String;
} //CocoTextBlock

class COCO_SCREEN_ORIENTATION
{
	public var SCREEN_ORIENTATION_PORTRAIT :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE :COCO_SCREEN_ORIENTATION;
} //COCO_SCREEN_ORIENTATION

class COCO_DEVICE
{
	public var DEVICE_GENERIC_MDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_HDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_XHDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_XXHDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_TVDPI :COCO_DEVICE;
	public var DEVICE_GENERIC_LDPI :COCO_DEVICE;
	public var DEVICE_IPHONE_3GS :COCO_DEVICE;
	public var DEVICE_IPHONE_4 :COCO_DEVICE;
	public var DEVICE_IPHONE_4S :COCO_DEVICE;
	public var DEVICE_IPHONE_5 :COCO_DEVICE;
	public var DEVICE_IPHONE_5S :COCO_DEVICE;
	public var DEVICE_IPHONE_5C :COCO_DEVICE;
	public var DEVICE_IPHONE_6 :COCO_DEVICE;
	public var DEVICE_IPHONE_6_PLUS :COCO_DEVICE;
	public var DEVICE_IPAD :COCO_DEVICE;
	public var DEVICE_IPAD_2 :COCO_DEVICE;
	public var DEVICE_IPAD_3 :COCO_DEVICE;
	public var DEVICE_IPAD_MINI :COCO_DEVICE;
	public var DEVICE_IPAD_AIR :COCO_DEVICE;
	public var DEVICE_IPAD_MINI_RETINA :COCO_DEVICE;
} //COCO_DEVICE

class CocoDevice
{
	public function report() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var Force2D :Boolean;
	public  var ForceCSS3 :Boolean;
	public  var isChrome :Boolean;
	public  var isFirefox :Boolean;
	public  var isSafari :Boolean;
	public  var isIPhone :Boolean;
	public  var isIPad :Boolean;
	public  var isDesktopSafari :Boolean;
	public  var isAndroid :Boolean;
	public  var isIPad1 :Boolean;
	public  var isIPad2 :Boolean;
	public  var isIPad3 :Boolean;
	public  var isIPhone3 :Boolean;
	public  var isIPhone4 :Boolean;
	public  var isIPhone5 :Boolean;
	public  var isIPhone6 :Boolean;
	public  var isIPhone6Plus :Boolean;
	public  var HasTouchscreen :Boolean;
	public  var isIOS :Boolean;
	public  var pixelRatio :Float;
	public  var unorientedScreenWidth :Integer;
	public  var unorientedScreenHeight :Integer;
	public  var isMobileHTML5Browser :Boolean;
	public  var isHTML5Browser :Boolean;
	public  var isDesktop :Boolean;
	public  var isNative :Boolean;
	public  var isCoconut2DPlayer :Boolean;
	public  var screenWidth :Float;
	public  var screenHeight :Float;
	public  var screenOrientation :COCO_SCREEN_ORIENTATION;
	public  var type :COCO_DEVICE;
	public  var dpi :COCO_DEVICE;
	public  var iOSVersion :String;
	public  var AndroidSDKVersion :String;
	public  var __className :String;
} //CocoDevice

class COCO_IMAGE_LOADING_MODE_ENUM
{
	public var LOAD_BY_DPI :COCO_IMAGE_LOADING_MODE_ENUM;
	public var LOAD_BY_EXMINING_KEYFRAMES :COCO_IMAGE_LOADING_MODE_ENUM;
} //COCO_IMAGE_LOADING_MODE_ENUM

class CocoEngine
{
	public function setNextState(s:State) {}
	public function getCurrentState() :State {}
	public function getNextState() :State {}
	public function run(time:Time) {}
	private function __attachDevices() {}
	private function __dettachDevices() {}
	private function __translateDeviceMessage(e:HTMLEvent) {}
	private function __translateDeviceMessageImpl(e:HTMLEvent) {}
	public function __hasTouchDeviceMessage() :Boolean {}
	public function __removeTouchMessages() {}
	public function __peekDeviceMessage(mask:DEVICE_MESSAGE_ENUM) :DEVICE_MESSAGE {}
	private function __canRegisterMove(x:Float, y:Float) :Boolean {}
	public function __clearDeviceMessageQueue() {}
	public function __pushClicked(clip:CocoClip) {}
	public function isClicked(check:Array<CocoClip>, preserveArray:Boolean) :Integer {}
	public function isKeyDown(check:Int32Array) :Integer {}
	public function addTickListener(tickable:ITickable) {}
	public function removeTickListener(tickable:ITickable) {}
	public function getTickableIndex(tickable:ITickable) :Integer {}
	private function __tick(time:Time) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var TICK_TIME :Time;
	public  var device :CocoDevice;
	private  var __currentState :State;
	private  var __nextState :State;
	private  var __tickables :Array<ITickable>;
	public  var __clock :Time;
	public  var __ctx :ICocoRenderContext;
	public  var __RESIZE_IMAGES_AT_RUNTIME :Boolean;
	public  var __IMAGE_LOADING_MODE :COCO_IMAGE_LOADING_MODE_ENUM;
	private  var __deviceMessageQueue :Array<DEVICE_MESSAGE>;
	private  var __clicked :Array<CocoClip>;
	private  var __track_touch :Boolean;
	private  var __track_key :Boolean;
	private  var __has_touch_device_message :Boolean;
	public  var __className :String;
} //CocoEngine

class CocoEvent
{
	public function reset() {}
	public function is(Event:CocoEvent) :Boolean {}
	public function cancelBubble() {}
	public function preventDefault() {}
	public function Destructor() {}
	public function Constructor(type:String, cancelable:Boolean, bubbles:Boolean) {}
	public  var type :String;
	public  var bubbles :Boolean;
	public  var cancelable :Boolean;
	public  var timeStamp :Integer;
	public  var stopPropagation :Boolean;
	public  var defaultPrevented :Boolean;
	public  var __className :String;
} //CocoEvent

class CocoEventConnectionPoint
{
	public function Destructor() {}
	public function Constructor(Source:CocoEventSource, Event:CocoEvent, Listener:IEventListener, Callback:Function) {}
	public  var Event :CocoEvent;
	public  var Callback :Function;
	public  var Listener :IEventListener;
	public  var __className :String;
} //CocoEventConnectionPoint

class CocoEventSource
{
	public function addEventListener(Event:CocoEvent, Callback:Function, Listener:IEventListener) {}
	public function removeEventListener(Event:CocoEvent, Callback:Function, Listener:IEventListener) :Boolean {}
	public function dispatchEvent(Event:CocoEvent) {}
	public function Destructor() {}
	public function Constructor() {}
	protected  var __eventListeners :Array<CocoEventConnectionPoint>;
	public  var __className :String;
} //CocoEventSource

class State
{
	public function enter() {}
	public function exit() {}
	public function tick(time:Time) {}
	public function paint(ctx:ICocoRenderContext, time:Time) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __name :String;
	public  var params :Object;
	public  var __className :String;
} //State

class Touch
{
	public function initTouch(identifier:Integer, target:IEventTarget, screenX:Float, screenY:Float, clientX:Float, clientY:Float, pageX:Float, pageY:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var identifier :Integer;
	public  var screenX :Float;
	public  var screenY :Float;
	public  var clientX :Float;
	public  var clientY :Float;
	public  var pageX :Float;
	public  var pageY :Float;
	public  var target :IEventTarget;
	public  var __className :String;
} //Touch

class TouchList : Array
{
	public function item(index:Integer) :Touch {}
	public function Destructor() {}
	public function Constructor() {}
	public  var length :Integer;
	public  var __className :String;
} //TouchList

class HTMLEvent
{
	public function preventDefault() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var type :String;
	public  var timestamp :Time;
	public  var clientX :Float;
	public  var clientY :Float;
	public  var touches :TouchList;
	public  var changedTouches :TouchList;
	public  var keyCode :Integer;
	public  var ctrlKey :Boolean;
	public  var altKey :Boolean;
	public  var shiftKey :Boolean;
	public  var __className :String;
} //HTMLEvent

class DEVICE_MESSAGE_ENUM
{
	public var MESSAGE_NONE :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_MASK :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_START :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_MOVE :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_END :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_KEY_DOWN :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_KEY_UP :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_HTTP_MASK :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_HTTP_DONE :DEVICE_MESSAGE_ENUM;
} //DEVICE_MESSAGE_ENUM

class DEVICE_MESSAGE
{
	public function toJSON() :String {}
	public var handled :Boolean;
	public var type :DEVICE_MESSAGE_ENUM;
	public var timestamp :Time;
	public var peeked :Boolean;
	public var touches :Integer;
	public var x0 :Float;
	public var x1 :Float;
	public var x2 :Float;
	public var x3 :Float;
	public var x4 :Float;
	public var y0 :Float;
	public var y1 :Float;
	public var y2 :Float;
	public var y3 :Float;
	public var y4 :Float;
	public var keyCode :Integer;
	public var ctrlKey :Boolean;
	public var altKey :Boolean;
	public var shiftKey :Boolean;
} //DEVICE_MESSAGE

class COCO_DATA_PROVIDER_ENUM
{
	public var PROVIDER_HTTP_POST :COCO_DATA_PROVIDER_ENUM;
	public var PROVIDER_HTTP_GET :COCO_DATA_PROVIDER_ENUM;
	public var PROVIDER_FILESYSTEM :COCO_DATA_PROVIDER_ENUM;
} //COCO_DATA_PROVIDER_ENUM

class COCO_REQUEST_DATA_FORMAT_ENUM
{
	public var REQUEST_URL_QUERY_STRING :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_URL_ENCODED_FORM :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_XML :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_JSON :COCO_REQUEST_DATA_FORMAT_ENUM;
} //COCO_REQUEST_DATA_FORMAT_ENUM

class COCO_PERSISTENT_STORAGE_ENUM
{
	public var PERSIST_IN_SESSION :COCO_PERSISTENT_STORAGE_ENUM;
	public var PERSIST_IN_LOCAL_STORAGE :COCO_PERSISTENT_STORAGE_ENUM;
} //COCO_PERSISTENT_STORAGE_ENUM

class CocoRequestNameValuePair
{
	public function toJSON() :String {}
	public var Name :String;
	public var Value :String;
} //CocoRequestNameValuePair

class CocoDataSource : CocoEventSource
{
	public function Destructor() {}
	public function Constructor() {}
	public  var Name :String;
	public  var Blocking :Boolean;
	public  var Type :COCO_DATA_PROVIDER_ENUM;
	public  var ConnectionString :String;
	public  var RequestDataFormat :COCO_REQUEST_DATA_FORMAT_ENUM;
	public  var RequestDataPacket :Array<String>;
	public  var RequestHeaders :Array<String>;
	public  var PersistentStorage :COCO_PERSISTENT_STORAGE_ENUM;
	public  var PersistentDataID :String;
	public  var __className :String;
} //CocoDataSource

class CocoLocalStorage
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoLocalStorage

class CocoAudio
{
	public function reset() {}
	public function tick() {}
	public function play() {}
	public function pause() {}
	public function stop() {}
	public function duration() :Float {}
	public function paused() :Boolean {}
	public function ended() :Boolean {}
	public function getCurrentTime() :Float {}
	public function setCurrentTime(t:Float) {}
	public function Destructor() {}
	public function Constructor(url:String, autoplay:Boolean, loops:Integer) {}
	public static  var __muted :Boolean;
	public  var src :String;
	public  var audio :Audio;
	public  var autoplay :Boolean;
	public  var loops :Integer;
	private  var __firstPlayed :Boolean;
	private  var __loopCount :Integer;
	public  var __className :String;
} //CocoAudio

class SlotMachine : CocoClip
{
	public function tick(time:Time) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor(image:CocoImage) {}
	public  var Cols :Integer;
	public  var Rows :Integer;
	public  var IdleSpriteSheet :Image;
	public  var BlurSpriteSheet :Image;
	public  var StartDisposition :Float;
	public  var StartAnimationFunction :ANIMATION_FUNCTIONS;
	public  var SpinAnimationFunction :ANIMATION_FUNCTIONS;
	public  var EndAnimationFunction :ANIMATION_FUNCTIONS;
	public  var __className :String;
} //SlotMachine

class VRGS_REQUEST_HEADER
{
	public function toJSON() :String {}
	public var APIVersionID :Float;
	public var GameID :Integer;
	public var OperatorID :Integer;
	public var MD5TokenID :String;
	public var ClientGameSessionID :String;
} //VRGS_REQUEST_HEADER

class VRGS_RESPONSE_HEADER
{
	public function toJSON() :String {}
	public var APIVersionID :Float;
	public var GameID :Integer;
	public var OperatorID :Integer;
	public var MD5TokenID :String;
	public var URLLangID :String;
	public var ServerSessionID :String;
} //VRGS_RESPONSE_HEADER

class VRGS_GET_GAME_SETTINGS_REQUEST
{
	public function toJSON() :String {}
	public var Header :VRGS_REQUEST_HEADER;
	public var URLLangID :String;
	public var DeviceScreenWidth :Integer;
	public var DeviceScreenHeight :Integer;
	public var DeviceClass :String;
	public var DeviceModel :String;
	public var DeviceSDKVersion :String;
	public var DevicePixelRatio :Float;
} //VRGS_GET_GAME_SETTINGS_REQUEST

class VRGS_GET_GAME_SETTINGS_RESPONSE
{
	public function toJSON() :String {}
	public var Header :VRGS_RESPONSE_HEADER;
	public var CurrentBalance :Float;
	public var MinBet :Float;
	public var MaxBet :Float;
	public var ReelsetSize :Integer;
	public var PayTable :Array<VRGS_PAY_TABLE>;
	public var PayLines :Array<VRGS_PAY_LINE>;
	public var LocaleID :String;
	public var LocalizedCurrencySymbol :String;
	public var ClientAssetsID :String;
	public var LobyURL :String;
} //VRGS_GET_GAME_SETTINGS_RESPONSE

class VRGS_PAY_TABLE
{
	public function toJSON() :String {}
	public var PaytableID :Integer;
	public var SymbolID :Integer;
	public var RequiredQty :Integer;
	public var BetMultiplier :Integer;
	public var PaylineID :Integer;
} //VRGS_PAY_TABLE

class PAY_LINE_ITEM
{
	public function toJSON() :String {}
	public var Row :Integer;
	public var Col :Integer;
} //PAY_LINE_ITEM

class VRGS_PAY_LINE
{
	public function toJSON() :String {}
	public var PaylineID :Integer;
	public var RowColList :Array<PAY_LINE_ITEM>;
} //VRGS_PAY_LINE

class VRGS_SPIN_ACTION_TYPE
{
	public var ACTION_ERROR :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_SPIN :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_WIN :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_FREE_SPIN :VRGS_SPIN_ACTION_TYPE;
	public var ACTION_FREE_SPIN_WIN :VRGS_SPIN_ACTION_TYPE;
} //VRGS_SPIN_ACTION_TYPE

class VRGS_SPIN_REQUEST
{
	public function toJSON() :String {}
	public var Header :VRGS_REQUEST_HEADER;
	public var BetAmount :Float;
	public var BetLines :Integer;
	public var BetMultiplier :Integer;
} //VRGS_SPIN_REQUEST

class VRGS_SPIN_RESPONSE
{
	public function toJSON() :String {}
	public var Header :VRGS_RESPONSE_HEADER;
	public var Actions :Array<VRGS_SPIN_ACTION>;
	public var InitialBalance :Float;
	public var FinalBalance :Float;
} //VRGS_SPIN_RESPONSE

class VRGS_SPIN_ACTION
{
	public function toJSON() :String {}
	public var ActionID :Integer;
	public var Type :VRGS_SPIN_ACTION_TYPE;
	public var Amount :Float;
	public var ActionArea :String;
	public var ReelView :VRGS_SPIN_REELVIEW_MATRIX;
	public var SpinWin :VRGS_SPIN_WIN;
	public var FreeSpinWin :VRGS_SPIN_WIN_FREE_SPIN;
} //VRGS_SPIN_ACTION

class VRGS_SPIN_REELVIEW_MATRIX
{
	public function toJSON() :String {}
	public var SymbolID :Array<Integer>;
} //VRGS_SPIN_REELVIEW_MATRIX

class VRGS_SPIN_WIN
{
	public function toJSON() :String {}
	public var PaylineID :Integer;
	public var PaytableID :Integer;
} //VRGS_SPIN_WIN

class VRGS_SPIN_WIN_FREE_SPIN
{
	public function toJSON() :String {}
	public var FreeSpins :Integer;
} //VRGS_SPIN_WIN_FREE_SPIN

class VermatiaSlotGameEngine : CocoEngine
{
	public function Destructor() {}
	public function Constructor() {}
	public  var scene :CocoScene;
	public var STATE_START_APP :State;
	public  var __className :String;
} //VermatiaSlotGameEngine

class GameEngine : VermatiaSlotGameEngine
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //GameEngine

class GameScene : CocoScene
{
	public function Destructor() {}
	public function Constructor(engine:CocoEngine) {}
	public  var __className :String;
} //GameScene

