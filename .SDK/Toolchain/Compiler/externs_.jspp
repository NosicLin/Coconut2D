// Auto-generated Project Externs

class Object
{
	public function toString() :String {}
	public function toLocaleString() :String {}
	public function valueOf() :Object {}
	public function hasOwnProperty(name:String) :Boolean {}
	public function isPrototypeOf(o:Object) :Boolean {}
	public function propertyIsEnumerable(name:String) :Boolean {}
	public function defineProperty(object:Object, name:String, params:Object) {}
	public function Destructor() {}
	public  var __className :String;
} //Object

class Array
{
	public function concat(args:Array) :Array<Object> {}
	public function join(seperator:String) :String {}
	public function pop() :Object {}
	public function push(args:Object) :Object {}
	public function reverse() :Array<Object> {}
	public function shift() :Array<Object> {}
	public function slice(start:Number, end:Number) :Array<Object> {}
	public function sort(funct:Function) :Array<Object> {}
	public function splice(start:Number, deletecount:Number, items:Object) :Object {}
	public function unshift(start:Number) :Array<Object> {}
	public function forEach(item:Object) :Array<Object> {}
	public function size() :Integer {}
	public function clear() {}
	public  var length :Number;
	public  var __className :String;
} //Array

class Dictionary
{
	public  var __className :String;
} //Dictionary

class Function
{
	public function apply(thisObject:Object, args:Array<Object>) :Object {}
	public function call(thisObject:Object) :Object {}
	public  var length :Number;
	public  var __className :String;
} //Function

class CocoAction : Function
{
} //CocoAction

class Global
{
	public function __Audio_load(url:String, obj:Audio) :Integer {}
	public function __Video_load(url:String, obj:HTMLVideoElement) :Integer {}
	public function __Facebook_Initialize(AppID:String, ImageSize:Integer) {}
	public function __Facebook_Login(Permissions:String, ImageSize:Integer) {}
	public function __Facebook_Share(URL:String) {}
	public function __Facebook_Post(toUserID:String, URL:String) {}
	public function __Facebook_Invite(message:String) {}
	public function __Twitter_Share(URL:String) {}
	public function __close_window() {}
	public function fixTouch(touch:Touch) {}
	public function require(module:String) :Object {}
	public function md5(str:String) :String {}
	public function atob(str:String) :String {}
	public function btoa(str:String) :String {}
	public function eval(s:String) :Object {}
	public function parseInt(s:String, radix:Number) :Integer {}
	public function parseFloat(s:String) :Float {}
	public function escape(s:String) :String {}
	public function unescape(s:String) :String {}
	public function isNaN(number:Object) :Boolean {}
	public function isFinite(number:Object) :Boolean {}
	public function decodeURI(encodedURI:String) :String {}
	public function decodeURIComponent(uriComponent:String) :String {}
	public function encodeURIComponent(uriComponent:String) :String {}
	public function encodeURI(URI:String) :String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
	public function Destructor() {}
	public var __registerManager;
	public var __registerCallback;
	public var __unRegisterCallback;
	public var __ImageData_loadImage :ImageDataBuffer;
	public var __Audio_get_position :Float;
	public var __Audio_set_position;
	public var __Audio_play;
	public var __Audio_pause;
	public var __Audio_stop;
	public var __Audio_delete;
	public var __Video_get_position :Float;
	public var __Video_set_position;
	public var __Video_play;
	public var __Video_pause;
	public var __Video_stop;
	public var __Video_delete;
	public var __Canvas2DRenderingContext_flush;
	public var __WebGLRenderingContext_activeTexture;
	public var __WebGLRenderingContext_attachShader;
	public var __WebGLRenderingContext_bindAttribLocation;
	public var __WebGLRenderingContext_bindBuffer;
	public var __WebGLRenderingContext_bindFramebuffer;
	public var __WebGLRenderingContext_bindRenderbuffer;
	public var __WebGLRenderingContext_bindTexture;
	public var __WebGLRenderingContext_blendColor;
	public var __WebGLRenderingContext_blendEquation;
	public var __WebGLRenderingContext_blendEquationSeparate;
	public var __WebGLRenderingContext_blendFunc;
	public var __WebGLRenderingContext_blendFuncSeparate;
	public var __WebGLRenderingContext_bufferData;
	public var __WebGLRenderingContext_bufferSubData;
	public var __WebGLRenderingContext_checkFramebufferStatus :Integer;
	public var __WebGLRenderingContext_clear;
	public var __WebGLRenderingContext_clearColor;
	public var __WebGLRenderingContext_clearDepth;
	public var __WebGLRenderingContext_clearStencil;
	public var __WebGLRenderingContext_colorMask;
	public var __WebGLRenderingContext_compileShader;
	public var __WebGLRenderingContext_compressedTexImage2D;
	public var __WebGLRenderingContext_compressedTexSubImage2D;
	public var __WebGLRenderingContext_copyTexImage2D;
	public var __WebGLRenderingContext_copyTexSubImage2D;
	public var __WebGLRenderingContext_createBuffer :Integer;
	public var __WebGLRenderingContext_createFramebuffer :Integer;
	public var __WebGLRenderingContext_createProgram :Integer;
	public var __WebGLRenderingContext_createRenderbuffer :Integer;
	public var __WebGLRenderingContext_createShader :Integer;
	public var __WebGLRenderingContext_createTexture :Integer;
	public var __WebGLRenderingContext_cullFace;
	public var __WebGLRenderingContext_deleteBuffer;
	public var __WebGLRenderingContext_deleteFramebuffer;
	public var __WebGLRenderingContext_deleteProgram;
	public var __WebGLRenderingContext_deleteRenderbuffer;
	public var __WebGLRenderingContext_deleteShader;
	public var __WebGLRenderingContext_deleteTexture;
	public var __WebGLRenderingContext_depthFunc;
	public var __WebGLRenderingContext_depthMask;
	public var __WebGLRenderingContext_depthRange;
	public var __WebGLRenderingContext_detachShader;
	public var __WebGLRenderingContext_disable;
	public var __WebGLRenderingContext_disableVertexAttribArray;
	public var __WebGLRenderingContext_drawArrays;
	public var __WebGLRenderingContext_drawElements;
	public var __WebGLRenderingContext_enable;
	public var __WebGLRenderingContext_enableVertexAttribArray;
	public var __WebGLRenderingContext_execute;
	public var __WebGLRenderingContext_finish;
	public var __WebGLRenderingContext_flush;
	public var __WebGLRenderingContext_framebufferRenderbuffer;
	public var __WebGLRenderingContext_framebufferTexture2D;
	public var __WebGLRenderingContext_frontFace;
	public var __WebGLRenderingContext_generateMipmap;
	public var __WebGLRenderingContext_getActiveAttrib :Integer;
	public var __WebGLRenderingContext_getActiveUniform :Integer;
	public var __WebGLRenderingContext_getAttachedShaders :Array<WebGLShader>;
	public var __WebGLRenderingContext_getAttribLocation :Integer;
	public var __WebGLRenderingContext_getBufferParameter :String;
	public var __WebGLRenderingContext_getContextAttributes :Integer;
	public var __WebGLRenderingContext_getError :Integer;
	public var __WebGLRenderingContext_getExtension :Object;
	public var __WebGLRenderingContext_getFramebufferAttachmentParameter :String;
	public var __WebGLRenderingContext_getParameter :String;
	public var __WebGLRenderingContext_getProgramInfoLog :String;
	public var __WebGLRenderingContext_getProgramParameter :Boolean;
	public var __WebGLRenderingContext_getRenderbufferParameter :String;
	public var __WebGLRenderingContext_getShaderInfoLog :String;
	public var __WebGLRenderingContext_getShaderParameter_boolean :Boolean;
	public var __WebGLRenderingContext_getShaderParameter_enum :Integer;
	public var __WebGLRenderingContext_getShaderPrecisionFormat :Integer;
	public var __WebGLRenderingContext_getShaderSource :String;
	public var __WebGLRenderingContext_getSupportedExtensions :Array<String>;
	public var __WebGLRenderingContext_getTexParameter :String;
	public var __WebGLRenderingContext_getUniform :String;
	public var __WebGLRenderingContext_getUniformLocation :Integer;
	public var __WebGLRenderingContext_getVertexAttrib :String;
	public var __WebGLRenderingContext_getVertexAttribOffset :Integer;
	public var __WebGLRenderingContext_hint;
	public var __WebGLRenderingContext_isBuffer :Boolean;
	public var __WebGLRenderingContext_isContextLost :Boolean;
	public var __WebGLRenderingContext_isEnabled :Boolean;
	public var __WebGLRenderingContext_isFramebuffer :Boolean;
	public var __WebGLRenderingContext_isProgram :Boolean;
	public var __WebGLRenderingContext_isRenderbuffer :Boolean;
	public var __WebGLRenderingContext_isShader :Boolean;
	public var __WebGLRenderingContext_isTexture :Boolean;
	public var __WebGLRenderingContext_lineWidth;
	public var __WebGLRenderingContext_linkProgram;
	public var __WebGLRenderingContext_pixelStorei;
	public var __WebGLRenderingContext_polygonOffset;
	public var __WebGLRenderingContext_readPixels;
	public var __WebGLRenderingContext_renderbufferStorage;
	public var __WebGLRenderingContext_sampleCoverage;
	public var __WebGLRenderingContext_scissor;
	public var __WebGLRenderingContext_shaderSource;
	public var __WebGLRenderingContext_stencilFunc;
	public var __WebGLRenderingContext_stencilFuncSeparate;
	public var __WebGLRenderingContext_stencilMask;
	public var __WebGLRenderingContext_stencilMaskSeparate;
	public var __WebGLRenderingContext_stencilOp;
	public var __WebGLRenderingContext_stencilOpSeparate;
	public var __WebGLRenderingContext_texImage2D;
	public var __WebGLRenderingContext_texParameterf;
	public var __WebGLRenderingContext_texParameteri;
	public var __WebGLRenderingContext_texSubImage2D;
	public var __WebGLRenderingContext_uniform1f;
	public var __WebGLRenderingContext_uniform1fv;
	public var __WebGLRenderingContext_uniform1i;
	public var __WebGLRenderingContext_uniform1iv;
	public var __WebGLRenderingContext_uniform2f;
	public var __WebGLRenderingContext_uniform2fv;
	public var __WebGLRenderingContext_uniform2i;
	public var __WebGLRenderingContext_uniform2iv;
	public var __WebGLRenderingContext_uniform3f;
	public var __WebGLRenderingContext_uniform3fv;
	public var __WebGLRenderingContext_uniform3i;
	public var __WebGLRenderingContext_uniform3iv;
	public var __WebGLRenderingContext_uniform4f;
	public var __WebGLRenderingContext_uniform4fv;
	public var __WebGLRenderingContext_uniform4i;
	public var __WebGLRenderingContext_uniform4iv;
	public var __WebGLRenderingContext_uniformMatrix2fv;
	public var __WebGLRenderingContext_uniformMatrix3fv;
	public var __WebGLRenderingContext_uniformMatrix4fv;
	public var __WebGLRenderingContext_useProgram;
	public var __WebGLRenderingContext_validateProgram;
	public var __WebGLRenderingContext_vertexAttrib1f;
	public var __WebGLRenderingContext_vertexAttrib1fv;
	public var __WebGLRenderingContext_vertexAttrib2f;
	public var __WebGLRenderingContext_vertexAttrib2fv;
	public var __WebGLRenderingContext_vertexAttrib3f;
	public var __WebGLRenderingContext_vertexAttrib3fv;
	public var __WebGLRenderingContext_vertexAttrib4f;
	public var __WebGLRenderingContext_vertexAttrib4fv;
	public var __WebGLRenderingContext_vertexAttribPointer;
	public var __WebGLRenderingContext_viewport;
	public var Object :Object;
	public var Array :Array;
	public var Dictionary :Dictionary;
	public var Function :Function;
	public var CocoAction :CocoAction;
	public var Global :Global;
	public  var NaN :Number;
	public  var Infinity :Number;
	public  var innerWidth :Float;
	public  var innerHeight :Float;
	public  var deviceRotation :Float;
	public  var devicePixelRatio :Float;
	public  var __native :Boolean;
	public  var __Coconut2DPlayer :Boolean;
	public  var __touchEvents :Boolean;
	public  var __className :String;
	public var String :String;
	public var Number :Number;
	public var Integer :Integer;
	public var Float :Float;
	public var Time :Time;
	public var Boolean :Boolean;
	public var Date :Date;
	public var Math :Math;
	public var ECMARegExpMatches :ECMARegExpMatches;
	public var RegExp :RegExp;
	public var ArrayBuffer :ArrayBuffer;
	public var ArrayBufferView :ArrayBufferView;
	public var TypedArray :TypedArray;
	public var Float32Array :Float32Array;
	public var Int32Array :Int32Array;
	public var Uint8Array :Uint8Array;
	public var Uint32Array :Uint32Array;
	public var Error :Error;
	public var EvalError :EvalError;
	public var RangeError :RangeError;
	public var ReferenceError :ReferenceError;
	public var SyntaxError :SyntaxError;
	public var TypeError :TypeError;
	public var JSON :JSON;
	public var ImageDataBuffer :ImageDataBuffer;
	public var DataView :DataView;
	public var XMLHttpRequest :XMLHttpRequest;
	public var Console :Console;
	public var CocoFont :CocoFont;
	public var Color :Color;
	public var Gradient :Gradient;
	public var global :Global;
	public var engine :CocoEngine;
	public var window :HTMLWindow;
	public var document :HTMLDocument;
	public var location :HTMLLocation;
	public var graphics :CocoGraphics;
	public var console :Console;
	public var DEVICE_WRAPPER :COCO_DEVICE_WRAPPER;
	public var NodeJS_Request :NodeJS_Request;
	public var NodeJS_Response :NodeJS_Response;
	public var NodeJS_FS :NodeJS_FS;
	public var NodeJS_V8Context :NodeJS_V8Context;
	public var NodeJS_VM :NodeJS_VM;
	public var NodeJS_Script :NodeJS_Script;
	public var NodeJS_Path :NodeJS_Path;
	public var Data :Data;
	public var NULL_DATA_VALUE :String;
	public var DBTYPEENUM :DBTYPEENUM;
	public var SQLITE_RECORD_STATUS :SQLITE_RECORD_STATUS;
	public var SQLITE_TABLE_ACCESS :SQLITE_TABLE_ACCESS;
	public var SQLITE_COLUMN_FLAGS :SQLITE_COLUMN_FLAGS;
	public var SQLITE_SCHEMA_ENUM :SQLITE_SCHEMA_ENUM;
	public var SQLITE_INTERNAL_TYPE :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VARTYPE :SQLITE_VARTYPE;
	public var CocoDataStream :CocoDataStream;
	public var CocoDataField :CocoDataField;
	public var CocoDataRow :CocoDataRow;
	public var CocoDataset :CocoDataset;
	public var RX :RX;
	public var REGULAR_EXPRESSION_FLAGS :REGULAR_EXPRESSION_FLAGS;
	public var Match :Match;
	public var MatchCollection :MatchCollection;
	public var RegEx :RegEx;
	public var ASP :ASP;
	public var fs :NodeJS_FS;
	public var vm :NodeJS_VM;
	public var path :NodeJS_Path;
	public var ASPProcessor :ASPProcessor;
	public var HttpSever :HttpSever;
	public var HTTPServer :HTTPServer;
	public var CocoServer :CocoServer;
	public var Server :Server;
} //Global

class String
{
	public function fromCharCode(charCode:Number) :String {}
	public function charAt(position:Number) :String {}
	public function charCodeAt(position:Number) :Number {}
	public function concat(value:String) :String {}
	public function indexOf(searchString:String, startPosition:Number) :Number {}
	public function lastIndexOf(searchString:String, startPosition:Number) :Number {}
	public function localeCompare(otherString:String) :Number {}
	public function match(regexp:RegExp) :Array<Object> {}
	public function replace(regexp:RegExp, replaceValue:String) :String {}
	public function replace$1(find:String, replaceValue:String) :String {}
	public function search(regexp:RegExp) :Number {}
	public function slice(start:Number, end:Number) :String {}
	public function split(separator:String, limit:Number) :Array<String> {}
	public function substring(start:Number, end:Number) :String {}
	public function substr(start:Number, size:Number) :String {}
	public function toLowerCase() :String {}
	public function toLocaleLowerCase() :String {}
	public function toUpperCase() :String {}
	public function toLocaleUpperCase() :String {}
	public function size() :Integer {}
	public function trim() :String {}
	public  var length :Number;
	public  var __className :String;
} //String

class Number
{
	public function toFixed(fractionDigits:Number) :String {}
	public function toExponential(fractionDigits:Number) :String {}
	public function toPrecision(fractionDigits:Number) :String {}
	public  var MIN_VALUE :Number;
	public  var MAX_VALUE :Number;
	public  var NEGATIVE_INFINITY :Number;
	public  var POSITIVE_INFINITY :Number;
	public  var __className :String;
} //Number

class Integer : Number
{
	public  var __className :String;
} //Integer

class Float : Number
{
	public  var __className :String;
} //Float

class Time : Number
{
	public  var __className :String;
} //Time

class Boolean
{
	public  var __className :String;
} //Boolean

class Date
{
	public function UTC(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function parse(string:String) :Number {}
	public function toDateString() :String {}
	public function toTimeString() :String {}
	public function toLocaleString() :String {}
	public function toLocaleDateString() :String {}
	public function toLocaleTimeString() :String {}
	public function valueOf() :Object {}
	public function getFullYear() :Number {}
	public function getTime() :Number {}
	public function getUTCFullYear() :Number {}
	public function getMonth() :Number {}
	public function getUTCMonth() :Number {}
	public function getDate() :Number {}
	public function getUTCDate() :Number {}
	public function getDay() :Number {}
	public function getUTCDay() :Number {}
	public function getHours() :Number {}
	public function getUTCHours() :Number {}
	public function getMinutes() :Number {}
	public function getUTCMinutes() :Number {}
	public function getSeconds() :Number {}
	public function getUTCSeconds() :Number {}
	public function getMilliseconds() :Number {}
	public function getUTCMilliseconds() :Number {}
	public function getTimezoneOffset() :Number {}
	public function setTime(value:Number) :Number {}
	public function setMilliseconds(value:Number) :Number {}
	public function setUTCMilliseconds(ms:Number) :Number {}
	public function setSeconds(sec:Number, ms:Number) :Number {}
	public function setUTCSeconds(sec:Number, ms:Number) :Number {}
	public function setMinutes(min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCMinute(min:Number, sec:Number, ms:Number) :Number {}
	public function setHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setDate(date:Number) :Number {}
	public function setUTCDate(date:Number) :Number {}
	public function setMonth(month:Number, date:Number) :Number {}
	public function setUTCMonth(month:Number, date:Number) :Number {}
	public function setFullYear(year:Number, month:Number, date:Number) :Number {}
	public function setUTCFullYear(year:Number, month:Number, date:Number) {}
	public function toUTCString() :String {}
	public function toJSON() :String {}
	public  var __className :String;
} //Date

class Math
{
	public function abs(x:Number) :Number {}
	public function acos(x:Number) :Float {}
	public function asin(x:Number) :Float {}
	public function atan(x:Number) :Float {}
	public function atan2(x:Number, y:Number) :Float {}
	public function ceil(x:Number) :Number {}
	public function cos(x:Number) :Float {}
	public function exp(x:Number) :Float {}
	public function floor(x:Number) :Integer {}
	public function log(x:Number) :Float {}
	public function max(a:Number, b:Number) :Number {}
	public function min(a:Number, b:Number) :Number {}
	public function pow(x:Number, y:Number) :Float {}
	public function random() :Float {}
	public function round(x:Number) :Number {}
	public function sin(x:Number) :Float {}
	public function sqrt(x:Number) :Float {}
	public function tan(x:Number) :Float {}
	public static  var E :Float;
	public static  var LN10 :Float;
	public static  var LN2 :Float;
	public static  var LOG2E :Float;
	public static  var LOG10E :Float;
	public static  var PI :Float;
	public static  var SQRT1_2 :Float;
	public static  var SQRT2 :Float;
	public  var __className :String;
} //Math

class ECMARegExpMatches : Array
{
	public  var index :Integer;
	public  var __className :String;
} //ECMARegExpMatches

class RegExp
{
	public function exec(string:String) :ECMARegExpMatches {}
	public function test(string:String) :Boolean {}
	public  var source :String;
	public  var global :Boolean;
	public  var ignoreCase :Boolean;
	public  var multiline :Boolean;
	public  var lastIndex :Number;
	public  var __className :String;
} //RegExp

class ArrayBuffer
{
	public function slice(begin:Number, end:Number) :ArrayBuffer {}
	public function encodeAsPNG(width:Number, height:Number) :ArrayBuffer {}
	public function encodeAsBase64() :String {}
	public  var byteLength :Number;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBuffer

class ArrayBufferView
{
	public function Destructor() {}
	public  var buffer :ArrayBuffer;
	public  var byteOffset :Integer;
	public  var byteLength :Integer;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBufferView

class TypedArray : ArrayBufferView
{
	public function set(array:TypedArray, offset:Integer) {}
	public  var length :Integer;
	public  var BYTES_PER_ELEMENT :Integer;
	public  var __className :String;
} //TypedArray

class Float32Array : TypedArray
{
	public  var __className :String;
} //Float32Array

class Int32Array : TypedArray
{
	public  var __className :String;
} //Int32Array

class Uint8Array : TypedArray
{
	public  var __className :String;
} //Uint8Array

class Uint32Array : TypedArray
{
	public  var __className :String;
} //Uint32Array

class Error
{
	public  var name :String;
	public  var message :String;
	public  var __className :String;
} //Error

class EvalError : Error
{
	public  var __className :String;
} //EvalError

class RangeError : Error
{
	public  var __className :String;
} //RangeError

class ReferenceError : Error
{
	public  var __className :String;
} //ReferenceError

class SyntaxError : Error
{
	public  var __className :String;
} //SyntaxError

class TypeError : Error
{
	public  var __className :String;
} //TypeError

class JSON
{
	public function parse(json:String) :Array<Object> {}
	public function stringify(obj:Array<Object>) :String {}
	public  var __className :String;
} //JSON

class ImageDataBuffer
{
	public  var buffer :ArrayBuffer;
	public  var width :Float;
	public  var height :Float;
	public  var __className :String;
} //ImageDataBuffer

class DataView : ArrayBufferView
{
	public function getInt8(byteOffset:Integer) :Integer {}
	public function getUint8(byteOffset:Integer) :Integer {}
	public function getInt16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getInt32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getFloat32(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function getFloat64(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function setInt8(byteOffset:Integer, value:Integer) {}
	public function setUint8(byteOffset:Integer, value:Integer) {}
	public function setInt16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setInt32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setFloat32(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function setFloat64(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function Constructor(buffer:ArrayBuffer, byteOffset:Integer, byteLength:Integer) {}
	public  var __className :String;
} //DataView

class XMLHttpRequest
{
	public function open(method:String, url:String, async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send(data:String) {}
	public function send$1(data:ArrayBufferView) {}
	public function send$2() {}
	public function abort() {}
	public function getAllResponseHeaders() :String {}
	public function getResponseHeader(header:String) :String {}
	public  var UNSENT :Integer;
	public  var OPENED :Integer;
	public  var HEADERS_RECEIVED :Integer;
	public  var LOADING :Integer;
	public  var DONE :Integer;
	public  var timeout :Integer;
	public  var readyState :Integer;
	public  var status :Integer;
	public  var statusText :String;
	public  var responseText :String;
	public  var responseType :String;
	public  var response :ArrayBuffer;
	public  var __className :String;
} //XMLHttpRequest

class Console
{
	public function log(msg:String) {}
	public  var __className :String;
} //Console

class CocoFont
{
	public function fillText(imageDataBuffer:ArrayBuffer, width:Float, text:String, x:Float, y:Float, R:Float, G:Float, B:Float, A:Float) {}
	public function measureText(text:String) :Float {}
	public function Constructor(FontName:String, FontSize:Float, Bold:Boolean, Italic:Boolean) {}
	public  var height :Float;
	public  var __className :String;
} //CocoFont

class Color : Number
{
	public  var __className :String;
} //Color

class Gradient : String
{
	public  var __className :String;
} //Gradient

class NodeJS_Request
{
	public function setTimeout(msecs:Integer, callbackfn:Function) {}
	public  var httpVersion :String;
	public  var headers :Object;
	public  var trailers :Object;
	public  var method :String;
	public  var url :String;
	public  var statusCode :Integer;
	public  var socket :Object;
	public  var __className :String;
} //NodeJS_Request

class NodeJS_Response
{
	public function writeContinue() {}
	public function writeHead(statusCode:Integer, reasonPhrase:String, headers:Object) {}
	public function setTimeout(msecs:Integer, callbackfn:Function) {}
	public function setHeader(name:String, value:String) {}
	public function setHeader$1(cookie:String, value:Array<String>) {}
	public function getHeader(name:String) :String {}
	public function removeHeader(name:String) {}
	public function write(chunk:String, encoding:String) {}
	public function addTrailers(headers:String) {}
	public function end(data:String, encoding:String) {}
	public  var statusCode :Integer;
	public  var headersSent :Boolean;
	public  var sendDate :Boolean;
	public  var __className :String;
} //NodeJS_Response

class NodeJS_FS
{
	public function rename(oldPath:String, newPath:String, Callback:Function) {}
	public function renameSync(oldPath:String, newPath:String) {}
	public function truncate(fd:Object, len:Number, Callback:Function) {}
	public function truncateSync(fd:Object, len:Number) {}
	public function chown(path:String, uid:Number, gid:Number, Callback:Function) {}
	public function chownSync(path:String, uid:Number, gid:Number) {}
	public function fchown(fd:Object, uid:Number, gid:Number, Callback:Function) {}
	public function fchownSync(fd:Object, uid:Number, gid:Number) {}
	public function lchown(path:String, uid:Number, gid:Number, Callback:Function) {}
	public function lchownSync(path:String, uid:Number, gid:Number) {}
	public function chmod(path:String, mode:Number, Callback:Function) {}
	public function chmodSync(path:String, mode:Number) {}
	public function fchmod(fd:Object, mode:Number, Callback:Function) {}
	public function fchmodSync(fd:Object, mode:Number) {}
	public function lchmod(path:String, mode:Number, Callback:Function) {}
	public function lchmodSync(path:String, mode:Number) {}
	public function stat(path:String, Callback:Function) {}
	public function statSync(path:String) :Stats {}
	public function fstat(fd:Object, Callback:Function) {}
	public function fstatSync(fd:Object) :Stats {}
	public function lstat(path:String, Callback:Function) {}
	public function lstatSync(path:String) :Stats {}
	public function link(srcpath:String, dstpath:String, Callback:Function) {}
	public function linkSync(srcpath:String, dstpath:String) {}
	public function symlink(srcpath:String, dstpath:String, type:String, Callback:Function) {}
	public function symlinkSync(srcpath:String, dstpath:String, type:String) {}
	public function readlink(path:String, Callback:Function) {}
	public function readlinkSync(path:String) :String {}
	public function realpath(path:String, cache:Object, Callback:Function) {}
	public function realpathSync(path:String, cache:Object) :String {}
	public function unlink(path:String, Callback:Function) {}
	public function unlinkSync(path:String) {}
	public function rmdir(path:String, Callback:Function) {}
	public function rmdirSync(path:String) {}
	public function mkdir(path:String, mode:Number, Callback:Function) {}
	public function mkdirSync(path:String, mode:Number) {}
	public function readdir(path:String, Callback:Function) {}
	public function readdirSync(path:String) :Array<string> {}
	public function close(fd:Object, Callback:Function) {}
	public function closeSync(fd:Object) {}
	public function open(path:String, flags:String, mode:Number, Callback:Function) {}
	public function openSync(path:String, flags:String, mode:Number) :Object {}
	public function utimes(path:String, atime:Number, mtime:Number, Callback:Function) {}
	public function utimesSync(path:String, atime:Number, mtime:Number) {}
	public function futimes(fd:Object, atime:Number, mtime:Number, Callback:Function) {}
	public function futimesSync(fd:Object, atime:Number, mtime:Number) {}
	public function fsync(fd:Object, Callback:Function) {}
	public function fsyncSync(fd:Object) {}
	public function write(fd:Object, buffer:Object, offset:Number, length:Number, position:Number, Callback:Function) {}
	public function writeSync(fd:Object, buffer:Object, offset:Number, length:Number, position:Number) :Number {}
	public function read(fd:Object, buffer:Object, offset:Number, length:Number, position:Number, Callback:Function) {}
	public function readSync(fd:Object, buffer:Object, offset:Number, length:Number, position:Number) :Number {}
	public function readFile(filename:String, encodingOrOptions:String, Callback:Function) {}
	public function readFileSync(filename:String, encodingOrOptions:String) :String {}
	public function writeFile(filename:String, data:String, encodingOrOptions:String, Callback:Function) {}
	public function writeFileSync(filename:String, data:String, encodingOrOptions:String) {}
	public function appendFile(filename:String, data:String, encoding:String, Callback:Function) {}
	public function appendFileSync(filename:String, data:String, encoding:String) {}
	public function watchFile(filename:String, options:Object, listener:Function) {}
	public function unwatchFile(filename:String, listener:Function) {}
	public function watch(filename:String, options:Object, listener:Function) :FSWatcher {}
	public function exists(path:String, Callback:Function) {}
	public function existsSync(path:String) {}
	public function createReadStream(path:String, options:Dictionary) :ReadStream {}
	public function createWriteStream(path:String, options:Dictionary) :WriteStream {}
	public  var __className :String;
} //NodeJS_FS

class NodeJS_V8Context
{
	public  var __className :String;
} //NodeJS_V8Context

class NodeJS_VM
{
	public function runInThisContext(code:String, filename:String) :String {}
	public function runInNewContext(code:String, sandbox:Dictionary, filename:String) :String {}
	public function runInContext(code:String, context:NodeJS_V8Context, filename:String) :String {}
	public function createContext(initSandbox:Dictionary) :NodeJS_V8Context {}
	public function createScript(code:String, filename:String) :NodeJS_Script {}
	public  var __className :String;
} //NodeJS_VM

class NodeJS_Script
{
	public function runInThisContext() :String {}
	public function runInNewContext(sandbox:Dictionary) :String {}
	public  var __className :String;
} //NodeJS_Script

class NodeJS_Path
{
	public function normalize(path:String) :String {}
	public function join(var_args:String) :String {}
	public function resolve(fromPath:String, toPath:String) :String {}
	public function relative(fromPath:String, toPath:String) :String {}
	public function dirname(path:String) :String {}
	public function basename(path:String, ext:String) :String {}
	public function extname(path:String) :String {}
	public  var sep :String;
	public  var __className :String;
} //NodeJS_Path

class Data
{
} //Data

class DBTYPEENUM
{
	public var DBTYPE_EMPTY :DBTYPEENUM;
	public var DBTYPE_NULL :DBTYPEENUM;
	public var DBTYPE_I2 :DBTYPEENUM;
	public var DBTYPE_I4 :DBTYPEENUM;
	public var DBTYPE_R4 :DBTYPEENUM;
	public var DBTYPE_R8 :DBTYPEENUM;
	public var DBTYPE_CY :DBTYPEENUM;
	public var DBTYPE_DATE :DBTYPEENUM;
	public var DBTYPE_BSTR :DBTYPEENUM;
	public var DBTYPE_IDISPATCH :DBTYPEENUM;
	public var DBTYPE_ERROR :DBTYPEENUM;
	public var DBTYPE_BOOL :DBTYPEENUM;
	public var DBTYPE_VARIANT :DBTYPEENUM;
	public var DBTYPE_IUNKNOWN :DBTYPEENUM;
	public var DBTYPE_DECIMAL :DBTYPEENUM;
	public var DBTYPE_UI1 :DBTYPEENUM;
	public var DBTYPE_ARRAY :DBTYPEENUM;
	public var DBTYPE_BYREF :DBTYPEENUM;
	public var DBTYPE_I1 :DBTYPEENUM;
	public var DBTYPE_UI2 :DBTYPEENUM;
	public var DBTYPE_UI4 :DBTYPEENUM;
	public var DBTYPE_I8 :DBTYPEENUM;
	public var DBTYPE_UI8 :DBTYPEENUM;
	public var DBTYPE_GUID :DBTYPEENUM;
	public var DBTYPE_VECTOR :DBTYPEENUM;
	public var DBTYPE_RESERVED :DBTYPEENUM;
	public var DBTYPE_BYTES :DBTYPEENUM;
	public var DBTYPE_STR :DBTYPEENUM;
	public var DBTYPE_WSTR :DBTYPEENUM;
	public var DBTYPE_NUMERIC :DBTYPEENUM;
	public var DBTYPE_UDT :DBTYPEENUM;
	public var DBTYPE_DBDATE :DBTYPEENUM;
	public var DBTYPE_DBTIME :DBTYPEENUM;
	public var DBTYPE_DBTIMESTAMP :DBTYPEENUM;
	public var DBTYPE_HCHAPTER :DBTYPEENUM;
	public var DBTYPE_FILETIME :DBTYPEENUM;
	public var DBTYPE_PROPVARIANT :DBTYPEENUM;
	public var DBTYPE_VARNUMERIC :DBTYPEENUM;
	public var DBTYPE_BLOB :DBTYPEENUM;
} //DBTYPEENUM

class SQLITE_RECORD_STATUS
{
	public var RECORD_NO_RECORD :SQLITE_RECORD_STATUS;
	public var RECORD_UNCHANGED :SQLITE_RECORD_STATUS;
	public var RECORD_CHANGED :SQLITE_RECORD_STATUS;
	public var RECORD_DELETED :SQLITE_RECORD_STATUS;
	public var RECORD_INSERTED :SQLITE_RECORD_STATUS;
	public var RECORD_ALL :SQLITE_RECORD_STATUS;
} //SQLITE_RECORD_STATUS

class SQLITE_TABLE_ACCESS
{
	public var CAN_SELECT :SQLITE_TABLE_ACCESS;
	public var CAN_INSERT :SQLITE_TABLE_ACCESS;
	public var CAN_UPDATE :SQLITE_TABLE_ACCESS;
	public var CAN_DELETE :SQLITE_TABLE_ACCESS;
	public var CAN_CRUD :SQLITE_TABLE_ACCESS;
} //SQLITE_TABLE_ACCESS

class SQLITE_COLUMN_FLAGS
{
	public var IS_UNIQUE :SQLITE_COLUMN_FLAGS;
	public var IS_KEYCOLUMN :SQLITE_COLUMN_FLAGS;
	public var IS_SEARCHABLE :SQLITE_COLUMN_FLAGS;
	public var IS_COMPUTED :SQLITE_COLUMN_FLAGS;
	public var IS_AUTOINCREMENT :SQLITE_COLUMN_FLAGS;
	public var IS_SORTABLE :SQLITE_COLUMN_FLAGS;
	public var IS_WRITABLE :SQLITE_COLUMN_FLAGS;
	public var IS_SEARCHABLE_LIKE :SQLITE_COLUMN_FLAGS;
	public var IS_NULLABLE :SQLITE_COLUMN_FLAGS;
	public var IS_ROWID :SQLITE_COLUMN_FLAGS;
	public var IS_FIXED_LENGTH :SQLITE_COLUMN_FLAGS;
	public var HAS_DEFAULT :SQLITE_COLUMN_FLAGS;
} //SQLITE_COLUMN_FLAGS

class SQLITE_SCHEMA_ENUM
{
	public var SQLITE_TABLES :SQLITE_SCHEMA_ENUM;
	public var SQLITE_VIEWS :SQLITE_SCHEMA_ENUM;
	public var SQLITE_COLUMNS :SQLITE_SCHEMA_ENUM;
	public var SQLITE_FOREIGN_KEYS :SQLITE_SCHEMA_ENUM;
} //SQLITE_SCHEMA_ENUM

class SQLITE_INTERNAL_TYPE
{
	public var SQLITE_VT_INTGER :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_FLOAT :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_TEXT :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_BLOB :SQLITE_INTERNAL_TYPE;
	public var SQLITE_VT_NULL :SQLITE_INTERNAL_TYPE;
} //SQLITE_INTERNAL_TYPE

class SQLITE_VARTYPE
{
	public var VARTYPE_I1 :SQLITE_VARTYPE;
	public var VARTYPE_I2 :SQLITE_VARTYPE;
	public var VARTYPE_I4 :SQLITE_VARTYPE;
	public var VARTYPE_I8 :SQLITE_VARTYPE;
	public var VARTYPE_UI1 :SQLITE_VARTYPE;
	public var VARTYPE_UI2 :SQLITE_VARTYPE;
	public var VARTYPE_UI4 :SQLITE_VARTYPE;
	public var VARTYPE_UI8 :SQLITE_VARTYPE;
	public var VARTYPE_R4 :SQLITE_VARTYPE;
	public var VARTYPE_R8 :SQLITE_VARTYPE;
	public var VARTYPE_BOOL :SQLITE_VARTYPE;
	public var VARTYPE_DBDATE :SQLITE_VARTYPE;
	public var VARTYPE_DBTIME :SQLITE_VARTYPE;
	public var VARTYPE_DBTIMESTAMP :SQLITE_VARTYPE;
	public var VARTYPE_DATE :SQLITE_VARTYPE;
	public var VARTYPE_CY :SQLITE_VARTYPE;
	public var VARTYPE_DECIMAL :SQLITE_VARTYPE;
	public var VARTYPE_BLOB :SQLITE_VARTYPE;
	public var VARTYPE_BSTR :SQLITE_VARTYPE;
	public var VARTYPE_WSTR :SQLITE_VARTYPE;
} //SQLITE_VARTYPE

class CocoDataStream
{
	public function open(url:String) :Boolean {}
	public function fromBase64(data:String) :Boolean {}
	public function toBase64() :String {}
	public function increaseSize(s:Integer) {}
	public function shrink() {}
	public function load(URL:String) {}
	public function save(URL:String) {}
	public function clone() :CocoDataStream {}
	public function writeInteger(v:Integer) {}
	public function writeFloat(v:Float) {}
	public function writeString(v:String) {}
	public function writeBoolean(v:Boolean) {}
	public function writeInt32Array(v:Int32Array) {}
	public function writeFloat32Array(v:Float32Array) {}
	public function writeDataStream(v:CocoDataStream) {}
	public function writeDate(v:Date) {}
	public function readCocoDataStream() :CocoDataStream {}
	protected function set(v:Int32Array) {}
	public function readUint8Array() :Uint8Array {}
	public function readInt32Array() :Int32Array {}
	public function readFloat32Array() :Float32Array {}
	public function readInteger() :Integer {}
	public function readFloat() :Float {}
	public function readString() :String {}
	public function readBoolean() :Boolean {}
	public function readDate() :Date {}
	public function Destructor() {}
	public function Constructor() {}
	private  var ELEMENTS_INCREMENT :Integer;
	private  var bi :Int32Array;
	private  var bf :Float32Array;
	private  var __offset :Integer;
	private  var __length :Integer;
	public  var offset :Integer;
	public  var __className :String;
} //CocoDataStream

class CocoDataField
{
	public function copy(col:CocoDataField) {}
	public function write(ds:CocoDataStream) {}
	public function read(ds:CocoDataStream) {}
	public function Destructor() {}
	public function Constructor(dataset:CocoDataset) {}
	private  var dataset :CocoDataset;
	public  var ORDINAL :Integer;
	public  var NAME :String;
	public  var BASECOLUMNNAME :String;
	public  var BASETABLENAME :String;
	public  var ID :String;
	public  var TYPE :SQLITE_VARTYPE;
	public  var LCID :Integer;
	public  var PRECISION :Integer;
	public  var SCALE :Integer;
	public  var SIZE :Integer;
	public  var LENGTH :Integer;
	public  var FLAGS :SQLITE_COLUMN_FLAGS;
	public  var SQLITE_DECLARED_TYPE :String;
	public  var SQLITE_PK_COLUMN :String;
	public  var SQLITE_PK_TABLE :String;
	public  var SQLITE_DATATYPE :SQLITE_INTERNAL_TYPE;
	public  var DEFAULTVALUE :String;
	public  var value :String;
	public  var __className :String;
} //CocoDataField

class CocoDataRow
{
	public function write(ds:CocoDataStream) {}
	public function read(ds:CocoDataStream) {}
	public function Destructor() {}
	public function Constructor(dataset:CocoDataset) {}
	private  var dataset :CocoDataset;
	public  var STATUS :SQLITE_RECORD_STATUS;
	public  var FieldValues :Array<String>;
	public  var __className :String;
} //CocoDataRow

class CocoDataset
{
	public function open(url:String) :Boolean {}
	public function open$1(ds:CocoDataStream) :Boolean {}
	public function write(ds:CocoDataStream) :Boolean {}
	public function close() {}
	public function ADD_META(ORDINAL:Integer, NAME:String, TYPE:SQLITE_VARTYPE, PRECISION:Integer, SCALE:Integer, LENGTH:Integer, FLAGS:SQLITE_COLUMN_FLAGS, BASECOLUMNNAME:String, BASETABLENAME:String, ID:String, LCID:Integer, SIZE:Integer, SQLITE_DECLARED_TYPE:String, SQLITE_PK_COLUMN:String, SQLITE_PK_TABLE:String, SQLITE_DATATYPE:SQLITE_INTERNAL_TYPE, DEFAULTVALUE:String) {}
	public function ADD_DATA(length:Integer) {}
	private function isSet(v:SQLITE_RECORD_STATUS, flags:SQLITE_RECORD_STATUS) :Boolean {}
	public function recordCount(Status:SQLITE_RECORD_STATUS) :Integer {}
	private function row_to_record(rowIndex:Integer, Status:Integer) :Integer {}
	public function getMatrix(Row:Integer, Col:Integer) :String {}
	public function putMatrix(Row:Integer, Col:Integer, value:String) :Boolean {}
	public function status() :SQLITE_RECORD_STATUS {}
	public function move(recordIndex:Integer) :Boolean {}
	public function moveFirst() :Boolean {}
	public function moveLast() :Boolean {}
	public function moveNext() :Boolean {}
	public function movePrev() :Boolean {}
	public function moved() :Boolean {}
	public function field(name:String) :CocoDataField {}
	public function field$1(ordinal:Integer) :CocoDataField {}
	public function insertRecord() :Boolean {}
	public function deleteRecord() :Boolean {}
	public function locate(fieldName:String, fieldValue:String) :Boolean {}
	public function getBookmark() :String {}
	public function setBookmark(bookmark:String) :Boolean {}
	public function toBase64() :String {}
	public function update() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var fileName :String;
	public  var SQL :String;
	public  var METADATA :Array<CocoDataField>;
	public  var DATA :Array<CocoDataRow>;
	public  var ACCESS :SQLITE_TABLE_ACCESS;
	public  var __recordIndex :Integer;
	public  var EOF :Boolean;
	public  var BOF :Boolean;
	public  var stringForNull :String;
	public  var StatusFilter :SQLITE_RECORD_STATUS;
	public  var fieldCount :Integer;
	public  var __className :String;
} //CocoDataset

class RX
{
} //RX

class REGULAR_EXPRESSION_FLAGS
{
	public var RX_IGNORE_CASE :REGULAR_EXPRESSION_FLAGS;
	public var RX_MULTILINE :REGULAR_EXPRESSION_FLAGS;
	public var RX_GLOBAL :REGULAR_EXPRESSION_FLAGS;
	public var RX_ALL :REGULAR_EXPRESSION_FLAGS;
} //REGULAR_EXPRESSION_FLAGS

class Match
{
	public function subMatches(index:Integer) :String {}
	public function Destructor() {}
	public function Constructor(arr:ECMARegExpMatches) {}
	public  var index :Integer;
	public  var value :String;
	public  var length :Integer;
	private  var submatches :Array<String>;
	public  var __className :String;
} //Match

class MatchCollection : Array
{
	public function size() :Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //MatchCollection

class RegEx
{
	public function toPattern(string:String) :String {}
	private function init(pattern:String, flags:REGULAR_EXPRESSION_FLAGS) {}
	public function parse(buff:String, pattern:String, flags:REGULAR_EXPRESSION_FLAGS) :MatchCollection {}
	public function test(buff:String, pattern:String, flags:REGULAR_EXPRESSION_FLAGS) :Boolean {}
	public function replace(buff:String, findPattern:String, replacePattern:String, flags:REGULAR_EXPRESSION_FLAGS) :String {}
	public function Destructor() {}
	public function Constructor(pattern:String, flags:REGULAR_EXPRESSION_FLAGS) {}
	private  var rx :RegExp;
	public  var __className :String;
} //RegEx

class ASP
{
} //ASP

class ASPProcessor
{
	public function run(Request:NodeJS_Request, Response:NodeJS_Response) {}
	private function compile(buff:String) :String {}
	private function HTML2Script(HTML:String) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //ASPProcessor

class HttpSever
{
} //HttpSever

class HTTPServer
{
	public function handle(req:NodeJS_Request, res:NodeJS_Response) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTTPServer

class CocoServer
{
} //CocoServer

class Server : HttpSever.HTTPServer
{
	public function handle(req:NodeJS_Request, res:NodeJS_Response) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //Server

