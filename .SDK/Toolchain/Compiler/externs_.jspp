// Auto-generated Project Externs

class Object
{
	public function toString() :String {}
	public function toLocaleString() :String {}
	public function valueOf() :Object {}
	public function hasOwnProperty(name:String) :Boolean {}
	public function isPrototypeOf(o:Object) :Boolean {}
	public function propertyIsEnumerable(name:String) :Boolean {}
	public function defineProperty(object:Object, name:String, params:Object) {}
	public function Destructor() {}
	public  var __className :String;
} //Object

class Array
{
	public function concat(args:Array) :Array<Object> {}
	public function join(seperator:String) :String {}
	public function pop() :Object {}
	public function push(args:Object) :Object {}
	public function reverse() :Array<Object> {}
	public function shift() :Array<Object> {}
	public function slice(start:Number, end:Number) :Array<Object> {}
	public function sort(funct:Function) :Array<Object> {}
	public function splice(start:Number, deletecount:Number, items:Object) :Object {}
	public function unshift(start:Number) :Array<Object> {}
	public function forEach(item:Object) :Array<Object> {}
	public function size() :Integer {}
	public function clear() {}
	public  var length :Number;
	public  var __className :String;
} //Array

class Function
{
	public function apply(thisObject:Object, args:Array<Object>) :Object {}
	public function call(thisObject:Object) :Object {}
	public  var length :Number;
	public  var __className :String;
} //Function

class CocoAction : Function
{
} //CocoAction

class Global
{
	public function __Audio_load(url:String, obj:Audio) :Integer {}
	public function __Facebook_Initialize(AppID:String, ImageSize:Integer) {}
	public function __Facebook_Login(Permissions:String, ImageSize:Integer) {}
	public function __Facebook_Share(URL:String) {}
	public function __Facebook_Post(toUserID:String, URL:String) {}
	public function __Facebook_Invite(message:String) {}
	public function __Twitter_Share(URL:String) {}
	public function __close_window() {}
	public function fixTouch(touch:Touch) {}
	public function require(module:String) :Object {}
	public function eval(s:String) :Object {}
	public function parseInt(s:String, radix:Number) :Integer {}
	public function parseFloat(s:String) :Float {}
	public function escape(s:String) :String {}
	public function unescape(s:String) :String {}
	public function isNaN(number:Object) :Boolean {}
	public function isFinite(number:Object) :Boolean {}
	public function decodeURI(encodedURI:String) :String {}
	public function decodeURIComponent(uriComponent:String) :String {}
	public function encodeURIComponent(uriComponent:String) :String {}
	public function encodeURI(URI:String) :String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
	public function Destructor() {}
	public var __registerManager;
	public var __registerCallback;
	public var __unRegisterCallback;
	public var __ImageData_loadImage :ImageDataBuffer;
	public var __Audio_get_position :Float;
	public var __Audio_set_position;
	public var __Audio_play;
	public var __Audio_pause;
	public var __Audio_stop;
	public var __Canvas2DRenderingContext_flush;
	public var __WebGLRenderingContext_activeTexture;
	public var __WebGLRenderingContext_attachShader;
	public var __WebGLRenderingContext_bindAttribLocation;
	public var __WebGLRenderingContext_bindBuffer;
	public var __WebGLRenderingContext_bindFramebuffer;
	public var __WebGLRenderingContext_bindRenderbuffer;
	public var __WebGLRenderingContext_bindTexture;
	public var __WebGLRenderingContext_blendColor;
	public var __WebGLRenderingContext_blendEquation;
	public var __WebGLRenderingContext_blendEquationSeparate;
	public var __WebGLRenderingContext_blendFunc;
	public var __WebGLRenderingContext_blendFuncSeparate;
	public var __WebGLRenderingContext_bufferData;
	public var __WebGLRenderingContext_bufferSubData;
	public var __WebGLRenderingContext_checkFramebufferStatus :Integer;
	public var __WebGLRenderingContext_clear;
	public var __WebGLRenderingContext_clearColor;
	public var __WebGLRenderingContext_clearDepth;
	public var __WebGLRenderingContext_clearStencil;
	public var __WebGLRenderingContext_colorMask;
	public var __WebGLRenderingContext_compileShader;
	public var __WebGLRenderingContext_compressedTexImage2D;
	public var __WebGLRenderingContext_compressedTexSubImage2D;
	public var __WebGLRenderingContext_copyTexImage2D;
	public var __WebGLRenderingContext_copyTexSubImage2D;
	public var __WebGLRenderingContext_createBuffer :Integer;
	public var __WebGLRenderingContext_createFramebuffer :Integer;
	public var __WebGLRenderingContext_createProgram :Integer;
	public var __WebGLRenderingContext_createRenderbuffer :Integer;
	public var __WebGLRenderingContext_createShader :Integer;
	public var __WebGLRenderingContext_createTexture :Integer;
	public var __WebGLRenderingContext_cullFace;
	public var __WebGLRenderingContext_deleteBuffer;
	public var __WebGLRenderingContext_deleteFramebuffer;
	public var __WebGLRenderingContext_deleteProgram;
	public var __WebGLRenderingContext_deleteRenderbuffer;
	public var __WebGLRenderingContext_deleteShader;
	public var __WebGLRenderingContext_deleteTexture;
	public var __WebGLRenderingContext_depthFunc;
	public var __WebGLRenderingContext_depthMask;
	public var __WebGLRenderingContext_depthRange;
	public var __WebGLRenderingContext_detachShader;
	public var __WebGLRenderingContext_disable;
	public var __WebGLRenderingContext_disableVertexAttribArray;
	public var __WebGLRenderingContext_drawArrays;
	public var __WebGLRenderingContext_drawElements;
	public var __WebGLRenderingContext_enable;
	public var __WebGLRenderingContext_enableVertexAttribArray;
	public var __WebGLRenderingContext_execute;
	public var __WebGLRenderingContext_finish;
	public var __WebGLRenderingContext_flush;
	public var __WebGLRenderingContext_framebufferRenderbuffer;
	public var __WebGLRenderingContext_framebufferTexture2D;
	public var __WebGLRenderingContext_frontFace;
	public var __WebGLRenderingContext_generateMipmap;
	public var __WebGLRenderingContext_getActiveAttrib :Integer;
	public var __WebGLRenderingContext_getActiveUniform :Integer;
	public var __WebGLRenderingContext_getAttachedShaders :Array<WebGLShader>;
	public var __WebGLRenderingContext_getAttribLocation :Integer;
	public var __WebGLRenderingContext_getBufferParameter :String;
	public var __WebGLRenderingContext_getContextAttributes :Integer;
	public var __WebGLRenderingContext_getError :Integer;
	public var __WebGLRenderingContext_getExtension :Object;
	public var __WebGLRenderingContext_getFramebufferAttachmentParameter :String;
	public var __WebGLRenderingContext_getParameter :String;
	public var __WebGLRenderingContext_getProgramInfoLog :String;
	public var __WebGLRenderingContext_getProgramParameter :Boolean;
	public var __WebGLRenderingContext_getRenderbufferParameter :String;
	public var __WebGLRenderingContext_getShaderInfoLog :String;
	public var __WebGLRenderingContext_getShaderParameter_boolean :Boolean;
	public var __WebGLRenderingContext_getShaderParameter_enum :Integer;
	public var __WebGLRenderingContext_getShaderPrecisionFormat :Integer;
	public var __WebGLRenderingContext_getShaderSource :String;
	public var __WebGLRenderingContext_getSupportedExtensions :Array<String>;
	public var __WebGLRenderingContext_getTexParameter :String;
	public var __WebGLRenderingContext_getUniform :String;
	public var __WebGLRenderingContext_getUniformLocation :Integer;
	public var __WebGLRenderingContext_getVertexAttrib :String;
	public var __WebGLRenderingContext_getVertexAttribOffset :Integer;
	public var __WebGLRenderingContext_hint;
	public var __WebGLRenderingContext_isBuffer :Boolean;
	public var __WebGLRenderingContext_isContextLost :Boolean;
	public var __WebGLRenderingContext_isEnabled :Boolean;
	public var __WebGLRenderingContext_isFramebuffer :Boolean;
	public var __WebGLRenderingContext_isProgram :Boolean;
	public var __WebGLRenderingContext_isRenderbuffer :Boolean;
	public var __WebGLRenderingContext_isShader :Boolean;
	public var __WebGLRenderingContext_isTexture :Boolean;
	public var __WebGLRenderingContext_lineWidth;
	public var __WebGLRenderingContext_linkProgram;
	public var __WebGLRenderingContext_pixelStorei;
	public var __WebGLRenderingContext_polygonOffset;
	public var __WebGLRenderingContext_readPixels;
	public var __WebGLRenderingContext_renderbufferStorage;
	public var __WebGLRenderingContext_sampleCoverage;
	public var __WebGLRenderingContext_scissor;
	public var __WebGLRenderingContext_shaderSource;
	public var __WebGLRenderingContext_stencilFunc;
	public var __WebGLRenderingContext_stencilFuncSeparate;
	public var __WebGLRenderingContext_stencilMask;
	public var __WebGLRenderingContext_stencilMaskSeparate;
	public var __WebGLRenderingContext_stencilOp;
	public var __WebGLRenderingContext_stencilOpSeparate;
	public var __WebGLRenderingContext_texImage2D;
	public var __WebGLRenderingContext_texParameterf;
	public var __WebGLRenderingContext_texParameteri;
	public var __WebGLRenderingContext_texSubImage2D;
	public var __WebGLRenderingContext_uniform1f;
	public var __WebGLRenderingContext_uniform1fv;
	public var __WebGLRenderingContext_uniform1i;
	public var __WebGLRenderingContext_uniform1iv;
	public var __WebGLRenderingContext_uniform2f;
	public var __WebGLRenderingContext_uniform2fv;
	public var __WebGLRenderingContext_uniform2i;
	public var __WebGLRenderingContext_uniform2iv;
	public var __WebGLRenderingContext_uniform3f;
	public var __WebGLRenderingContext_uniform3fv;
	public var __WebGLRenderingContext_uniform3i;
	public var __WebGLRenderingContext_uniform3iv;
	public var __WebGLRenderingContext_uniform4f;
	public var __WebGLRenderingContext_uniform4fv;
	public var __WebGLRenderingContext_uniform4i;
	public var __WebGLRenderingContext_uniform4iv;
	public var __WebGLRenderingContext_uniformMatrix2fv;
	public var __WebGLRenderingContext_uniformMatrix3fv;
	public var __WebGLRenderingContext_uniformMatrix4fv;
	public var __WebGLRenderingContext_useProgram;
	public var __WebGLRenderingContext_validateProgram;
	public var __WebGLRenderingContext_vertexAttrib1f;
	public var __WebGLRenderingContext_vertexAttrib1fv;
	public var __WebGLRenderingContext_vertexAttrib2f;
	public var __WebGLRenderingContext_vertexAttrib2fv;
	public var __WebGLRenderingContext_vertexAttrib3f;
	public var __WebGLRenderingContext_vertexAttrib3fv;
	public var __WebGLRenderingContext_vertexAttrib4f;
	public var __WebGLRenderingContext_vertexAttrib4fv;
	public var __WebGLRenderingContext_vertexAttribPointer;
	public var __WebGLRenderingContext_viewport;
	public var Object :Object;
	public var Array :Array;
	public var Function :Function;
	public var CocoAction :CocoAction;
	public var Global :Global;
	public  var NaN :Number;
	public  var Infinity :Number;
	public  var innerWidth :Float;
	public  var innerHeight :Float;
	public  var deviceRotation :Float;
	public  var devicePixelRatio :Float;
	public  var __native :Boolean;
	public  var __Coconut2DPlayer :Boolean;
	public  var __touchEvents :Boolean;
	public  var __className :String;
	public var String :String;
	public var Number :Number;
	public var Integer :Integer;
	public var Float :Float;
	public var Time :Time;
	public var Boolean :Boolean;
	public var Date :Date;
	public var Math :Math;
	public var RegExp :RegExp;
	public var ArrayBuffer :ArrayBuffer;
	public var ArrayBufferView :ArrayBufferView;
	public var TypedArray :TypedArray;
	public var Float32Array :Float32Array;
	public var Int32Array :Int32Array;
	public var Uint8Array :Uint8Array;
	public var Uint32Array :Uint32Array;
	public var Error :Error;
	public var EvalError :EvalError;
	public var RangeError :RangeError;
	public var ReferenceError :ReferenceError;
	public var SyntaxError :SyntaxError;
	public var TypeError :TypeError;
	public var JSON :JSON;
	public var ImageDataBuffer :ImageDataBuffer;
	public var DataView :DataView;
	public var XMLHttpRequest :XMLHttpRequest;
	public var Console :Console;
	public var CocoFont :CocoFont;
	public var Color :Color;
	public var Gradient :Gradient;
	public var global :Global;
	public var engine :CocoEngine;
	public var window :HTMLWindow;
	public var document :HTMLDocument;
	public var location :HTMLLocation;
	public var graphics :CocoGraphics;
	public var console :Console;
	public var DEVICE_WRAPPER :COCO_DEVICE_WRAPPER;
	public var NodeJS_Request :NodeJS_Request;
	public var NodeJS_Response :NodeJS_Response;
	public var NodeJS_FS :NodeJS_FS;
	public var b2ManifoldType :b2ManifoldType;
	public var b2BodyType :b2BodyType;
	public var b2JointType :b2JointType;
	public var b2Manifold :b2Manifold;
	public var b2MassData :b2MassData;
	public var b2RayCastInput :b2RayCastInput;
	public var b2RayCastOutput :b2RayCastOutput;
	public var b2ContactImpulse :b2ContactImpulse;
	public var b2WorldManifold :b2WorldManifold;
	public var b2ContactFilter :b2ContactFilter;
	public var createPolygonShape :b2PolygonShape;
	public var b2ContactManager :b2ContactManager;
	public var b2DistanceJoint :b2DistanceJoint;
	public var b2Fixture :b2Fixture;
	public var b2MouseJoint :b2MouseJoint;
	public var b2PulleyJoint :b2PulleyJoint;
	public var b2BroadPhase :b2BroadPhase;
	public var b2World :b2World;
	public var b2PrismaticJoint :b2PrismaticJoint;
	public var b2CircleShape :b2CircleShape;
	public var b2WheelJoint :b2WheelJoint;
	public var b2Draw :b2Draw;
	public var b2Joint :b2Joint;
	public var b2GearJoint :b2GearJoint;
	public var b2RayCastCallback :b2RayCastCallback;
	public var b2DynamicTree :b2DynamicTree;
	public var b2WeldJoint :b2WeldJoint;
	public var b2RevoluteJoint :b2RevoluteJoint;
	public var b2Timer :b2Timer;
	public var b2ContactListener :b2ContactListener;
	public var b2ChainShape :b2ChainShape;
	public var b2QueryCallback :b2QueryCallback;
	public var b2BlockAllocator :b2BlockAllocator;
	public var b2RopeJoint :b2RopeJoint;
	public var b2PolygonShape :b2PolygonShape;
	public var b2EdgeShape :b2EdgeShape;
	public var b2Contact :b2Contact;
	public var b2Shape :b2Shape;
	public var b2Body :b2Body;
	public var b2FrictionJoint :b2FrictionJoint;
	public var b2StackAllocator :b2StackAllocator;
	public var b2DestructionListener :b2DestructionListener;
	public var b2Filter :b2Filter;
	public var b2RopeJointDef :b2RopeJointDef;
	public var b2FrictionJointDef :b2FrictionJointDef;
	public var b2BodyDef :b2BodyDef;
	public var b2Vec2 :b2Vec2;
	public var b2Vec3 :b2Vec3;
	public var b2AABB :b2AABB;
	public var b2FixtureDef :b2FixtureDef;
	public var b2PrismaticJointDef :b2PrismaticJointDef;
	public var b2WheelJointDef :b2WheelJointDef;
	public var b2RevoluteJointDef :b2RevoluteJointDef;
	public var b2PulleyJointDef :b2PulleyJointDef;
	public var b2JointDef :b2JointDef;
	public var b2Transform :b2Transform;
	public var b2Color :b2Color;
	public var b2Rot :b2Rot;
	public var b2WeldJointDef :b2WeldJointDef;
	public var b2MouseJointDef :b2MouseJointDef;
	public var b2DistanceProxy :b2DistanceProxy;
	public var b2DistanceJointDef :b2DistanceJointDef;
	public var b2GearJointDef :b2GearJointDef;
	public var b2ContactEdge :b2ContactEdge;
	public var ASP :ASP;
	public var fs :NodeJS_FS;
	public var ASPServer :ASPServer;
	public var HttpSever :HttpSever;
	public var HTTPServer :HTTPServer;
} //Global

class String
{
	public function fromCharCode(charCode:Number) :String {}
	public function charAt(position:Number) :String {}
	public function charCodeAt(position:Number) :Number {}
	public function concat(value:String) :String {}
	public function indexOf(searchString:String, startPosition:Number) :Number {}
	public function lastIndexOf(searchString:String, startPosition:Number) :Number {}
	public function localeCompare(otherString:String) :Number {}
	public function match(regexp:RegExp) :Array<Object> {}
	public function replace(regexp:RegExp, replaceValue:String) :String {}
	public function search(regexp:RegExp) :Number {}
	public function slice(start:Number, end:Number) :String {}
	public function split(separator:String, limit:Number) :Array<String> {}
	public function substring(start:Number, end:Number) :String {}
	public function substr(start:Number, size:Number) :String {}
	public function toLowerCase() :String {}
	public function toLocaleLowerCase() :String {}
	public function toUpperCase() :String {}
	public function toLocaleUpperCase() :String {}
	public function size() :Integer {}
	public  var length :Number;
	public  var __className :String;
} //String

class Number
{
	public function toFixed(fractionDigits:Number) :String {}
	public function toExponential(fractionDigits:Number) :String {}
	public function toPrecision(fractionDigits:Number) :String {}
	public  var MIN_VALUE :Number;
	public  var MAX_VALUE :Number;
	public  var NEGATIVE_INFINITY :Number;
	public  var POSITIVE_INFINITY :Number;
	public  var __className :String;
} //Number

class Integer : Number
{
	public  var __className :String;
} //Integer

class Float : Number
{
	public  var __className :String;
} //Float

class Time : Number
{
	public  var __className :String;
} //Time

class Boolean
{
	public  var __className :String;
} //Boolean

class Date
{
	public function UTC(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function parse(string:String) :Number {}
	public function toDateString() :String {}
	public function toTimeString() :String {}
	public function toLocaleString() :String {}
	public function toLocaleDateString() :String {}
	public function toLocaleTimeString() :String {}
	public function valueOf() :Object {}
	public function getFullYear() :Number {}
	public function getTime() :Number {}
	public function getUTCFullYear() :Number {}
	public function getMonth() :Number {}
	public function getUTCMonth() :Number {}
	public function getDate() :Number {}
	public function getUTCDate() :Number {}
	public function getDay() :Number {}
	public function getUTCDay() :Number {}
	public function getHours() :Number {}
	public function getUTCHours() :Number {}
	public function getMinutes() :Number {}
	public function getUTCMinutes() :Number {}
	public function getSeconds() :Number {}
	public function getUTCSeconds() :Number {}
	public function getMilliseconds() :Number {}
	public function getUTCMilliseconds() :Number {}
	public function getTimezoneOffset() :Number {}
	public function setTime(value:Number) :Number {}
	public function setMilliseconds(value:Number) :Number {}
	public function setUTCMilliseconds(ms:Number) :Number {}
	public function setSeconds(sec:Number, ms:Number) :Number {}
	public function setUTCSeconds(sec:Number, ms:Number) :Number {}
	public function setMinutes(min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCMinute(min:Number, sec:Number, ms:Number) :Number {}
	public function setHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setDate(date:Number) :Number {}
	public function setUTCDate(date:Number) :Number {}
	public function setMonth(month:Number, date:Number) :Number {}
	public function setUTCMonth(month:Number, date:Number) :Number {}
	public function setFullYear(year:Number, month:Number, date:Number) :Number {}
	public function setUTCFullYear(year:Number, month:Number, date:Number) {}
	public function toUTCString() :String {}
	public function toJSON() :String {}
	public  var __className :String;
} //Date

class Math
{
	public function abs(x:Number) :Number {}
	public function acos(x:Number) :Float {}
	public function asin(x:Number) :Float {}
	public function atan(x:Number) :Float {}
	public function atan2(x:Number, y:Number) :Float {}
	public function ceil(x:Number) :Number {}
	public function cos(x:Number) :Float {}
	public function exp(x:Number) :Float {}
	public function floor(x:Number) :Integer {}
	public function log(x:Number) :Float {}
	public function max(a:Number, b:Number) :Number {}
	public function min(a:Number, b:Number) :Number {}
	public function pow(x:Number, y:Number) :Float {}
	public function random() :Float {}
	public function round(x:Number) :Number {}
	public function sin(x:Number) :Float {}
	public function sqrt(x:Number) :Float {}
	public function tan(x:Number) :Float {}
	public static  var E :Float;
	public static  var LN10 :Float;
	public static  var LN2 :Float;
	public static  var LOG2E :Float;
	public static  var LOG10E :Float;
	public static  var PI :Float;
	public static  var SQRT1_2 :Float;
	public static  var SQRT2 :Float;
	public  var __className :String;
} //Math

class RegExp
{
	public function exec(string:String) :Array<Object> {}
	public function test(string:String) :Boolean {}
	public  var source :String;
	public  var global :Boolean;
	public  var ignoreCase :Boolean;
	public  var multiline :Boolean;
	public  var lastIndex :Number;
	public  var __className :String;
} //RegExp

class ArrayBuffer
{
	public function slice(begin:Number, end:Number) :ArrayBuffer {}
	public function encodeAsPNG(width:Number, height:Number) :ArrayBuffer {}
	public function encodeAsBase64() :String {}
	public  var byteLength :Number;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBuffer

class ArrayBufferView
{
	public function Destructor() {}
	public  var buffer :ArrayBuffer;
	public  var byteOffset :Integer;
	public  var byteLength :Integer;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBufferView

class TypedArray : ArrayBufferView
{
	public function set(array:TypedArray, offset:Integer) {}
	public  var length :Integer;
	public  var BYTES_PER_ELEMENT :Integer;
	public  var __className :String;
} //TypedArray

class Float32Array : TypedArray
{
	public  var __className :String;
} //Float32Array

class Int32Array : TypedArray
{
	public  var __className :String;
} //Int32Array

class Uint8Array : TypedArray
{
	public  var __className :String;
} //Uint8Array

class Uint32Array : TypedArray
{
	public  var __className :String;
} //Uint32Array

class Error
{
	public  var name :String;
	public  var message :String;
	public  var __className :String;
} //Error

class EvalError : Error
{
	public  var __className :String;
} //EvalError

class RangeError : Error
{
	public  var __className :String;
} //RangeError

class ReferenceError : Error
{
	public  var __className :String;
} //ReferenceError

class SyntaxError : Error
{
	public  var __className :String;
} //SyntaxError

class TypeError : Error
{
	public  var __className :String;
} //TypeError

class JSON
{
	public function parse(json:String) :Array<Object> {}
	public function stringify(obj:Array<Object>) :String {}
	public  var __className :String;
} //JSON

class ImageDataBuffer
{
	public  var buffer :ArrayBuffer;
	public  var width :Float;
	public  var height :Float;
	public  var __className :String;
} //ImageDataBuffer

class DataView : ArrayBufferView
{
	public function getInt8(byteOffset:Integer) :Integer {}
	public function getUint8(byteOffset:Integer) :Integer {}
	public function getInt16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getInt32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getFloat32(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function getFloat64(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function setInt8(byteOffset:Integer, value:Integer) {}
	public function setUint8(byteOffset:Integer, value:Integer) {}
	public function setInt16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setInt32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setFloat32(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function setFloat64(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function Constructor(buffer:ArrayBuffer, byteOffset:Integer, byteLength:Integer) {}
	public  var __className :String;
} //DataView

class XMLHttpRequest
{
	public function open(method:String, url:String, async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send(data:String) {}
	public function send$1(data:ArrayBufferView) {}
	public function send$2() {}
	public function abort() {}
	public function getAllResponseHeaders() :String {}
	public function getResponseHeader(header:String) :String {}
	public  var UNSENT :Integer;
	public  var OPENED :Integer;
	public  var HEADERS_RECEIVED :Integer;
	public  var LOADING :Integer;
	public  var DONE :Integer;
	public  var timeout :Integer;
	public  var readyState :Integer;
	public  var status :Integer;
	public  var statusText :String;
	public  var responseText :String;
	public  var responseType :Integer;
	public  var __className :String;
} //XMLHttpRequest

class Console
{
	public function log(msg:String) {}
	public  var __className :String;
} //Console

class CocoFont
{
	public function fillText(imageDataBuffer:ArrayBuffer, width:Float, text:String, x:Float, y:Float, R:Float, G:Float, B:Float, A:Float) {}
	public function measureText(text:String) :Float {}
	public function Constructor(FontName:String, FontSize:Float, Bold:Boolean, Italic:Boolean) {}
	public  var height :Float;
	public  var __className :String;
} //CocoFont

class Color : Number
{
	public  var __className :String;
} //Color

class Gradient : String
{
	public  var __className :String;
} //Gradient

class NodeJS_Request
{
	public function setTimeout(msecs:Integer, callbackfn:Function) {}
	public  var httpVersion :String;
	public  var headers :Object;
	public  var trailers :Object;
	public  var method :String;
	public  var url :String;
	public  var statusCode :Integer;
	public  var socket :Object;
	public  var __className :String;
} //NodeJS_Request

class NodeJS_Response
{
	public function writeContinue() {}
	public function writeHead(statusCode:Integer, reasonPhrase:String, headers:Object) {}
	public function setTimeout(msecs:Integer, callbackfn:Function) {}
	public function setHeader(name:String, value:String) {}
	public function setHeader$1(cookie:String, value:Array<String>) {}
	public function getHeader(name:String) :String {}
	public function removeHeader(name:String) {}
	public function write(chunk:String, encoding:String) {}
	public function addTrailers(headers:String) {}
	public function end(data:String, encoding:String) {}
	public  var statusCode :Integer;
	public  var headersSent :Boolean;
	public  var sendDate :Boolean;
	public  var __className :String;
} //NodeJS_Response

class NodeJS_FS
{
	public function rename(oldPath:String, newPath:String, Callback:Function) {}
	public function renameSync(oldPath:String, newPath:String) {}
	public function truncate(fd:Object, len:Number, Callback:Function) {}
	public function truncateSync(fd:Object, len:Number) {}
	public function chown(path:String, uid:Number, gid:Number, Callback:Function) {}
	public function chownSync(path:String, uid:Number, gid:Number) {}
	public function fchown(fd:Object, uid:Number, gid:Number, Callback:Function) {}
	public function fchownSync(fd:Object, uid:Number, gid:Number) {}
	public function lchown(path:String, uid:Number, gid:Number, Callback:Function) {}
	public function lchownSync(path:String, uid:Number, gid:Number) {}
	public function chmod(path:String, mode:Number, Callback:Function) {}
	public function chmodSync(path:String, mode:Number) {}
	public function fchmod(fd:Object, mode:Number, Callback:Function) {}
	public function fchmodSync(fd:Object, mode:Number) {}
	public function lchmod(path:String, mode:Number, Callback:Function) {}
	public function lchmodSync(path:String, mode:Number) {}
	public function stat(path:String, Callback:Function) {}
	public function statSync(path:String) :Stats {}
	public function fstat(fd:Object, Callback:Function) {}
	public function fstatSync(fd:Object) :Stats {}
	public function lstat(path:String, Callback:Function) {}
	public function lstatSync(path:String) :Stats {}
	public function link(srcpath:String, dstpath:String, Callback:Function) {}
	public function linkSync(srcpath:String, dstpath:String) {}
	public function symlink(srcpath:String, dstpath:String, type:String, Callback:Function) {}
	public function symlinkSync(srcpath:String, dstpath:String, type:String) {}
	public function readlink(path:String, Callback:Function) {}
	public function readlinkSync(path:String) :String {}
	public function realpath(path:String, cache:Object, Callback:Function) {}
	public function realpathSync(path:String, cache:Object) :String {}
	public function unlink(path:String, Callback:Function) {}
	public function unlinkSync(path:String) {}
	public function rmdir(path:String, Callback:Function) {}
	public function rmdirSync(path:String) {}
	public function mkdir(path:String, mode:Number, Callback:Function) {}
	public function mkdirSync(path:String, mode:Number) {}
	public function readdir(path:String, Callback:Function) {}
	public function readdirSync(path:String) :Array<string> {}
	public function close(fd:Object, Callback:Function) {}
	public function closeSync(fd:Object) {}
	public function open(path:String, flags:String, mode:Number, Callback:Function) {}
	public function openSync(path:String, flags:String, mode:Number) :Object {}
	public function utimes(path:String, atime:Number, mtime:Number, Callback:Function) {}
	public function utimesSync(path:String, atime:Number, mtime:Number) {}
	public function futimes(fd:Object, atime:Number, mtime:Number, Callback:Function) {}
	public function futimesSync(fd:Object, atime:Number, mtime:Number) {}
	public function fsync(fd:Object, Callback:Function) {}
	public function fsyncSync(fd:Object) {}
	public function write(fd:Object, buffer:Object, offset:Number, length:Number, position:Number, Callback:Function) {}
	public function writeSync(fd:Object, buffer:Object, offset:Number, length:Number, position:Number) :Number {}
	public function read(fd:Object, buffer:Object, offset:Number, length:Number, position:Number, Callback:Function) {}
	public function readSync(fd:Object, buffer:Object, offset:Number, length:Number, position:Number) :Number {}
	public function readFile(filename:String, encodingOrOptions:String, Callback:Function) {}
	public function readFileSync(filename:String, encodingOrOptions:String) :String {}
	public function writeFile(filename:String, data:String, encodingOrOptions:String, Callback:Function) {}
	public function writeFileSync(filename:String, data:String, encodingOrOptions:String) {}
	public function appendFile(filename:String, data:String, encoding:String, Callback:Function) {}
	public function appendFileSync(filename:String, data:String, encoding:String) {}
	public function watchFile(filename:String, options:Object, listener:Function) {}
	public function unwatchFile(filename:String, listener:Function) {}
	public function watch(filename:String, options:Object, listener:Function) :FSWatcher {}
	public function exists(path:String, Callback:Function) {}
	public function existsSync(path:String) {}
	public function createReadStream(path:String, options:Object) :ReadStream {}
	public function createWriteStream(path:String, options:Object) :WriteStream {}
	public  var __className :String;
} //NodeJS_FS

class b2ManifoldType
{
	public var e_circles :b2ManifoldType;
	public var e_faceA :b2ManifoldType;
	public var e_faceB :b2ManifoldType;
} //b2ManifoldType

class b2BodyType
{
	public var b2_staticBody :b2BodyType;
	public var b2_kinematicBody :b2BodyType;
	public var b2_dynamicBody :b2BodyType;
} //b2BodyType

class b2JointType
{
	public var e_unknownJoint :b2JointType;
	public var e_revoluteJoint :b2JointType;
	public var e_prismaticJoint :b2JointType;
	public var e_distanceJoint :b2JointType;
	public var e_pulleyJoint :b2JointType;
	public var e_mouseJoint :b2JointType;
	public var e_gearJoint :b2JointType;
	public var e_wheelJoint :b2JointType;
	public var e_weldJoint :b2JointType;
	public var e_frictionJoint :b2JointType;
	public var e_ropeJoint :b2JointType;
} //b2JointType

class b2Manifold
{
	public function toJSON() :String {}
	public var points :Array<b2ManifoldPoint>;
	public var localNormal :b2Vec2;
	public var localPoint :b2Vec2;
	public var type :b2ManifoldType;
	public var pointCount :Integer;
} //b2Manifold

class b2MassData
{
	public function toJSON() :String {}
	public var mass :Float;
	public var center :b2Vec2;
	public var I :Float;
} //b2MassData

class b2RayCastInput
{
	public function toJSON() :String {}
	public var p1 :b2Vec2;
	public var p2 :b2Vec2;
	public var maxFraction :Float;
} //b2RayCastInput

class b2RayCastOutput
{
	public function toJSON() :String {}
	public var normal :b2Vec2;
	public var fraction :Float;
} //b2RayCastOutput

class b2ContactImpulse
{
	public function toJSON() :String {}
	public var normalImpulses :Array<Float>;
	public var tangentImpulses :Array<Float>;
	public var count :Integer;
} //b2ContactImpulse

class b2WorldManifold
{
	public function Initialize(manifold:b2Manifold, xfA:b2Transform, radiusA:Float, xfB:b2Transform, radiusB:Float) {}
	public  var normal :b2Vec2;
	public  var points :Array<b2Vec2>;
	public  var __className :String;
} //b2WorldManifold

class b2ContactFilter
{
	public function ShouldCollide(fixtureA:b2Fixture, fixtureB:b2Fixture) :Boolean {}
	public  var __className :String;
} //b2ContactFilter

class b2ContactManager
{
	public function get_m_contactFilter() :b2ContactFilter {}
	public function get_m_contactCount() :Integer {}
	public function set_m_contactFilter(arg0:b2ContactFilter) {}
	public function AddPair(arg0:Object, arg1:Object) {}
	public function set_m_allocator(arg0:b2BlockAllocator) {}
	public function set_m_contactCount(arg0:Integer) {}
	public function Collide() {}
	public function set_m_contactList(arg0:b2Contact) {}
	public function FindNewContacts() {}
	public function get_m_contactListener() :b2ContactListener {}
	public function set_m_contactListener(arg0:b2ContactListener) {}
	public function get_m_broadPhase() :b2BroadPhase {}
	public function Destroy(arg0:b2Contact) {}
	public function set_m_broadPhase(arg0:b2BroadPhase) {}
	public function get_m_contactList() :b2Contact {}
	public function get_m_allocator() :b2BlockAllocator {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ContactManager

class b2DistanceJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() :Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetFrequency() :Float {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetLength() :Float {}
	public function GetDampingRatio() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function Dump() {}
	public function GetType() :Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function SetLength(arg0:Float) {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DistanceJoint

class b2Fixture
{
	public function GetRestitution() :Float {}
	public function SetFilterData(arg0:b2Filter) {}
	public function SetFriction(arg0:Float) {}
	public function GetShape() :b2Shape {}
	public function SetRestitution(arg0:Float) {}
	public function GetBody() :b2Body {}
	public function GetNext() :b2Fixture {}
	public function GetFriction() :Float {}
	public function GetUserData() :Object {}
	public function SetDensity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function SetSensor(arg0:Boolean) {}
	public function GetAABB(arg0:Integer) :b2AABB {}
	public function TestPoint(arg0:b2Vec2) :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:Integer) :Boolean {}
	public function Refilter() {}
	public function Dump(arg0:Integer) {}
	public function GetFilterData() :b2Filter {}
	public function IsSensor() :Boolean {}
	public function GetType() :Integer {}
	public function GetDensity() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Fixture

class b2MouseJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() :Object {}
	public function SetMaxForce(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetMaxForce() :Float {}
	public function GetTarget() :b2Vec2 {}
	public function GetFrequency() :Float {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetDampingRatio() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function Dump() {}
	public function SetTarget(arg0:b2Vec2) {}
	public function GetType() :Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2MouseJoint

class b2PulleyJoint
{
	public function GetBodyA() :b2Body {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetType() :Integer {}
	public function GetGroundAnchorB() :b2Vec2 {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function Dump() {}
	public function GetGroundAnchorA() :b2Vec2 {}
	public function GetLengthB() :Float {}
	public function GetUserData() :Object {}
	public function GetLengthA() :Float {}
	public function GetBodyB() :b2Body {}
	public function GetCollideConnected() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function IsActive() :Boolean {}
	public function GetRatio() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PulleyJoint

class b2BroadPhase
{
	public function GetTreeQuality() :Float {}
	public function GetFatAABB(arg0:Integer) :b2AABB {}
	public function GetUserData(arg0:Integer) :Object {}
	public function GetTreeHeight() :Integer {}
	public function GetProxyCount() :Integer {}
	public function GetTreeBalance() :Integer {}
	public function TestOverlap(arg0:Integer, arg1:Integer) :Boolean {}
	public function TouchProxy(arg0:Integer) {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) :Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) {}
	public function DestroyProxy(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2BroadPhase

class b2World
{
	public function QueryAABB(arg0:b2QueryCallback, arg1:b2AABB) {}
	public function SetSubStepping(arg0:Boolean) {}
	public function GetTreeQuality() :Float {}
	public function GetTreeHeight() :Integer {}
	public function GetProfile() :b2Profile {}
	public function GetTreeBalance() :Integer {}
	public function GetSubStepping() :Boolean {}
	public function GetContactManager() :b2ContactManager {}
	public function SetContactListener(arg0:b2ContactListener) {}
	public function DrawDebugData() {}
	public function SetContinuousPhysics(arg0:Boolean) {}
	public function SetGravity(arg0:b2Vec2) {}
	public function GetBodyCount() :Integer {}
	public function GetAutoClearForces() :Boolean {}
	public function GetContinuousPhysics() :Boolean {}
	public function GetJointList() :b2Joint {}
	public function CreateBody(arg0:b2BodyDef) :b2Body {}
	public function GetBodyList() :b2Body {}
	public function SetDestructionListener(arg0:b2DestructionListener) {}
	public function DestroyJoint(arg0:b2Joint) {}
	public function GetJointCount() :Integer {}
	public function Step(arg0:Float, arg1:Integer, arg2:Integer) {}
	public function ClearForces() {}
	public function GetWarmStarting() :Boolean {}
	public function SetAllowSleeping(arg0:Boolean) {}
	public function DestroyBody(arg0:b2Body) {}
	public function GetAllowSleeping() :Boolean {}
	public function CreateJoint(arg0:b2JointDef) :b2Joint {}
	public function GetProxyCount() :Integer {}
	public function RayCast(arg0:b2RayCastCallback, arg1:b2Vec2, arg2:b2Vec2) {}
	public function IsLocked() :Boolean {}
	public function GetContactList() :b2Contact {}
	public function SetDebugDraw(arg0:b2Draw) {}
	public function Dump() {}
	public function SetAutoClearForces(arg0:Boolean) {}
	public function GetGravity() :b2Vec2 {}
	public function GetContactCount() :Integer {}
	public function SetWarmStarting(arg0:Boolean) {}
	public function SetContactFilter(arg0:b2ContactFilter) {}
	public function Destructor() {}
	public function Constructor(v:b2Vec2) {}
	public  var __className :String;
} //b2World

class b2PrismaticJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetUserData() :Object {}
	public function GetLocalAxisA() :b2Vec2 {}
	public function GetLowerLimit() :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetMotorSpeed() :Float {}
	public function SetMaxMotorForce(arg0:Float) {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetMaxMotorForce() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function GetJointSpeed() :Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function GetReferenceAngle() :Float {}
	public function Dump() {}
	public function GetMotorForce(arg0:Float) :Float {}
	public function GetJointTranslation() :Float {}
	public function GetType() :Integer {}
	public function IsLimitEnabled() :Boolean {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetUpperLimit() :Float {}
	public function IsActive() :Boolean {}
	public function GetAnchorB() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PrismaticJoint

class b2CircleShape
{
	public function GetType() :Integer {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function GetVertex(arg0:Integer) :b2Vec2 {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetSupportVertex(arg0:b2Vec2) :b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetVertexCount() :Integer {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function GetSupport(arg0:b2Vec2) :Integer {}
	public function set_m_p(arg0:b2Vec2) {}
	public function get_m_p() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2CircleShape

class b2WheelJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetUserData() :Object {}
	public function GetDefinition(arg0:b2WheelJointDef) {}
	public function GetLocalAxisA() :b2Vec2 {}
	public function SetSpringDampingRatio(arg0:Float) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetSpringFrequencyHz() :Float {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetMotorSpeed() :Float {}
	public function GetMotorTorque(arg0:Float) :Float {}
	public function IsMotorEnabled() :Boolean {}
	public function GetJointTranslation() :Float {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetSpringDampingRatio() :Float {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() :Boolean {}
	public function GetJointSpeed() :Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Dump() {}
	public function GetMaxMotorTorque() :Float {}
	public function GetType() :Integer {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function SetSpringFrequencyHz(arg0:Float) {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WheelJoint

class b2Draw
{
	public function AppendFlags(arg0:Integer) {}
	public function DrawTransform(arg0:b2Transform) {}
	public function ClearFlags(arg0:Integer) {}
	public function DrawPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawSolidCircle(arg0:b2Vec2, arg1:Float, arg2:b2Vec2, arg3:b2Color) {}
	public function DrawSolidPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawCircle(arg0:b2Vec2, arg1:Float, arg2:b2Color) {}
	public function SetFlags(arg0:Integer) {}
	public function DrawSegment(arg0:b2Vec2, arg1:b2Vec2, arg2:b2Color) {}
	public function GetFlags() :Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Draw

class b2Joint
{
	public function GetNext() :b2Joint {}
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetUserData() :Object {}
	public function GetType() :Integer {}
	public function SetUserData(arg0:Object) {}
	public function GetCollideConnected() :Boolean {}
	public function Dump() {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function IsActive() :Boolean {}
	public  var __className :String;
} //b2Joint

class b2GearJoint
{
	public function GetJoint1() :b2Joint {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetJoint2() :b2Joint {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function Dump() {}
	public function SetRatio(arg0:Float) {}
	public function GetType() :Integer {}
	public function GetUserData() :Object {}
	public function GetBodyB() :b2Body {}
	public function GetCollideConnected() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetBodyA() :b2Body {}
	public function GetNext() :b2Joint {}
	public function IsActive() :Boolean {}
	public function GetRatio() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2GearJoint

class b2RayCastCallback
{
	public function ReportFixture(arg0:b2Fixture, arg1:b2Vec2, arg2:b2Vec2, arg3:Float) :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RayCastCallback

class b2DynamicTree
{
	public function GetFatAABB(arg0:Integer) :b2AABB {}
	public function GetUserData(arg0:Integer) :Object {}
	public function GetMaxBalance() :Integer {}
	public function GetHeight() :Integer {}
	public function GetAreaRatio() :Float {}
	public function RebuildBottomUp() {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) :Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) :Boolean {}
	public function Validate() {}
	public function DestroyProxy(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DynamicTree

class b2WeldJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() :Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetFrequency() :Float {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetDampingRatio() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function GetReferenceAngle() :Float {}
	public function Dump() {}
	public function GetType() :Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WeldJoint

class b2RevoluteJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetUserData() :Object {}
	public function GetLowerLimit() :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetJointAngle() :Float {}
	public function GetMotorSpeed() :Float {}
	public function GetMotorTorque(arg0:Float) :Float {}
	public function IsLimitEnabled() :Boolean {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() :Boolean {}
	public function GetJointSpeed() :Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function GetReferenceAngle() :Float {}
	public function Dump() {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetMaxMotorTorque() :Float {}
	public function GetType() :Integer {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function GetUpperLimit() :Float {}
	public function IsActive() :Boolean {}
	public function GetAnchorB() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RevoluteJoint

class b2Timer
{
	public function Reset() {}
	public function GetMilliseconds() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Timer

class b2ContactListener
{
	public function EndContact(arg0:b2Contact) {}
	public function BeginContact(arg0:b2Contact) {}
	public function PreSolve(arg0:b2Contact, arg1:b2Manifold) {}
	public function PostSolve(arg0:b2Contact, arg1:b2ContactImpulse) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ContactListener

class b2ChainShape
{
	public function GetType() :Integer {}
	public function CreateChain(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function get_m_vertices() :b2Vec2 {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function get_m_count() :Integer {}
	public function GetChildEdge(arg0:b2EdgeShape, arg1:Integer) {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function SetPrevVertex(arg0:b2Vec2) {}
	public function CreateLoop(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function SetNextVertex(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ChainShape

class b2QueryCallback
{
	public function ReportFixture(arg0:b2Fixture) :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2QueryCallback

class b2BlockAllocator
{
	public function Clear() {}
	public function Free(arg0:Object, arg1:Integer) {}
	public function Allocate(arg0:Integer) :Object {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2BlockAllocator

class b2RopeJoint
{
	public function GetNext() :b2Joint {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function GetMaxLength() :Float {}
	public function GetBodyA() :b2Body {}
	public function GetCollideConnected() :Boolean {}
	public function GetUserData() :Object {}
	public function GetType() :Integer {}
	public function GetBodyB() :b2Body {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function Dump() {}
	public function SetMaxLength(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetLimitState() :Integer {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RopeJoint

class b2PolygonShape : b2Shape
{
	public function Set(arg0:b2Vec2, arg1:Integer) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetVertex(arg0:Integer) :b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function SetAsBox(arg0:Float, arg1:Float) {}
	public function SetAsBox$1(arg0:Float, arg1:Float, arg2:b2Vec2, arg3:Float) {}
	public function set_m_centroid(arg0:b2Vec2) {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function set_m_vertexCount(arg0:Integer) {}
	public function GetVertexCount() :Integer {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function GetType() :Integer {}
	public function get_m_vertexCount() :Integer {}
	public function get_m_centroid() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PolygonShape

class b2EdgeShape
{
	public function Set(arg0:b2Vec2, arg1:b2Vec2) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetType() :Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2EdgeShape

class b2Contact
{
	public function GetNext() :b2Contact {}
	public function SetEnabled(arg0:Boolean) {}
	public function GetWorldManifold(arg0:b2WorldManifold) {}
	public function GetRestitution() :Float {}
	public function ResetFriction() {}
	public function GetFriction() :Float {}
	public function IsTouching() :Boolean {}
	public function IsEnabled() :Boolean {}
	public function GetFixtureB() :b2Fixture {}
	public function SetFriction(arg0:Float) {}
	public function GetFixtureA() :b2Fixture {}
	public function GetChildIndexA() :Integer {}
	public function GetChildIndexB() :Integer {}
	public function Evaluate(arg0:b2Manifold, arg1:b2Transform, arg2:b2Transform) {}
	public function SetRestitution(arg0:Float) {}
	public function GetManifold() :b2Manifold {}
	public function ResetRestitution() {}
	public  var __className :String;
} //b2Contact

class b2Shape
{
	public function get_m_radius() :Float {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetType() :Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public  var __className :String;
} //b2Shape

class b2Body
{
	public function GetAngle() :Float {}
	public function GetUserData() :Object {}
	public function IsSleepingAllowed() :Boolean {}
	public function SetAngularDamping(arg0:Float) {}
	public function SetActive(arg0:Boolean) {}
	public function SetGravityScale(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAngularVelocity() :Float {}
	public function GetFixtureList() :b2Fixture {}
	public function ApplyForce(arg0:b2Vec2, arg1:b2Vec2) {}
	public function GetLocalPoint(arg0:b2Vec2) :b2Vec2 {}
	public function SetLinearVelocity(arg0:b2Vec2) {}
	public function GetJointList() :b2JointEdge {}
	public function GetLinearVelocity() :b2Vec2 {}
	public function GetNext() :b2Body {}
	public function SetSleepingAllowed(arg0:Boolean) {}
	public function SetTransform(arg0:b2Vec2, arg1:Float) {}
	public function GetMass() :Float {}
	public function SetAngularVelocity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function GetLinearVelocityFromWorldPoint(arg0:b2Vec2) :b2Vec2 {}
	public function ResetMassData() {}
	public function ApplyForceToCenter(arg0:b2Vec2) {}
	public function ApplyTorque(arg0:Float) {}
	public function IsAwake() :Boolean {}
	public function SetType(arg0:b2BodyType) {}
	public function CreateFixture(arg0:b2FixtureDef) :b2Fixture {}
	public function CreateFixture$1(arg0:b2Shape, arg1:Float) :b2Fixture {}
	public function SetMassData(arg0:b2MassData) {}
	public function GetTransform() :b2Transform {}
	public function GetWorldCenter() :b2Vec2 {}
	public function GetAngularDamping() :Float {}
	public function ApplyLinearImpulse(arg0:b2Vec2, arg1:b2Vec2) {}
	public function IsFixedRotation() :Boolean {}
	public function GetLocalCenter() :b2Vec2 {}
	public function GetWorldVector(arg0:b2Vec2) :b2Vec2 {}
	public function GetLinearVelocityFromLocalPoint(arg0:b2Vec2) :b2Vec2 {}
	public function GetContactList() :b2ContactEdge {}
	public function GetWorldPoint(arg0:b2Vec2) :b2Vec2 {}
	public function SetAwake(arg0:Boolean) {}
	public function GetLinearDamping() :Float {}
	public function IsBullet() :Boolean {}
	public function GetWorld() :b2World {}
	public function GetLocalVector(arg0:b2Vec2) :b2Vec2 {}
	public function SetLinearDamping(arg0:Float) {}
	public function Dump() {}
	public function SetBullet(arg0:Boolean) {}
	public function GetType() :Integer {}
	public function GetGravityScale() :Float {}
	public function DestroyFixture(arg0:b2Fixture) {}
	public function GetInertia() :Float {}
	public function IsActive() :Boolean {}
	public function SetFixedRotation(arg0:Boolean) {}
	public function ApplyAngularImpulse(arg0:Float) {}
	public function GetPosition() :b2Vec2 {}
	public  var __className :String;
} //b2Body

class b2FrictionJoint
{
	public function SetMaxTorque(arg0:Float) {}
	public function GetMaxForce() :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function Dump() {}
	public function GetCollideConnected() :Boolean {}
	public function GetUserData() :Object {}
	public function GetType() :Integer {}
	public function SetMaxForce(arg0:Float) {}
	public function GetBodyB() :b2Body {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetBodyA() :b2Body {}
	public function GetNext() :b2Joint {}
	public function GetMaxTorque() :Float {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2FrictionJoint

class b2StackAllocator
{
	public function GetMaxAllocation() :Integer {}
	public function Allocate(arg0:Integer) :Object {}
	public function Free(arg0:Object) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2StackAllocator

class b2DestructionListener
{
	public function SayGoodbye(arg0:b2Joint) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DestructionListener

class b2Filter
{
	public function set_maskBits(arg0:Integer) {}
	public function set_categoryBits(arg0:Integer) {}
	public function get_groupIndex() :Integer {}
	public function set_groupIndex(arg0:Integer) {}
	public function get_maskBits() :Integer {}
	public function get_categoryBits() :Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Filter

class b2RopeJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_maxLength() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_maxLength(arg0:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RopeJointDef

class b2FrictionJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_maxForce() :Float {}
	public function get_localAnchorA() :b2Vec2 {}
	public function set_maxForce(arg0:Float) {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_maxTorque(arg0:Float) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_maxTorque() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2FrictionJointDef

class b2BodyDef
{
	public function get_linearDamping() :Float {}
	public function get_awake() :Boolean {}
	public function get_type() :b2BodyType {}
	public function get_allowSleep() :Boolean {}
	public function set_position(arg0:b2Vec2) {}
	public function set_linearVelocity(arg0:b2Vec2) {}
	public function get_bullet() :Boolean {}
	public function get_userData() :Object {}
	public function set_angularDamping(arg0:Float) {}
	public function set_fixedRotation(arg0:Boolean) {}
	public function set_allowSleep(arg0:Boolean) {}
	public function get_gravityScale() :Float {}
	public function set_angularVelocity(arg0:Float) {}
	public function set_userData(arg0:Object) {}
	public function get_position() :b2Vec2 {}
	public function set_type(arg0:b2BodyType) {}
	public function set_gravityScale(arg0:Float) {}
	public function get_angularDamping() :Float {}
	public function set_bullet(arg0:Boolean) {}
	public function set_active(arg0:Boolean) {}
	public function set_angle(arg0:Float) {}
	public function get_angle() :Float {}
	public function get_angularVelocity() :Float {}
	public function get_linearVelocity() :b2Vec2 {}
	public function get_active() :Boolean {}
	public function set_linearDamping(arg0:Float) {}
	public function get_fixedRotation() :Boolean {}
	public function set_awake(arg0:Boolean) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2BodyDef

class b2Vec2
{
	public function Normalize() :Float {}
	public function set_x(arg0:Float) {}
	public function Set(arg0:Float, arg1:Float) {}
	public function get_x() :Float {}
	public function get_y() :Float {}
	public function set_y(arg0:Float) {}
	public function IsValid() :Boolean {}
	public function Skew() :b2Vec2 {}
	public function LengthSquared() :Float {}
	public function op_add(arg0:b2Vec2) {}
	public function SetZero() {}
	public function Length() :Float {}
	public function op_mul(arg0:Float) {}
	public function op_sub() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor(x:Float, y:Float) {}
	public  var __className :String;
} //b2Vec2

class b2Vec3
{
	public function set_z(arg0:Float) {}
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function get_z() :Float {}
	public function op_add(arg0:b2Vec3) {}
	public function SetZero() {}
	public function op_mul(arg0:Float) {}
	public function op_sub() :b2Vec3 {}
	public function Destructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public  var __className :String;
} //b2Vec3

class b2AABB
{
	public function set_upperBound(arg0:b2Vec2) {}
	public function IsValid() :Boolean {}
	public function Contains(arg0:b2AABB) :Boolean {}
	public function GetExtents() :b2Vec2 {}
	public function GetCenter() :b2Vec2 {}
	public function get_upperBound() :b2Vec2 {}
	public function GetPerimeter() :Float {}
	public function Combine(arg0:b2AABB) {}
	public function Combine$1(arg0:b2AABB, arg1:b2AABB) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput) :Boolean {}
	public function set_lowerBound(arg0:b2Vec2) {}
	public function get_lowerBound() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2AABB

class b2FixtureDef
{
	public function get_isSensor() :Boolean {}
	public function set_userData(arg0:Object) {}
	public function set_shape(arg0:b2Shape) {}
	public function get_density() :Float {}
	public function get_shape() :b2Shape {}
	public function set_density(arg0:Float) {}
	public function set_restitution(arg0:Float) {}
	public function get_restitution() :Float {}
	public function set_isSensor(arg0:Boolean) {}
	public function get_filter() :b2Filter {}
	public function get_friction() :Float {}
	public function set_friction(arg0:Float) {}
	public function get_userData() :Object {}
	public function set_filter(arg0:b2Filter) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2FixtureDef

class b2PrismaticJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() :Float {}
	public function get_enableMotor() :Boolean {}
	public function get_referenceAngle() :Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() :b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function set_lowerTranslation(arg0:Float) {}
	public function get_upperTranslation() :Float {}
	public function get_enableLimit() :Boolean {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_upperTranslation(arg0:Float) {}
	public function get_maxMotorForce() :Float {}
	public function set_maxMotorForce(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_lowerTranslation() :Float {}
	public function set_localAxisA(arg0:b2Vec2) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PrismaticJointDef

class b2WheelJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() :Float {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() :b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function get_frequencyHz() :Float {}
	public function set_dampingRatio(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_maxMotorTorque() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_enableMotor() :Boolean {}
	public function get_dampingRatio() :Float {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_localAxisA(arg0:b2Vec2) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WheelJointDef

class b2RevoluteJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_lowerAngle() :Float {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_lowerAngle(arg0:Float) {}
	public function get_enableMotor() :Boolean {}
	public function set_upperAngle(arg0:Float) {}
	public function get_referenceAngle() :Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function get_motorSpeed() :Float {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_maxMotorTorque() :Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_enableLimit() :Boolean {}
	public function get_upperAngle() :Float {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RevoluteJointDef

class b2PulleyJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_ratio(arg0:Float) {}
	public function set_groundAnchorB(arg0:b2Vec2) {}
	public function set_groundAnchorA(arg0:b2Vec2) {}
	public function get_groundAnchorB() :b2Vec2 {}
	public function get_groundAnchorA() :b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2, arg4:b2Vec2, arg5:b2Vec2, arg6:Float) {}
	public function get_ratio() :Float {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_lengthB(arg0:Float) {}
	public function set_lengthA(arg0:Float) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function get_lengthB() :Float {}
	public function get_lengthA() :Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PulleyJointDef

class b2JointDef
{
	public function get_bodyA() :b2Body {}
	public function set_userData(arg0:Object) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_bodyB() :b2Body {}
	public function set_type(arg0:b2JointType) {}
	public function get_collideConnected() :Boolean {}
	public function get_type() :b2JointType {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_userData() :Object {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2JointDef

class b2Transform
{
	public function Set(arg0:b2Vec2, arg1:Float) {}
	public function set_p(arg0:b2Vec2) {}
	public function set_q(arg0:b2Rot) {}
	public function get_p() :b2Vec2 {}
	public function get_q() :b2Rot {}
	public function SetIdentity() {}
	public function Destructor() {}
	public function Constructor(arg1:b2Rot) {}
	public  var __className :String;
} //b2Transform

class b2Color
{
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function set_r(arg0:Float) {}
	public function get_r() :Float {}
	public function set_b(arg0:Float) {}
	public function get_g() :Float {}
	public function get_b() :Float {}
	public function set_g(arg0:Float) {}
	public function Destructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public  var __className :String;
} //b2Color

class b2Rot
{
	public function Set(arg0:Float) {}
	public function GetAngle() :Float {}
	public function GetYAxis() :b2Vec2 {}
	public function GetXAxis() :b2Vec2 {}
	public function set_c(arg0:Float) {}
	public function SetIdentity() {}
	public function get_c() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Rot

class b2WeldJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_frequencyHz() :Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_referenceAngle() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_dampingRatio() :Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WeldJointDef

class b2MouseJointDef
{
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_maxForce() :Float {}
	public function set_target(arg0:b2Vec2) {}
	public function set_maxForce(arg0:Float) {}
	public function get_frequencyHz() :Float {}
	public function get_target() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function get_dampingRatio() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2MouseJointDef

class b2DistanceProxy
{
	public function get_m_radius() :Float {}
	public function Set(arg0:b2Shape, arg1:Integer) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_vertices() :b2Vec2 {}
	public function GetSupportVertex(arg0:b2Vec2) :b2Vec2 {}
	public function get_m_count() :Integer {}
	public function GetVertexCount() :Integer {}
	public function GetVertex(arg0:Integer) :b2Vec2 {}
	public function GetSupport(arg0:b2Vec2) :Integer {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DistanceProxy

class b2DistanceJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_length() :Float {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_frequencyHz() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_dampingRatio() :Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_length(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DistanceJointDef

class b2GearJointDef
{
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function get_joint1() :b2Joint {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function set_joint2(arg0:b2Joint) {}
	public function set_ratio(arg0:Float) {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_joint2() :b2Joint {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_ratio() :Float {}
	public function set_joint1(arg0:b2Joint) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2GearJointDef

class b2ContactEdge
{
	public function set_contact(arg0:b2Contact) {}
	public function get_prev() :b2ContactEdge {}
	public function get_other() :b2Body {}
	public function set_prev(arg0:b2ContactEdge) {}
	public function get_next() :b2ContactEdge {}
	public function set_other(arg0:b2Body) {}
	public function set_next(arg0:b2ContactEdge) {}
	public function get_contact() :b2Contact {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ContactEdge

class ASP
{
} //ASP

class ASPServer
{
	public function run(req:NodeJS_Request, res:NodeJS_Response) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //ASPServer

class HttpSever
{
} //HttpSever

class HTTPServer
{
	public function handle(req:NodeJS_Request, res:NodeJS_Response) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var pages :Array<String>;
	public  var __className :String;
} //HTTPServer

