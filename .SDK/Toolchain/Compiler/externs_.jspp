// Auto-generated Project Externs

class Null
{
} //Null

class Untyped
{
} //Untyped

class Object
{
	undefined function toString() :String {}
	undefined function toLocaleString() :String {}
	undefined function valueOf() :Object {}
	undefined function hasOwnProperty(name:String) :Boolean {}
	undefined function isPrototypeOf(o:Object) :Boolean {}
	undefined function propertyIsEnumerable(name:String) :Boolean {}
	undefined function defineProperty(object:Object, name:String, params:Object) {}
	undefined function Destructor() {}
	undefined var prototype :Object;
} //Object

class Array
{
	undefined function concat(args:Array) :Array {}
	undefined function join(seperator:String) :String {}
	undefined function pop() :Object {}
	undefined function push(args:Object) :Object {}
	undefined function reverse() :Array {}
	undefined function shift() :Array {}
	undefined function slice(start:Number, end:Number) :Array {}
	undefined function sort(funct:Function) :Array {}
	undefined function splice(start:Number, deletecount:Number, items:Object) :Array {}
	undefined function unshift(start:Number) :Array {}
	undefined function forEach(item:Object) :Array {}
	undefined function size() :Number {}
	undefined function clear() {}
	undefined var length :Number;
} //Array

class Function
{
	undefined function apply(thisObject:Object, args:Object) :Object {}
	undefined function call(thisObject:Object, args:Array) :Object {}
	undefined var length :Number;
} //Function

class CocoAction : Function
{
} //CocoAction

class Global
{
	undefined function __Audio_load(url:String, obj:Audio) :Integer {}
	undefined function eval(s:String) :Object {}
	undefined function parseInt(s:String, radix:Number) :Integer {}
	undefined function parseFloat(s:String) :Float {}
	undefined function escape(s:String) :String {}
	undefined function unescape(s:String) :String {}
	undefined function isNaN(number:Object) :Boolean {}
	undefined function isFinite(number:Object) :Boolean {}
	undefined function decodeURI(encodedURI:String) :String {}
	undefined function decodeURIComponent(uriComponent:String) :String {}
	undefined function encodeURIComponent(uriComponent:String) :String {}
	undefined function encodeURI(URI:String) :String {}
	undefined function trace(message:String) {}
	undefined function alert(message:String) {}
	undefined function Destructor() {}
	undefined var __registerManager;
	undefined var __registerCallback;
	undefined var __unRegisterCallback;
	undefined var __ImageData_loadImage;
	undefined var __Audio_get_position :Float;
	undefined var __Audio_set_position;
	undefined var __Audio_play;
	undefined var __Audio_pause;
	undefined var __Audio_stop;
	undefined var __WebGLRenderingContext_activeTexture;
	undefined var __WebGLRenderingContext_attachShader;
	undefined var __WebGLRenderingContext_bindAttribLocation;
	undefined var __WebGLRenderingContext_bindBuffer;
	undefined var __WebGLRenderingContext_bindFramebuffer;
	undefined var __WebGLRenderingContext_bindRenderbuffer;
	undefined var __WebGLRenderingContext_bindTexture;
	undefined var __WebGLRenderingContext_blendColor;
	undefined var __WebGLRenderingContext_blendEquation;
	undefined var __WebGLRenderingContext_blendEquationSeparate;
	undefined var __WebGLRenderingContext_blendFunc;
	undefined var __WebGLRenderingContext_blendFuncSeparate;
	undefined var __WebGLRenderingContext_bufferData;
	undefined var __WebGLRenderingContext_bufferSubData;
	undefined var __WebGLRenderingContext_checkFramebufferStatus :Integer;
	undefined var __WebGLRenderingContext_clear;
	undefined var __WebGLRenderingContext_clearColor;
	undefined var __WebGLRenderingContext_clearDepth;
	undefined var __WebGLRenderingContext_clearStencil;
	undefined var __WebGLRenderingContext_colorMask;
	undefined var __WebGLRenderingContext_compileShader;
	undefined var __WebGLRenderingContext_compressedTexImage2D;
	undefined var __WebGLRenderingContext_compressedTexSubImage2D;
	undefined var __WebGLRenderingContext_copyTexImage2D;
	undefined var __WebGLRenderingContext_copyTexSubImage2D;
	undefined var __WebGLRenderingContext_createBuffer :Integer;
	undefined var __WebGLRenderingContext_createFramebuffer :Integer;
	undefined var __WebGLRenderingContext_createProgram :Integer;
	undefined var __WebGLRenderingContext_createRenderbuffer :Integer;
	undefined var __WebGLRenderingContext_createShader :Integer;
	undefined var __WebGLRenderingContext_createTexture :Integer;
	undefined var __WebGLRenderingContext_cullFace;
	undefined var __WebGLRenderingContext_deleteBuffer;
	undefined var __WebGLRenderingContext_deleteFramebuffer;
	undefined var __WebGLRenderingContext_deleteProgram;
	undefined var __WebGLRenderingContext_deleteRenderbuffer;
	undefined var __WebGLRenderingContext_deleteShader;
	undefined var __WebGLRenderingContext_deleteTexture;
	undefined var __WebGLRenderingContext_depthFunc;
	undefined var __WebGLRenderingContext_depthMask;
	undefined var __WebGLRenderingContext_depthRange;
	undefined var __WebGLRenderingContext_detachShader;
	undefined var __WebGLRenderingContext_disable;
	undefined var __WebGLRenderingContext_disableVertexAttribArray;
	undefined var __WebGLRenderingContext_drawArrays;
	undefined var __WebGLRenderingContext_drawElements;
	undefined var __WebGLRenderingContext_enable;
	undefined var __WebGLRenderingContext_enableVertexAttribArray;
	undefined var __WebGLRenderingContext_execute;
	undefined var __WebGLRenderingContext_finish;
	undefined var __WebGLRenderingContext_flush;
	undefined var __WebGLRenderingContext_framebufferRenderbuffer;
	undefined var __WebGLRenderingContext_framebufferTexture2D;
	undefined var __WebGLRenderingContext_frontFace;
	undefined var __WebGLRenderingContext_generateMipmap;
	undefined var __WebGLRenderingContext_getActiveAttrib :Integer;
	undefined var __WebGLRenderingContext_getActiveUniform :Integer;
	undefined var __WebGLRenderingContext_getAttachedShaders :Array<WebGLShader>;
	undefined var __WebGLRenderingContext_getAttribLocation :Integer;
	undefined var __WebGLRenderingContext_getBufferParameter :String;
	undefined var __WebGLRenderingContext_getContextAttributes :Integer;
	undefined var __WebGLRenderingContext_getError :Integer;
	undefined var __WebGLRenderingContext_getExtension :Object;
	undefined var __WebGLRenderingContext_getFramebufferAttachmentParameter :String;
	undefined var __WebGLRenderingContext_getParameter :String;
	undefined var __WebGLRenderingContext_getProgramInfoLog :String;
	undefined var __WebGLRenderingContext_getProgramParameter :Boolean;
	undefined var __WebGLRenderingContext_getRenderbufferParameter :String;
	undefined var __WebGLRenderingContext_getShaderInfoLog :String;
	undefined var __WebGLRenderingContext_getShaderParameter :Boolean;
	undefined var __WebGLRenderingContext_getShaderPrecisionFormat :Integer;
	undefined var __WebGLRenderingContext_getShaderSource :String;
	undefined var __WebGLRenderingContext_getSupportedExtensions :Array<String>;
	undefined var __WebGLRenderingContext_getTexParameter :String;
	undefined var __WebGLRenderingContext_getUniform :String;
	undefined var __WebGLRenderingContext_getUniformLocation :Integer;
	undefined var __WebGLRenderingContext_getVertexAttrib :String;
	undefined var __WebGLRenderingContext_getVertexAttribOffset :Integer;
	undefined var __WebGLRenderingContext_hint;
	undefined var __WebGLRenderingContext_isBuffer :Boolean;
	undefined var __WebGLRenderingContext_isContextLost :Boolean;
	undefined var __WebGLRenderingContext_isEnabled :Boolean;
	undefined var __WebGLRenderingContext_isFramebuffer :Boolean;
	undefined var __WebGLRenderingContext_isProgram :Boolean;
	undefined var __WebGLRenderingContext_isRenderbuffer :Boolean;
	undefined var __WebGLRenderingContext_isShader :Boolean;
	undefined var __WebGLRenderingContext_isTexture :Boolean;
	undefined var __WebGLRenderingContext_lineWidth;
	undefined var __WebGLRenderingContext_linkProgram;
	undefined var __WebGLRenderingContext_pixelStorei;
	undefined var __WebGLRenderingContext_polygonOffset;
	undefined var __WebGLRenderingContext_readPixels;
	undefined var __WebGLRenderingContext_renderbufferStorage;
	undefined var __WebGLRenderingContext_sampleCoverage;
	undefined var __WebGLRenderingContext_scissor;
	undefined var __WebGLRenderingContext_shaderSource;
	undefined var __WebGLRenderingContext_stencilFunc;
	undefined var __WebGLRenderingContext_stencilFuncSeparate;
	undefined var __WebGLRenderingContext_stencilMask;
	undefined var __WebGLRenderingContext_stencilMaskSeparate;
	undefined var __WebGLRenderingContext_stencilOp;
	undefined var __WebGLRenderingContext_stencilOpSeparate;
	undefined var __WebGLRenderingContext_texImage2D;
	undefined var __WebGLRenderingContext_texParameterf;
	undefined var __WebGLRenderingContext_texParameteri;
	undefined var __WebGLRenderingContext_texSubImage2D;
	undefined var __WebGLRenderingContext_uniform1f;
	undefined var __WebGLRenderingContext_uniform1fv;
	undefined var __WebGLRenderingContext_uniform1i;
	undefined var __WebGLRenderingContext_uniform1iv;
	undefined var __WebGLRenderingContext_uniform2f;
	undefined var __WebGLRenderingContext_uniform2fv;
	undefined var __WebGLRenderingContext_uniform2i;
	undefined var __WebGLRenderingContext_uniform2iv;
	undefined var __WebGLRenderingContext_uniform3f;
	undefined var __WebGLRenderingContext_uniform3fv;
	undefined var __WebGLRenderingContext_uniform3i;
	undefined var __WebGLRenderingContext_uniform3iv;
	undefined var __WebGLRenderingContext_uniform4f;
	undefined var __WebGLRenderingContext_uniform4fv;
	undefined var __WebGLRenderingContext_uniform4i;
	undefined var __WebGLRenderingContext_uniform4iv;
	undefined var __WebGLRenderingContext_uniformMatrix2fv;
	undefined var __WebGLRenderingContext_uniformMatrix3fv;
	undefined var __WebGLRenderingContext_uniformMatrix4fv;
	undefined var __WebGLRenderingContext_useProgram;
	undefined var __WebGLRenderingContext_validateProgram;
	undefined var __WebGLRenderingContext_vertexAttrib1f;
	undefined var __WebGLRenderingContext_vertexAttrib1fv;
	undefined var __WebGLRenderingContext_vertexAttrib2f;
	undefined var __WebGLRenderingContext_vertexAttrib2fv;
	undefined var __WebGLRenderingContext_vertexAttrib3f;
	undefined var __WebGLRenderingContext_vertexAttrib3fv;
	undefined var __WebGLRenderingContext_vertexAttrib4f;
	undefined var __WebGLRenderingContext_vertexAttrib4fv;
	undefined var __WebGLRenderingContext_vertexAttribPointer;
	undefined var __WebGLRenderingContext_viewport;
	undefined var Null :Null;
	undefined var Untyped :Untyped;
	undefined var Object :Object;
	undefined var Array :Array;
	undefined var Function :Function;
	undefined var CocoAction :CocoAction;
	undefined var Global :Global;
	undefined var NaN :Number;
	undefined var Infinity :Number;
	undefined var innerWidth :Integer;
	undefined var innerHeight :Integer;
	undefined var deviceRotation :Float;
	undefined var devicePixelRatio :Float;
	undefined var String :String;
	undefined var Number :Number;
	undefined var Integer :Integer;
	undefined var Float :Float;
	undefined var Time :Time;
	undefined var Boolean :Boolean;
	undefined var Date :Date;
	undefined var Math :Math;
	undefined var RegExp :RegExp;
	undefined var ArrayBuffer :ArrayBuffer;
	undefined var ArrayBufferView :ArrayBufferView;
	undefined var Float32Array :Float32Array;
	undefined var Int32Array :Int32Array;
	undefined var Uint8Array :Uint8Array;
	undefined var Error :Error;
	undefined var EvalError :EvalError;
	undefined var RangeError :RangeError;
	undefined var ReferenceError :ReferenceError;
	undefined var SyntaxError :SyntaxError;
	undefined var TypeError :TypeError;
	undefined var ImageDataBuffer :ImageDataBuffer;
	undefined var XMLHttpRequest :XMLHttpRequest;
	undefined var CocoFont :CocoFont;
	undefined var Color :Color;
	undefined var Gradient :Gradient;
	undefined var global :Global;
	undefined var engine :CocoEngine;
	undefined var window :HTMLWindow;
	undefined var document :HTMLDocument;
	undefined var gl :WebGLRenderingContext;
	undefined var canvas :HTMLCanvasElement;
	undefined var graphics :CocoGraphics;
	undefined var RADIANS :Float;
	undefined var BOX2D_SCALE :Float;
	undefined var COCO_STOP_ON_CURRENT_FRAME :Integer;
	undefined var DeviceEvent :DeviceEvent;
	undefined var EventTarget :EventTarget;
	undefined var Audio :Audio;
	undefined var HTMLCanvasContext :HTMLCanvasContext;
	undefined var PathLine :PathLine;
	undefined var CanvasRenderingContext2D :CanvasRenderingContext2D;
	undefined var HTMLCanvasElement :HTMLCanvasElement;
	undefined var HTMLCanvasGradient :HTMLCanvasGradient;
	undefined var HTMLCanvasPattern :HTMLCanvasPattern;
	undefined var HTMLDocument :HTMLDocument;
	undefined var HTMLElement :HTMLElement;
	undefined var Image :Image;
	undefined var HTMLTextMetrics :HTMLTextMetrics;
	undefined var HTMLWindow :HTMLWindow;
	undefined var ImageData :ImageData;
	undefined var Touch :Touch;
	undefined var TouchList :TouchList;
	undefined var WebGLObject :WebGLObject;
	undefined var WebGLActiveInfo :WebGLActiveInfo;
	undefined var WebGLBuffer :WebGLBuffer;
	undefined var WebGLContextAttributes :WebGLContextAttributes;
	undefined var WebGLFramebuffer :WebGLFramebuffer;
	undefined var WebGLProgram :WebGLProgram;
	undefined var WebGLRenderbuffer :WebGLRenderbuffer;
	undefined var WebGLRenderingContext :WebGLRenderingContext;
	undefined var WebGLShader :WebGLShader;
	undefined var WebGLShaderPrecisionFormat :WebGLShaderPrecisionFormat;
	undefined var WebGLTexture :WebGLTexture;
	undefined var WebGLUniformLocation :WebGLUniformLocation;
	undefined var CocoAudio :CocoAudio;
	undefined var CocoClip :CocoClip;
	undefined var CocoEngine :CocoEngine;
	undefined var CocoGraphics :CocoGraphics;
	undefined var CocoImage :CocoImage;
	undefined var CocoImageSibling :CocoImageSibling;
	undefined var CocoKeyFrame :CocoKeyFrame;
	undefined var CocoMatrix :CocoMatrix;
	undefined var CocoRect :CocoRect;
	undefined var CocoScene :CocoScene;
	undefined var CocoSequence :CocoSequence;
	undefined var State :State;
	undefined var ITest1 :ITest1;
	undefined var ITest2 :ITest2;
	undefined var ITest3 :ITest3;
	undefined var ClassDelegator :ClassDelegator;
	undefined var Class1 :Class1;
	undefined var Class2 :Class2;
	undefined var Class3 :Class3;
	undefined var CocoTextStyle :CocoTextStyle;
	undefined var CocoText :CocoText;
	undefined var CocoTimeLabel :CocoTimeLabel;
	undefined var CocoTimeline :CocoTimeline;
	undefined var CocoVector :CocoVector;
	undefined var ITickable :ITickable;
	undefined var CocoTickable :CocoTickable;
	undefined var CocoHttpRequest :CocoHttpRequest;
	undefined var CocoUIView :CocoUIView;
	undefined var CocoUIPageView :CocoUIPageView;
	undefined var CocoUIControl :CocoUIControl;
	undefined var CocoUIButton :CocoUIButton;
	undefined var CocoUICheckBox :CocoUICheckBox;
	undefined var CocoUIComboBox :CocoUIComboBox;
	undefined var CocoUILabel :CocoUILabel;
	undefined var CocoUITextBox :CocoUITextBox;
	undefined var GameEngine :GameEngine;
	undefined var NewAnimation :NewAnimation;
	undefined var Page1 :Page1;
} //Global

class String
{
	undefined function fromCharCode(charCode:Number) :String {}
	undefined function charAt(position:Number) :String {}
	undefined function charCodeAt(position:Number) :Number {}
	undefined function concat(value:String) :String {}
	undefined function indexOf(searchString:String, startPosition:Number) :Number {}
	undefined function lastIndexOf(searchString:String, startPosition:Number) :Number {}
	undefined function localeCompare(otherString:String) :Number {}
	undefined function match(regexp:RegExp) :Array {}
	undefined function replace(regexp:RegExp, replaceValue:String) :String {}
	undefined function search(regexp:RegExp) :Number {}
	undefined function slice(start:Number, end:Number) :String {}
	undefined function split(separator:String, limit:Number) :Array<String> {}
	undefined function substring(start:Number, end:Number) :String {}
	undefined function substr(start:Number, size:Number) :String {}
	undefined function toLowerCase() :String {}
	undefined function toLocaleLowerCase() :String {}
	undefined function toUpperCase() :String {}
	undefined function toLocaleUpperCase() :String {}
	undefined function size() :Integer {}
	undefined var length :Number;
} //String

class Number
{
	undefined function toFixed(fractionDigits:Number) :String {}
	undefined function toExponential(fractionDigits:Number) :String {}
	undefined function toPrecision(fractionDigits:Number) :String {}
	undefined var MIN_VALUE :Number;
	undefined var MAX_VALUE :Number;
	undefined var NEGATIVE_INFINITY :Number;
	undefined var POSITIVE_INFINITY :Number;
} //Number

class Integer : Number
{
} //Integer

class Float : Number
{
} //Float

class Time : Number
{
} //Time

class Boolean
{
} //Boolean

class Date
{
	undefined function UTC(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	undefined function parse(string:String) :Number {}
	undefined function toDateString() :String {}
	undefined function toTimeString() :String {}
	undefined function toLocaleString() :String {}
	undefined function toLocaleDateString() :String {}
	undefined function toLocaleTimeString() :String {}
	undefined function valueOf() :Object {}
	undefined function getFullYear() :Number {}
	undefined function getTime() :Number {}
	undefined function getUTCFullYear() :Number {}
	undefined function getMonth() :Number {}
	undefined function getUTCMonth() :Number {}
	undefined function getDate() :Number {}
	undefined function getUTCDate() :Number {}
	undefined function getDay() :Number {}
	undefined function getUTCDay() :Number {}
	undefined function getHours() :Number {}
	undefined function getUTCHours() :Number {}
	undefined function getMinutes() :Number {}
	undefined function getUTCMinutes() :Number {}
	undefined function getSeconds() :Number {}
	undefined function getUTCSeconds() :Number {}
	undefined function getMilliseconds() :Number {}
	undefined function getUTCMilliseconds() :Number {}
	undefined function getTimezoneOffset() :Number {}
	undefined function setTime(value:Number) :Number {}
	undefined function setMilliseconds(value:Number) :Number {}
	undefined function setUTCMilliseconds(ms:Number) :Number {}
	undefined function setSeconds(sec:Number, ms:Number) :Number {}
	undefined function setUTCSeconds(sec:Number, ms:Number) :Number {}
	undefined function setMinutes(min:Number, sec:Number, ms:Number) :Number {}
	undefined function setUTCMinute(min:Number, sec:Number, ms:Number) :Number {}
	undefined function setHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	undefined function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	undefined function setDate(date:Number) :Number {}
	undefined function setUTCDate(date:Number) :Number {}
	undefined function setMonth(month:Number, date:Number) :Number {}
	undefined function setUTCMonth(month:Number, date:Number) :Number {}
	undefined function setFullYear(year:Number, month:Number, date:Number) :Number {}
	undefined function setUTCFullYear(year:Number, month:Number, date:Number) {}
	undefined function toUTCString() :String {}
} //Date

class Math
{
	undefined function abs(x:Number) :Number {}
	undefined function acos(x:Number) :Float {}
	undefined function asin(x:Number) :Float {}
	undefined function atan(x:Number) :Float {}
	undefined function atan2(x:Number, y:Number) :Float {}
	undefined function ceil(x:Number) :Number {}
	undefined function cos(x:Number) :Float {}
	undefined function exp(x:Number) :Float {}
	undefined function floor(x:Number) :Integer {}
	undefined function log(x:Number) :Float {}
	undefined function max(a:Number, b:Number) :Number {}
	undefined function min(a:Number, b:Number) :Number {}
	undefined function pow(x:Number, y:Number) :Float {}
	undefined function random() :Float {}
	undefined function round(x:Number) :Number {}
	undefined function sin(x:Number) :Float {}
	undefined function sqrt(x:Number) :Float {}
	undefined function tan(x:Number) :Float {}
	undefined var E :Float;
	undefined var LN10 :Float;
	undefined var LN2 :Float;
	undefined var LOG2E :Float;
	undefined var LOG10E :Float;
	undefined var PI :Float;
	undefined var SQRT1_2 :Float;
	undefined var SQRT2 :Float;
} //Math

class RegExp
{
	undefined function exec(string:String) :Array {}
	undefined function test(string:String) :Boolean {}
	undefined var source :String;
	undefined var global :Boolean;
	undefined var ignoreCase :Boolean;
	undefined var multiline :Boolean;
	undefined var lastIndex :Number;
} //RegExp

class ArrayBuffer
{
	undefined function slice(begin:Number, end:Number) :ArrayBuffer {}
	undefined function encodeAsPNG(width:Number, height:Number) :ArrayBuffer {}
	undefined function encodeAsBase64() :String {}
	undefined var byteLength :Number;
	undefined var __uid :Integer;
} //ArrayBuffer

class ArrayBufferView
{
	undefined function Destructor() {}
	undefined var buffer :ArrayBuffer;
	undefined var byteLength :Number;
	undefined var __uid :Integer;
} //ArrayBufferView

class Float32Array : ArrayBufferView
{
	undefined var length :Number;
	undefined var byteOffset :Number;
	undefined var BYTES_PER_ELEMENT :Number;
	undefined var __uid :Integer;
} //Float32Array

class Int32Array : ArrayBufferView
{
	undefined var length :Number;
	undefined var byteOffset :Number;
	undefined var BYTES_PER_ELEMENT :Number;
	undefined var __uid :Integer;
} //Int32Array

class Uint8Array : ArrayBufferView
{
	undefined var length :Number;
	undefined var byteOffset :Number;
	undefined var BYTES_PER_ELEMENT :Number;
	undefined var __uid :Integer;
} //Uint8Array

class Error
{
	undefined var name :String;
	undefined var message :String;
} //Error

class EvalError : Error
{
} //EvalError

class RangeError : Error
{
} //RangeError

class ReferenceError : Error
{
} //ReferenceError

class SyntaxError : Error
{
} //SyntaxError

class TypeError : Error
{
} //TypeError

class ImageDataBuffer
{
	undefined var buffer :ArrayBuffer;
	undefined var width :Integer;
	undefined var height :Integer;
} //ImageDataBuffer

class XMLHttpRequest
{
	undefined function open(method:String, url:String) {}
	undefined function setRequestHeader(header:String, value:String) {}
	undefined function send() {}
	undefined function send$1(data:String) {}
	undefined function send$2(data:ArrayBufferView) {}
	undefined function abort() {}
	undefined function getAllResponseHeaders() :String {}
	undefined function getResponseHeader(header:String) :String {}
	undefined var UNSENT :Integer;
	undefined var OPENED :Integer;
	undefined var HEADERS_RECEIVED :Integer;
	undefined var LOADING :Integer;
	undefined var DONE :Integer;
	undefined var timeout :Integer;
	undefined var readyState :Integer;
	undefined var status :Integer;
	undefined var statusText :String;
	undefined var responseText :String;
	undefined var responseType :Integer;
} //XMLHttpRequest

class CocoFont
{
	undefined function fillText(imageDataBuffer:ArrayBuffer, width:Integer, text:String, x:Float, y:Float, R:Float, G:Float, B:Float, A:Float) {}
	undefined function measureText(text:String) :Float {}
	undefined function Constructor(fontSize:Float, fontName:String, bold:Boolean, oblique:Boolean) {}
	undefined var height :Float;
} //CocoFont

class Color : Number
{
} //Color

class Gradient : String
{
} //Gradient

class SCREEN_RESOLUTION_DPI_ENUM
{
	public var RESOLUTION_nodpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_ldpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_mdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_tvdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_hdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_xhdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_Retina :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_DefaultDpi :SCREEN_RESOLUTION_DPI_ENUM;
} //SCREEN_RESOLUTION_DPI_ENUM

class COCO_CLIP_SYMBOL_LOOP_ENUM
{
	public var CLIP_SYMBOL_LOOP_CONTINUOUS :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_SYNCHRONIZED_WITH_PARENT :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_ONCE :COCO_CLIP_SYMBOL_LOOP_ENUM;
} //COCO_CLIP_SYMBOL_LOOP_ENUM

class COCO_KEYFRAME_INTERPOLATION_ENUM
{
	public var KEYFRAME_INTERPOLATION_NONE :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_MOTION_TWEEN :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_ECHO :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_PHYSICS :COCO_KEYFRAME_INTERPOLATION_ENUM;
} //COCO_KEYFRAME_INTERPOLATION_ENUM

class COCO_FILTER_ENUM
{
	public var FILTER_INHERIT :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE_WITH_ALPHA :COCO_FILTER_ENUM;
	public var FILTER_SATURATION_WITH_ALPHA :COCO_FILTER_ENUM;
} //COCO_FILTER_ENUM

class COCO_TEXT_ALIGN_ENUM
{
	public var TEXT_ALIGN_NEAR :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_CENTER :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_FAR :COCO_TEXT_ALIGN_ENUM;
} //COCO_TEXT_ALIGN_ENUM

class COCO_TEXT_TRIMMING_ENUM
{
	public var StringTrimmingNone :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisPath :COCO_TEXT_TRIMMING_ENUM;
} //COCO_TEXT_TRIMMING_ENUM

class COCO_CONTROL_BORDER_STYLE_ENUM
{
	public var BORDER_NONE :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_SOLID :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_DOTTED :COCO_CONTROL_BORDER_STYLE_ENUM;
} //COCO_CONTROL_BORDER_STYLE_ENUM

class COCO_CONTROL_ANCHOR_ENUM
{
	public var ANCHOR_NONE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_CENTER :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
} //COCO_CONTROL_ANCHOR_ENUM

class COCO_SKIN_TILE_ENUM
{
	public var TILE_REPEAT_NONE :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_X :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_Y :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_XY :COCO_SKIN_TILE_ENUM;
} //COCO_SKIN_TILE_ENUM

class DeviceEvent
{
	public function stopPropagation() {}
	public function preventDefault() {}
	public function initEvent(type:String, canBubble:Boolean, cancelable:Boolean) {}
	public function initUIEvent(type:String, canBubble:Boolean, cancelable:Boolean, view:HTMLWindow, detail:Integer) {}
	public function initTouchEvent(type:String, canBubble:Boolean, cancelable:Boolean, view:HTMLWindow, detail:Integer, screenX:Integer, screenY:Integer, clientX:Integer, clientY:Integer, ctrlKey:Boolean, altKey:Boolean, shiftKey:Boolean, metaKey:Boolean, touches:TouchList, targetTouches:TouchList, changedTouches:TouchList, scale:Float, rotation:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public var CAPTURING_PHASE :Integer;
	public var AT_TARGET :Integer;
	public var BUBBLING_PHASE :Integer;
	public var type :String;
	public var target :EventTarget;
	public var currentTarget :EventTarget;
	public var eventPhase :Integer;
	public var bubbles :Boolean;
	public var cancelable :Boolean;
	public var timeStamp :Integer;
	public var defaultPrevented :Boolean;
	public var view :HTMLWindow;
	public var detail :Integer;
	public var touches :TouchList;
	public var targetTouches :TouchList;
	public var changedTouches :TouchList;
	public var scale :Float;
	public var rotation :Float;
	public var clientX :Integer;
	public var clientY :Integer;
	public var __clientX :Integer;
	public var __clientY :Integer;
} //DeviceEvent

class EventTarget
{
	public function Constructor() {}
} //EventTarget

class Audio
{
	public function play() {}
	public function pause() {}
	public function Destructor() {}
	public function Constructor(url:String) {}
	private var __uid :Integer;
	private var __currentTime :Float;
	public var duration :Float;
	public var paused :Boolean;
	public var ended :Boolean;
	public var autoplay :Boolean;
	public var loop :Boolean;
	public var src :String;
	public var currentTime :Float;
	public var readyState :Integer;
} //Audio

class HTMLCanvasContext
{
	public function Destructor() {}
	public function Constructor() {}
	public var canvas :HTMLCanvasElement;
} //HTMLCanvasContext

class PathLine
{
	public function Constructor(_x0:Float, _y0:Float, _x1:Float, _y1:Float) {}
	public var x0 :Float;
	public var y0 :Float;
	public var x1 :Float;
	public var y1 :Float;
} //PathLine

class CanvasRenderingContext2D : HTMLCanvasContext
{
	public function arc(x:Float, y:Float, radius:Float, startAngle:Float, endAngle:Float, anticlockwise:Boolean) {}
	public function arcTo(x1:Float, y1:Float, x2:Float, y2:Float, radius:Float) {}
	public function bezierCurveTo(cp1x:Float, cp1y:Float, cp2x:Float, cp2y:Float, x:Float, y:Float) {}
	public function clip() {}
	public function closePath() {}
	public function createImageData(width:Float, height:Float) :ImageData {}
	public function createLinearGradient(x0:Float, y0:Float, x1:Float, y1:Float) :HTMLCanvasGradient {}
	public function createPattern(image:Image, repetition:String) :HTMLCanvasPattern {}
	public function createRadialGradient(x0:Float, y0:Float, r0:Float, x1:Float, y1:Float, r1:Float) :HTMLCanvasGradient {}
	public function drawCustomFocusRing(element:HTMLElement) :Boolean {}
	public function drawSystemFocusRing(element:HTMLElement) {}
	public function fill() {}
	public function getImageData(x:Float, y:Float, width:Float, height:Float) :ImageData {}
	public function getLineDash() {}
	public function isPointInPath(x:Float, y:Float) :Boolean {}
	public function isPointInStroke(x:Float, y:Float) :Boolean {}
	public function quadraticCurveTo(cpx:Float, cpy:Float, x:Float, y:Float) {}
	public function rect(x:Float, y:Float, width:Float, height:Float) {}
	public function restore() {}
	public function rotate(angle:Float) {}
	public function save() {}
	public function scale(x:Float, y:Float) {}
	public function scrollPathIntoView() {}
	public function setLineDash(segments:Array<Float>) {}
	public function setTransform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float) {}
	public function strokeRect(x:Float, y:Float, w:Float, h:Float) {}
	public function strokeText(text:String, x:Float, y:Float, maxWidth:Float) {}
	public function transform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float) {}
	public function translate(x:Float, y:Float) {}
	public function drawImage(image:Image, a1:Float, a2:Float, a3:Float, a4:Float, a5:Float, a6:Float, a7:Float, a8:Float) {}
	public function putImageData(imagedata:ImageData, dx:Float, dy:Float, dirtyX:Float, dirtyY:Float, dirtyWidth:Float, dirtyHeight:Float) {}
	public function beginPath() {}
	public function moveTo(x:Float, y:Float) {}
	public function lineTo(x:Float, y:Float) {}
	public function stroke() {}
	public function fillText(text:String, x:Float, y:Float, maxWidth:Float) {}
	public function fillRect(x:Float, y:Float, width:Float, height:Float) {}
	public function clearRect(x:Float, y:Float, width:Float, height:Float) {}
	public function measureText(text:String) :HTMLTextMetrics {}
	public function Destructor() {}
	public function Constructor(canvas:HTMLCanvasElement) {}
	public var DRAWWINDOW_DRAW_CARET :Number;
	public var DRAWWINDOW_DO_NOT_FLUSH :Number;
	public var DRAWWINDOW_DRAW_VIEW :Number;
	public var DRAWWINDOW_USE_WIDGET_LAYERS :Number;
	public var DRAWWINDOW_ASYNC_DECODE_IMAGES :Number;
	public var globalAlpha :Float;
	public var lineCap :String;
	public var lineDashOffset :Float;
	public var lineJoin :String;
	public var miterLimit :Float;
	public var shadowBlur :Float;
	public var shadowColor :String;
	public var shadowOffsetX :Float;
	public var shadowOffsetY :Float;
	public var textAlign :String;
	public var textBaseline :String;
	public var globalCompositeOperation :String;
	private var __lineWidth :Float;
	private var __fillStyle :String;
	private var __fillColor :Array<Float>;
	private var __strokeStyle :String;
	private var __strokeColor :Array<Float>;
	private var __fontSetting :String;
	private var __font :CocoFont;
	private var __curX :Float;
	private var __curY :Float;
	private var __pathLines :Array<PathLine>;
	public var fillStyle :String;
	public var strokeStyle :String;
	public var lineWidth :Float;
	public var font :String;
} //CanvasRenderingContext2D

class HTMLCanvasElement
{
	public function getContext(contextId:String) :HTMLCanvasContext {}
	public function toDataURL() :String {}
	public function Destructor() {}
	public function Constructor() {}
	public var width :Float;
	public var height :Float;
	public var __imageData :ImageData;
} //HTMLCanvasElement

class HTMLCanvasGradient
{
	public function Constructor() {}
} //HTMLCanvasGradient

class HTMLCanvasPattern
{
	public function Constructor() {}
} //HTMLCanvasPattern

class HTMLDocument
{
	public function createElement(tagName:String) :HTMLCanvasElement {}
	public function Destructor() {}
	public function Constructor() {}
	public var body :HTMLElement;
} //HTMLDocument

class HTMLElement
{
	public function appendChild(node:HTMLCanvasElement) :HTMLCanvasElement {}
	public function Constructor() {}
} //HTMLElement

class Image
{
	public function load(url:String) {}
	public function Destructor() {}
	public function Constructor() {}
	public var __imageData :ImageData;
	public var src :String;
	public var width :Integer;
	public var height :Integer;
	public var naturalWidth :Integer;
	public var naturalHeight :Integer;
	public var complete :Boolean;
} //Image

class HTMLTextMetrics
{
	public function Constructor() {}
	public var width :Float;
} //HTMLTextMetrics

class HTMLWindow
{
	public function addEventListener(eventType:String, listener:Function, useCapture:Boolean) {}
	public function removeEventListener(eventType:String, listener:Function, useCapture:Boolean) {}
	public function dispatchEvent(uid:Integer, eventType:String) {}
	public function Destructor() {}
	public function Constructor() {}
	public var __uid :Integer;
	public var document :HTMLDocument;
	public var innerHeight :Integer;
	public var innerWidth :Integer;
	public var devicePixelRatio :Float;
	public var __deviceEvent :DeviceEvent;
	public var __elements :Array<Function>;
} //HTMLWindow

class ImageData
{
	public function Destructor() {}
	public function Constructor(a0:String, a1:String) {}
	public var data :Uint8Array;
	public var src :String;
	public var width :Integer;
	public var height :Integer;
} //ImageData

class Touch
{
	public function initTouch(identifier:Integer, target:EventTarget, screenX:Integer, screenY:Integer, clientX:Integer, clientY:Integer, pageX:Integer, pageY:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public var identifier :Integer;
	public var screenX :Integer;
	public var screenY :Integer;
	public var clientX :Integer;
	public var clientY :Integer;
	public var pageX :Integer;
	public var pageY :Integer;
	public var target :EventTarget;
} //Touch

class TouchList : Array
{
	public function item(index:Integer) :Touch {}
	public function Constructor() {}
	public var length :Integer;
} //TouchList

class WebGLObject
{
	public function Constructor(uid:Integer) {}
	public var __uid :Integer;
} //WebGLObject

class WebGLActiveInfo : WebGLObject
{
	public function Constructor(uid:Integer, program_uid:Integer, index:Integer) {}
} //WebGLActiveInfo

class WebGLBuffer : WebGLObject
{
	public function Constructor(uid:Integer) {}
} //WebGLBuffer

class WebGLContextAttributes : WebGLObject
{
	public function Constructor(uid:Integer) {}
} //WebGLContextAttributes

class WebGLFramebuffer : WebGLObject
{
	public function Constructor(uid:Integer) {}
} //WebGLFramebuffer

class WebGLProgram : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public var GLSLiTexCoords :Integer;
	public var GLSLiVec2Coords :Integer;
	public var GLSLiVecCoords :Integer;
	public var GLSLuColor :WebGLUniformLocation;
	public var GLSLuAlpha :WebGLUniformLocation;
	public var GLSLuMVMat :WebGLUniformLocation;
	public var GLSLuProjMat :WebGLUniformLocation;
	public var GLSLuSampler :WebGLUniformLocation;
	public var GLSLuSprFrame :WebGLUniformLocation;
	public var GLSLuSprSize :WebGLUniformLocation;
	public var GLSLuSprFlip :WebGLUniformLocation;
} //WebGLProgram

class WebGLRenderbuffer : WebGLObject
{
	public function Constructor(uid:Integer) {}
} //WebGLRenderbuffer

class WebGLRenderingContext : HTMLCanvasContext
{
	public function activeTexture(texture:Integer) {}
	public function attachShader(program:WebGLProgram, shader:WebGLShader) {}
	public function bindAttribLocation(program:WebGLProgram, index:Integer, name:String) {}
	public function bindBuffer(target:Integer, buffer:WebGLBuffer) {}
	public function bindFramebuffer(target:Integer, framebuffer:WebGLFramebuffer) {}
	public function bindRenderbuffer(target:Integer, renderbuffer:WebGLRenderbuffer) {}
	public function bindTexture(target:Integer, texture:WebGLTexture) {}
	public function blendColor(red:Float, green:Float, blue:Float, alpha:Float) {}
	public function blendEquation(mode:Integer) {}
	public function blendEquationSeparate(modeRGB:Integer, modeAlpha:Integer) {}
	public function blendFunc(sfactor:Integer, dfactor:Integer) {}
	public function blendFuncSeparate(srcRGB:Integer, dstRGB:Integer, srcAlpha:Integer, dstAlpha:Integer) {}
	public function bufferData(target:Integer, data:Float32Array, usage:Integer) {}
	public function bufferSubData(target:Integer, offset:Integer, data:Float32Array) {}
	public function checkFramebufferStatus(target:Integer) :Integer {}
	public function clear(mask:Integer) {}
	public function clearColor(red:Float, green:Float, blue:Float, alpha:Float) {}
	public function clearDepth(depth:Float) {}
	public function clearStencil(s:Integer) {}
	public function colorMask(red:Boolean, green:Boolean, blue:Boolean, alpha:Boolean) {}
	public function compileShader(shader:WebGLShader) {}
	public function compressedTexImage2D(target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, data:Float32Array) {}
	public function compressedTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, data:Float32Array) {}
	public function copyTexImage2D(target:Integer, level:Integer, internalformat:Integer, x:Integer, y:Integer, width:Integer, height:Integer, border:Integer) {}
	public function copyTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function createBuffer() :WebGLBuffer {}
	public function createFramebuffer() :WebGLFramebuffer {}
	public function createProgram() :WebGLProgram {}
	public function createRenderbuffer() :WebGLRenderbuffer {}
	public function createShader(type:Integer) :WebGLShader {}
	public function createTexture() :WebGLTexture {}
	public function cullFace(mode:Integer) {}
	public function deleteBuffer(buffer:WebGLBuffer) {}
	public function deleteFramebuffer(framebuffer:WebGLFramebuffer) {}
	public function deleteProgram(program:WebGLProgram) {}
	public function deleteRenderbuffer(renderbuffer:WebGLRenderbuffer) {}
	public function deleteShader(shader:WebGLShader) {}
	public function deleteTexture(texture:WebGLTexture) {}
	public function depthFunc(func:Integer) {}
	public function depthMask(flag:Boolean) {}
	public function depthRange(zNear:Float, zFar:Float) {}
	public function detachShader(program:WebGLProgram, shader:WebGLShader) {}
	public function disable(cap:Integer) {}
	public function disableVertexAttribArray(index:Integer) {}
	public function drawArrays(mode:Integer, first:Integer, count:Integer) {}
	public function drawElements(mode:Integer, count:Integer, type:Integer, offset:Integer) {}
	public function enable(cap:Integer) {}
	public function enableVertexAttribArray(index:Integer) {}
	public function finish() {}
	public function flush() {}
	public function framebufferRenderbuffer(target:Integer, attachment:Integer, renderbuffertarget:Integer, renderbuffer:WebGLRenderbuffer) {}
	public function framebufferTexture2D(target:Integer, attachment:Integer, textarget:Integer, texture:WebGLTexture, level:Integer) {}
	public function frontFace(mode:Integer) {}
	public function generateMipmap(target:Integer) {}
	public function getActiveAttrib(program:WebGLProgram, index:Integer) :WebGLActiveInfo {}
	public function getActiveUniform(program:WebGLProgram, index:Integer) :WebGLActiveInfo {}
	public function getAttachedShaders(program:WebGLProgram) :Array<WebGLShader> {}
	public function getAttribLocation(program:WebGLProgram, name:String) :Integer {}
	public function getBufferParameter(target:Integer, pname:Integer) :String {}
	public function getContextAttributes() :WebGLContextAttributes {}
	public function getError() :Integer {}
	public function getExtension(name:String) :Object {}
	public function getFramebufferAttachmentParameter(target:Integer, attachment:Integer, pname:Integer) :String {}
	public function getParameter(pname:Integer) :String {}
	public function getProgramInfoLog(program:WebGLProgram) :String {}
	public function getProgramParameter(program:WebGLProgram, pname:Integer) :Boolean {}
	public function getRenderbufferParameter(target:Integer, pname:Integer) :String {}
	public function getShaderInfoLog(shader:WebGLShader) :String {}
	public function getShaderParameter(shader:WebGLShader, pname:Integer) :Boolean {}
	public function getShaderPrecisionFormat(shadertype:Integer, precisiontype:Integer) :WebGLShaderPrecisionFormat {}
	public function getShaderSource(shader:WebGLShader) :String {}
	public function getSupportedExtensions() :Array<String> {}
	public function getTexParameter(target:Integer, pname:Integer) :String {}
	public function getUniform(program:WebGLProgram, location:WebGLUniformLocation) :String {}
	public function getUniformLocation(program:WebGLProgram, name:String) :WebGLUniformLocation {}
	public function getVertexAttrib(index:Integer, pname:Integer) :String {}
	public function getVertexAttribOffset(index:Integer, pname:Integer) :Integer {}
	public function hint(target:Integer, mode:Integer) {}
	public function isBuffer(buffer:WebGLBuffer) :Boolean {}
	public function isContextLost() :Boolean {}
	public function isEnabled(cap:Integer) :Boolean {}
	public function isFramebuffer(framebuffer:WebGLFramebuffer) :Boolean {}
	public function isProgram(program:WebGLProgram) :Boolean {}
	public function isRenderbuffer(renderbuffer:WebGLRenderbuffer) :Boolean {}
	public function isShader(shader:WebGLShader) :Boolean {}
	public function isTexture(texture:WebGLTexture) :Boolean {}
	public function lineWidth(width:Float) {}
	public function linkProgram(program:WebGLProgram) {}
	public function pixelStorei(pname:Integer, param:Integer) {}
	public function polygonOffset(factor:Float, units:Float) {}
	public function readPixels(x:Integer, y:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array) {}
	public function renderbufferStorage(target:Integer, internalformat:Integer, width:Integer, height:Integer) {}
	public function sampleCoverage(value:Float, invert:Boolean) {}
	public function scissor(x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function shaderSource(shader:WebGLShader, source:String) {}
	public function stencilFunc(func:Integer, ref:Integer, mask:Integer) {}
	public function stencilFuncSeparate(face:Integer, func:Integer, ref:Integer, mask:Integer) {}
	public function stencilMask(mask:Integer) {}
	public function stencilMaskSeparate(face:Integer, mask:Integer) {}
	public function stencilOp(fail:Integer, zfail:Integer, zpass:Integer) {}
	public function stencilOpSeparate(face:Integer, fail:Integer, zfail:Integer, zpass:Integer) {}
	public function texImage2D(target:Integer, level:Integer, internalformat:Integer, format:Integer, type:Integer, image:Image) {}
	public function texParameterf(target:Integer, pname:Integer, param:Float) {}
	public function texParameteri(target:Integer, pname:Integer, param:Integer) {}
	public function texSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array) {}
	public function uniform1f(location:WebGLUniformLocation, x:Float) {}
	public function uniform1fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform1i(location:WebGLUniformLocation, x:Integer) {}
	public function uniform1iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform2f(location:WebGLUniformLocation, x:Float, y:Float) {}
	public function uniform2fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform2i(location:WebGLUniformLocation, x:Integer, y:Integer) {}
	public function uniform2iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform3f(location:WebGLUniformLocation, x:Float, y:Float, z:Float) {}
	public function uniform3fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform3i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer) {}
	public function uniform3iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform4f(location:WebGLUniformLocation, x:Float, y:Float, z:Float, w:Float) {}
	public function uniform4fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform4i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer, w:Integer) {}
	public function uniform4iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniformMatrix2fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function uniformMatrix3fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function uniformMatrix4fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function useProgram(program:WebGLProgram) {}
	public function validateProgram(program:WebGLProgram) {}
	public function vertexAttrib1f(indx:Integer, x:Float) {}
	public function vertexAttrib1fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib2f(indx:Integer, x:Float, y:Float) {}
	public function vertexAttrib2fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib3f(indx:Integer, x:Float, y:Float, z:Float) {}
	public function vertexAttrib3fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib4f(indx:Integer, x:Float, y:Float, z:Float, w:Float) {}
	public function vertexAttrib4fv(indx:Integer, values:Float32Array) {}
	public function vertexAttribPointer(indx:Integer, size:Integer, type:Integer, normalized:Boolean, stride:Integer, offset:Integer) {}
	public function viewport(x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function Destructor() {}
	public function Constructor(canvas:HTMLCanvasElement) {}
	public var ACTIVE_ATTRIBUTES :Integer;
	public var ACTIVE_TEXTURE :Integer;
	public var ACTIVE_UNIFORMS :Integer;
	public var ALIASED_LINE_WIDTH_RANGE :Integer;
	public var ALIASED_POINT_SIZE_RANGE :Integer;
	public var ALPHA :Integer;
	public var ALPHA_BITS :Integer;
	public var ALWAYS :Integer;
	public var ARRAY_BUFFER :Integer;
	public var ARRAY_BUFFER_BINDING :Integer;
	public var ATTACHED_SHADERS :Integer;
	public var BACK :Integer;
	public var BLEND :Integer;
	public var BLEND_COLOR :Integer;
	public var BLEND_DST_ALPHA :Integer;
	public var BLEND_DST_RGB :Integer;
	public var BLEND_EQUATION :Integer;
	public var BLEND_EQUATION_ALPHA :Integer;
	public var BLEND_EQUATION_RGB :Integer;
	public var BLEND_SRC_ALPHA :Integer;
	public var BLEND_SRC_RGB :Integer;
	public var BLUE_BITS :Integer;
	public var BOOL :Integer;
	public var BOOL_VEC2 :Integer;
	public var BOOL_VEC3 :Integer;
	public var BOOL_VEC4 :Integer;
	public var BROWSER_DEFAULT_WEBGL :Integer;
	public var BUFFER_SIZE :Integer;
	public var BUFFER_USAGE :Integer;
	public var BYTE :Integer;
	public var CCW :Integer;
	public var CLAMP_TO_EDGE :Integer;
	public var COLOR_ATTACHMENT0 :Integer;
	public var COLOR_BUFFER_BIT :Integer;
	public var COLOR_CLEAR_VALUE :Integer;
	public var COLOR_WRITEMASK :Integer;
	public var COMPILE_STATUS :Integer;
	public var COMPRESSED_TEXTURE_FORMATS :Integer;
	public var CONSTANT_ALPHA :Integer;
	public var CONSTANT_COLOR :Integer;
	public var CONTEXT_LOST_WEBGL :Integer;
	public var CULL_FACE :Integer;
	public var CULL_FACE_MODE :Integer;
	public var CURRENT_PROGRAM :Integer;
	public var CURRENT_VERTEX_ATTRIB :Integer;
	public var CW :Integer;
	public var DECR :Integer;
	public var DECR_WRAP :Integer;
	public var DELETE_STATUS :Integer;
	public var DEPTH_ATTACHMENT :Integer;
	public var DEPTH_BITS :Integer;
	public var DEPTH_BUFFER_BIT :Integer;
	public var DEPTH_CLEAR_VALUE :Integer;
	public var DEPTH_COMPONENT :Integer;
	public var DEPTH_COMPONENT16 :Integer;
	public var DEPTH_FUNC :Integer;
	public var DEPTH_RANGE :Integer;
	public var DEPTH_STENCIL :Integer;
	public var DEPTH_STENCIL_ATTACHMENT :Integer;
	public var DEPTH_TEST :Integer;
	public var DEPTH_WRITEMASK :Integer;
	public var DITHER :Integer;
	public var DONT_CARE :Integer;
	public var DST_ALPHA :Integer;
	public var DST_COLOR :Integer;
	public var DYNAMIC_DRAW :Integer;
	public var ELEMENT_ARRAY_BUFFER :Integer;
	public var ELEMENT_ARRAY_BUFFER_BINDING :Integer;
	public var EQUAL :Integer;
	public var FASTEST :Integer;
	public var FLOAT :Integer;
	public var FLOAT_MAT2 :Integer;
	public var FLOAT_MAT3 :Integer;
	public var FLOAT_MAT4 :Integer;
	public var FLOAT_VEC2 :Integer;
	public var FLOAT_VEC3 :Integer;
	public var FLOAT_VEC4 :Integer;
	public var FRAGMENT_SHADER :Integer;
	public var FRAMEBUFFER :Integer;
	public var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :Integer;
	public var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :Integer;
	public var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :Integer;
	public var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :Integer;
	public var FRAMEBUFFER_BINDING :Integer;
	public var FRAMEBUFFER_COMPLETE :Integer;
	public var FRAMEBUFFER_INCOMPLETE_ATTACHMENT :Integer;
	public var FRAMEBUFFER_INCOMPLETE_DIMENSIONS :Integer;
	public var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :Integer;
	public var FRAMEBUFFER_UNSUPPORTED :Integer;
	public var FRONT :Integer;
	public var FRONT_AND_BACK :Integer;
	public var FRONT_FACE :Integer;
	public var FUNC_ADD :Integer;
	public var FUNC_REVERSE_SUBTRACT :Integer;
	public var FUNC_SUBTRACT :Integer;
	public var GENERATE_MIPMAP_HINT :Integer;
	public var GEQUAL :Integer;
	public var GREATER :Integer;
	public var GREEN_BITS :Integer;
	public var HIGH_FLOAT :Integer;
	public var HIGH_INT :Integer;
	public var INCR :Integer;
	public var INCR_WRAP :Integer;
	public var INT :Integer;
	public var INT_VEC2 :Integer;
	public var INT_VEC3 :Integer;
	public var INT_VEC4 :Integer;
	public var INVALID_ENUM :Integer;
	public var INVALID_FRAMEBUFFER_OPERATION :Integer;
	public var INVALID_OPERATION :Integer;
	public var INVALID_VALUE :Integer;
	public var INVERT :Integer;
	public var KEEP :Integer;
	public var LEQUAL :Integer;
	public var LESS :Integer;
	public var LINE_LOOP :Integer;
	public var LINE_STRIP :Integer;
	public var LINE_WIDTH :Integer;
	public var LINEAR :Integer;
	public var LINEAR_MIPMAP_LINEAR :Integer;
	public var LINEAR_MIPMAP_NEAREST :Integer;
	public var LINES :Integer;
	public var LINK_STATUS :Integer;
	public var LOW_FLOAT :Integer;
	public var LOW_INT :Integer;
	public var LUMINANCE :Integer;
	public var LUMINANCE_ALPHA :Integer;
	public var MAX_COMBINED_TEXTURE_IMAGE_UNITS :Integer;
	public var MAX_CUBE_MAP_TEXTURE_SIZE :Integer;
	public var MAX_FRAGMENT_UNIFORM_VECTORS :Integer;
	public var MAX_RENDERBUFFER_SIZE :Integer;
	public var MAX_TEXTURE_IMAGE_UNITS :Integer;
	public var MAX_TEXTURE_SIZE :Integer;
	public var MAX_VARYING_VECTORS :Integer;
	public var MAX_VERTEX_ATTRIBS :Integer;
	public var MAX_VERTEX_TEXTURE_IMAGE_UNITS :Integer;
	public var MAX_VERTEX_UNIFORM_VECTORS :Integer;
	public var MAX_VIEWPORT_DIMS :Integer;
	public var MEDIUM_FLOAT :Integer;
	public var MEDIUM_INT :Integer;
	public var MIRRORED_REPEAT :Integer;
	public var NEAREST :Integer;
	public var NEAREST_MIPMAP_LINEAR :Integer;
	public var NEAREST_MIPMAP_NEAREST :Integer;
	public var NEVER :Integer;
	public var NICEST :Integer;
	public var NO_ERROR :Integer;
	public var NONE :Integer;
	public var NOTEQUAL :Integer;
	public var ONE :Integer;
	public var ONE_MINUS_CONSTANT_ALPHA :Integer;
	public var ONE_MINUS_CONSTANT_COLOR :Integer;
	public var ONE_MINUS_DST_ALPHA :Integer;
	public var ONE_MINUS_DST_COLOR :Integer;
	public var ONE_MINUS_SRC_ALPHA :Integer;
	public var ONE_MINUS_SRC_COLOR :Integer;
	public var OUT_OF_MEMORY :Integer;
	public var PACK_ALIGNMENT :Integer;
	public var POINTS :Integer;
	public var POLYGON_OFFSET_FACTOR :Integer;
	public var POLYGON_OFFSET_FILL :Integer;
	public var POLYGON_OFFSET_UNITS :Integer;
	public var RED_BITS :Integer;
	public var RENDERBUFFER :Integer;
	public var RENDERBUFFER_ALPHA_SIZE :Integer;
	public var RENDERBUFFER_BINDING :Integer;
	public var RENDERBUFFER_BLUE_SIZE :Integer;
	public var RENDERBUFFER_DEPTH_SIZE :Integer;
	public var RENDERBUFFER_GREEN_SIZE :Integer;
	public var RENDERBUFFER_HEIGHT :Integer;
	public var RENDERBUFFER_INTERNAL_FORMAT :Integer;
	public var RENDERBUFFER_RED_SIZE :Integer;
	public var RENDERBUFFER_STENCIL_SIZE :Integer;
	public var RENDERBUFFER_WIDTH :Integer;
	public var RENDERER :Integer;
	public var REPEAT :Integer;
	public var REPLACE :Integer;
	public var RGB :Integer;
	public var RGB5_A1 :Integer;
	public var RGB565 :Integer;
	public var RGBA :Integer;
	public var RGBA4 :Integer;
	public var SAMPLE_ALPHA_TO_COVERAGE :Integer;
	public var SAMPLE_BUFFERS :Integer;
	public var SAMPLE_COVERAGE :Integer;
	public var SAMPLE_COVERAGE_INVERT :Integer;
	public var SAMPLE_COVERAGE_VALUE :Integer;
	public var SAMPLER_2D :Integer;
	public var SAMPLER_CUBE :Integer;
	public var SAMPLES :Integer;
	public var SCISSOR_BOX :Integer;
	public var SCISSOR_TEST :Integer;
	public var SHADER_TYPE :Integer;
	public var SHADING_LANGUAGE_VERSION :Integer;
	public var SHORT :Integer;
	public var SRC_ALPHA :Integer;
	public var SRC_ALPHA_SATURATE :Integer;
	public var SRC_COLOR :Integer;
	public var STATIC_DRAW :Integer;
	public var STENCIL_ATTACHMENT :Integer;
	public var STENCIL_BACK_FAIL :Integer;
	public var STENCIL_BACK_FUNC :Integer;
	public var STENCIL_BACK_PASS_DEPTH_FAIL :Integer;
	public var STENCIL_BACK_PASS_DEPTH_PASS :Integer;
	public var STENCIL_BACK_REF :Integer;
	public var STENCIL_BACK_VALUE_MASK :Integer;
	public var STENCIL_BACK_WRITEMASK :Integer;
	public var STENCIL_BITS :Integer;
	public var STENCIL_BUFFER_BIT :Integer;
	public var STENCIL_CLEAR_VALUE :Integer;
	public var STENCIL_FAIL :Integer;
	public var STENCIL_FUNC :Integer;
	public var STENCIL_INDEX :Integer;
	public var STENCIL_INDEX8 :Integer;
	public var STENCIL_PASS_DEPTH_FAIL :Integer;
	public var STENCIL_PASS_DEPTH_PASS :Integer;
	public var STENCIL_REF :Integer;
	public var STENCIL_TEST :Integer;
	public var STENCIL_VALUE_MASK :Integer;
	public var STENCIL_WRITEMASK :Integer;
	public var STREAM_DRAW :Integer;
	public var SUBPIXEL_BITS :Integer;
	public var TEXTURE :Integer;
	public var TEXTURE_2D :Integer;
	public var TEXTURE_BINDING_2D :Integer;
	public var TEXTURE_BINDING_CUBE_MAP :Integer;
	public var TEXTURE_CUBE_MAP :Integer;
	public var TEXTURE_CUBE_MAP_NEGATIVE_X :Integer;
	public var TEXTURE_CUBE_MAP_NEGATIVE_Y :Integer;
	public var TEXTURE_CUBE_MAP_NEGATIVE_Z :Integer;
	public var TEXTURE_CUBE_MAP_POSITIVE_X :Integer;
	public var TEXTURE_CUBE_MAP_POSITIVE_Y :Integer;
	public var TEXTURE_CUBE_MAP_POSITIVE_Z :Integer;
	public var TEXTURE_MAG_FILTER :Integer;
	public var TEXTURE_MIN_FILTER :Integer;
	public var TEXTURE_WRAP_S :Integer;
	public var TEXTURE_WRAP_T :Integer;
	public var TEXTURE0 :Integer;
	public var TEXTURE1 :Integer;
	public var TEXTURE10 :Integer;
	public var TEXTURE11 :Integer;
	public var TEXTURE12 :Integer;
	public var TEXTURE13 :Integer;
	public var TEXTURE14 :Integer;
	public var TEXTURE15 :Integer;
	public var TEXTURE16 :Integer;
	public var TEXTURE17 :Integer;
	public var TEXTURE18 :Integer;
	public var TEXTURE19 :Integer;
	public var TEXTURE2 :Integer;
	public var TEXTURE20 :Integer;
	public var TEXTURE21 :Integer;
	public var TEXTURE22 :Integer;
	public var TEXTURE23 :Integer;
	public var TEXTURE24 :Integer;
	public var TEXTURE25 :Integer;
	public var TEXTURE26 :Integer;
	public var TEXTURE27 :Integer;
	public var TEXTURE28 :Integer;
	public var TEXTURE29 :Integer;
	public var TEXTURE3 :Integer;
	public var TEXTURE30 :Integer;
	public var TEXTURE31 :Integer;
	public var TEXTURE4 :Integer;
	public var TEXTURE5 :Integer;
	public var TEXTURE6 :Integer;
	public var TEXTURE7 :Integer;
	public var TEXTURE8 :Integer;
	public var TEXTURE9 :Integer;
	public var TRIANGLE_FAN :Integer;
	public var TRIANGLE_STRIP :Integer;
	public var TRIANGLES :Integer;
	public var UNPACK_ALIGNMENT :Integer;
	public var UNPACK_COLORSPACE_CONVERSION_WEBGL :Integer;
	public var UNPACK_FLIP_Y_WEBGL :Integer;
	public var UNPACK_PREMULTIPLY_ALPHA_WEBGL :Integer;
	public var UNSIGNED_BYTE :Integer;
	public var UNSIGNED_INT :Integer;
	public var UNSIGNED_SHORT :Integer;
	public var UNSIGNED_SHORT_4_4_4_4 :Integer;
	public var UNSIGNED_SHORT_5_5_5_1 :Integer;
	public var UNSIGNED_SHORT_5_6_5 :Integer;
	public var VALIDATE_STATUS :Integer;
	public var VENDOR :Integer;
	public var VERSION :Integer;
	public var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :Integer;
	public var VERTEX_ATTRIB_ARRAY_ENABLED :Integer;
	public var VERTEX_ATTRIB_ARRAY_NORMALIZED :Integer;
	public var VERTEX_ATTRIB_ARRAY_POINTER :Integer;
	public var VERTEX_ATTRIB_ARRAY_SIZE :Integer;
	public var VERTEX_ATTRIB_ARRAY_STRIDE :Integer;
	public var VERTEX_ATTRIB_ARRAY_TYPE :Integer;
	public var VERTEX_SHADER :Integer;
	public var VIEWPORT :Integer;
	public var ZERO :Integer;
	public var __uid :Integer;
	public var canvas :HTMLCanvasElement;
} //WebGLRenderingContext

class WebGLShader : WebGLObject
{
	public function Constructor(uid:Integer, type:Integer) {}
	protected var type :Integer;
} //WebGLShader

class WebGLShaderPrecisionFormat : WebGLObject
{
	public function Constructor(uid:Integer, shadertype:Integer, precisiontype:Integer) {}
} //WebGLShaderPrecisionFormat

class WebGLTexture : WebGLObject
{
	public function Destructor(uid:Integer) {}
	public function Constructor(uid:Integer) {}
} //WebGLTexture

class WebGLUniformLocation : WebGLObject
{
	public function Constructor(uid:Integer, program_uid:Integer, name:String) {}
} //WebGLUniformLocation

class CocoAudio
{
	public function reset() {}
	public function tick() {}
	public function play() {}
	public function pause() {}
	public function stop() {}
	public function duration() :Float {}
	public function paused() :Boolean {}
	public function ended() :Boolean {}
	public function getCurrentTime() :Float {}
	public function setCurrentTime(t:Float) {}
	public function Destructor() {}
	public function Constructor(url:String, autoplay:Boolean, loops:Integer) {}
	public var src :String;
	public var audio :Audio;
	public var autoplay :Boolean;
	public var loops :Integer;
	private var __firstPlayed :Boolean;
	private var __loopCount :Integer;
} //CocoAudio

class CocoClip
{
	public function prepare(scene:CocoScene) {}
	public function setText(text:String) {}
	public function setText$1(text:String, fontName:String, fontSizePixels:Integer, hAlign:COCO_TEXT_ALIGN_ENUM, vAlign:COCO_TEXT_ALIGN_ENUM, multiline:Boolean, trimming:COCO_TEXT_TRIMMING_ENUM, CSSColor:String, textRectWidth:Integer, textRectHeight:Integer) {}
	public function reset() {}
	public function clear() {}
	public function addChild(clipInstance:CocoClip) :CocoClip {}
	public function removeChild(clipInstance:CocoClip) :CocoClip {}
	private function normalize() {}
	public function getChildByName(instanceName:String) :CocoClip {}
	public function getChildIndex(child:CocoClip) :Integer {}
	public function gotoFrameByName(LabelName:String, pause:Boolean) :Boolean {}
	public function gotoFrameByIndex(FrameIndex:Integer, pause:Boolean) :Boolean {}
	private function __advanceTime(parentClipsDuration:Time) {}
	public function paint(gl:WebGLRenderingContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function hitTest(wx:Float, wy:Float) :Boolean {}
	public function initBoundingBoxFromTexture(scene:CocoScene, W2:Float, H2:Float) {}
	public function initBoundingBoxFromChildren(scene:CocoScene) {}
	public function drawBoundingBox(scene:CocoScene, gl:WebGLRenderingContext) {}
	public function Destructor() {}
	public function Constructor(image:CocoImage) {}
	public var __instanceName :String;
	public var __clipPath :String;
	public var __scene :CocoScene;
	public var __image :CocoImage;
	public var __symbolLoop :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var __children :Array<CocoClip>;
	public var __timeline :CocoTimeline;
	public var __parent :CocoClip;
	public var text :String;
	public var textFontName :String;
	public var textFontSize :Integer;
	public var textHAlign :COCO_TEXT_ALIGN_ENUM;
	public var textVAlign :COCO_TEXT_ALIGN_ENUM;
	public var textMultiline :Boolean;
	public var textTrimming :COCO_TEXT_TRIMMING_ENUM;
	public var textColor :String;
	public var textWidth :Integer;
	public var textHeight :Integer;
	public var __currentTime :Time;
	public var __loopTime :Time;
	public var __loops :Integer;
	public var __currentFrame :CocoKeyFrame;
	public var __childWithMaxTimelineDuration :CocoClip;
	public var __hasBoundingBox :Boolean;
	public var __vABS_TOP_LEFT :CocoVector;
	public var __vABS_TOP_RIGHT :CocoVector;
	public var __vABS_BOTTOM_LEFT :CocoVector;
	public var __vABS_BOTTOM_RIGHT :CocoVector;
	public var __vREL_TOP_LEFT :CocoVector;
	public var __vREL_TOP_RIGHT :CocoVector;
	public var __vREL_BOTTOM_LEFT :CocoVector;
	public var __vREL_BOTTOM_RIGHT :CocoVector;
	public var __vTemp :CocoVector;
	public var __mTemp :CocoMatrix;
	private var __currentSequence :CocoSequence;
	private var __currentAudio :CocoAudio;
} //CocoClip

class CocoEngine
{
	public function addTickListener(tickable:ITickable) {}
	public function getTickableIndex(tickable:ITickable) :Integer {}
	public function removeTickListener(tickable:ITickable) {}
	public function setNextState(s:State) {}
	public function run(gl:WebGLRenderingContext, time:Time) {}
	private function __setTouchEvent(e:DeviceEvent) {}
	public function getTouchEvent() :DeviceEvent {}
	public function pushTouched(clip:CocoClip) {}
	public function isClicked(check:Array<CocoClip>) :Integer {}
	public function __debug_trace(scene:CocoScene, clip:CocoClip, message:String) {}
	public function Destructor() {}
	public function Constructor() {}
	public var TICK_TIME :Time;
	public var debugbreak :Boolean;
	private var __currentState :State;
	private var __nextState :State;
	private var __deviceEvent :DeviceEvent;
	private var __clicked :Array<CocoClip>;
	private var __clock :Time;
	private var __tickables :Array<CocoITickable>;
} //CocoEngine

class CocoGraphics
{
	public function createTextTexture(scene:CocoScene, text:String, fontName:String, fontSizePixels:Integer, hAlign:COCO_TEXT_ALIGN_ENUM, vAlign:COCO_TEXT_ALIGN_ENUM, multiline:Boolean, trimming:COCO_TEXT_TRIMMING_ENUM, CSSColor:String, textRectWidth:Integer, textRectHeight:Integer) :CocoImage {}
	public function drawSkin(ctx:CanvasRenderingContext2D, skinImage:CocoImage, x:Float, y:Float, width:Float, height:Float, anchor:COCO_CONTROL_ANCHOR_ENUM) {}
	private function __drawSlice(ctx:CanvasRenderingContext2D, skin:CocoImage, cx:Float, cy:Float, cw:Float, ch:Float, sx:Float, sy:Float, sw:Float, sh:Float, r:COCO_SKIN_TILE_ENUM) {}
	private function __countFixed(v:Float32Array) :Integer {}
	private function __fixedW(v:Float32Array) :Boolean {}
	private function __fixedH(v:Float32Array) :Boolean {}
	private function __tileSkin(ctx:CanvasRenderingContext2D, image:CocoImage, cellX:Float, cellY:Float, cellWidth:Float, cellHeight:Float, x:Float, y:Float, width:Float, height:Float) {}
	private function __drawRegion(ctx:CanvasRenderingContext2D, image:CocoImage, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function drawImage(image:CocoImage, x:Float, y:Float, stretchW:Float, stretchH:Float, anchor:COCO_CONTROL_ANCHOR_ENUM, clear:Boolean) {}
	public function Destructor() {}
	public function Constructor() {}
} //CocoGraphics

class CocoImage
{
	public function addSibling(sibling:CocoImageSibling) :CocoImageSibling {}
	public function addSequence(sequence:CocoSequence) :CocoSequence {}
	public function getSequence(name:String) :CocoSequence {}
	public function prepare(scene:CocoScene, gl:WebGLRenderingContext) {}
	public function Destructor() {}
	public function Constructor() {}
	public var symbolName :String;
	public var image :Image;
	public var textureCellWidth :Float;
	public var textureCellHeight :Float;
	public var textureGrid :Float32Array;
	public var color :Float32Array;
	public var texSize :Float32Array;
	public var isSpriteSheet :Boolean;
	public var __pixelRatioScale :Float;
	public var texture :WebGLTexture;
	public var buffer :WebGLBuffer;
	public var sequences :Array<CocoSequence>;
	public var skin :Float32Array;
	public var baseUrl :String;
	public var viewOptimalWidth :Integer;
	public var viewOptimalHeight :Integer;
	public var viewSiblings :Array<CocoImageSibling>;
	public var pixelRatio :Float;
} //CocoImage

class CocoImageSibling
{
	public function Constructor(url:String, pixelRatio:Float, textureWidth:Float, textureHeight:Float) {}
	public var url :String;
	public var pixelRatio :Float;
	public var textureWidth :Float;
	public var textureHeight :Float;
} //CocoImageSibling

class CocoKeyFrame
{
	public function clone(exact:Boolean) :CocoKeyFrame {}
	public function reset() {}
	public function interpolate(F1:CocoKeyFrame, F2:CocoKeyFrame, s:Float) {}
	public function combine(Frame:CocoKeyFrame) {}
	public function apply(matrix:CocoMatrix) {}
	public function Destructor() {}
	public function Constructor() {}
	public var frameIndex :Integer;
	public var __frameIndex :Float;
	public var frameInterpolation :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var handleEvents :Boolean;
	public var visible :Boolean;
	public var filter :Integer;
	public var red :Float;
	public var green :Float;
	public var blue :Float;
	public var alpha :Float;
	public var x :Float;
	public var y :Float;
	public var pivotX :Float;
	public var pivotY :Float;
	public var scaleX :Float;
	public var scaleY :Float;
	public var rotation :Float;
	public var action :CocoAction;
	public var nextState :State;
	public var audio :CocoAudio;
	public var flipH :Boolean;
	public var flipV :Boolean;
	public var spriteSequenceName :String;
	private var __isCloned :Boolean;
} //CocoKeyFrame

class CocoMatrix
{
	public function identity() {}
	public function ortho(left:Float, right:Float, bottom:Float, top:Float, near:Float, far:Float) {}
	public function transpose() {}
	public function determinant() :Float {}
	public function invert() {}
	public function multiplyByVector(v:CocoVector) :CocoVector {}
	public function multiplyByMatrix(v:CocoMatrix) :CocoMatrix {}
	public function translate(tx:Float, ty:Float) {}
	public function scale(sx:Float, sy:Float) {}
	public function rotateZ(rz:Float) {}
	public function refresh() {}
	public function update(gl:WebGLRenderingContext, ul:WebGLUniformLocation) {}
	public function push() {}
	public function pop() {}
	public function Destructor() {}
	public function Constructor(M:CocoMatrix) {}
	public var rc11 :Float;
	public var rc12 :Float;
	public var rc13 :Float;
	public var rc14 :Float;
	public var rc21 :Float;
	public var rc22 :Float;
	public var rc23 :Float;
	public var rc24 :Float;
	public var rc31 :Float;
	public var rc32 :Float;
	public var rc33 :Float;
	public var rc34 :Float;
	public var rc41 :Float;
	public var rc42 :Float;
	public var rc43 :Float;
	public var rc44 :Float;
	public var __stack :Array<Float32Array>;
	public var __data :Float32Array;
	public var __dirty :Boolean;
} //CocoMatrix

class CocoRect
{
	public var left :Float;
	public var top :Float;
	public var right :Float;
	public var bottom :Float;
} //CocoRect

class CocoScene
{
	public function getImageSymbol(symbolName:String) :CocoImage {}
	public function newResourceImage(symbolName:String, baseUrl:String) :CocoImage {}
	private function prepare(gl:WebGLRenderingContext) {}
	private function makeProgram(gl:WebGLRenderingContext, vs:String, fs:String) :WebGLProgram {}
	private function loadResources() {}
	private function resourcesLoaded(gl:WebGLRenderingContext) :Boolean {}
	public function paint(gl:WebGLRenderingContext, time:Time) {}
	private function setFilter(filter:Integer) :Boolean {}
	public function drawFrame(gl:WebGLRenderingContext, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function gotoAndPlayByName(LabelName:String) {}
	public function gotoAndStopByName(LabelName:String) {}
	public function gotoAndPlayByIndex(FrameIndex:Integer) {}
	public function gotoAndStopyByIndex(FrameIndex:Integer) {}
	public function stop() {}
	public function Destructor() {}
	public function Constructor() {}
	public var __sceneName :String;
	public var __imageSymbols :Array<CocoImage>;
	public var __fps :Float;
	public var __view_width :Float;
	public var __view_height :Float;
	public var __view_pixel_ratio :Float;
	public var __view_scale :Float;
	public var __root :CocoClip;
	public var __modelViewMatrix :CocoMatrix;
	public var __projectionMatrix :CocoMatrix;
	public var __glProgram :WebGLProgram;
	public var __glProgram_Simple :WebGLProgram;
	public var __glProgram_SimpleWithAlpha :WebGLProgram;
	public var __glProgram_SaturationWithAlpha :WebGLProgram;
	public var __levelParents :Array<CocoClip>;
	public var __vertex_shader_Common :String;
	public var __fragment_shader_Simple :String;
	public var __fragment_shader_SimpleWithAlpha :String;
	public var __fragment_shader_SaturationWithAlpha :String;
	public var __boundingBoxVertexShader :String;
	public var __boundingBoxFragmentShader :String;
	public var __boundingBoxProgram :WebGLProgram;
	public var __boundingBoxBuffer :WebGLBuffer;
	public var __ready :Boolean;
	public var __finished :Boolean;
} //CocoScene

class CocoSequence
{
	public function Destructor() {}
	public function Constructor(name:String, framesArray:Array<Integer>) {}
	public var name :String;
	public var frames :Array<Integer>;
	public var sequenceStartTime :Time;
} //CocoSequence

class State
{
	public function enter() {}
	public function exit() {}
	public function tick(time:Time) {}
	public function paint(gl:WebGLRenderingContext, time:Time) {}
	public function Destructor() {}
	public var __name :String;
	public var params :Object;
} //State

class ITest1
{
	public function foo() {}
} //ITest1

class ITest2 : ITest1
{
	public function goo() {}
} //ITest2

class ITest3
{
	public function zoo() {}
} //ITest3

class ClassDelegator
{
	public function poo(a:String, b:Float, c:Class2) {}
} //ClassDelegator

class Class1
{
	public function foo() {}
	public function goo() {}
	public function zoo() {}
	public function interface_test1(obj:ITest1) {}
	public function interface_test2(obj:ITest2) {}
	public function interface_test3(obj:ITest3) {}
	public function interface_class(obj:Class1) {}
	public function interface_tests() {}
	public function test_virtual() {}
	public function test() {}
	public function public_static_function(b:String) :String {}
	private function private_static_function(b:String) :String {}
	protected function protected_static_function(b:String) :String {}
	public function public_function(b:String) :String {}
	private function private_function(b:String) :String {}
	protected function protected_function(b:String) :String {}
	public function public_overload() :String {}
	public function public_overload$1(arg:String) :String {}
	public function public_overload$2(arg1:String, arg2:String) :String {}
	private function private_overload() :String {}
	private function private_overload$1(arg:String) :String {}
	private function private_overload$2(arg1:String, arg2:String) :String {}
	protected function protected_overload() :String {}
	protected function protected_overload$1(arg:String) :String {}
	protected function protected_overload$2(arg1:String, arg2:String) :String {}
	public function Destructor() {}
	public function Constructor(arg1:String, arg2:String) {}
	protected function poo(a:String, b:Float, c:Class2) {}
	public var public_delegate :ClassDelegator;
	private var private_delegate :ClassDelegator;
	protected var protected_delegate :ClassDelegator;
	public var public_var :String;
	private var private_var :String;
	protected var protected_var :String;
	public var public_const :String;
	private var private_const :String;
	protected var protected_const :String;
	public var static_public_var :String;
	private var static_private_var :String;
	protected var static_protected_var :String;
	private var __public_property :String;
	private var __private_property :String;
	private var __protected_property :String;
	private var __public_static_property :String;
	private var __private_static_property :String;
	private var __protected_static_property :String;
	public var public_state :State;
	private var private_state :State;
	protected var protected_state :State;
	public var public_property :String;
	private var private_property :String;
	protected var protected_property :String;
	public var public_static_property :String;
	private var private_static_property :String;
	protected var protected_static_property :String;
} //Class1

class Class2 : Class1
{
	public function test() {}
	public function cls2_public_function() :String {}
	public function Constructor(arg1:String) {}
	public var x :String;
	private var y :String;
	protected var z :String;
	public var static_public_var :String;
	private var static_private_var :String;
	protected var static_protected_var :String;
	private var __public_static_property :String;
	private var __private_static_property :String;
	private var __protected_static_property :String;
	public var public_static_property :String;
	private var private_static_property :String;
	protected var protected_static_property :String;
} //Class2

class Class3 : Class2
{
	public function test_virtual() {}
	public function test() {}
	public function Constructor() {}
	public var static_public_var :String;
	private var static_private_var :String;
	protected var static_protected_var :String;
	private var __public_static_property :String;
	private var __private_static_property :String;
	private var __protected_static_property :String;
	public var public_static_property :String;
	private var private_static_property :String;
	protected var protected_static_property :String;
} //Class3

class CocoTextStyle
{
	public function Destructor() {}
	public function Constructor(ff:String, fsp:Integer, fs:String, fw:String, u:Boolean, r:Integer, g:Integer, b:Integer, a:Integer, br:Integer, bg:Integer, bb:Integer, ba:Integer) {}
	public var fontFamily :String;
	public var fontSizePixels :Integer;
	public var fontStyle :String;
	public var fontWeight :String;
	public var underline :Boolean;
	public var color :Array<Integer>;
	public var bgcolor :Array<Integer>;
} //CocoTextStyle

class CocoText
{
	public function npo2(i:Integer) :Integer {}
	public function init(width:Integer, height:Integer) {}
	public function wrap(width:Integer) {}
	public function draw(width:Float, height:Float, halign:Float, valign:Float, bgR:Integer, bgG:Integer, bgB:Integer, bgA:Integer) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public var c2d :CanvasRenderingContext2D;
	public var str :String;
	public var styles :Array<CocoTextStyle>;
	public var indices :Array<Integer>;
	public var mappings :Array<Integer>;
	public var lineBreaks :Array<Integer>;
	public var lineWidths :Array<Integer>;
	public var lineHeights :Array<Integer>;
	public var totalHeight :Integer;
} //CocoText

class CocoTimeLabel
{
	public function Constructor(FrameIndex:Integer, LabelName:String) {}
	public var frameIndex :Integer;
	public var name :String;
} //CocoTimeLabel

class CocoTimeline
{
	public function prepare(scene:CocoScene, clip:CocoClip) {}
	public function clear() {}
	public function reset() {}
	public function addLabel(Label:CocoTimeLabel) :CocoTimeLabel {}
	public function addLabelEx(FrameIndex:Integer, LabelName:String) :CocoTimeLabel {}
	public function findLabelByName(LabelName:String) :CocoTimeLabel {}
	public function keyFrame(frameIndex:Integer) :CocoKeyFrame {}
	public function firstKeyFrame() :CocoKeyFrame {}
	public function lastKeyFrame() :CocoKeyFrame {}
	public function addKeyFrame(KeyFrame:CocoKeyFrame) :CocoKeyFrame {}
	public function addKeyFrameEx(nextState:State, actionCallback:CocoAction, frameIndex:Integer, frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM, handleEvents:Boolean, visible:Boolean, x:Float, y:Float, scaleX:Float, scaleY:Float, rotation:Float, pivotX:Float, pivotY:Float, filter:Integer, red:Float, green:Float, blue:Float, alpha:Float, audio:CocoAudio, flipH:Boolean, flipV:Boolean, spriteSequenceName:String) :CocoKeyFrame {}
	public function normalizetimeline() {}
	public function findKeyFrameBeforeframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame {}
	public function findKeyFrameAfterframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame {}
	public function interpolate(frameIndex:Float) :CocoKeyFrame {}
	public function Destructor() {}
	public function Constructor() {}
	public var __labels :Array<CocoTimeLabel>;
	public var __keyFrames :Array<CocoKeyFrame>;
	public var __singleFrameDurationTime :Time;
	public var __durationInTime :Time;
	public var __durationInFrames :Integer;
	public var __paused :Boolean;
	public var __fps :Float;
	public var __currentFrameIndex :Integer;
	public var __firstKeyFrameIndex :Integer;
	public var __lastKeyFrameIndex :Integer;
} //CocoTimeline

class CocoVector
{
	public function reset(x:Float, y:Float, z:Float, w:Float) {}
	public function Constructor() {}
	public var X :Float;
	public var Y :Float;
	public var Z :Float;
	public var W :Float;
} //CocoVector

class ITickable
{
	public function RegisterTickable() {}
	public function UnregisterTickable() {}
	public function tick(time:Time) {}
} //ITickable

class CocoTickable
{
	public function tick(time:Time) {}
	public function RegisterTickable() {}
	public function UnregisterTickable() {}
	public function Destructor() {}
	public function Constructor() {}
} //CocoTickable

class CocoHttpRequest : CocoTickable
{
	public function tick(time:Time) {}
	public function Destructor() {}
	public function Constructor() {}
	private function open(method:String, url:String) {}
	private function setRequestHeader(header:String, value:String) {}
	private function send() {}
	private function send$1(data:String) {}
	private function send$2(data:ArrayBufferView) {}
	private function abort() {}
	private function getAllResponseHeaders() :String {}
	private function getResponseHeader(header:String) :String {}
	private var request :XMLHttpRequest;
} //CocoHttpRequest

class CocoUIView : CocoClip
{
	public function invalidate() {}
	public function paint(gl:WebGLRenderingContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function repaint(scene:CocoScene, parentClip:CocoClip, ctx:CanvasRenderingContext2D) {}
	public function Constructor() {}
	private var __x :Float;
	private var __y :Float;
	private var __width :Float;
	private var __height :Float;
	private var __visible :Boolean;
	private var __textureIsInvalid :Boolean;
	private var __enabled :Boolean;
	public var Name :String;
	public var Enabled :Boolean;
	public var Width :Float;
	public var Height :Float;
	public var Left :Float;
	public var Top :Float;
	public var Visible :Boolean;
} //CocoUIView

class CocoUIPageView : CocoUIView
{
	public function addChild(clipInstance:CocoClip) :CocoClip {}
	public function repaint(scene:CocoScene, parentClip:CocoClip, ctx:CanvasRenderingContext2D) {}
	public function Destructor() {}
	public function Constructor() {}
	private var __controls :Array<CocoUIControl>;
} //CocoUIPageView

class CocoUIControl : CocoUIView
{
	public function repaint(scene:CocoScene, parentClip:CocoClip, ctx:CanvasRenderingContext2D) {}
	public function Destructor() {}
	public function Constructor() {}
	private var __marginLeft :Float;
	private var __marginRight :Float;
	private var __marginTop :Float;
	private var __marginBottom :Float;
	public var MarginLeft :Float;
	public var MarginRight :Float;
	public var MarginTop :Float;
	public var MarginBottom :Float;
	private var __paddingLeft :Float;
	private var __paddingRight :Float;
	private var __paddingTop :Float;
	private var __paddingBottom :Float;
	public var PaddingLeft :Float;
	public var PaddingRight :Float;
	public var PaddingTop :Float;
	public var PaddingBottom :Float;
	private var __fontName :String;
	private var __fontSize :Float;
	private var __fontBold :Boolean;
	private var __fontItalic :Boolean;
	private var __fontUnderline :Boolean;
	private var __fontColor :Color;
	public var FontName :String;
	public var FontSize :Float;
	public var FontBold :Boolean;
	public var FontItalic :Boolean;
	public var FontUnderline :Boolean;
	public var FontColor :Color;
	private var __borderStyle :COCO_CONTROL_BORDER_STYLE_ENUM;
	private var __borderRadius :Float;
	private var __borderColor :Color;
	private var __borderColorSel :Color;
	public var BorderStyle :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BorderRadius :Float;
	public var BorderColor :Color;
	public var BorderColorSel :Color;
	private var __backgroundGradient :Gradient;
	private var __backgroundGradientSel :Gradient;
	public var BackgroundGradient :Gradient;
	public var BackgroundGradientSel :Gradient;
	private var __skinImage :CocoImage;
	private var __skinImageSel :CocoImage;
	public var SkinImage :CocoImage;
	public var SkinImageSel :CocoImage;
	private var __glyphImage :CocoImage;
	private var __glyphImageSel :CocoImage;
	private var __glyphLeft :Float;
	private var __glyphTop :Float;
	public var GlyphImage :CocoImage;
	public var GlyphImageSel :CocoImage;
	public var GlyphLeft :Float;
	public var GlyphTop :Float;
	private var __chevronImage :CocoImage;
	private var __chevronImageSel :CocoImage;
	private var __chevronLeft :Float;
	private var __chevronTop :Float;
	public var ChevronImage :CocoImage;
	public var ChevronImageSel :CocoImage;
	public var ChevronLeft :Float;
	public var ChevronTop :Float;
} //CocoUIControl

class CocoUIButton : CocoUIControl
{
	public function repaint(scene:CocoScene, parentClip:CocoClip, ctx:CanvasRenderingContext2D) {}
	public function Destructor() {}
	public function Constructor() {}
	private var __caption :String;
	private var __captionAlign :COCO_CONTROL_ANCHOR_ENUM;
	public var Caption :String;
	public var CaptionAlign :COCO_CONTROL_ANCHOR_ENUM;
} //CocoUIButton

class CocoUICheckBox : CocoUIControl
{
} //CocoUICheckBox

class CocoUIComboBox : CocoUIControl
{
} //CocoUIComboBox

class CocoUILabel : CocoUIControl
{
} //CocoUILabel

class CocoUITextBox : CocoUIControl
{
} //CocoUITextBox

class GameEngine : CocoEngine
{
	public function Destructor() {}
	public function Constructor() {}
	public var scene :CocoScene;
	public var STATE_GAME :State;
} //GameEngine

class NewAnimation : CocoScene
{
	public function Constructor() {}
} //NewAnimation

class Page1 : CocoScene
{
	public function Constructor() {}
} //Page1

