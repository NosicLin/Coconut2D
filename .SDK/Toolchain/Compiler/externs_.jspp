// Auto-generated Project Externs

class Null
{
	public  var __className :String;
} //Null

class Untyped
{
	public  var __className :String;
} //Untyped

class Object
{
	public function toString() :String {}
	public function toLocaleString() :String {}
	public function valueOf() :Object {}
	public function hasOwnProperty(name:String) :Boolean {}
	public function isPrototypeOf(o:Object) :Boolean {}
	public function propertyIsEnumerable(name:String) :Boolean {}
	public function defineProperty(object:Object, name:String, params:Object) {}
	public function Destructor() {}
	public  var prototype :Object;
	public  var __className :String;
} //Object

class Array
{
	public function concat(args:Array) :Array<Object> {}
	public function join(seperator:String) :String {}
	public function pop() :Object {}
	public function push(args:Object) :Object {}
	public function reverse() :Array<Object> {}
	public function shift() :Array<Object> {}
	public function slice(start:Number, end:Number) :Array<Object> {}
	public function sort(funct:Function) :Array<Object> {}
	public function splice(start:Number, deletecount:Number, items:Object) :Object {}
	public function unshift(start:Number) :Array<Object> {}
	public function forEach(item:Object) :Array<Object> {}
	public function size() :Number {}
	public function clear() {}
	public  var length :Number;
	public  var __className :String;
} //Array

class Function
{
	public function apply(thisObject:Object, args:Array<Object>) :Object {}
	public function call(thisObject:Object) :Object {}
	public  var length :Number;
	public  var __className :String;
} //Function

class CocoAction : Function
{
} //CocoAction

class Global
{
	 function __Audio_load(url:String, obj:Audio) :Integer {}
	 function __Facebook_Initialize(AppID:Integer, ImageSize:Integer) {}
	 function __Facebook_Login(Permissions:String, ImageSize:Integer) {}
	 function __Facebook_Share(URL:String) {}
	 function __Facebook_Post(toUserID:String, URL:String) {}
	 function __Facebook_Invite(message:String) {}
	 function __Twitter_Share(URL:String) {}
	 function __close_window() {}
	 function fixTouch(touch:Touch) {}
	public function eval(s:String) :Object {}
	public function parseInt(s:String, radix:Number) :Integer {}
	public function parseFloat(s:String) :Float {}
	public function escape(s:String) :String {}
	public function unescape(s:String) :String {}
	public function isNaN(number:Object) :Boolean {}
	public function isFinite(number:Object) :Boolean {}
	public function decodeURI(encodedURI:String) :String {}
	public function decodeURIComponent(uriComponent:String) :String {}
	public function encodeURIComponent(uriComponent:String) :String {}
	public function encodeURI(URI:String) :String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
	public function Destructor() {}
	 var __registerManager;
	 var __registerCallback;
	 var __unRegisterCallback;
	 var __ImageData_loadImage :ImageDataBuffer;
	 var __Audio_get_position :Float;
	 var __Audio_set_position;
	 var __Audio_play;
	 var __Audio_pause;
	 var __Audio_stop;
	 var __Canvas2DRenderingContext_flush;
	 var __WebGLRenderingContext_activeTexture;
	 var __WebGLRenderingContext_attachShader;
	 var __WebGLRenderingContext_bindAttribLocation;
	 var __WebGLRenderingContext_bindBuffer;
	 var __WebGLRenderingContext_bindFramebuffer;
	 var __WebGLRenderingContext_bindRenderbuffer;
	 var __WebGLRenderingContext_bindTexture;
	 var __WebGLRenderingContext_blendColor;
	 var __WebGLRenderingContext_blendEquation;
	 var __WebGLRenderingContext_blendEquationSeparate;
	 var __WebGLRenderingContext_blendFunc;
	 var __WebGLRenderingContext_blendFuncSeparate;
	 var __WebGLRenderingContext_bufferData;
	 var __WebGLRenderingContext_bufferSubData;
	 var __WebGLRenderingContext_checkFramebufferStatus :Integer;
	 var __WebGLRenderingContext_clear;
	 var __WebGLRenderingContext_clearColor;
	 var __WebGLRenderingContext_clearDepth;
	 var __WebGLRenderingContext_clearStencil;
	 var __WebGLRenderingContext_colorMask;
	 var __WebGLRenderingContext_compileShader;
	 var __WebGLRenderingContext_compressedTexImage2D;
	 var __WebGLRenderingContext_compressedTexSubImage2D;
	 var __WebGLRenderingContext_copyTexImage2D;
	 var __WebGLRenderingContext_copyTexSubImage2D;
	 var __WebGLRenderingContext_createBuffer :Integer;
	 var __WebGLRenderingContext_createFramebuffer :Integer;
	 var __WebGLRenderingContext_createProgram :Integer;
	 var __WebGLRenderingContext_createRenderbuffer :Integer;
	 var __WebGLRenderingContext_createShader :Integer;
	 var __WebGLRenderingContext_createTexture :Integer;
	 var __WebGLRenderingContext_cullFace;
	 var __WebGLRenderingContext_deleteBuffer;
	 var __WebGLRenderingContext_deleteFramebuffer;
	 var __WebGLRenderingContext_deleteProgram;
	 var __WebGLRenderingContext_deleteRenderbuffer;
	 var __WebGLRenderingContext_deleteShader;
	 var __WebGLRenderingContext_deleteTexture;
	 var __WebGLRenderingContext_depthFunc;
	 var __WebGLRenderingContext_depthMask;
	 var __WebGLRenderingContext_depthRange;
	 var __WebGLRenderingContext_detachShader;
	 var __WebGLRenderingContext_disable;
	 var __WebGLRenderingContext_disableVertexAttribArray;
	 var __WebGLRenderingContext_drawArrays;
	 var __WebGLRenderingContext_drawElements;
	 var __WebGLRenderingContext_enable;
	 var __WebGLRenderingContext_enableVertexAttribArray;
	 var __WebGLRenderingContext_execute;
	 var __WebGLRenderingContext_finish;
	 var __WebGLRenderingContext_flush;
	 var __WebGLRenderingContext_framebufferRenderbuffer;
	 var __WebGLRenderingContext_framebufferTexture2D;
	 var __WebGLRenderingContext_frontFace;
	 var __WebGLRenderingContext_generateMipmap;
	 var __WebGLRenderingContext_getActiveAttrib :Integer;
	 var __WebGLRenderingContext_getActiveUniform :Integer;
	 var __WebGLRenderingContext_getAttachedShaders :Array<WebGLShader>;
	 var __WebGLRenderingContext_getAttribLocation :Integer;
	 var __WebGLRenderingContext_getBufferParameter :String;
	 var __WebGLRenderingContext_getContextAttributes :Integer;
	 var __WebGLRenderingContext_getError :Integer;
	 var __WebGLRenderingContext_getExtension :Object;
	 var __WebGLRenderingContext_getFramebufferAttachmentParameter :String;
	 var __WebGLRenderingContext_getParameter :String;
	 var __WebGLRenderingContext_getProgramInfoLog :String;
	 var __WebGLRenderingContext_getProgramParameter :Boolean;
	 var __WebGLRenderingContext_getRenderbufferParameter :String;
	 var __WebGLRenderingContext_getShaderInfoLog :String;
	 var __WebGLRenderingContext_getShaderParameter_boolean :Boolean;
	 var __WebGLRenderingContext_getShaderParameter_enum :Integer;
	 var __WebGLRenderingContext_getShaderPrecisionFormat :Integer;
	 var __WebGLRenderingContext_getShaderSource :String;
	 var __WebGLRenderingContext_getSupportedExtensions :Array<String>;
	 var __WebGLRenderingContext_getTexParameter :String;
	 var __WebGLRenderingContext_getUniform :String;
	 var __WebGLRenderingContext_getUniformLocation :Integer;
	 var __WebGLRenderingContext_getVertexAttrib :String;
	 var __WebGLRenderingContext_getVertexAttribOffset :Integer;
	 var __WebGLRenderingContext_hint;
	 var __WebGLRenderingContext_isBuffer :Boolean;
	 var __WebGLRenderingContext_isContextLost :Boolean;
	 var __WebGLRenderingContext_isEnabled :Boolean;
	 var __WebGLRenderingContext_isFramebuffer :Boolean;
	 var __WebGLRenderingContext_isProgram :Boolean;
	 var __WebGLRenderingContext_isRenderbuffer :Boolean;
	 var __WebGLRenderingContext_isShader :Boolean;
	 var __WebGLRenderingContext_isTexture :Boolean;
	 var __WebGLRenderingContext_lineWidth;
	 var __WebGLRenderingContext_linkProgram;
	 var __WebGLRenderingContext_pixelStorei;
	 var __WebGLRenderingContext_polygonOffset;
	 var __WebGLRenderingContext_readPixels;
	 var __WebGLRenderingContext_renderbufferStorage;
	 var __WebGLRenderingContext_sampleCoverage;
	 var __WebGLRenderingContext_scissor;
	 var __WebGLRenderingContext_shaderSource;
	 var __WebGLRenderingContext_stencilFunc;
	 var __WebGLRenderingContext_stencilFuncSeparate;
	 var __WebGLRenderingContext_stencilMask;
	 var __WebGLRenderingContext_stencilMaskSeparate;
	 var __WebGLRenderingContext_stencilOp;
	 var __WebGLRenderingContext_stencilOpSeparate;
	 var __WebGLRenderingContext_texImage2D;
	 var __WebGLRenderingContext_texParameterf;
	 var __WebGLRenderingContext_texParameteri;
	 var __WebGLRenderingContext_texSubImage2D;
	 var __WebGLRenderingContext_uniform1f;
	 var __WebGLRenderingContext_uniform1fv;
	 var __WebGLRenderingContext_uniform1i;
	 var __WebGLRenderingContext_uniform1iv;
	 var __WebGLRenderingContext_uniform2f;
	 var __WebGLRenderingContext_uniform2fv;
	 var __WebGLRenderingContext_uniform2i;
	 var __WebGLRenderingContext_uniform2iv;
	 var __WebGLRenderingContext_uniform3f;
	 var __WebGLRenderingContext_uniform3fv;
	 var __WebGLRenderingContext_uniform3i;
	 var __WebGLRenderingContext_uniform3iv;
	 var __WebGLRenderingContext_uniform4f;
	 var __WebGLRenderingContext_uniform4fv;
	 var __WebGLRenderingContext_uniform4i;
	 var __WebGLRenderingContext_uniform4iv;
	 var __WebGLRenderingContext_uniformMatrix2fv;
	 var __WebGLRenderingContext_uniformMatrix3fv;
	 var __WebGLRenderingContext_uniformMatrix4fv;
	 var __WebGLRenderingContext_useProgram;
	 var __WebGLRenderingContext_validateProgram;
	 var __WebGLRenderingContext_vertexAttrib1f;
	 var __WebGLRenderingContext_vertexAttrib1fv;
	 var __WebGLRenderingContext_vertexAttrib2f;
	 var __WebGLRenderingContext_vertexAttrib2fv;
	 var __WebGLRenderingContext_vertexAttrib3f;
	 var __WebGLRenderingContext_vertexAttrib3fv;
	 var __WebGLRenderingContext_vertexAttrib4f;
	 var __WebGLRenderingContext_vertexAttrib4fv;
	 var __WebGLRenderingContext_vertexAttribPointer;
	 var __WebGLRenderingContext_viewport;
	undefined var Null :Null;
	undefined var Untyped :Untyped;
	undefined var Object :Object;
	undefined var Array :Array;
	undefined var Function :Function;
	undefined var CocoAction :CocoAction;
	undefined var Global :Global;
	public  var NaN :Number;
	public  var Infinity :Number;
	public  var innerWidth :Float;
	public  var innerHeight :Float;
	public  var deviceRotation :Float;
	public  var devicePixelRatio :Float;
	public  var __native :Boolean;
	public  var __touchEvents :Boolean;
	public  var __className :String;
	undefined var String :String;
	undefined var Number :Number;
	undefined var Integer :Integer;
	undefined var Float :Float;
	undefined var Time :Time;
	undefined var Boolean :Boolean;
	undefined var Date :Date;
	undefined var Math :Math;
	undefined var RegExp :RegExp;
	undefined var ArrayBuffer :ArrayBuffer;
	undefined var ArrayBufferView :ArrayBufferView;
	undefined var TypedArray :TypedArray;
	undefined var Float32Array :Float32Array;
	undefined var Int32Array :Int32Array;
	undefined var Uint8Array :Uint8Array;
	undefined var Error :Error;
	undefined var EvalError :EvalError;
	undefined var RangeError :RangeError;
	undefined var ReferenceError :ReferenceError;
	undefined var SyntaxError :SyntaxError;
	undefined var TypeError :TypeError;
	undefined var JSON :JSON;
	undefined var ImageDataBuffer :ImageDataBuffer;
	undefined var DataView :DataView;
	undefined var XMLHttpRequest :XMLHttpRequest;
	undefined var CocoFont :CocoFont;
	undefined var Color :Color;
	undefined var Gradient :Gradient;
	 var global :Global;
	 var engine :CocoEngine;
	 var window :HTMLWindow;
	 var document :HTMLDocument;
	 var location :HTMLLocation;
	 var graphics :CocoGraphics;
	 var DEVICE_WRAPPER :COCO_DEVICE_WRAPPER;
	undefined var b2ManifoldType :b2ManifoldType;
	undefined var b2BodyType :b2BodyType;
	undefined var b2JointType :b2JointType;
	undefined var b2Manifold :b2Manifold;
	undefined var b2MassData :b2MassData;
	undefined var b2RayCastInput :b2RayCastInput;
	undefined var b2RayCastOutput :b2RayCastOutput;
	undefined var b2ContactImpulse :b2ContactImpulse;
	undefined var b2WorldManifold :b2WorldManifold;
	undefined var b2ContactFilter :b2ContactFilter;
	 var createPolygonShape :b2PolygonShape;
	undefined var b2ContactManager :b2ContactManager;
	undefined var b2DistanceJoint :b2DistanceJoint;
	undefined var b2Fixture :b2Fixture;
	undefined var b2MouseJoint :b2MouseJoint;
	undefined var b2PulleyJoint :b2PulleyJoint;
	undefined var b2BroadPhase :b2BroadPhase;
	undefined var b2World :b2World;
	undefined var b2PrismaticJoint :b2PrismaticJoint;
	undefined var b2CircleShape :b2CircleShape;
	undefined var b2WheelJoint :b2WheelJoint;
	undefined var b2Draw :b2Draw;
	undefined var b2Joint :b2Joint;
	undefined var b2GearJoint :b2GearJoint;
	undefined var b2RayCastCallback :b2RayCastCallback;
	undefined var b2DynamicTree :b2DynamicTree;
	undefined var b2WeldJoint :b2WeldJoint;
	undefined var b2RevoluteJoint :b2RevoluteJoint;
	undefined var b2Timer :b2Timer;
	undefined var b2ContactListener :b2ContactListener;
	undefined var b2ChainShape :b2ChainShape;
	undefined var b2QueryCallback :b2QueryCallback;
	undefined var b2BlockAllocator :b2BlockAllocator;
	undefined var b2RopeJoint :b2RopeJoint;
	undefined var b2PolygonShape :b2PolygonShape;
	undefined var b2EdgeShape :b2EdgeShape;
	undefined var b2Contact :b2Contact;
	undefined var b2Shape :b2Shape;
	undefined var b2Body :b2Body;
	undefined var b2FrictionJoint :b2FrictionJoint;
	undefined var b2StackAllocator :b2StackAllocator;
	undefined var b2DestructionListener :b2DestructionListener;
	undefined var b2Filter :b2Filter;
	undefined var b2RopeJointDef :b2RopeJointDef;
	undefined var b2FrictionJointDef :b2FrictionJointDef;
	undefined var b2BodyDef :b2BodyDef;
	undefined var b2Vec2 :b2Vec2;
	undefined var b2Vec3 :b2Vec3;
	undefined var b2AABB :b2AABB;
	undefined var b2FixtureDef :b2FixtureDef;
	undefined var b2PrismaticJointDef :b2PrismaticJointDef;
	undefined var b2WheelJointDef :b2WheelJointDef;
	undefined var b2RevoluteJointDef :b2RevoluteJointDef;
	undefined var b2PulleyJointDef :b2PulleyJointDef;
	undefined var b2JointDef :b2JointDef;
	undefined var b2Transform :b2Transform;
	undefined var b2Color :b2Color;
	undefined var b2Rot :b2Rot;
	undefined var b2WeldJointDef :b2WeldJointDef;
	undefined var b2MouseJointDef :b2MouseJointDef;
	undefined var b2DistanceProxy :b2DistanceProxy;
	undefined var b2DistanceJointDef :b2DistanceJointDef;
	undefined var b2GearJointDef :b2GearJointDef;
	undefined var b2ContactEdge :b2ContactEdge;
	 var RADIANS :Float;
	 var BOX2D_SCALE :Float;
	 var COCO_STOP_ON_CURRENT_FRAME :Integer;
	 var COCO_DEFAULT_CONTROL_HEIGHT :Float;
	 var COCO_DEFAULT_FONT_SIZE :Float;
	 var COCO_CONTROL_MOVE_SNAP_PIXELS :Float;
	undefined var SCREEN_RESOLUTION_DPI_ENUM :SCREEN_RESOLUTION_DPI_ENUM;
	undefined var COCO_CLIP_SYMBOL_LOOP_ENUM :COCO_CLIP_SYMBOL_LOOP_ENUM;
	undefined var COCO_KEYFRAME_INTERPOLATION_ENUM :COCO_KEYFRAME_INTERPOLATION_ENUM;
	undefined var COCO_FILTER_ENUM :COCO_FILTER_ENUM;
	undefined var COCO_TEXT_ALIGN_ENUM :COCO_TEXT_ALIGN_ENUM;
	undefined var COCO_TEXT_TRIMMING_ENUM :COCO_TEXT_TRIMMING_ENUM;
	undefined var COCO_CONTROL_BORDER_STYLE_ENUM :COCO_CONTROL_BORDER_STYLE_ENUM;
	undefined var COCO_CONTROL_ANCHOR_ENUM :COCO_CONTROL_ANCHOR_ENUM;
	undefined var COCO_SKIN_TILE_ENUM :COCO_SKIN_TILE_ENUM;
	undefined var PathLine :PathLine;
	undefined var HTMLCanvasPattern :HTMLCanvasPattern;
	undefined var HTMLCanvasGradient :HTMLCanvasGradient;
	undefined var HTMLTextMetrics :HTMLTextMetrics;
	undefined var CanvasRenderingContext2D :CanvasRenderingContext2D;
	undefined var Audio :Audio;
	undefined var ContextArguments :ContextArguments;
	undefined var HTMLCanvasElement :HTMLCanvasElement;
	undefined var HTMLDocument :HTMLDocument;
	undefined var HTMLElement :HTMLElement;
	undefined var HTMLStyleElement :HTMLStyleElement;
	undefined var HTMLDivElement :HTMLDivElement;
	undefined var HTMLAnchorElement :HTMLAnchorElement;
	undefined var Image :Image;
	undefined var HTMLLocation :HTMLLocation;
	undefined var HTMLScreen :HTMLScreen;
	undefined var HTMLNavigator :HTMLNavigator;
	undefined var HTMLWindow :HTMLWindow;
	undefined var ImageData :ImageData;
	undefined var WebGLObject :WebGLObject;
	undefined var WebGLActiveInfo :WebGLActiveInfo;
	undefined var WebGLBuffer :WebGLBuffer;
	undefined var WebGLContextAttributes :WebGLContextAttributes;
	undefined var WebGLFramebuffer :WebGLFramebuffer;
	undefined var WebGLProgram :WebGLProgram;
	undefined var WebGLRenderbuffer :WebGLRenderbuffer;
	undefined var WebGLRenderingContext :WebGLRenderingContext;
	undefined var WebGLShader :WebGLShader;
	undefined var WebGLShaderPrecisionFormat :WebGLShaderPrecisionFormat;
	undefined var WebGLTexture :WebGLTexture;
	undefined var WebGLUniformLocation :WebGLUniformLocation;
	undefined var IEventListener :IEventListener;
	undefined var IEventTarget :IEventTarget;
	undefined var IPersistable :IPersistable;
	undefined var ITickable :ITickable;
	undefined var CocoEngine :CocoEngine;
	undefined var CocoEvent :CocoEvent;
	undefined var CocoEventConnectionPoint :CocoEventConnectionPoint;
	undefined var CocoEventSource :CocoEventSource;
	undefined var State :State;
	undefined var CocoTickable :CocoTickable;
	undefined var Touch :Touch;
	undefined var TouchList :TouchList;
	undefined var HTMLEvent :HTMLEvent;
	undefined var DEVICE_MESSAGE_ENUM :DEVICE_MESSAGE_ENUM;
	undefined var DEVICE_MESSAGE :DEVICE_MESSAGE;
	undefined var COCO_DATA_PROVIDER_ENUM :COCO_DATA_PROVIDER_ENUM;
	undefined var COCO_REQUEST_DATA_FORMAT_ENUM :COCO_REQUEST_DATA_FORMAT_ENUM;
	undefined var COCO_PERSISTENT_STORAGE_ENUM :COCO_PERSISTENT_STORAGE_ENUM;
	undefined var CocoRequestNameValuePair :CocoRequestNameValuePair;
	undefined var CocoDataSource :CocoDataSource;
	undefined var CocoDataStream :CocoDataStream;
	undefined var COCO_FIELD_DATATYPE :COCO_FIELD_DATATYPE;
	undefined var CocoDataField :CocoDataField;
	undefined var COCO_RECORD_STATUS :COCO_RECORD_STATUS;
	undefined var CocoDataset :CocoDataset;
	undefined var CocoLocalStorage :CocoLocalStorage;
	undefined var CocoVector :CocoVector;
	undefined var CocoMatrixData :CocoMatrixData;
	undefined var CocoMatrix :CocoMatrix;
	undefined var CocoScene :CocoScene;
	undefined var CocoKeyFrame :CocoKeyFrame;
	undefined var CocoTimeLabel :CocoTimeLabel;
	undefined var CocoTimeline :CocoTimeline;
	undefined var CocoClip :CocoClip;
	undefined var CocoClipOnClickEvent :CocoClipOnClickEvent;
	undefined var CocoClipOnTouchStartEvent :CocoClipOnTouchStartEvent;
	undefined var CocoClipOnTouchMoveEvent :CocoClipOnTouchMoveEvent;
	undefined var CocoClipOnTouchEndEvent :CocoClipOnTouchEndEvent;
	undefined var CocoClipOnAnimationSequenceBeginEvent :CocoClipOnAnimationSequenceBeginEvent;
	undefined var CocoClipOnAnimationSequenceEndEvent :CocoClipOnAnimationSequenceEndEvent;
	undefined var CocoSelfTexturedClip :CocoSelfTexturedClip;
	undefined var CocoTextClip :CocoTextClip;
	undefined var COCO_MASK_TYPE :COCO_MASK_TYPE;
	undefined var CocoMaskClip :CocoMaskClip;
	undefined var COCO_SCREEN_ORIENTATION :COCO_SCREEN_ORIENTATION;
	undefined var CocoDeviceWrapper :CocoDeviceWrapper;
	undefined var CocoPoint :CocoPoint;
	undefined var CocoRect :CocoRect;
	undefined var CocoSkinCacheItem :CocoSkinCacheItem;
	undefined var CocoHVAlign :CocoHVAlign;
	undefined var CocoGraphics :CocoGraphics;
	undefined var CocoSequence :CocoSequence;
	undefined var CocoImageResolution :CocoImageResolution;
	undefined var CocoImage :CocoImage;
	undefined var ICocoImageRenderData :ICocoImageRenderData;
	undefined var CocoImageRenderDataGL :CocoImageRenderDataGL;
	undefined var CocoImageRenderData2D :CocoImageRenderData2D;
	undefined var ICocoRenderContext :ICocoRenderContext;
	undefined var CocoRenderContext :CocoRenderContext;
	undefined var CocoRenderContext2D :CocoRenderContext2D;
	undefined var CocoRenderContextGL :CocoRenderContextGL;
	undefined var CocoShader :CocoShader;
	undefined var CocoShaderBoundingBox :CocoShaderBoundingBox;
	undefined var CocoShaderCommon :CocoShaderCommon;
	undefined var CocoShaderSimple :CocoShaderSimple;
	undefined var CocoShaderSimpleWithAlpha :CocoShaderSimpleWithAlpha;
	undefined var CocoShaderSaturationWithAlpha :CocoShaderSaturationWithAlpha;
	undefined var CocoShaderParallaxHor :CocoShaderParallaxHor;
	undefined var CocoTextStyle :CocoTextStyle;
	undefined var CocoText :CocoText;
	undefined var CocoTextBlock :CocoTextBlock;
	undefined var CocoAudio :CocoAudio;
	undefined var FACEBOOK_LOGIN :FACEBOOK_LOGIN;
	undefined var CocoFacebook :CocoFacebook;
	undefined var CocoJSON :CocoJSON;
	undefined var CocoHttpRequest :CocoHttpRequest;
	undefined var CocoUIView :CocoUIView;
	undefined var COCO_UIFORM_ANIMATION :COCO_UIFORM_ANIMATION;
	undefined var CocoAppController :CocoAppController;
	undefined var CocoUIControl :CocoUIControl;
	undefined var CocoUIControlOnGlyphClickEvent :CocoUIControlOnGlyphClickEvent;
	undefined var CocoUIControlOnChevronClickEvent :CocoUIControlOnChevronClickEvent;
	undefined var CocoUIFormView :CocoUIFormView;
	undefined var CocoUIScrollView :CocoUIScrollView;
	undefined var CocoUIButton :CocoUIButton;
	undefined var CocoUICheckBox :CocoUICheckBox;
	undefined var CocoUIComboBox :CocoUIComboBox;
	undefined var CocoUILabel :CocoUILabel;
	undefined var CocoUINavBar :CocoUINavBar;
	undefined var CocoUIPictureList :CocoUIPictureList;
	undefined var CocoUITabBar :CocoUITabBar;
	undefined var CocoUITextEdit :CocoUITextEdit;
	undefined var TestDataStream :TestDataStream;
	undefined var TestOutsourcer :TestOutsourcer;
	undefined var TestIntegrator :TestIntegrator;
	undefined var TestIntegratorClient :TestIntegratorClient;
	undefined var TestHTTP :TestHTTP;
	undefined var ITest1 :ITest1;
	undefined var ITest2 :ITest2;
	undefined var ITest3 :ITest3;
	undefined var ClassTestInterfaces :ClassTestInterfaces;
	undefined var TestPublishedStruct :TestPublishedStruct;
	undefined var TestPublished :TestPublished;
	undefined var TestPublishedDerived :TestPublishedDerived;
	undefined var Class1 :Class1;
	undefined var Class2 :Class2;
	undefined var Class3 :Class3;
	undefined var TestSelf1 :TestSelf1;
	undefined var TestSelf2 :TestSelf2;
	undefined var TestSelf3 :TestSelf3;
	undefined var TestThis :TestThis;
	undefined var GameEngine :GameEngine;
	undefined var ReservationsForm :ReservationsForm;
	undefined var NewAnimation :NewAnimation;
} //Global

class String
{
	public function fromCharCode(charCode:Number) :String {}
	public function charAt(position:Number) :String {}
	public function charCodeAt(position:Number) :Number {}
	public function concat(value:String) :String {}
	public function indexOf(searchString:String, startPosition:Number) :Number {}
	public function lastIndexOf(searchString:String, startPosition:Number) :Number {}
	public function localeCompare(otherString:String) :Number {}
	public function match(regexp:RegExp) :Array<Object> {}
	public function replace(regexp:RegExp, replaceValue:String) :String {}
	public function search(regexp:RegExp) :Number {}
	public function slice(start:Number, end:Number) :String {}
	public function split(separator:String, limit:Number) :Array<String> {}
	public function substring(start:Number, end:Number) :String {}
	public function substr(start:Number, size:Number) :String {}
	public function toLowerCase() :String {}
	public function toLocaleLowerCase() :String {}
	public function toUpperCase() :String {}
	public function toLocaleUpperCase() :String {}
	public function size() :Integer {}
	public  var length :Number;
	public  var __className :String;
} //String

class Number
{
	public function toFixed(fractionDigits:Number) :String {}
	public function toExponential(fractionDigits:Number) :String {}
	public function toPrecision(fractionDigits:Number) :String {}
	public  var MIN_VALUE :Number;
	public  var MAX_VALUE :Number;
	public  var NEGATIVE_INFINITY :Number;
	public  var POSITIVE_INFINITY :Number;
	public  var __className :String;
} //Number

class Integer : Number
{
	public  var __className :String;
} //Integer

class Float : Number
{
	public  var __className :String;
} //Float

class Time : Number
{
	public  var __className :String;
} //Time

class Boolean
{
	public  var __className :String;
} //Boolean

class Date
{
	public function UTC(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function parse(string:String) :Number {}
	public function toDateString() :String {}
	public function toTimeString() :String {}
	public function toLocaleString() :String {}
	public function toLocaleDateString() :String {}
	public function toLocaleTimeString() :String {}
	public function valueOf() :Object {}
	public function getFullYear() :Number {}
	public function getTime() :Number {}
	public function getUTCFullYear() :Number {}
	public function getMonth() :Number {}
	public function getUTCMonth() :Number {}
	public function getDate() :Number {}
	public function getUTCDate() :Number {}
	public function getDay() :Number {}
	public function getUTCDay() :Number {}
	public function getHours() :Number {}
	public function getUTCHours() :Number {}
	public function getMinutes() :Number {}
	public function getUTCMinutes() :Number {}
	public function getSeconds() :Number {}
	public function getUTCSeconds() :Number {}
	public function getMilliseconds() :Number {}
	public function getUTCMilliseconds() :Number {}
	public function getTimezoneOffset() :Number {}
	public function setTime(value:Number) :Number {}
	public function setMilliseconds(value:Number) :Number {}
	public function setUTCMilliseconds(ms:Number) :Number {}
	public function setSeconds(sec:Number, ms:Number) :Number {}
	public function setUTCSeconds(sec:Number, ms:Number) :Number {}
	public function setMinutes(min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCMinute(min:Number, sec:Number, ms:Number) :Number {}
	public function setHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number) :Number {}
	public function setDate(date:Number) :Number {}
	public function setUTCDate(date:Number) :Number {}
	public function setMonth(month:Number, date:Number) :Number {}
	public function setUTCMonth(month:Number, date:Number) :Number {}
	public function setFullYear(year:Number, month:Number, date:Number) :Number {}
	public function setUTCFullYear(year:Number, month:Number, date:Number) {}
	public function toUTCString() :String {}
	public function toJSON() :String {}
	public  var __className :String;
} //Date

class Math
{
	public function abs(x:Number) :Number {}
	public function acos(x:Number) :Float {}
	public function asin(x:Number) :Float {}
	public function atan(x:Number) :Float {}
	public function atan2(x:Number, y:Number) :Float {}
	public function ceil(x:Number) :Number {}
	public function cos(x:Number) :Float {}
	public function exp(x:Number) :Float {}
	public function floor(x:Number) :Integer {}
	public function log(x:Number) :Float {}
	public function max(a:Number, b:Number) :Number {}
	public function min(a:Number, b:Number) :Number {}
	public function pow(x:Number, y:Number) :Float {}
	public function random() :Float {}
	public function round(x:Number) :Number {}
	public function sin(x:Number) :Float {}
	public function sqrt(x:Number) :Float {}
	public function tan(x:Number) :Float {}
	public static  var E :Float;
	public static  var LN10 :Float;
	public static  var LN2 :Float;
	public static  var LOG2E :Float;
	public static  var LOG10E :Float;
	public static  var PI :Float;
	public static  var SQRT1_2 :Float;
	public static  var SQRT2 :Float;
	public  var __className :String;
} //Math

class RegExp
{
	public function exec(string:String) :Array<Object> {}
	public function test(string:String) :Boolean {}
	public  var source :String;
	public  var global :Boolean;
	public  var ignoreCase :Boolean;
	public  var multiline :Boolean;
	public  var lastIndex :Number;
	public  var __className :String;
} //RegExp

class ArrayBuffer
{
	public function slice(begin:Number, end:Number) :ArrayBuffer {}
	public function encodeAsPNG(width:Number, height:Number) :ArrayBuffer {}
	public function encodeAsBase64() :String {}
	public  var byteLength :Number;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBuffer

class ArrayBufferView
{
	public function Destructor() {}
	public  var buffer :ArrayBuffer;
	public  var byteOffset :Integer;
	public  var byteLength :Integer;
	public  var __uid :Integer;
	public  var __className :String;
} //ArrayBufferView

class TypedArray : ArrayBufferView
{
	public function set(array:TypedArray, offset:Integer) {}
	public  var length :Integer;
	public  var BYTES_PER_ELEMENT :Integer;
	public  var __className :String;
} //TypedArray

class Float32Array : TypedArray
{
	public  var __className :String;
} //Float32Array

class Int32Array : TypedArray
{
	public  var __className :String;
} //Int32Array

class Uint8Array : TypedArray
{
	public  var __className :String;
} //Uint8Array

class Error
{
	public  var name :String;
	public  var message :String;
	public  var __className :String;
} //Error

class EvalError : Error
{
	public  var __className :String;
} //EvalError

class RangeError : Error
{
	public  var __className :String;
} //RangeError

class ReferenceError : Error
{
	public  var __className :String;
} //ReferenceError

class SyntaxError : Error
{
	public  var __className :String;
} //SyntaxError

class TypeError : Error
{
	public  var __className :String;
} //TypeError

class JSON
{
	public function parse(json:String) :Array<Object> {}
	public function stringify(obj:Array<Object>) :String {}
	public  var __className :String;
} //JSON

class ImageDataBuffer
{
	public  var buffer :ArrayBuffer;
	public  var width :Float;
	public  var height :Float;
	public  var __className :String;
} //ImageDataBuffer

class DataView : ArrayBufferView
{
	public function getInt8(byteOffset:Integer) :Integer {}
	public function getUint8(byteOffset:Integer) :Integer {}
	public function getInt16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint16(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getInt32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getUint32(byteOffset:Integer, littleEndian:Boolean) :Integer {}
	public function getFloat32(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function getFloat64(byteOffset:Integer, littleEndian:Boolean) :Float {}
	public function setInt8(byteOffset:Integer, value:Integer) {}
	public function setUint8(byteOffset:Integer, value:Integer) {}
	public function setInt16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint16(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setInt32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setUint32(byteOffset:Integer, value:Integer, littleEndian:Boolean) {}
	public function setFloat32(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function setFloat64(byteOffset:Integer, value:Float, littleEndian:Boolean) {}
	public function Constructor(buffer:ArrayBuffer, byteOffset:Integer, byteLength:Integer) {}
	public  var __className :String;
} //DataView

class XMLHttpRequest
{
	public function open(method:String, url:String, async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send(data:String) {}
	public function send$1(data:ArrayBufferView) {}
	public function send$2() {}
	public function abort() {}
	public function getAllResponseHeaders() :String {}
	public function getResponseHeader(header:String) :String {}
	public  var UNSENT :Integer;
	public  var OPENED :Integer;
	public  var HEADERS_RECEIVED :Integer;
	public  var LOADING :Integer;
	public  var DONE :Integer;
	public  var timeout :Integer;
	public  var readyState :Integer;
	public  var status :Integer;
	public  var statusText :String;
	public  var responseText :String;
	public  var responseType :Integer;
	public  var __className :String;
} //XMLHttpRequest

class CocoFont
{
	public function fillText(imageDataBuffer:ArrayBuffer, width:Float, text:String, x:Float, y:Float, R:Float, G:Float, B:Float, A:Float) {}
	public function measureText(text:String) :Float {}
	public function Constructor(FontName:String, FontSize:Float, Bold:Boolean, Italic:Boolean) {}
	public  var height :Float;
	public  var __className :String;
} //CocoFont

class Color : Number
{
	public  var __className :String;
} //Color

class Gradient : String
{
	public  var __className :String;
} //Gradient

class b2ManifoldType
{
	public var e_circles :b2ManifoldType;
	public var e_faceA :b2ManifoldType;
	public var e_faceB :b2ManifoldType;
} //b2ManifoldType

class b2BodyType
{
	public var b2_staticBody :b2BodyType;
	public var b2_kinematicBody :b2BodyType;
	public var b2_dynamicBody :b2BodyType;
} //b2BodyType

class b2JointType
{
	public var e_unknownJoint :b2JointType;
	public var e_revoluteJoint :b2JointType;
	public var e_prismaticJoint :b2JointType;
	public var e_distanceJoint :b2JointType;
	public var e_pulleyJoint :b2JointType;
	public var e_mouseJoint :b2JointType;
	public var e_gearJoint :b2JointType;
	public var e_wheelJoint :b2JointType;
	public var e_weldJoint :b2JointType;
	public var e_frictionJoint :b2JointType;
	public var e_ropeJoint :b2JointType;
} //b2JointType

class b2Manifold
{
	public function toJSON() :String {}
	public var points :Array<b2ManifoldPoint>;
	public var localNormal :b2Vec2;
	public var localPoint :b2Vec2;
	public var type :b2ManifoldType;
	public var pointCount :Integer;
} //b2Manifold

class b2MassData
{
	public function toJSON() :String {}
	public var mass :Float;
	public var center :b2Vec2;
	public var I :Float;
} //b2MassData

class b2RayCastInput
{
	public function toJSON() :String {}
	public var p1 :b2Vec2;
	public var p2 :b2Vec2;
	public var maxFraction :Float;
} //b2RayCastInput

class b2RayCastOutput
{
	public function toJSON() :String {}
	public var normal :b2Vec2;
	public var fraction :Float;
} //b2RayCastOutput

class b2ContactImpulse
{
	public function toJSON() :String {}
	public var normalImpulses :Array<Float>;
	public var tangentImpulses :Array<Float>;
	public var count :Integer;
} //b2ContactImpulse

class b2WorldManifold
{
	public function Initialize(manifold:b2Manifold, xfA:b2Transform, radiusA:Float, xfB:b2Transform, radiusB:Float) {}
	public  var normal :b2Vec2;
	public  var points :Array<b2Vec2>;
	public  var __className :String;
} //b2WorldManifold

class b2ContactFilter
{
	public function ShouldCollide(fixtureA:b2Fixture, fixtureB:b2Fixture) :Boolean {}
	public  var __className :String;
} //b2ContactFilter

class b2ContactManager
{
	public function get_m_contactFilter() :b2ContactFilter {}
	public function get_m_contactCount() :Integer {}
	public function set_m_contactFilter(arg0:b2ContactFilter) {}
	public function AddPair(arg0:Object, arg1:Object) {}
	public function set_m_allocator(arg0:b2BlockAllocator) {}
	public function set_m_contactCount(arg0:Integer) {}
	public function Collide() {}
	public function set_m_contactList(arg0:b2Contact) {}
	public function FindNewContacts() {}
	public function get_m_contactListener() :b2ContactListener {}
	public function set_m_contactListener(arg0:b2ContactListener) {}
	public function get_m_broadPhase() :b2BroadPhase {}
	public function Destroy(arg0:b2Contact) {}
	public function set_m_broadPhase(arg0:b2BroadPhase) {}
	public function get_m_contactList() :b2Contact {}
	public function get_m_allocator() :b2BlockAllocator {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ContactManager

class b2DistanceJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() :Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetFrequency() :Float {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetLength() :Float {}
	public function GetDampingRatio() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function Dump() {}
	public function GetType() :Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function SetLength(arg0:Float) {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DistanceJoint

class b2Fixture
{
	public function GetRestitution() :Float {}
	public function SetFilterData(arg0:b2Filter) {}
	public function SetFriction(arg0:Float) {}
	public function GetShape() :b2Shape {}
	public function SetRestitution(arg0:Float) {}
	public function GetBody() :b2Body {}
	public function GetNext() :b2Fixture {}
	public function GetFriction() :Float {}
	public function GetUserData() :Object {}
	public function SetDensity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function SetSensor(arg0:Boolean) {}
	public function GetAABB(arg0:Integer) :b2AABB {}
	public function TestPoint(arg0:b2Vec2) :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:Integer) :Boolean {}
	public function Refilter() {}
	public function Dump(arg0:Integer) {}
	public function GetFilterData() :b2Filter {}
	public function IsSensor() :Boolean {}
	public function GetType() :Integer {}
	public function GetDensity() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Fixture

class b2MouseJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() :Object {}
	public function SetMaxForce(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetMaxForce() :Float {}
	public function GetTarget() :b2Vec2 {}
	public function GetFrequency() :Float {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetDampingRatio() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function Dump() {}
	public function SetTarget(arg0:b2Vec2) {}
	public function GetType() :Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2MouseJoint

class b2PulleyJoint
{
	public function GetBodyA() :b2Body {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetType() :Integer {}
	public function GetGroundAnchorB() :b2Vec2 {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function Dump() {}
	public function GetGroundAnchorA() :b2Vec2 {}
	public function GetLengthB() :Float {}
	public function GetUserData() :Object {}
	public function GetLengthA() :Float {}
	public function GetBodyB() :b2Body {}
	public function GetCollideConnected() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function IsActive() :Boolean {}
	public function GetRatio() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PulleyJoint

class b2BroadPhase
{
	public function GetTreeQuality() :Float {}
	public function GetFatAABB(arg0:Integer) :b2AABB {}
	public function GetUserData(arg0:Integer) :Object {}
	public function GetTreeHeight() :Integer {}
	public function GetProxyCount() :Integer {}
	public function GetTreeBalance() :Integer {}
	public function TestOverlap(arg0:Integer, arg1:Integer) :Boolean {}
	public function TouchProxy(arg0:Integer) {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) :Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) {}
	public function DestroyProxy(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2BroadPhase

class b2World
{
	public function QueryAABB(arg0:b2QueryCallback, arg1:b2AABB) {}
	public function SetSubStepping(arg0:Boolean) {}
	public function GetTreeQuality() :Float {}
	public function GetTreeHeight() :Integer {}
	public function GetProfile() :b2Profile {}
	public function GetTreeBalance() :Integer {}
	public function GetSubStepping() :Boolean {}
	public function GetContactManager() :b2ContactManager {}
	public function SetContactListener(arg0:b2ContactListener) {}
	public function DrawDebugData() {}
	public function SetContinuousPhysics(arg0:Boolean) {}
	public function SetGravity(arg0:b2Vec2) {}
	public function GetBodyCount() :Integer {}
	public function GetAutoClearForces() :Boolean {}
	public function GetContinuousPhysics() :Boolean {}
	public function GetJointList() :b2Joint {}
	public function CreateBody(arg0:b2BodyDef) :b2Body {}
	public function GetBodyList() :b2Body {}
	public function SetDestructionListener(arg0:b2DestructionListener) {}
	public function DestroyJoint(arg0:b2Joint) {}
	public function GetJointCount() :Integer {}
	public function Step(arg0:Float, arg1:Integer, arg2:Integer) {}
	public function ClearForces() {}
	public function GetWarmStarting() :Boolean {}
	public function SetAllowSleeping(arg0:Boolean) {}
	public function DestroyBody(arg0:b2Body) {}
	public function GetAllowSleeping() :Boolean {}
	public function CreateJoint(arg0:b2JointDef) :b2Joint {}
	public function GetProxyCount() :Integer {}
	public function RayCast(arg0:b2RayCastCallback, arg1:b2Vec2, arg2:b2Vec2) {}
	public function IsLocked() :Boolean {}
	public function GetContactList() :b2Contact {}
	public function SetDebugDraw(arg0:b2Draw) {}
	public function Dump() {}
	public function SetAutoClearForces(arg0:Boolean) {}
	public function GetGravity() :b2Vec2 {}
	public function GetContactCount() :Integer {}
	public function SetWarmStarting(arg0:Boolean) {}
	public function SetContactFilter(arg0:b2ContactFilter) {}
	public function Destructor() {}
	public function Constructor(v:b2Vec2) {}
	public  var __className :String;
} //b2World

class b2PrismaticJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetUserData() :Object {}
	public function GetLocalAxisA() :b2Vec2 {}
	public function GetLowerLimit() :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetMotorSpeed() :Float {}
	public function SetMaxMotorForce(arg0:Float) {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetMaxMotorForce() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function GetJointSpeed() :Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function GetReferenceAngle() :Float {}
	public function Dump() {}
	public function GetMotorForce(arg0:Float) :Float {}
	public function GetJointTranslation() :Float {}
	public function GetType() :Integer {}
	public function IsLimitEnabled() :Boolean {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetUpperLimit() :Float {}
	public function IsActive() :Boolean {}
	public function GetAnchorB() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PrismaticJoint

class b2CircleShape
{
	public function GetType() :Integer {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function GetVertex(arg0:Integer) :b2Vec2 {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetSupportVertex(arg0:b2Vec2) :b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetVertexCount() :Integer {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function GetSupport(arg0:b2Vec2) :Integer {}
	public function set_m_p(arg0:b2Vec2) {}
	public function get_m_p() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2CircleShape

class b2WheelJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetUserData() :Object {}
	public function GetDefinition(arg0:b2WheelJointDef) {}
	public function GetLocalAxisA() :b2Vec2 {}
	public function SetSpringDampingRatio(arg0:Float) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetSpringFrequencyHz() :Float {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetMotorSpeed() :Float {}
	public function GetMotorTorque(arg0:Float) :Float {}
	public function IsMotorEnabled() :Boolean {}
	public function GetJointTranslation() :Float {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetSpringDampingRatio() :Float {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() :Boolean {}
	public function GetJointSpeed() :Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Dump() {}
	public function GetMaxMotorTorque() :Float {}
	public function GetType() :Integer {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function SetSpringFrequencyHz(arg0:Float) {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WheelJoint

class b2Draw
{
	public function AppendFlags(arg0:Integer) {}
	public function DrawTransform(arg0:b2Transform) {}
	public function ClearFlags(arg0:Integer) {}
	public function DrawPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawSolidCircle(arg0:b2Vec2, arg1:Float, arg2:b2Vec2, arg3:b2Color) {}
	public function DrawSolidPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawCircle(arg0:b2Vec2, arg1:Float, arg2:b2Color) {}
	public function SetFlags(arg0:Integer) {}
	public function DrawSegment(arg0:b2Vec2, arg1:b2Vec2, arg2:b2Color) {}
	public function GetFlags() :Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Draw

class b2Joint
{
	public function GetNext() :b2Joint {}
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetUserData() :Object {}
	public function GetType() :Integer {}
	public function SetUserData(arg0:Object) {}
	public function GetCollideConnected() :Boolean {}
	public function Dump() {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function IsActive() :Boolean {}
	public  var __className :String;
} //b2Joint

class b2GearJoint
{
	public function GetJoint1() :b2Joint {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetJoint2() :b2Joint {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function Dump() {}
	public function SetRatio(arg0:Float) {}
	public function GetType() :Integer {}
	public function GetUserData() :Object {}
	public function GetBodyB() :b2Body {}
	public function GetCollideConnected() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetBodyA() :b2Body {}
	public function GetNext() :b2Joint {}
	public function IsActive() :Boolean {}
	public function GetRatio() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2GearJoint

class b2RayCastCallback
{
	public function ReportFixture(arg0:b2Fixture, arg1:b2Vec2, arg2:b2Vec2, arg3:Float) :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RayCastCallback

class b2DynamicTree
{
	public function GetFatAABB(arg0:Integer) :b2AABB {}
	public function GetUserData(arg0:Integer) :Object {}
	public function GetMaxBalance() :Integer {}
	public function GetHeight() :Integer {}
	public function GetAreaRatio() :Float {}
	public function RebuildBottomUp() {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) :Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) :Boolean {}
	public function Validate() {}
	public function DestroyProxy(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DynamicTree

class b2WeldJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() :Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetFrequency() :Float {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetDampingRatio() :Float {}
	public function GetCollideConnected() :Boolean {}
	public function GetReferenceAngle() :Float {}
	public function Dump() {}
	public function GetType() :Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WeldJoint

class b2RevoluteJoint
{
	public function GetBodyA() :b2Body {}
	public function GetBodyB() :b2Body {}
	public function GetUserData() :Object {}
	public function GetLowerLimit() :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetNext() :b2Joint {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function GetJointAngle() :Float {}
	public function GetMotorSpeed() :Float {}
	public function GetMotorTorque(arg0:Float) :Float {}
	public function IsLimitEnabled() :Boolean {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() :Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() :Boolean {}
	public function GetJointSpeed() :Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function GetReferenceAngle() :Float {}
	public function Dump() {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetMaxMotorTorque() :Float {}
	public function GetType() :Integer {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function GetUpperLimit() :Float {}
	public function IsActive() :Boolean {}
	public function GetAnchorB() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RevoluteJoint

class b2Timer
{
	public function Reset() {}
	public function GetMilliseconds() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Timer

class b2ContactListener
{
	public function EndContact(arg0:b2Contact) {}
	public function BeginContact(arg0:b2Contact) {}
	public function PreSolve(arg0:b2Contact, arg1:b2Manifold) {}
	public function PostSolve(arg0:b2Contact, arg1:b2ContactImpulse) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ContactListener

class b2ChainShape
{
	public function GetType() :Integer {}
	public function CreateChain(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function get_m_vertices() :b2Vec2 {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function get_m_count() :Integer {}
	public function GetChildEdge(arg0:b2EdgeShape, arg1:Integer) {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function SetPrevVertex(arg0:b2Vec2) {}
	public function CreateLoop(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function SetNextVertex(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ChainShape

class b2QueryCallback
{
	public function ReportFixture(arg0:b2Fixture) :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2QueryCallback

class b2BlockAllocator
{
	public function Clear() {}
	public function Free(arg0:Object, arg1:Integer) {}
	public function Allocate(arg0:Integer) :Object {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2BlockAllocator

class b2RopeJoint
{
	public function GetNext() :b2Joint {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function GetMaxLength() :Float {}
	public function GetBodyA() :b2Body {}
	public function GetCollideConnected() :Boolean {}
	public function GetUserData() :Object {}
	public function GetType() :Integer {}
	public function GetBodyB() :b2Body {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function Dump() {}
	public function SetMaxLength(arg0:Float) {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetLimitState() :Integer {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RopeJoint

class b2PolygonShape : b2Shape
{
	public function Set(arg0:b2Vec2, arg1:Integer) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetVertex(arg0:Integer) :b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function SetAsBox(arg0:Float, arg1:Float) {}
	public function SetAsBox$1(arg0:Float, arg1:Float, arg2:b2Vec2, arg3:Float) {}
	public function set_m_centroid(arg0:b2Vec2) {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function set_m_vertexCount(arg0:Integer) {}
	public function GetVertexCount() :Integer {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function GetType() :Integer {}
	public function get_m_vertexCount() :Integer {}
	public function get_m_centroid() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PolygonShape

class b2EdgeShape
{
	public function Set(arg0:b2Vec2, arg1:b2Vec2) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() :Float {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetType() :Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2EdgeShape

class b2Contact
{
	public function GetNext() :b2Contact {}
	public function SetEnabled(arg0:Boolean) {}
	public function GetWorldManifold(arg0:b2WorldManifold) {}
	public function GetRestitution() :Float {}
	public function ResetFriction() {}
	public function GetFriction() :Float {}
	public function IsTouching() :Boolean {}
	public function IsEnabled() :Boolean {}
	public function GetFixtureB() :b2Fixture {}
	public function SetFriction(arg0:Float) {}
	public function GetFixtureA() :b2Fixture {}
	public function GetChildIndexA() :Integer {}
	public function GetChildIndexB() :Integer {}
	public function Evaluate(arg0:b2Manifold, arg1:b2Transform, arg2:b2Transform) {}
	public function SetRestitution(arg0:Float) {}
	public function GetManifold() :b2Manifold {}
	public function ResetRestitution() {}
	public  var __className :String;
} //b2Contact

class b2Shape
{
	public function get_m_radius() :Float {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function Clone(arg0:b2BlockAllocator) :b2Shape {}
	public function GetType() :Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) :Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() :Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) :Boolean {}
	public  var __className :String;
} //b2Shape

class b2Body
{
	public function GetAngle() :Float {}
	public function GetUserData() :Object {}
	public function IsSleepingAllowed() :Boolean {}
	public function SetAngularDamping(arg0:Float) {}
	public function SetActive(arg0:Boolean) {}
	public function SetGravityScale(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAngularVelocity() :Float {}
	public function GetFixtureList() :b2Fixture {}
	public function ApplyForce(arg0:b2Vec2, arg1:b2Vec2) {}
	public function GetLocalPoint(arg0:b2Vec2) :b2Vec2 {}
	public function SetLinearVelocity(arg0:b2Vec2) {}
	public function GetJointList() :b2JointEdge {}
	public function GetLinearVelocity() :b2Vec2 {}
	public function GetNext() :b2Body {}
	public function SetSleepingAllowed(arg0:Boolean) {}
	public function SetTransform(arg0:b2Vec2, arg1:Float) {}
	public function GetMass() :Float {}
	public function SetAngularVelocity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function GetLinearVelocityFromWorldPoint(arg0:b2Vec2) :b2Vec2 {}
	public function ResetMassData() {}
	public function ApplyForceToCenter(arg0:b2Vec2) {}
	public function ApplyTorque(arg0:Float) {}
	public function IsAwake() :Boolean {}
	public function SetType(arg0:b2BodyType) {}
	public function CreateFixture(arg0:b2FixtureDef) :b2Fixture {}
	public function CreateFixture$1(arg0:b2Shape, arg1:Float) :b2Fixture {}
	public function SetMassData(arg0:b2MassData) {}
	public function GetTransform() :b2Transform {}
	public function GetWorldCenter() :b2Vec2 {}
	public function GetAngularDamping() :Float {}
	public function ApplyLinearImpulse(arg0:b2Vec2, arg1:b2Vec2) {}
	public function IsFixedRotation() :Boolean {}
	public function GetLocalCenter() :b2Vec2 {}
	public function GetWorldVector(arg0:b2Vec2) :b2Vec2 {}
	public function GetLinearVelocityFromLocalPoint(arg0:b2Vec2) :b2Vec2 {}
	public function GetContactList() :b2ContactEdge {}
	public function GetWorldPoint(arg0:b2Vec2) :b2Vec2 {}
	public function SetAwake(arg0:Boolean) {}
	public function GetLinearDamping() :Float {}
	public function IsBullet() :Boolean {}
	public function GetWorld() :b2World {}
	public function GetLocalVector(arg0:b2Vec2) :b2Vec2 {}
	public function SetLinearDamping(arg0:Float) {}
	public function Dump() {}
	public function SetBullet(arg0:Boolean) {}
	public function GetType() :Integer {}
	public function GetGravityScale() :Float {}
	public function DestroyFixture(arg0:b2Fixture) {}
	public function GetInertia() :Float {}
	public function IsActive() :Boolean {}
	public function SetFixedRotation(arg0:Boolean) {}
	public function ApplyAngularImpulse(arg0:Float) {}
	public function GetPosition() :b2Vec2 {}
	public  var __className :String;
} //b2Body

class b2FrictionJoint
{
	public function SetMaxTorque(arg0:Float) {}
	public function GetMaxForce() :Float {}
	public function GetAnchorA() :b2Vec2 {}
	public function GetReactionTorque(arg0:Float) :Float {}
	public function Dump() {}
	public function GetCollideConnected() :Boolean {}
	public function GetUserData() :Object {}
	public function GetType() :Integer {}
	public function SetMaxForce(arg0:Float) {}
	public function GetBodyB() :b2Body {}
	public function GetLocalAnchorA() :b2Vec2 {}
	public function GetLocalAnchorB() :b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() :b2Vec2 {}
	public function GetReactionForce(arg0:Float) :b2Vec2 {}
	public function GetBodyA() :b2Body {}
	public function GetNext() :b2Joint {}
	public function GetMaxTorque() :Float {}
	public function IsActive() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2FrictionJoint

class b2StackAllocator
{
	public function GetMaxAllocation() :Integer {}
	public function Allocate(arg0:Integer) :Object {}
	public function Free(arg0:Object) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2StackAllocator

class b2DestructionListener
{
	public function SayGoodbye(arg0:b2Joint) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DestructionListener

class b2Filter
{
	public function set_maskBits(arg0:Integer) {}
	public function set_categoryBits(arg0:Integer) {}
	public function get_groupIndex() :Integer {}
	public function set_groupIndex(arg0:Integer) {}
	public function get_maskBits() :Integer {}
	public function get_categoryBits() :Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Filter

class b2RopeJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_maxLength() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_maxLength(arg0:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RopeJointDef

class b2FrictionJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_maxForce() :Float {}
	public function get_localAnchorA() :b2Vec2 {}
	public function set_maxForce(arg0:Float) {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_maxTorque(arg0:Float) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_maxTorque() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2FrictionJointDef

class b2BodyDef
{
	public function get_linearDamping() :Float {}
	public function get_awake() :Boolean {}
	public function get_type() :b2BodyType {}
	public function get_allowSleep() :Boolean {}
	public function set_position(arg0:b2Vec2) {}
	public function set_linearVelocity(arg0:b2Vec2) {}
	public function get_bullet() :Boolean {}
	public function get_userData() :Object {}
	public function set_angularDamping(arg0:Float) {}
	public function set_fixedRotation(arg0:Boolean) {}
	public function set_allowSleep(arg0:Boolean) {}
	public function get_gravityScale() :Float {}
	public function set_angularVelocity(arg0:Float) {}
	public function set_userData(arg0:Object) {}
	public function get_position() :b2Vec2 {}
	public function set_type(arg0:b2BodyType) {}
	public function set_gravityScale(arg0:Float) {}
	public function get_angularDamping() :Float {}
	public function set_bullet(arg0:Boolean) {}
	public function set_active(arg0:Boolean) {}
	public function set_angle(arg0:Float) {}
	public function get_angle() :Float {}
	public function get_angularVelocity() :Float {}
	public function get_linearVelocity() :b2Vec2 {}
	public function get_active() :Boolean {}
	public function set_linearDamping(arg0:Float) {}
	public function get_fixedRotation() :Boolean {}
	public function set_awake(arg0:Boolean) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2BodyDef

class b2Vec2
{
	public function Normalize() :Float {}
	public function set_x(arg0:Float) {}
	public function Set(arg0:Float, arg1:Float) {}
	public function get_x() :Float {}
	public function get_y() :Float {}
	public function set_y(arg0:Float) {}
	public function IsValid() :Boolean {}
	public function Skew() :b2Vec2 {}
	public function LengthSquared() :Float {}
	public function op_add(arg0:b2Vec2) {}
	public function SetZero() {}
	public function Length() :Float {}
	public function op_mul(arg0:Float) {}
	public function op_sub() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor(x:Float, y:Float) {}
	public  var __className :String;
} //b2Vec2

class b2Vec3
{
	public function set_z(arg0:Float) {}
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function get_z() :Float {}
	public function op_add(arg0:b2Vec3) {}
	public function SetZero() {}
	public function op_mul(arg0:Float) {}
	public function op_sub() :b2Vec3 {}
	public function Destructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public  var __className :String;
} //b2Vec3

class b2AABB
{
	public function set_upperBound(arg0:b2Vec2) {}
	public function IsValid() :Boolean {}
	public function Contains(arg0:b2AABB) :Boolean {}
	public function GetExtents() :b2Vec2 {}
	public function GetCenter() :b2Vec2 {}
	public function get_upperBound() :b2Vec2 {}
	public function GetPerimeter() :Float {}
	public function Combine(arg0:b2AABB) {}
	public function Combine$1(arg0:b2AABB, arg1:b2AABB) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput) :Boolean {}
	public function set_lowerBound(arg0:b2Vec2) {}
	public function get_lowerBound() :b2Vec2 {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2AABB

class b2FixtureDef
{
	public function get_isSensor() :Boolean {}
	public function set_userData(arg0:Object) {}
	public function set_shape(arg0:b2Shape) {}
	public function get_density() :Float {}
	public function get_shape() :b2Shape {}
	public function set_density(arg0:Float) {}
	public function set_restitution(arg0:Float) {}
	public function get_restitution() :Float {}
	public function set_isSensor(arg0:Boolean) {}
	public function get_filter() :b2Filter {}
	public function get_friction() :Float {}
	public function set_friction(arg0:Float) {}
	public function get_userData() :Object {}
	public function set_filter(arg0:b2Filter) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2FixtureDef

class b2PrismaticJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() :Float {}
	public function get_enableMotor() :Boolean {}
	public function get_referenceAngle() :Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() :b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function set_lowerTranslation(arg0:Float) {}
	public function get_upperTranslation() :Float {}
	public function get_enableLimit() :Boolean {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_upperTranslation(arg0:Float) {}
	public function get_maxMotorForce() :Float {}
	public function set_maxMotorForce(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_lowerTranslation() :Float {}
	public function set_localAxisA(arg0:b2Vec2) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PrismaticJointDef

class b2WheelJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() :Float {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() :b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function get_frequencyHz() :Float {}
	public function set_dampingRatio(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_maxMotorTorque() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_enableMotor() :Boolean {}
	public function get_dampingRatio() :Float {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_localAxisA(arg0:b2Vec2) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WheelJointDef

class b2RevoluteJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_lowerAngle() :Float {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_lowerAngle(arg0:Float) {}
	public function get_enableMotor() :Boolean {}
	public function set_upperAngle(arg0:Float) {}
	public function get_referenceAngle() :Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function get_motorSpeed() :Float {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_maxMotorTorque() :Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_enableLimit() :Boolean {}
	public function get_upperAngle() :Float {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2RevoluteJointDef

class b2PulleyJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_ratio(arg0:Float) {}
	public function set_groundAnchorB(arg0:b2Vec2) {}
	public function set_groundAnchorA(arg0:b2Vec2) {}
	public function get_groundAnchorB() :b2Vec2 {}
	public function get_groundAnchorA() :b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2, arg4:b2Vec2, arg5:b2Vec2, arg6:Float) {}
	public function get_ratio() :Float {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_lengthB(arg0:Float) {}
	public function set_lengthA(arg0:Float) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function get_lengthB() :Float {}
	public function get_lengthA() :Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2PulleyJointDef

class b2JointDef
{
	public function get_bodyA() :b2Body {}
	public function set_userData(arg0:Object) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_bodyB() :b2Body {}
	public function set_type(arg0:b2JointType) {}
	public function get_collideConnected() :Boolean {}
	public function get_type() :b2JointType {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_userData() :Object {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2JointDef

class b2Transform
{
	public function Set(arg0:b2Vec2, arg1:Float) {}
	public function set_p(arg0:b2Vec2) {}
	public function set_q(arg0:b2Rot) {}
	public function get_p() :b2Vec2 {}
	public function get_q() :b2Rot {}
	public function SetIdentity() {}
	public function Destructor() {}
	public function Constructor(arg1:b2Rot) {}
	public  var __className :String;
} //b2Transform

class b2Color
{
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function set_r(arg0:Float) {}
	public function get_r() :Float {}
	public function set_b(arg0:Float) {}
	public function get_g() :Float {}
	public function get_b() :Float {}
	public function set_g(arg0:Float) {}
	public function Destructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public  var __className :String;
} //b2Color

class b2Rot
{
	public function Set(arg0:Float) {}
	public function GetAngle() :Float {}
	public function GetYAxis() :b2Vec2 {}
	public function GetXAxis() :b2Vec2 {}
	public function set_c(arg0:Float) {}
	public function SetIdentity() {}
	public function get_c() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2Rot

class b2WeldJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_frequencyHz() :Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_referenceAngle() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_dampingRatio() :Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2WeldJointDef

class b2MouseJointDef
{
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_maxForce() :Float {}
	public function set_target(arg0:b2Vec2) {}
	public function set_maxForce(arg0:Float) {}
	public function get_frequencyHz() :Float {}
	public function get_target() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function get_dampingRatio() :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2MouseJointDef

class b2DistanceProxy
{
	public function get_m_radius() :Float {}
	public function Set(arg0:b2Shape, arg1:Integer) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_vertices() :b2Vec2 {}
	public function GetSupportVertex(arg0:b2Vec2) :b2Vec2 {}
	public function get_m_count() :Integer {}
	public function GetVertexCount() :Integer {}
	public function GetVertex(arg0:Integer) :b2Vec2 {}
	public function GetSupport(arg0:b2Vec2) :Integer {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DistanceProxy

class b2DistanceJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_length() :Float {}
	public function get_localAnchorA() :b2Vec2 {}
	public function get_frequencyHz() :Float {}
	public function get_localAnchorB() :b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_dampingRatio() :Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_length(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2DistanceJointDef

class b2GearJointDef
{
	public function get_bodyA(arg0:b2Body) :b2Body {}
	public function get_bodyB(arg0:b2Body) :b2Body {}
	public function get_joint1() :b2Joint {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function set_joint2(arg0:b2Joint) {}
	public function set_ratio(arg0:Float) {}
	public function get_collideConnected(arg0:Boolean) :Boolean {}
	public function get_joint2() :b2Joint {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_ratio() :Float {}
	public function set_joint1(arg0:b2Joint) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2GearJointDef

class b2ContactEdge
{
	public function set_contact(arg0:b2Contact) {}
	public function get_prev() :b2ContactEdge {}
	public function get_other() :b2Body {}
	public function set_prev(arg0:b2ContactEdge) {}
	public function get_next() :b2ContactEdge {}
	public function set_other(arg0:b2Body) {}
	public function set_next(arg0:b2ContactEdge) {}
	public function get_contact() :b2Contact {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //b2ContactEdge

class SCREEN_RESOLUTION_DPI_ENUM
{
	public var RESOLUTION_nodpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_ldpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_mdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_tvdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_hdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_xhdpi :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_Retina :SCREEN_RESOLUTION_DPI_ENUM;
	public var RESOLUTION_DefaultDpi :SCREEN_RESOLUTION_DPI_ENUM;
} //SCREEN_RESOLUTION_DPI_ENUM

class COCO_CLIP_SYMBOL_LOOP_ENUM
{
	public var CLIP_SYMBOL_LOOP_CONTINUOUS :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_SYNCHRONIZED_WITH_PARENT :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var CLIP_SYMBOL_LOOP_ONCE :COCO_CLIP_SYMBOL_LOOP_ENUM;
} //COCO_CLIP_SYMBOL_LOOP_ENUM

class COCO_KEYFRAME_INTERPOLATION_ENUM
{
	public var KEYFRAME_INTERPOLATION_NONE :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_MOTION_TWEEN :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_ECHO :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var KEYFRAME_INTERPOLATION_PHYSICS :COCO_KEYFRAME_INTERPOLATION_ENUM;
} //COCO_KEYFRAME_INTERPOLATION_ENUM

class COCO_FILTER_ENUM
{
	public var FILTER_INHERIT :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE :COCO_FILTER_ENUM;
	public var FILTER_SIMPLE_WITH_ALPHA :COCO_FILTER_ENUM;
	public var FILTER_SATURATION_WITH_ALPHA :COCO_FILTER_ENUM;
	public var FILTER_PARALLAX_HOR :COCO_FILTER_ENUM;
} //COCO_FILTER_ENUM

class COCO_TEXT_ALIGN_ENUM
{
	public var TEXT_ALIGN_NEAR :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_CENTER :COCO_TEXT_ALIGN_ENUM;
	public var TEXT_ALIGN_FAR :COCO_TEXT_ALIGN_ENUM;
} //COCO_TEXT_ALIGN_ENUM

class COCO_TEXT_TRIMMING_ENUM
{
	public var StringTrimmingNone :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisCharacter :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisWord :COCO_TEXT_TRIMMING_ENUM;
	public var StringTrimmingEllipsisPath :COCO_TEXT_TRIMMING_ENUM;
} //COCO_TEXT_TRIMMING_ENUM

class COCO_CONTROL_BORDER_STYLE_ENUM
{
	public var BORDER_NONE :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_SOLID :COCO_CONTROL_BORDER_STYLE_ENUM;
	public var BORDER_DOTTED :COCO_CONTROL_BORDER_STYLE_ENUM;
} //COCO_CONTROL_BORDER_STYLE_ENUM

class COCO_CONTROL_ANCHOR_ENUM
{
	public var ANCHOR_NONE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_TOP_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_CENTER :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_MIDDLE_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_LEFT :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_MIDDLE :COCO_CONTROL_ANCHOR_ENUM;
	public var ANCHOR_BOTTOM_RIGHT :COCO_CONTROL_ANCHOR_ENUM;
} //COCO_CONTROL_ANCHOR_ENUM

class COCO_SKIN_TILE_ENUM
{
	public var TILE_REPEAT_NONE :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_X :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_Y :COCO_SKIN_TILE_ENUM;
	public var TILE_REPEAT_XY :COCO_SKIN_TILE_ENUM;
} //COCO_SKIN_TILE_ENUM

class PathLine
{
	public function Destructor() {}
	public function Constructor(_x0:Float, _y0:Float, _x1:Float, _y1:Float) {}
	public  var x0 :Float;
	public  var y0 :Float;
	public  var x1 :Float;
	public  var y1 :Float;
	public  var __className :String;
} //PathLine

class HTMLCanvasPattern
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLCanvasPattern

class HTMLCanvasGradient
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLCanvasGradient

class HTMLTextMetrics
{
	public function Destructor() {}
	public function Constructor() {}
	public  var width :Float;
	public  var __className :String;
} //HTMLTextMetrics

class CanvasRenderingContext2D
{
	public function clip() {}
	public function closePath() {}
	public function createPattern(image:Image, repetition:String) :HTMLCanvasPattern {}
	public function drawCustomFocusRing(element:HTMLElement) :Boolean {}
	public function drawSystemFocusRing(element:HTMLElement) {}
	public function getLineDash() {}
	public function isPointInPath(x:Float, y:Float) :Boolean {}
	public function isPointInStroke(x:Float, y:Float) :Boolean {}
	public function scrollPathIntoView() {}
	public function setLineDash(segments:Array<Float>) {}
	public function strokeRect(x:Float, y:Float, w:Float, h:Float) {}
	public function strokeText(text:String, x:Float, y:Float, maxWidth:Float) {}
	public function restore() {}
	public function save() {}
	public function scale(x:Float, y:Float) {}
	public function translate(x:Float, y:Float) {}
	public function rotate(angle:Float) {}
	public function createLinearGradient(x0:Float, y0:Float, x1:Float, y1:Float) :HTMLCanvasGradient {}
	public function createRadialGradient(x0:Float, y0:Float, r0:Float, x1:Float, y1:Float, r1:Float) :HTMLCanvasGradient {}
	public function arc(x:Float, y:Float, radius:Float, startAngle:Float, endAngle:Float, anticlockwise:Boolean) {}
	public function arcTo(x1:Float, y1:Float, x2:Float, y2:Float, radius:Float) {}
	public function bezierCurveTo(cp1x:Float, cp1y:Float, cp2x:Float, cp2y:Float, x:Float, y:Float) {}
	public function quadraticCurveTo(cpx:Float, cpy:Float, x:Float, y:Float) {}
	public function rect(x:Float, y:Float, width:Float, height:Float) {}
	public function fill() {}
	public function setTransform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float) {}
	public function transform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float) {}
	public function beginPath() {}
	public function moveTo(x:Float, y:Float) {}
	public function lineTo(x:Float, y:Float) {}
	public function stroke() {}
	public function fillText(text:String, x:Float, y:Float, maxWidth:Float) {}
	public function fillRect(x:Float, y:Float, width:Float, height:Float) {}
	public function clearRect(x:Float, y:Float, width:Float, height:Float) {}
	public function measureText(text:String) :HTMLTextMetrics {}
	public function drawImage(image:Image, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function drawImage$1(image:Image, dx:Float, dy:Float) {}
	public function drawImage$2(image:Image, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function drawImage$3(image:HTMLCanvasElement, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function createImageData(sw:Float, sh:Float) :ImageData {}
	public function createImageData$1(imagedata:ImageData) :ImageData {}
	public function getImageData(sx:Float, sy:Float, sw:Float, sh:Float) :ImageData {}
	public function putImageData(imagedata:ImageData, dx:Float, dy:Float) {}
	public function putImageData$1(imagedata:ImageData, dx:Float, dy:Float, dirtyX:Float, dirtyY:Float, dirtyWidth:Float, dirtyHeight:Float) {}
	public function Destructor() {}
	public function Constructor(canvas:HTMLCanvasElement) {}
	public  var canvas :HTMLCanvasElement;
	public  var DRAWWINDOW_DRAW_CARET :Integer;
	public  var DRAWWINDOW_DO_NOT_FLUSH :Integer;
	public  var DRAWWINDOW_DRAW_VIEW :Integer;
	public  var DRAWWINDOW_USE_WIDGET_LAYERS :Integer;
	public  var DRAWWINDOW_ASYNC_DECODE_IMAGES :Integer;
	public  var globalAlpha :Float;
	public  var lineCap :String;
	public  var lineDashOffset :Float;
	public  var lineJoin :String;
	public  var miterLimit :Float;
	public  var shadowBlur :Float;
	public  var shadowColor :String;
	public  var shadowOffsetX :Float;
	public  var shadowOffsetY :Float;
	public  var textAlign :String;
	public  var textBaseline :String;
	public  var globalCompositeOperation :String;
	public  var imageSmoothingEnabled :Boolean;
	public  var webkitImageSmoothingEnabled :Boolean;
	public  var mozImageSmoothingEnabled :Boolean;
	private  var __lineWidth :Float;
	private  var __fillStyle :String;
	private  var __fillColor :Array<Float>;
	private  var __strokeStyle :String;
	private  var __strokeColor :Array<Float>;
	private  var __fontSetting :String;
	private  var __font :CocoFont;
	private  var __curX :Float;
	private  var __curY :Float;
	private  var __pathLines :Array<PathLine>;
	private  var __m11 :Float;
	private  var __m12 :Float;
	private  var __m21 :Float;
	private  var __m22 :Float;
	private  var __dx :Float;
	private  var __dy :Float;
	public  var fillStyle :String;
	public  var strokeStyle :String;
	public  var lineWidth :Float;
	public  var font :String;
	public  var __className :String;
} //CanvasRenderingContext2D

class Audio
{
	public function play() {}
	public function pause() {}
	public function Destructor() {}
	public function Constructor(url:String) {}
	private  var __uid :Integer;
	private  var __currentTime :Time;
	public  var duration :Float;
	public  var paused :Boolean;
	public  var ended :Boolean;
	public  var autoplay :Boolean;
	public  var loop :Boolean;
	public  var src :String;
	public  var currentTime :Float;
	public  var readyState :Integer;
	public  var __className :String;
} //Audio

class ContextArguments
{
	public function toJSON() :String {}
	public var stencil :Boolean;
} //ContextArguments

class HTMLCanvasElement : HTMLElement
{
	public function getContext(contextId:String, args:ContextArguments) :Object {}
	public function toDataURL(mime:String) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public  var width :Float;
	public  var height :Float;
	public  var __imageData :ImageData;
	private  var c2d :CanvasRenderingContext2D;
	private  var gl :WebGLRenderingContext;
	public  var __className :String;
} //HTMLCanvasElement

class HTMLDocument
{
	public function __add(el:HTMLElement) {}
	public function __remove(el:HTMLElement) {}
	public function createElement(tagName:String) :HTMLElement {}
	public function getElementById(id:String) :HTMLElement {}
	public function Destructor() {}
	public function Constructor() {}
	public  var body :HTMLElement;
	public  var all :Array<HTMLElement>;
	public  var __className :String;
} //HTMLDocument

class HTMLElement
{
	public function appendChild(node:HTMLElement) :HTMLElement {}
	public function replaceChild(newChild:HTMLElement, oldChild:HTMLElement) :HTMLElement {}
	public function removeChild(node:HTMLElement) :HTMLElement {}
	public function setAttribute(name:String, value:String) {}
	public function getAttribute(name:String) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public  var id :String;
	public  var offsetWidth :Float;
	public  var offsetHeight :Float;
	public  var innerHTML :String;
	public  var style :HTMLStyleElement;
	public  var parentNode :HTMLElement;
	public  var document :HTMLDocument;
	public  var onclick :Function;
	public  var __className :String;
} //HTMLElement

class HTMLStyleElement
{
	public function Destructor() {}
	public function Constructor() {}
	public  var cssText :String;
	public  var backfaceVisibility :String;
	public  var background :String;
	public  var backgroundAttachment :String;
	public  var backgroundBlendMode :String;
	public  var backgroundClip :String;
	public  var backgroundColor :String;
	public  var backgroundImage :String;
	public  var backgroundOrigin :String;
	public  var backgroundPosition :String;
	public  var backgroundPositionX :String;
	public  var backgroundPositionY :String;
	public  var backgroundRepeat :String;
	public  var backgroundRepeatX :String;
	public  var backgroundRepeatY :String;
	public  var backgroundSize :String;
	public  var baselineShift :String;
	public  var border :String;
	public  var borderBottom :String;
	public  var borderBottomColor :String;
	public  var borderBottomLeftRadius :String;
	public  var borderBottomRightRadius :String;
	public  var borderBottomStyle :String;
	public  var borderBottomWidth :String;
	public  var borderCollapse :String;
	public  var borderColor :String;
	public  var borderImage :String;
	public  var borderImageOutset :String;
	public  var borderImageRepeat :String;
	public  var borderImageSlice :String;
	public  var borderImageSource :String;
	public  var borderImageWidth :String;
	public  var borderLeft :String;
	public  var borderLeftColor :String;
	public  var borderLeftStyle :String;
	public  var borderLeftWidth :String;
	public  var borderRadius :String;
	public  var borderRight :String;
	public  var borderRightColor :String;
	public  var borderRightStyle :String;
	public  var borderRightWidth :String;
	public  var borderSpacing :Float;
	public  var borderStyle :String;
	public  var borderTop :String;
	public  var borderTopColor :String;
	public  var borderTopLeftRadius :String;
	public  var borderTopRightRadius :String;
	public  var borderTopStyle :String;
	public  var borderTopWidth :String;
	public  var borderWidth :Float;
	public  var bottom :String;
	public  var boxShadow :String;
	public  var boxSizing :String;
	public  var bufferedRendering :String;
	public  var captionSide :String;
	public  var clear :String;
	public  var clip :String;
	public  var clipPath :String;
	public  var clipRule :String;
	public  var color :String;
	public  var colorInterpolation :String;
	public  var colorInterpolationFilters :String;
	public  var colorRendering :String;
	public  var content :String;
	public  var counterIncrement :String;
	public  var counterReset :String;
	public  var cursor :String;
	public  var direction :String;
	public  var display :String;
	public  var dominantBaseline :String;
	public  var emptyCells :String;
	public  var enableBackground :String;
	public  var fill :String;
	public  var fillOpacity :String;
	public  var fillRule :String;
	public  var filter :String;
	public  var flex :String;
	public  var flexBasis :String;
	public  var flexDirection :String;
	public  var flexFlow :String;
	public  var flexGrow :String;
	public  var flexShrink :String;
	public  var flexWrap :String;
	public  var float :String;
	public  var floodColor :String;
	public  var floodOpacity :String;
	public  var font :String;
	public  var fontFamily :String;
	public  var fontKerning :String;
	public  var fontSize :String;
	public  var fontStretch :String;
	public  var fontStyle :String;
	public  var fontVariant :String;
	public  var fontVariantLigatures :String;
	public  var fontWeight :String;
	public  var glyphOrientationHorizontal :String;
	public  var glyphOrientationVertical :String;
	public  var height :String;
	public  var imageRendering :String;
	public  var justifyContent :String;
	public  var left :String;
	public  var letterSpacing :String;
	public  var lightingColor :String;
	public  var lineHeight :String;
	public  var listStyle :String;
	public  var listStyleImage :String;
	public  var listStylePosition :String;
	public  var listStyleType :String;
	public  var margin :String;
	public  var marginBottom :String;
	public  var marginLeft :String;
	public  var marginRight :String;
	public  var marginTop :String;
	public  var marker :String;
	public  var markerEnd :String;
	public  var markerMid :String;
	public  var markerStart :String;
	public  var mask :String;
	public  var maskType :String;
	public  var maxHeight :String;
	public  var maxWidth :String;
	public  var maxZoom :String;
	public  var minHeight :String;
	public  var minWidth :String;
	public  var minZoom :String;
	public  var objectFit :String;
	public  var objectPosition :String;
	public  var opacity :Float;
	public  var order :String;
	public  var orientation :String;
	public  var orphans :String;
	public  var outline :String;
	public  var outlineColor :String;
	public  var outlineOffset :String;
	public  var outlineStyle :String;
	public  var outlineWidth :String;
	public  var overflow :String;
	public  var overflowWrap :String;
	public  var overflowX :String;
	public  var overflowY :String;
	public  var padding :String;
	public  var paddingBottom :String;
	public  var paddingLeft :String;
	public  var paddingRight :String;
	public  var paddingTop :String;
	public  var page :String;
	public  var pageBreakAfter :String;
	public  var pageBreakBefore :String;
	public  var pageBreakInside :String;
	public  var paintOrder :String;
	public  var perspective :String;
	public  var perspectiveOrigin :String;
	public  var pointerEvents :String;
	public  var position :String;
	public  var quotes :String;
	public  var resize :String;
	public  var right :String;
	public  var shapeImageThreshold :String;
	public  var shapeMargin :String;
	public  var shapeOutside :String;
	public  var shapeRendering :String;
	public  var size :String;
	public  var speak :String;
	public  var src :String;
	public  var stopColor :String;
	public  var stopOpacity :String;
	public  var stroke :String;
	public  var strokeDasharray :String;
	public  var strokeDashoffset :String;
	public  var strokeLinecap :String;
	public  var strokeLinejoin :String;
	public  var strokeMiterlimit :String;
	public  var strokeOpacity :String;
	public  var strokeWidth :String;
	public  var tabSize :String;
	public  var tableLayout :String;
	public  var textAlign :String;
	public  var textAnchor :String;
	public  var textDecoration :String;
	public  var textIndent :String;
	public  var textLineThroughColor :String;
	public  var textLineThroughMode :String;
	public  var textLineThroughStyle :String;
	public  var textLineThroughWidth :String;
	public  var textOverflow :String;
	public  var textOverlineColor :String;
	public  var textOverlineMode :String;
	public  var textOverlineStyle :String;
	public  var textOverlineWidth :String;
	public  var textRendering :String;
	public  var textShadow :String;
	public  var textTransform :String;
	public  var textUnderlineColor :String;
	public  var textUnderlineMode :String;
	public  var textUnderlineStyle :String;
	public  var textUnderlineWidth :String;
	public  var top :String;
	public  var touchAction :String;
	public  var transform :String;
	public  var transformOrigin :String;
	public  var transformStyle :String;
	public  var transition :String;
	public  var transitionDelay :String;
	public  var transitionDuration :String;
	public  var transitionProperty :String;
	public  var transitionTimingFunction :String;
	public  var unicodeBidi :String;
	public  var unicodeRange :String;
	public  var userZoom :String;
	public  var vectorEffect :String;
	public  var verticalAlign :String;
	public  var visibility :String;
	public  var webkitAnimation :String;
	public  var webkitAnimationDelay :String;
	public  var webkitAnimationDirection :String;
	public  var webkitAnimationDuration :String;
	public  var webkitAnimationFillMode :String;
	public  var webkitAnimationIterationCount :String;
	public  var webkitAnimationName :String;
	public  var webkitAnimationPlayState :String;
	public  var webkitAnimationTimingFunction :String;
	public  var webkitAppRegion :String;
	public  var webkitAppearance :String;
	public  var webkitAspectRatio :String;
	public  var webkitBackfaceVisibility :String;
	public  var webkitBackgroundClip :String;
	public  var webkitBackgroundComposite :String;
	public  var webkitBackgroundOrigin :String;
	public  var webkitBackgroundSize :String;
	public  var webkitBorderAfter :String;
	public  var webkitBorderAfterColor :String;
	public  var webkitBorderAfterStyle :String;
	public  var webkitBorderAfterWidth :String;
	public  var webkitBorderBefore :String;
	public  var webkitBorderBeforeColor :String;
	public  var webkitBorderBeforeStyle :String;
	public  var webkitBorderBeforeWidth :String;
	public  var webkitBorderEnd :String;
	public  var webkitBorderEndColor :String;
	public  var webkitBorderEndStyle :String;
	public  var webkitBorderEndWidth :String;
	public  var webkitBorderFit :String;
	public  var webkitBorderHorizontalSpacing :String;
	public  var webkitBorderImage :String;
	public  var webkitBorderRadius :String;
	public  var webkitBorderStart :String;
	public  var webkitBorderStartColor :String;
	public  var webkitBorderStartStyle :String;
	public  var webkitBorderStartWidth :String;
	public  var webkitBorderVerticalSpacing :String;
	public  var webkitBoxAlign :String;
	public  var webkitBoxDecorationBreak :String;
	public  var webkitBoxDirection :String;
	public  var webkitBoxFlex :String;
	public  var webkitBoxFlexGroup :String;
	public  var webkitBoxLines :String;
	public  var webkitBoxOrdinalGroup :String;
	public  var webkitBoxOrient :String;
	public  var webkitBoxPack :String;
	public  var webkitBoxReflect :String;
	public  var webkitBoxShadow :String;
	public  var webkitClipPath :String;
	public  var webkitColumnBreakAfter :String;
	public  var webkitColumnBreakBefore :String;
	public  var webkitColumnBreakInside :String;
	public  var webkitColumnCount :String;
	public  var webkitColumnGap :String;
	public  var webkitColumnRule :String;
	public  var webkitColumnRuleColor :String;
	public  var webkitColumnRuleStyle :String;
	public  var webkitColumnRuleWidth :String;
	public  var webkitColumnSpan :String;
	public  var webkitColumnWidth :String;
	public  var webkitColumns :String;
	public  var webkitFilter :String;
	public  var webkitFontFeatureSettings :String;
	public  var webkitFontSizeDelta :String;
	public  var webkitFontSmoothing :String;
	public  var webkitHighlight :String;
	public  var webkitHyphenateCharacter :String;
	public  var webkitLineBoxContain :String;
	public  var webkitLineBreak :String;
	public  var webkitLineClamp :String;
	public  var webkitLocale :String;
	public  var webkitLogicalHeight :String;
	public  var webkitLogicalWidth :String;
	public  var webkitMarginAfter :String;
	public  var webkitMarginAfterCollapse :String;
	public  var webkitMarginBefore :String;
	public  var webkitMarginBeforeCollapse :String;
	public  var webkitMarginBottomCollapse :String;
	public  var webkitMarginCollapse :String;
	public  var webkitMarginEnd :String;
	public  var webkitMarginStart :String;
	public  var webkitMarginTopCollapse :String;
	public  var webkitMask :String;
	public  var webkitMaskBoxImage :String;
	public  var webkitMaskBoxImageOutset :String;
	public  var webkitMaskBoxImageRepeat :String;
	public  var webkitMaskBoxImageSlice :String;
	public  var webkitMaskBoxImageSource :String;
	public  var webkitMaskBoxImageWidth :String;
	public  var webkitMaskClip :String;
	public  var webkitMaskComposite :String;
	public  var webkitMaskImage :String;
	public  var webkitMaskOrigin :String;
	public  var webkitMaskPosition :String;
	public  var webkitMaskPositionX :String;
	public  var webkitMaskPositionY :String;
	public  var webkitMaskRepeat :String;
	public  var webkitMaskRepeatX :String;
	public  var webkitMaskRepeatY :String;
	public  var webkitMaskSize :String;
	public  var webkitMaxLogicalHeight :String;
	public  var webkitMaxLogicalWidth :String;
	public  var webkitMinLogicalHeight :String;
	public  var webkitMinLogicalWidth :String;
	public  var webkitPaddingAfter :String;
	public  var webkitPaddingBefore :String;
	public  var webkitPaddingEnd :String;
	public  var webkitPaddingStart :String;
	public  var webkitPerspective :String;
	public  var webkitPerspectiveOrigin :String;
	public  var webkitPerspectiveOriginX :String;
	public  var webkitPerspectiveOriginY :String;
	public  var webkitPrintColorAdjust :String;
	public  var webkitRtlOrdering :String;
	public  var webkitRubyPosition :String;
	public  var webkitTapHighlightColor :String;
	public  var webkitTextCombine :String;
	public  var webkitTextDecorationsInEffect :String;
	public  var webkitTextEmphasis :String;
	public  var webkitTextEmphasisColor :String;
	public  var webkitTextEmphasisPosition :String;
	public  var webkitTextEmphasisStyle :String;
	public  var webkitTextFillColor :String;
	public  var webkitTextOrientation :String;
	public  var webkitTextSecurity :String;
	public  var webkitTextStroke :String;
	public  var webkitTextStrokeColor :String;
	public  var webkitTextStrokeWidth :String;
	public  var webkitTransform :String;
	public  var webkitTransformOrigin :String;
	public  var webkitTransformOriginX :String;
	public  var webkitTransformOriginY :String;
	public  var webkitTransformOriginZ :String;
	public  var webkitTransformStyle :String;
	public  var webkitTransition :String;
	public  var webkitTransitionDelay :String;
	public  var webkitTransitionDuration :String;
	public  var webkitTransitionProperty :String;
	public  var webkitTransitionTimingFunction :String;
	public  var webkitUserDrag :String;
	public  var webkitUserModify :String;
	public  var webkitUserSelect :String;
	public  var webkitWritingMode :String;
	public  var whiteSpace :String;
	public  var widows :String;
	public  var width :String;
	public  var willChange :String;
	public  var wordBreak :String;
	public  var wordSpacing :String;
	public  var wordWrap :String;
	public  var writingMode :String;
	public  var zIndex :Integer;
	public  var zoom :String;
	public  var __className :String;
} //HTMLStyleElement

class HTMLDivElement : HTMLElement
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLDivElement

class HTMLAnchorElement : HTMLElement
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //HTMLAnchorElement

class Image : HTMLElement
{
	public function load(url:String, cocoimage:CocoImage) {}
	public function cloneNode(deep:Boolean) :Image {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __imageData :ImageData;
	public  var src :String;
	public  var width :Float;
	public  var height :Float;
	public  var naturalWidth :Float;
	public  var naturalHeight :Float;
	public  var crossOrigin :String;
	private  var __complete :Boolean;
	public  var complete :Boolean;
	public  var __className :String;
} //Image

class HTMLLocation
{
	public function Destructor() {}
	public function Constructor() {}
	public  var href :String;
	public  var search :String;
	public  var __className :String;
} //HTMLLocation

class HTMLScreen
{
	public function Destructor() {}
	public function Constructor() {}
	public  var width :Float;
	public  var height :Float;
	public  var availWidth :Float;
	public  var availHeight :Float;
	public  var colorDepth :Float;
	public  var pixelDepth :Float;
	public  var __className :String;
} //HTMLScreen

class HTMLNavigator
{
	public function Destructor() {}
	public function Constructor() {}
	public  var appCodeName :String;
	public  var appName :String;
	public  var appVersion :String;
	public  var language :String;
	public  var languages :String;
	public  var battery :Object;
	public  var connection :Object;
	public  var geolocation :Object;
	public  var mimeTypes :Array<String>;
	public  var onLine :Boolean;
	public  var oscpu :String;
	public  var platform :String;
	public  var userAgent :String;
	public  var __className :String;
} //HTMLNavigator

class HTMLWindow
{
	public function addEventListener(eventType:String, listener:Function, useCapture:Boolean) {}
	public function removeEventListener(eventType:String, listener:Function, useCapture:Boolean) {}
	public function dispatchEvent(uid:Integer, eventType:String) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __uid :Integer;
	public  var document :HTMLDocument;
	public  var location :HTMLLocation;
	public  var navigator :HTMLNavigator;
	public  var screen :HTMLScreen;
	public  var innerHeight :Float;
	public  var innerWidth :Float;
	public  var devicePixelRatio :Float;
	public  var orientation :Integer;
	public  var __elements :Array<Function>;
	public  var e :HTMLEvent;
	public  var __className :String;
} //HTMLWindow

class ImageData
{
	public function Destructor() {}
	public function Constructor(a0:String, a1:String) {}
	public  var data :Uint8Array;
	public  var src :String;
	public  var width :Float;
	public  var height :Float;
	public  var __className :String;
} //ImageData

class WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __uid :Integer;
	public  var __className :String;
} //WebGLObject

class WebGLActiveInfo : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, program_uid:Integer, index:Integer) {}
	public  var __className :String;
} //WebGLActiveInfo

class WebGLBuffer : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLBuffer

class WebGLContextAttributes : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLContextAttributes

class WebGLFramebuffer : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLFramebuffer

class WebGLProgram : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var GLSLiTexCoords :Integer;
	public  var GLSLiVec2Coords :Integer;
	public  var GLSLiVecCoords :Integer;
	public  var GLSLuColor :WebGLUniformLocation;
	public  var GLSLuAlpha :WebGLUniformLocation;
	public  var GLSLuMVMat :WebGLUniformLocation;
	public  var GLSLuProjMat :WebGLUniformLocation;
	public  var GLSLuSampler :WebGLUniformLocation;
	public  var GLSLuSprFrame :WebGLUniformLocation;
	public  var GLSLuSprSize :WebGLUniformLocation;
	public  var GLSLuSprFlip :WebGLUniformLocation;
	public  var __className :String;
} //WebGLProgram

class WebGLRenderbuffer : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLRenderbuffer

class WebGLRenderingContext
{
	public function activeTexture(texture:Integer) {}
	public function attachShader(program:WebGLProgram, shader:WebGLShader) {}
	public function bindAttribLocation(program:WebGLProgram, index:Integer, name:String) {}
	public function bindBuffer(target:Integer, buffer:WebGLBuffer) {}
	public function bindFramebuffer(target:Integer, framebuffer:WebGLFramebuffer) {}
	public function bindRenderbuffer(target:Integer, renderbuffer:WebGLRenderbuffer) {}
	public function bindTexture(target:Integer, texture:WebGLTexture) {}
	public function blendColor(red:Float, green:Float, blue:Float, alpha:Float) {}
	public function blendEquation(mode:Integer) {}
	public function blendEquationSeparate(modeRGB:Integer, modeAlpha:Integer) {}
	public function blendFunc(sfactor:Integer, dfactor:Integer) {}
	public function blendFuncSeparate(srcRGB:Integer, dstRGB:Integer, srcAlpha:Integer, dstAlpha:Integer) {}
	public function bufferData(target:Integer, data:Float32Array, usage:Integer) {}
	public function bufferSubData(target:Integer, offset:Integer, data:Float32Array) {}
	public function checkFramebufferStatus(target:Integer) :Integer {}
	public function clear(mask:Integer) {}
	public function clearColor(red:Float, green:Float, blue:Float, alpha:Float) {}
	public function clearDepth(depth:Float) {}
	public function clearStencil(s:Integer) {}
	public function colorMask(red:Boolean, green:Boolean, blue:Boolean, alpha:Boolean) {}
	public function compileShader(shader:WebGLShader) {}
	public function compressedTexImage2D(target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, data:Float32Array) {}
	public function compressedTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, data:Float32Array) {}
	public function copyTexImage2D(target:Integer, level:Integer, internalformat:Integer, x:Integer, y:Integer, width:Integer, height:Integer, border:Integer) {}
	public function copyTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function createBuffer() :WebGLBuffer {}
	public function createFramebuffer() :WebGLFramebuffer {}
	public function createProgram() :WebGLProgram {}
	public function createRenderbuffer() :WebGLRenderbuffer {}
	public function createShader(type:Integer) :WebGLShader {}
	public function createTexture() :WebGLTexture {}
	public function cullFace(mode:Integer) {}
	public function deleteBuffer(buffer:WebGLBuffer) {}
	public function deleteFramebuffer(framebuffer:WebGLFramebuffer) {}
	public function deleteProgram(program:WebGLProgram) {}
	public function deleteRenderbuffer(renderbuffer:WebGLRenderbuffer) {}
	public function deleteShader(shader:WebGLShader) {}
	public function deleteTexture(texture:WebGLTexture) {}
	public function depthFunc(func:Integer) {}
	public function depthMask(flag:Boolean) {}
	public function depthRange(zNear:Float, zFar:Float) {}
	public function detachShader(program:WebGLProgram, shader:WebGLShader) {}
	public function disable(cap:Integer) {}
	public function disableVertexAttribArray(index:Integer) {}
	public function drawArrays(mode:Integer, first:Integer, count:Integer) {}
	public function drawElements(mode:Integer, count:Integer, type:Integer, offset:Integer) {}
	public function enable(cap:Integer) {}
	public function enableVertexAttribArray(index:Integer) {}
	public function finish() {}
	public function flush() {}
	public function framebufferRenderbuffer(target:Integer, attachment:Integer, renderbuffertarget:Integer, renderbuffer:WebGLRenderbuffer) {}
	public function framebufferTexture2D(target:Integer, attachment:Integer, textarget:Integer, texture:WebGLTexture, level:Integer) {}
	public function frontFace(mode:Integer) {}
	public function generateMipmap(target:Integer) {}
	public function getActiveAttrib(program:WebGLProgram, index:Integer) :WebGLActiveInfo {}
	public function getActiveUniform(program:WebGLProgram, index:Integer) :WebGLActiveInfo {}
	public function getAttachedShaders(program:WebGLProgram) :Array<WebGLShader> {}
	public function getAttribLocation(program:WebGLProgram, name:String) :Integer {}
	public function getBufferParameter(target:Integer, pname:Integer) :String {}
	public function getContextAttributes() :WebGLContextAttributes {}
	public function getError() :Integer {}
	public function getExtension(name:String) :Object {}
	public function getFramebufferAttachmentParameter(target:Integer, attachment:Integer, pname:Integer) :String {}
	public function getParameter(pname:Integer) :String {}
	public function getProgramInfoLog(program:WebGLProgram) :String {}
	public function getProgramParameter(program:WebGLProgram, pname:Integer) :Boolean {}
	public function getRenderbufferParameter(target:Integer, pname:Integer) :String {}
	public function getShaderInfoLog(shader:WebGLShader) :String {}
	public function getShaderParameter_boolean(shader:WebGLShader, pname:Integer) :Boolean {}
	public function getShaderParameter_enum(shader:WebGLShader, pname:Integer) :Integer {}
	public function getShaderPrecisionFormat(shadertype:Integer, precisiontype:Integer) :WebGLShaderPrecisionFormat {}
	public function getShaderSource(shader:WebGLShader) :String {}
	public function getSupportedExtensions() :Array<String> {}
	public function getTexParameter(target:Integer, pname:Integer) :String {}
	public function getUniform(program:WebGLProgram, location:WebGLUniformLocation) :String {}
	public function getUniformLocation(program:WebGLProgram, name:String) :WebGLUniformLocation {}
	public function getVertexAttrib(index:Integer, pname:Integer) :String {}
	public function getVertexAttribOffset(index:Integer, pname:Integer) :Integer {}
	public function hint(target:Integer, mode:Integer) {}
	public function isBuffer(buffer:WebGLBuffer) :Boolean {}
	public function isContextLost() :Boolean {}
	public function isEnabled(cap:Integer) :Boolean {}
	public function isFramebuffer(framebuffer:WebGLFramebuffer) :Boolean {}
	public function isProgram(program:WebGLProgram) :Boolean {}
	public function isRenderbuffer(renderbuffer:WebGLRenderbuffer) :Boolean {}
	public function isShader(shader:WebGLShader) :Boolean {}
	public function isTexture(texture:WebGLTexture) :Boolean {}
	public function lineWidth(width:Float) {}
	public function linkProgram(program:WebGLProgram) {}
	public function pixelStorei(pname:Integer, param:Integer) {}
	public function polygonOffset(factor:Float, units:Float) {}
	public function readPixels(x:Integer, y:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array) {}
	public function renderbufferStorage(target:Integer, internalformat:Integer, width:Integer, height:Integer) {}
	public function sampleCoverage(value:Float, invert:Boolean) {}
	public function scissor(x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function shaderSource(shader:WebGLShader, source:String) {}
	public function stencilFunc(func:Integer, ref:Integer, mask:Integer) {}
	public function stencilFuncSeparate(face:Integer, func:Integer, ref:Integer, mask:Integer) {}
	public function stencilMask(mask:Integer) {}
	public function stencilMaskSeparate(face:Integer, mask:Integer) {}
	public function stencilOp(fail:Integer, zfail:Integer, zpass:Integer) {}
	public function stencilOpSeparate(face:Integer, fail:Integer, zfail:Integer, zpass:Integer) {}
	public function texImage2D(target:Integer, level:Integer, internalformat:Integer, format:Integer, type:Integer, image:Image) {}
	public function texParameterf(target:Integer, pname:Integer, param:Float) {}
	public function texParameteri(target:Integer, pname:Integer, param:Integer) {}
	public function texSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array) {}
	public function uniform1f(location:WebGLUniformLocation, x:Float) {}
	public function uniform1fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform1i(location:WebGLUniformLocation, x:Integer) {}
	public function uniform1iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform2f(location:WebGLUniformLocation, x:Float, y:Float) {}
	public function uniform2fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform2i(location:WebGLUniformLocation, x:Integer, y:Integer) {}
	public function uniform2iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform3f(location:WebGLUniformLocation, x:Float, y:Float, z:Float) {}
	public function uniform3fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform3i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer) {}
	public function uniform3iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniform4f(location:WebGLUniformLocation, x:Float, y:Float, z:Float, w:Float) {}
	public function uniform4fv(location:WebGLUniformLocation, v:Float32Array) {}
	public function uniform4i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer, w:Integer) {}
	public function uniform4iv(location:WebGLUniformLocation, v:Int32Array) {}
	public function uniformMatrix2fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function uniformMatrix3fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function uniformMatrix4fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array) {}
	public function useProgram(program:WebGLProgram) {}
	public function validateProgram(program:WebGLProgram) {}
	public function vertexAttrib1f(indx:Integer, x:Float) {}
	public function vertexAttrib1fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib2f(indx:Integer, x:Float, y:Float) {}
	public function vertexAttrib2fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib3f(indx:Integer, x:Float, y:Float, z:Float) {}
	public function vertexAttrib3fv(indx:Integer, values:Float32Array) {}
	public function vertexAttrib4f(indx:Integer, x:Float, y:Float, z:Float, w:Float) {}
	public function vertexAttrib4fv(indx:Integer, values:Float32Array) {}
	public function vertexAttribPointer(indx:Integer, size:Integer, type:Integer, normalized:Boolean, stride:Integer, offset:Integer) {}
	public function viewport(x:Integer, y:Integer, width:Integer, height:Integer) {}
	public function Destructor() {}
	public function Constructor(canvas:HTMLCanvasElement) {}
	public  var ACTIVE_ATTRIBUTES :Integer;
	public  var ACTIVE_TEXTURE :Integer;
	public  var ACTIVE_UNIFORMS :Integer;
	public  var ALIASED_LINE_WIDTH_RANGE :Integer;
	public  var ALIASED_POINT_SIZE_RANGE :Integer;
	public  var ALPHA :Integer;
	public  var ALPHA_BITS :Integer;
	public  var ALWAYS :Integer;
	public  var ARRAY_BUFFER :Integer;
	public  var ARRAY_BUFFER_BINDING :Integer;
	public  var ATTACHED_SHADERS :Integer;
	public  var BACK :Integer;
	public  var BLEND :Integer;
	public  var BLEND_COLOR :Integer;
	public  var BLEND_DST_ALPHA :Integer;
	public  var BLEND_DST_RGB :Integer;
	public  var BLEND_EQUATION :Integer;
	public  var BLEND_EQUATION_ALPHA :Integer;
	public  var BLEND_EQUATION_RGB :Integer;
	public  var BLEND_SRC_ALPHA :Integer;
	public  var BLEND_SRC_RGB :Integer;
	public  var BLUE_BITS :Integer;
	public  var BOOL :Integer;
	public  var BOOL_VEC2 :Integer;
	public  var BOOL_VEC3 :Integer;
	public  var BOOL_VEC4 :Integer;
	public  var BROWSER_DEFAULT_WEBGL :Integer;
	public  var BUFFER_SIZE :Integer;
	public  var BUFFER_USAGE :Integer;
	public  var BYTE :Integer;
	public  var CCW :Integer;
	public  var CLAMP_TO_EDGE :Integer;
	public  var COLOR_ATTACHMENT0 :Integer;
	public  var COLOR_BUFFER_BIT :Integer;
	public  var COLOR_CLEAR_VALUE :Integer;
	public  var COLOR_WRITEMASK :Integer;
	public  var COMPILE_STATUS :Integer;
	public  var COMPRESSED_TEXTURE_FORMATS :Integer;
	public  var CONSTANT_ALPHA :Integer;
	public  var CONSTANT_COLOR :Integer;
	public  var CONTEXT_LOST_WEBGL :Integer;
	public  var CULL_FACE :Integer;
	public  var CULL_FACE_MODE :Integer;
	public  var CURRENT_PROGRAM :Integer;
	public  var CURRENT_VERTEX_ATTRIB :Integer;
	public  var CW :Integer;
	public  var DECR :Integer;
	public  var DECR_WRAP :Integer;
	public  var DELETE_STATUS :Integer;
	public  var DEPTH_ATTACHMENT :Integer;
	public  var DEPTH_BITS :Integer;
	public  var DEPTH_BUFFER_BIT :Integer;
	public  var DEPTH_CLEAR_VALUE :Integer;
	public  var DEPTH_COMPONENT :Integer;
	public  var DEPTH_COMPONENT16 :Integer;
	public  var DEPTH_FUNC :Integer;
	public  var DEPTH_RANGE :Integer;
	public  var DEPTH_STENCIL :Integer;
	public  var DEPTH_STENCIL_ATTACHMENT :Integer;
	public  var DEPTH_TEST :Integer;
	public  var DEPTH_WRITEMASK :Integer;
	public  var DITHER :Integer;
	public  var DONT_CARE :Integer;
	public  var DST_ALPHA :Integer;
	public  var DST_COLOR :Integer;
	public  var DYNAMIC_DRAW :Integer;
	public  var ELEMENT_ARRAY_BUFFER :Integer;
	public  var ELEMENT_ARRAY_BUFFER_BINDING :Integer;
	public  var EQUAL :Integer;
	public  var FASTEST :Integer;
	public  var FLOAT :Integer;
	public  var FLOAT_MAT2 :Integer;
	public  var FLOAT_MAT3 :Integer;
	public  var FLOAT_MAT4 :Integer;
	public  var FLOAT_VEC2 :Integer;
	public  var FLOAT_VEC3 :Integer;
	public  var FLOAT_VEC4 :Integer;
	public  var FRAGMENT_SHADER :Integer;
	public  var FRAMEBUFFER :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :Integer;
	public  var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :Integer;
	public  var FRAMEBUFFER_BINDING :Integer;
	public  var FRAMEBUFFER_COMPLETE :Integer;
	public  var FRAMEBUFFER_INCOMPLETE_ATTACHMENT :Integer;
	public  var FRAMEBUFFER_INCOMPLETE_DIMENSIONS :Integer;
	public  var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :Integer;
	public  var FRAMEBUFFER_UNSUPPORTED :Integer;
	public  var FRONT :Integer;
	public  var FRONT_AND_BACK :Integer;
	public  var FRONT_FACE :Integer;
	public  var FUNC_ADD :Integer;
	public  var FUNC_REVERSE_SUBTRACT :Integer;
	public  var FUNC_SUBTRACT :Integer;
	public  var GENERATE_MIPMAP_HINT :Integer;
	public  var GEQUAL :Integer;
	public  var GREATER :Integer;
	public  var GREEN_BITS :Integer;
	public  var HIGH_FLOAT :Integer;
	public  var HIGH_INT :Integer;
	public  var INCR :Integer;
	public  var INCR_WRAP :Integer;
	public  var INT :Integer;
	public  var INT_VEC2 :Integer;
	public  var INT_VEC3 :Integer;
	public  var INT_VEC4 :Integer;
	public  var INVALID_ENUM :Integer;
	public  var INVALID_FRAMEBUFFER_OPERATION :Integer;
	public  var INVALID_OPERATION :Integer;
	public  var INVALID_VALUE :Integer;
	public  var INVERT :Integer;
	public  var KEEP :Integer;
	public  var LEQUAL :Integer;
	public  var LESS :Integer;
	public  var LINE_LOOP :Integer;
	public  var LINE_STRIP :Integer;
	public  var LINE_WIDTH :Integer;
	public  var LINEAR :Integer;
	public  var LINEAR_MIPMAP_LINEAR :Integer;
	public  var LINEAR_MIPMAP_NEAREST :Integer;
	public  var LINES :Integer;
	public  var LINK_STATUS :Integer;
	public  var LOW_FLOAT :Integer;
	public  var LOW_INT :Integer;
	public  var LUMINANCE :Integer;
	public  var LUMINANCE_ALPHA :Integer;
	public  var MAX_COMBINED_TEXTURE_IMAGE_UNITS :Integer;
	public  var MAX_CUBE_MAP_TEXTURE_SIZE :Integer;
	public  var MAX_FRAGMENT_UNIFORM_VECTORS :Integer;
	public  var MAX_RENDERBUFFER_SIZE :Integer;
	public  var MAX_TEXTURE_IMAGE_UNITS :Integer;
	public  var MAX_TEXTURE_SIZE :Integer;
	public  var MAX_VARYING_VECTORS :Integer;
	public  var MAX_VERTEX_ATTRIBS :Integer;
	public  var MAX_VERTEX_TEXTURE_IMAGE_UNITS :Integer;
	public  var MAX_VERTEX_UNIFORM_VECTORS :Integer;
	public  var MAX_VIEWPORT_DIMS :Integer;
	public  var MEDIUM_FLOAT :Integer;
	public  var MEDIUM_INT :Integer;
	public  var MIRRORED_REPEAT :Integer;
	public  var NEAREST :Integer;
	public  var NEAREST_MIPMAP_LINEAR :Integer;
	public  var NEAREST_MIPMAP_NEAREST :Integer;
	public  var NEVER :Integer;
	public  var NICEST :Integer;
	public  var NO_ERROR :Integer;
	public  var NONE :Integer;
	public  var NOTEQUAL :Integer;
	public  var ONE :Integer;
	public  var ONE_MINUS_CONSTANT_ALPHA :Integer;
	public  var ONE_MINUS_CONSTANT_COLOR :Integer;
	public  var ONE_MINUS_DST_ALPHA :Integer;
	public  var ONE_MINUS_DST_COLOR :Integer;
	public  var ONE_MINUS_SRC_ALPHA :Integer;
	public  var ONE_MINUS_SRC_COLOR :Integer;
	public  var OUT_OF_MEMORY :Integer;
	public  var PACK_ALIGNMENT :Integer;
	public  var POINTS :Integer;
	public  var POLYGON_OFFSET_FACTOR :Integer;
	public  var POLYGON_OFFSET_FILL :Integer;
	public  var POLYGON_OFFSET_UNITS :Integer;
	public  var RED_BITS :Integer;
	public  var RENDERBUFFER :Integer;
	public  var RENDERBUFFER_ALPHA_SIZE :Integer;
	public  var RENDERBUFFER_BINDING :Integer;
	public  var RENDERBUFFER_BLUE_SIZE :Integer;
	public  var RENDERBUFFER_DEPTH_SIZE :Integer;
	public  var RENDERBUFFER_GREEN_SIZE :Integer;
	public  var RENDERBUFFER_HEIGHT :Integer;
	public  var RENDERBUFFER_INTERNAL_FORMAT :Integer;
	public  var RENDERBUFFER_RED_SIZE :Integer;
	public  var RENDERBUFFER_STENCIL_SIZE :Integer;
	public  var RENDERBUFFER_WIDTH :Integer;
	public  var RENDERER :Integer;
	public  var REPEAT :Integer;
	public  var REPLACE :Integer;
	public  var RGB :Integer;
	public  var RGB5_A1 :Integer;
	public  var RGB565 :Integer;
	public  var RGBA :Integer;
	public  var RGBA4 :Integer;
	public  var SAMPLE_ALPHA_TO_COVERAGE :Integer;
	public  var SAMPLE_BUFFERS :Integer;
	public  var SAMPLE_COVERAGE :Integer;
	public  var SAMPLE_COVERAGE_INVERT :Integer;
	public  var SAMPLE_COVERAGE_VALUE :Integer;
	public  var SAMPLER_2D :Integer;
	public  var SAMPLER_CUBE :Integer;
	public  var SAMPLES :Integer;
	public  var SCISSOR_BOX :Integer;
	public  var SCISSOR_TEST :Integer;
	public  var SHADER_TYPE :Integer;
	public  var SHADING_LANGUAGE_VERSION :Integer;
	public  var SHORT :Integer;
	public  var SRC_ALPHA :Integer;
	public  var SRC_ALPHA_SATURATE :Integer;
	public  var SRC_COLOR :Integer;
	public  var STATIC_DRAW :Integer;
	public  var STENCIL_ATTACHMENT :Integer;
	public  var STENCIL_BACK_FAIL :Integer;
	public  var STENCIL_BACK_FUNC :Integer;
	public  var STENCIL_BACK_PASS_DEPTH_FAIL :Integer;
	public  var STENCIL_BACK_PASS_DEPTH_PASS :Integer;
	public  var STENCIL_BACK_REF :Integer;
	public  var STENCIL_BACK_VALUE_MASK :Integer;
	public  var STENCIL_BACK_WRITEMASK :Integer;
	public  var STENCIL_BITS :Integer;
	public  var STENCIL_BUFFER_BIT :Integer;
	public  var STENCIL_CLEAR_VALUE :Integer;
	public  var STENCIL_FAIL :Integer;
	public  var STENCIL_FUNC :Integer;
	public  var STENCIL_INDEX :Integer;
	public  var STENCIL_INDEX8 :Integer;
	public  var STENCIL_PASS_DEPTH_FAIL :Integer;
	public  var STENCIL_PASS_DEPTH_PASS :Integer;
	public  var STENCIL_REF :Integer;
	public  var STENCIL_TEST :Integer;
	public  var STENCIL_VALUE_MASK :Integer;
	public  var STENCIL_WRITEMASK :Integer;
	public  var STREAM_DRAW :Integer;
	public  var SUBPIXEL_BITS :Integer;
	public  var TEXTURE :Integer;
	public  var TEXTURE_2D :Integer;
	public  var TEXTURE_BINDING_2D :Integer;
	public  var TEXTURE_BINDING_CUBE_MAP :Integer;
	public  var TEXTURE_CUBE_MAP :Integer;
	public  var TEXTURE_CUBE_MAP_NEGATIVE_X :Integer;
	public  var TEXTURE_CUBE_MAP_NEGATIVE_Y :Integer;
	public  var TEXTURE_CUBE_MAP_NEGATIVE_Z :Integer;
	public  var TEXTURE_CUBE_MAP_POSITIVE_X :Integer;
	public  var TEXTURE_CUBE_MAP_POSITIVE_Y :Integer;
	public  var TEXTURE_CUBE_MAP_POSITIVE_Z :Integer;
	public  var TEXTURE_MAG_FILTER :Integer;
	public  var TEXTURE_MIN_FILTER :Integer;
	public  var TEXTURE_WRAP_S :Integer;
	public  var TEXTURE_WRAP_T :Integer;
	public  var TEXTURE0 :Integer;
	public  var TEXTURE1 :Integer;
	public  var TEXTURE10 :Integer;
	public  var TEXTURE11 :Integer;
	public  var TEXTURE12 :Integer;
	public  var TEXTURE13 :Integer;
	public  var TEXTURE14 :Integer;
	public  var TEXTURE15 :Integer;
	public  var TEXTURE16 :Integer;
	public  var TEXTURE17 :Integer;
	public  var TEXTURE18 :Integer;
	public  var TEXTURE19 :Integer;
	public  var TEXTURE2 :Integer;
	public  var TEXTURE20 :Integer;
	public  var TEXTURE21 :Integer;
	public  var TEXTURE22 :Integer;
	public  var TEXTURE23 :Integer;
	public  var TEXTURE24 :Integer;
	public  var TEXTURE25 :Integer;
	public  var TEXTURE26 :Integer;
	public  var TEXTURE27 :Integer;
	public  var TEXTURE28 :Integer;
	public  var TEXTURE29 :Integer;
	public  var TEXTURE3 :Integer;
	public  var TEXTURE30 :Integer;
	public  var TEXTURE31 :Integer;
	public  var TEXTURE4 :Integer;
	public  var TEXTURE5 :Integer;
	public  var TEXTURE6 :Integer;
	public  var TEXTURE7 :Integer;
	public  var TEXTURE8 :Integer;
	public  var TEXTURE9 :Integer;
	public  var TRIANGLE_FAN :Integer;
	public  var TRIANGLE_STRIP :Integer;
	public  var TRIANGLES :Integer;
	public  var UNPACK_ALIGNMENT :Integer;
	public  var UNPACK_COLORSPACE_CONVERSION_WEBGL :Integer;
	public  var UNPACK_FLIP_Y_WEBGL :Integer;
	public  var UNPACK_PREMULTIPLY_ALPHA_WEBGL :Integer;
	public  var UNSIGNED_BYTE :Integer;
	public  var UNSIGNED_INT :Integer;
	public  var UNSIGNED_SHORT :Integer;
	public  var UNSIGNED_SHORT_4_4_4_4 :Integer;
	public  var UNSIGNED_SHORT_5_5_5_1 :Integer;
	public  var UNSIGNED_SHORT_5_6_5 :Integer;
	public  var VALIDATE_STATUS :Integer;
	public  var VENDOR :Integer;
	public  var VERSION :Integer;
	public  var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :Integer;
	public  var VERTEX_ATTRIB_ARRAY_ENABLED :Integer;
	public  var VERTEX_ATTRIB_ARRAY_NORMALIZED :Integer;
	public  var VERTEX_ATTRIB_ARRAY_POINTER :Integer;
	public  var VERTEX_ATTRIB_ARRAY_SIZE :Integer;
	public  var VERTEX_ATTRIB_ARRAY_STRIDE :Integer;
	public  var VERTEX_ATTRIB_ARRAY_TYPE :Integer;
	public  var VERTEX_SHADER :Integer;
	public  var VIEWPORT :Integer;
	public  var ZERO :Integer;
	public  var __uid :Integer;
	public  var canvas :HTMLCanvasElement;
	public  var __className :String;
} //WebGLRenderingContext

class WebGLShader : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, type:Integer) {}
	protected  var type :Integer;
	public  var __className :String;
} //WebGLShader

class WebGLShaderPrecisionFormat : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, shadertype:Integer, precisiontype:Integer) {}
	public  var __className :String;
} //WebGLShaderPrecisionFormat

class WebGLTexture : WebGLObject
{
	public function Destructor(uid:Integer) {}
	public function Constructor(uid:Integer) {}
	public  var __className :String;
} //WebGLTexture

class WebGLUniformLocation : WebGLObject
{
	public function Destructor() {}
	public function Constructor(uid:Integer, program_uid:Integer, name:String) {}
	public  var __className :String;
} //WebGLUniformLocation

class IEventListener
{
} //IEventListener

class IEventTarget
{
} //IEventTarget

class IPersistable
{
	public function save(ds:CocoDataStream) {}
	public function load(ds:CocoDataStream) {}
} //IPersistable

class ITickable
{
	public function RegisterTickable() {}
	public function UnregisterTickable() {}
	public function tick(time:Time) {}
} //ITickable

class CocoEngine
{
	public function setNextState(s:State) {}
	public function getCurrentState() :State {}
	public function getNextState() :State {}
	public function run(time:Time) {}
	private function __attachDevices() {}
	private function __dettachDevices() {}
	private function __translateDeviceMessage(e:HTMLEvent) {}
	private function __translateDeviceMessageImpl(e:HTMLEvent) {}
	public function __hasTouchDeviceMessage() :Boolean {}
	public function __removeTouchMessages() {}
	public function __peekDeviceMessage(mask:DEVICE_MESSAGE_ENUM) :DEVICE_MESSAGE {}
	public function __clearDeviceMessageQueue() {}
	public function __pushClicked(clip:CocoClip) {}
	public function isClicked(check:Array<CocoClip>) :Integer {}
	public function isKeyDown(check:Int32Array) :Integer {}
	public function addTickListener(tickable:ITickable) {}
	public function removeTickListener(tickable:ITickable) {}
	public function getTickableIndex(tickable:ITickable) :Integer {}
	private function __tick(time:Time) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var TICK_TIME :Time;
	public  var device :CocoDeviceWrapper;
	private  var __currentState :State;
	private  var __nextState :State;
	private  var __tickables :Array<ITickable>;
	public  var __clock :Time;
	public  var __ctx :ICocoRenderContext;
	public  var __RESIZE_IMAGES_AT_RUNTIME :Boolean;
	private  var __deviceMessageQueue :Array<DEVICE_MESSAGE>;
	private  var __clicked :Array<CocoClip>;
	private  var __track_touch :Boolean;
	private  var __track_key :Boolean;
	private  var __has_touch_device_message :Boolean;
	public  var __className :String;
} //CocoEngine

class CocoEvent
{
	public function reset() {}
	public function is(Event:CocoEvent) :Boolean {}
	public function cancelBubble() {}
	public function preventDefault() {}
	public function Destructor() {}
	public function Constructor(type:String, cancelable:Boolean, bubbles:Boolean) {}
	public  var type :String;
	public  var bubbles :Boolean;
	public  var cancelable :Boolean;
	public  var timeStamp :Integer;
	public  var stopPropagation :Boolean;
	public  var defaultPrevented :Boolean;
	public  var __className :String;
} //CocoEvent

class CocoEventConnectionPoint
{
	public function Destructor() {}
	public function Constructor(Source:CocoEventSource, Event:CocoEvent, Listener:IEventListener, Callback:Function) {}
	public  var Event :CocoEvent;
	public  var Callback :Function;
	public  var Listener :IEventListener;
	public  var __className :String;
} //CocoEventConnectionPoint

class CocoEventSource
{
	public function addEventListener(Event:CocoEvent, Callback:Function, Listener:IEventListener) {}
	public function removeEventListener(Event:CocoEvent, Callback:Function, Listener:IEventListener) :Boolean {}
	public function dispatchEvent(Event:CocoEvent) {}
	public function Destructor() {}
	public function Constructor() {}
	protected  var __eventListeners :Array<CocoEventConnectionPoint>;
	public  var __className :String;
} //CocoEventSource

class State
{
	public function enter() {}
	public function exit() {}
	public function tick(time:Time) {}
	public function paint(ctx:ICocoRenderContext, time:Time) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __name :String;
	public  var params :Object;
	public  var __className :String;
} //State

class CocoTickable
{
	public function RegisterTickable() {}
	public function UnregisterTickable() {}
	public function tick(time:Time) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoTickable

class Touch
{
	public function initTouch(identifier:Integer, target:IEventTarget, screenX:Float, screenY:Float, clientX:Float, clientY:Float, pageX:Float, pageY:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var identifier :Integer;
	public  var screenX :Float;
	public  var screenY :Float;
	public  var clientX :Float;
	public  var clientY :Float;
	public  var pageX :Float;
	public  var pageY :Float;
	public  var target :IEventTarget;
	public  var __className :String;
} //Touch

class TouchList : Array
{
	public function item(index:Integer) :Touch {}
	public function Destructor() {}
	public function Constructor() {}
	public  var length :Integer;
	public  var __className :String;
} //TouchList

class HTMLEvent
{
	public function preventDefault() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var type :String;
	public  var timestamp :Time;
	public  var clientX :Float;
	public  var clientY :Float;
	public  var touches :TouchList;
	public  var changedTouches :TouchList;
	public  var keyCode :Integer;
	public  var ctrlKey :Boolean;
	public  var altKey :Boolean;
	public  var shiftKey :Boolean;
	public  var __className :String;
} //HTMLEvent

class DEVICE_MESSAGE_ENUM
{
	public var MESSAGE_NONE :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_MASK :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_START :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_MOVE :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_TOUCH_END :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_KEY_DOWN :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_KEY_UP :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_HTTP_MASK :DEVICE_MESSAGE_ENUM;
	public var MESSAGE_HTTP_DONE :DEVICE_MESSAGE_ENUM;
} //DEVICE_MESSAGE_ENUM

class DEVICE_MESSAGE
{
	public function toJSON() :String {}
	public var handled :Boolean;
	public var type :DEVICE_MESSAGE_ENUM;
	public var timestamp :Time;
	public var peeked :Boolean;
	public var touches :Integer;
	public var x0 :Float;
	public var x1 :Float;
	public var x2 :Float;
	public var x3 :Float;
	public var x4 :Float;
	public var y0 :Float;
	public var y1 :Float;
	public var y2 :Float;
	public var y3 :Float;
	public var y4 :Float;
	public var keyCode :Integer;
	public var ctrlKey :Boolean;
	public var altKey :Boolean;
	public var shiftKey :Boolean;
} //DEVICE_MESSAGE

class COCO_DATA_PROVIDER_ENUM
{
	public var PROVIDER_HTTP_POST :COCO_DATA_PROVIDER_ENUM;
	public var PROVIDER_HTTP_GET :COCO_DATA_PROVIDER_ENUM;
	public var PROVIDER_FILESYSTEM :COCO_DATA_PROVIDER_ENUM;
} //COCO_DATA_PROVIDER_ENUM

class COCO_REQUEST_DATA_FORMAT_ENUM
{
	public var REQUEST_URL_QUERY_STRING :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_URL_ENCODED_FORM :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_XML :COCO_REQUEST_DATA_FORMAT_ENUM;
	public var REQUEST_JSON :COCO_REQUEST_DATA_FORMAT_ENUM;
} //COCO_REQUEST_DATA_FORMAT_ENUM

class COCO_PERSISTENT_STORAGE_ENUM
{
	public var PERSIST_IN_SESSION :COCO_PERSISTENT_STORAGE_ENUM;
	public var PERSIST_IN_LOCAL_STORAGE :COCO_PERSISTENT_STORAGE_ENUM;
} //COCO_PERSISTENT_STORAGE_ENUM

class CocoRequestNameValuePair
{
	public function toJSON() :String {}
	public var Name :String;
	public var Value :String;
} //CocoRequestNameValuePair

class CocoDataSource : CocoEventSource
{
	public function open() :CocoDataset {}
	public function Destructor() {}
	public function Constructor() {}
	public  var Name :String;
	public  var Blocking :Boolean;
	public  var Type :COCO_DATA_PROVIDER_ENUM;
	public  var ConnectionString :String;
	public  var RequestDataFormat :COCO_REQUEST_DATA_FORMAT_ENUM;
	public  var RequestDataPacket :Array<String>;
	public  var RequestHeaders :Array<String>;
	public  var PersistentStorage :COCO_PERSISTENT_STORAGE_ENUM;
	public  var PersistentDataID :String;
	public  var __className :String;
} //CocoDataSource

class CocoDataStream
{
	public function increaseSize(s:Integer) {}
	public function shrink() {}
	public function load(URL:String) {}
	public function save(URL:String) {}
	public function clone() :CocoDataStream {}
	public function writeInteger(v:Integer) {}
	public function writeFloat(v:Float) {}
	public function writeString(v:String) {}
	public function writeBoolean(v:Boolean) {}
	public function writeInt32Array(v:Int32Array) {}
	public function writeFloat32Array(v:Float32Array) {}
	public function writeDataStream(v:CocoDataStream) {}
	public function writeDate(v:Date) {}
	public function readCocoDataStream() :CocoDataStream {}
	protected function set(v:Int32Array) {}
	public function readUint8Array() :Uint8Array {}
	public function readInt32Array() :Int32Array {}
	public function readFloat32Array() :Float32Array {}
	public function readInteger() :Integer {}
	public function readFloat() :Float {}
	public function readString() :String {}
	public function readBoolean() :Boolean {}
	public function readDate() :Date {}
	public function Destructor() {}
	public function Constructor() {}
	private  var ELEMENTS_INCREMENT :Integer;
	private  var bi :Int32Array;
	private  var bf :Float32Array;
	private  var __offset :Integer;
	private  var __length :Integer;
	public  var offset :Integer;
	public  var __className :String;
} //CocoDataStream

class COCO_FIELD_DATATYPE
{
	public var FIELD_TYPE_STRING :COCO_FIELD_DATATYPE;
	public var FIELD_TYPE_INTEGER :COCO_FIELD_DATATYPE;
	public var FIELD_TYPE_FLOAT :COCO_FIELD_DATATYPE;
	public var FIELD_TYPE_DATE :COCO_FIELD_DATATYPE;
} //COCO_FIELD_DATATYPE

class CocoDataField
{
	public function save(ds:CocoDataStream) {}
	public function load(ds:CocoDataStream) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __recordset :CocoDataset;
	public  var Name :String;
	public  var Index :Integer;
	public  var Type :COCO_FIELD_DATATYPE;
	public  var Size :Integer;
	public  var BaseCatalog :String;
	public  var BaseTable :String;
	public  var BaseColumn :String;
	public  var IsKeyField :Boolean;
	public  var IsPrimaryKey :Boolean;
	public  var IsForeignKey :Boolean;
	public  var CanBeNull :Boolean;
	public  var LookupKeyField :String;
	public  var LookupDisplayField :String;
	public  var LookupListFields :String;
	public  var LookupCached :Boolean;
	public  var LookupSQL :String;
	public  var Caption :String;
	public  var ReadOnly :Boolean;
	public  var Required :Boolean;
	public  var Hidden :Boolean;
	public  var SearchAreaHidden :Boolean;
	public  var FormHidden :Boolean;
	public  var GridHidden :Boolean;
	public  var Password :Boolean;
	public  var StringValue :String;
	public  var IntegerValue :Integer;
	public  var FloatValue :Float;
	public  var OldStringValue :String;
	public  var OldIntegerValue :Integer;
	public  var OldFloatValue :Float;
	public  var __className :String;
} //CocoDataField

class COCO_RECORD_STATUS
{
	public var RECORD_UNCHANGED :COCO_RECORD_STATUS;
	public var RECORD_CREATED :COCO_RECORD_STATUS;
	public var RECORD_UPDATED :COCO_RECORD_STATUS;
	public var RECORD_DELETED :COCO_RECORD_STATUS;
} //COCO_RECORD_STATUS

class CocoDataset
{
	public function load(ds:CocoDataStream) {}
	public function save(ds:CocoDataStream) {}
	public function Open() {}
	public function Close() {}
	public function AddField(Name:String, Type:COCO_FIELD_DATATYPE, Size:Integer) :CocoDataField {}
	private function __fieldIndex(Name:String) :Integer {}
	public function __gotoFieldOffset(f:CocoDataField) {}
	public function Fields(Name:String) :CocoDataField {}
	public function RecordCount() :Integer {}
	public function bof() :Boolean {}
	public function eof() :Boolean {}
	public function MoveNext() {}
	public function MovePrev() {}
	public function MoveFirst() {}
	public function MoveLast() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __ds :CocoDataStream;
	private  var __fields :Array<CocoDataField>;
	private  var __recordOffsets :Int32Array;
	private  var __recordIndex :Integer;
	private  var __opened :Boolean;
	public  var __className :String;
} //CocoDataset

class CocoLocalStorage
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoLocalStorage

class CocoVector
{
	public function reset(x:Float, y:Float, z:Float, w:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var X :Float;
	public  var Y :Float;
	public  var Z :Float;
	public  var W :Float;
	public  var __className :String;
} //CocoVector

class CocoMatrixData
{
	public function toJSON() :String {}
	public var rc11 :Float;
	public var rc12 :Float;
	public var rc13 :Float;
	public var rc14 :Float;
	public var rc21 :Float;
	public var rc22 :Float;
	public var rc23 :Float;
	public var rc24 :Float;
	public var rc31 :Float;
	public var rc32 :Float;
	public var rc33 :Float;
	public var rc34 :Float;
	public var rc41 :Float;
	public var rc42 :Float;
	public var rc43 :Float;
	public var rc44 :Float;
} //CocoMatrixData

class CocoMatrix
{
	public function Unproject(x:Float, y:Float, mv:CocoMatrix, pm:CocoMatrix, viewOriginX:Float, viewOriginY:Float, viewWidth:Float, viewHeight:Float) :CocoVector {}
	public function identity() {}
	public function ortho(left:Float, right:Float, bottom:Float, top:Float, near:Float, far:Float) {}
	public function transpose() {}
	public function determinant() :Float {}
	public function invert() {}
	public function multiplyByVector(v:CocoVector) :CocoVector {}
	public function multiplyByMatrix(v:CocoMatrix, setMatrix:Boolean) :CocoMatrix {}
	public function translate(tx:Float, ty:Float) {}
	public function scale(sx:Float, sy:Float) {}
	public function rotateZ(rz:Float) {}
	public function refresh() {}
	public function push() {}
	public function pop() {}
	public function toCSS3D(identity:Boolean) :String {}
	public function toCSS2D(identity:Boolean) :String {}
	public function Destructor() {}
	public function Constructor(M:CocoMatrix) {}
	public  var __m :CocoMatrixData;
	public  var __stack :Array<CocoMatrixData>;
	public  var __data :Float32Array;
	public  var __dirty :Boolean;
	public  var __className :String;
} //CocoMatrix

class CocoScene
{
	public function getImageSymbol(symbolName:String) :CocoImage {}
	public function getImageSymbolHeight(symbolName:String) :Float {}
	public function getClipByPath(ClipPath:String) :CocoClip {}
	public function getClipsByClassName(className:String) :Array<CocoClip> {}
	public function newResourceImage(symbolName:String, baseUrl:String) :CocoImage {}
	public function prepare(ctx:ICocoRenderContext) {}
	public function tick(time:Time) {}
	public function paint(ctx:ICocoRenderContext, time:Time) {}
	public function resourcesLoaded(ctx:ICocoRenderContext) :Boolean {}
	public function loadingProgress() :Integer {}
	public function gotoAndPlayByName(LabelName:String) {}
	public function gotoAndStopByName(LabelName:String) {}
	public function gotoAndPlayByIndex(FrameIndex:Integer) {}
	public function gotoAndStopyByIndex(FrameIndex:Integer) {}
	public function stop() {}
	public function worldX(deviceX:Float) :Float {}
	public function worldY(deviceY:Float) :Float {}
	public function viewX(worldX:Float) :Float {}
	public function viewY(worldY:Float) :Float {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __sceneName :String;
	public  var __imageSymbols :Array<CocoImage>;
	public  var __fps :Float;
	public  var __view_width :Float;
	public  var __view_height :Float;
	public  var __view_pixel_ratio :Float;
	public  var __view_scale :Float;
	public  var __root :CocoClip;
	public  var __levelParents :Array<CocoClip>;
	public  var __ready :Boolean;
	public  var __loaded_assets :Float;
	public  var __finished :Boolean;
	private  var m_ctx :ICocoRenderContext;
	private  var m_width :Float;
	private  var m_height :Float;
	public  var __className :String;
} //CocoScene

class CocoKeyFrame
{
	public function toJSON() :String {}
	public var frameIndex :Integer;
	public var __frameIndex :Float;
	public var frameInterpolation :COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var handleEvents :Boolean;
	public var visible :Boolean;
	public var filter :Integer;
	public var red :Float;
	public var green :Float;
	public var blue :Float;
	public var alpha :Float;
	public var x :Float;
	public var y :Float;
	public var pivotX :Float;
	public var pivotY :Float;
	public var scaleX :Float;
	public var scaleY :Float;
	public var rotation :Float;
	public var action :CocoAction;
	public var nextState :State;
	public var audio :CocoAudio;
	public var flipH :Boolean;
	public var flipV :Boolean;
	public var spriteSequenceName :String;
	public var spriteSequenceFPS :Float;
	public var __isCloned :Boolean;
	public var __Preserve :Boolean;
} //CocoKeyFrame

class CocoTimeLabel
{
	public function Destructor() {}
	public function Constructor(FrameIndex:Integer, LabelName:String) {}
	public  var frameIndex :Integer;
	public  var name :String;
	public  var __className :String;
} //CocoTimeLabel

class CocoTimeline
{
	public function NewKeyFrame() :CocoKeyFrame {}
	public function CloneKeyFrame(F:CocoKeyFrame, exact:Boolean) :CocoKeyFrame {}
	public function prepare(scene:CocoScene, clip:CocoClip) {}
	public function clear() {}
	public function reset() {}
	public function addLabel(Label:CocoTimeLabel) :CocoTimeLabel {}
	public function addLabelEx(FrameIndex:Integer, LabelName:String) :CocoTimeLabel {}
	public function findLabelByName(LabelName:String) :CocoTimeLabel {}
	public function keyFrame(frameIndex:Integer) :CocoKeyFrame {}
	public function firstKeyFrame() :CocoKeyFrame {}
	public function lastKeyFrame() :CocoKeyFrame {}
	public function addKeyFrame(KeyFrame:CocoKeyFrame) :CocoKeyFrame {}
	public function addKeyFrameEx(nextState:State, actionCallback:CocoAction, frameIndex:Integer, frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM, handleEvents:Boolean, visible:Boolean, x:Float, y:Float, scaleX:Float, scaleY:Float, rotation:Float, pivotX:Float, pivotY:Float, filter:Integer, red:Float, green:Float, blue:Float, alpha:Float, audio:CocoAudio, flipH:Boolean, flipV:Boolean, spriteSequenceName:String, spriteSequenceFPS:Float) :CocoKeyFrame {}
	public function normalizetimeline() {}
	public function translateTo(x:Float, y:Float) {}
	public function translateBy(dx:Float, dy:Float) {}
	public function findKeyFrameBeforeframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame {}
	public function findKeyFrameAfterframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame {}
	public function interpolate(frameIndex:Float) :CocoKeyFrame {}
	private function interpolate$1(F:CocoKeyFrame, F1:CocoKeyFrame, F2:CocoKeyFrame, s:Float) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __labels :Array<CocoTimeLabel>;
	public  var __keyFrames :Array<CocoKeyFrame>;
	public  var __singleFrameDurationTime :Time;
	public  var __durationInTime :Time;
	public  var __durationInFrames :Integer;
	public  var __paused :Boolean;
	public  var __fps :Float;
	public  var __currentFrameIndex :Integer;
	public  var __firstKeyFrameIndex :Integer;
	public  var __lastKeyFrameIndex :Integer;
	public  var __className :String;
} //CocoTimeline

class CocoClip : CocoEventSource
{
	public function prepare(ctx:ICocoRenderContext, scene:CocoScene, zIndex:Integer) {}
	public function analyze(sx:Float, sy:Float) {}
	public function reset() {}
	public function clear() {}
	public function addChild(clipInstance:CocoClip) :CocoClip {}
	public function removeChild(clipInstance:CocoClip) :CocoClip {}
	public function moveChild(child:CocoClip, zIndex:Integer) {}
	public function getChildByName(instanceName:String) :CocoClip {}
	public function getChildIndex(child:CocoClip) :Integer {}
	public function getChildrenByClassName(className:String) :Array<CocoClip> {}
	public function moveTo(x:Float, y:Float, frames:Integer) {}
	private function normalize() {}
	public function gotoFrameByName(LabelName:String, pause:Boolean) :Boolean {}
	public function gotoFrameByIndex(FrameIndex:Integer, pause:Boolean) :Boolean {}
	public function paused() :Boolean {}
	private function __advanceTime() {}
	public function tick(time:Time) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	private function combine(F1:CocoKeyFrame, F2:CocoKeyFrame) {}
	public function hitTest(wx:Float, wy:Float) :Boolean {}
	public function initBoundingBoxFromRect(ctx:ICocoRenderContext, mv:CocoMatrix, W2:Float, H2:Float) {}
	public function initBoundingBoxFromChildren(ctx:ICocoRenderContext, scene:CocoScene, mv:CocoMatrix) {}
	public function createInplaceHTML(update:Boolean, tag:String, href:String) :HTMLDivElement {}
	public function destroyInplaceHTML() {}
	public function Destructor() {}
	public function Constructor(image:CocoImage) {}
	public  var __uniqueID :String;
	public  var __zIndex :Integer;
	public  var __instanceName :String;
	public  var __clipPath :String;
	public  var __symbolLoop :COCO_CLIP_SYMBOL_LOOP_ENUM;
	public  var __children :Array<CocoClip>;
	public  var __timeline :CocoTimeline;
	public  var __scene :CocoScene;
	public  var __image :CocoImage;
	public  var __parent :CocoClip;
	public  var __currentFrame :CocoKeyFrame;
	public  var __childWithMaxTimelineDuration :CocoClip;
	public  var __currentSequence :CocoSequence;
	public  var __currentAudio :CocoAudio;
	public  var __ANCHOR :HTMLDivElement;
	public  var __currentTime :Time;
	public  var __loopTime :Time;
	public  var __loops :Integer;
	public  var __currentSequenceStartTime :Time;
	public  var __currentSequenceFrameIndex :Integer;
	public  var __pauseTicks :Integer;
	public  var __visible :Boolean;
	public  var __x :Float;
	public  var __y :Float;
	public  var __width :Float;
	public  var __height :Float;
	public  var __hasBoundingBox :Boolean;
	public  var __vABS_TOP_LEFT :CocoVector;
	public  var __vABS_TOP_RIGHT :CocoVector;
	public  var __vABS_BOTTOM_LEFT :CocoVector;
	public  var __vABS_BOTTOM_RIGHT :CocoVector;
	public  var __vREL_TOP_LEFT :CocoVector;
	public  var __vREL_TOP_RIGHT :CocoVector;
	public  var __vREL_BOTTOM_LEFT :CocoVector;
	public  var __vREL_BOTTOM_RIGHT :CocoVector;
	public  var __vBBoxVrtx :CocoVector;
	public  var __mBBox :CocoMatrix;
	public  var __touch_start_time :Time;
	public  var __touch_start_point :CocoPoint;
	public  var __touch_moved :Boolean;
	public var OnClick :CocoClipOnClickEvent;
	public var OnTouchStart :CocoClipOnTouchStartEvent;
	public var OnTouchMove :CocoClipOnTouchMoveEvent;
	public var OnTouchEnd :CocoClipOnTouchEndEvent;
	public var OnAnimationSequenceBegin :CocoClipOnAnimationSequenceBeginEvent;
	public var OnAnimationSequenceEnd :CocoClipOnAnimationSequenceEndEvent;
	public static  var __uniqueIDCounter :Integer;
	public  var __className :String;
} //CocoClip

class CocoClipOnClickEvent : CocoEvent
{
} //CocoClipOnClickEvent

class CocoClipOnTouchStartEvent : CocoEvent
{
	public var x :Float;
	public var y :Float;
} //CocoClipOnTouchStartEvent

class CocoClipOnTouchMoveEvent : CocoEvent
{
	public var x :Float;
	public var y :Float;
} //CocoClipOnTouchMoveEvent

class CocoClipOnTouchEndEvent : CocoEvent
{
	public var x :Float;
	public var y :Float;
} //CocoClipOnTouchEndEvent

class CocoClipOnAnimationSequenceBeginEvent : CocoEvent
{
	public var sequence :CocoSequence;
} //CocoClipOnAnimationSequenceBeginEvent

class CocoClipOnAnimationSequenceEndEvent : CocoEvent
{
	public var sequence :CocoSequence;
} //CocoClipOnAnimationSequenceEndEvent

class CocoSelfTexturedClip : CocoClip
{
	public function prepare(ctx:ICocoRenderContext, scene:CocoScene, zIndex:Integer) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var InvalidTexture :Boolean;
	protected  var buffer :CocoImage;
	public  var __className :String;
} //CocoSelfTexturedClip

class CocoTextClip : CocoSelfTexturedClip
{
	public function prepare(ctx:ICocoRenderContext, scene:CocoScene, zIndex:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	private  var m_Text :String;
	private  var m_FontFamily :String;
	private  var m_FontSizePixels :Integer;
	private  var m_FontBold :Boolean;
	private  var m_FontItalic :Boolean;
	private  var m_FontUnderline :Boolean;
	private  var m_FontColor :Color;
	private  var m_TextHorizAlign :COCO_TEXT_ALIGN_ENUM;
	private  var m_TextVertAlign :COCO_TEXT_ALIGN_ENUM;
	public  var Text :String;
	public  var FontFamily :String;
	public  var FontSizePixels :Integer;
	public  var FontBold :Boolean;
	public  var FontItalic :Boolean;
	public  var FontUnderline :Boolean;
	public  var FontColor :Color;
	public  var TextHorizAlign :COCO_TEXT_ALIGN_ENUM;
	public  var TextVertAlign :COCO_TEXT_ALIGN_ENUM;
	public  var __className :String;
} //CocoTextClip

class COCO_MASK_TYPE
{
	public var MASK_SHAPE :COCO_MASK_TYPE;
	public var MASK_IMAGE :COCO_MASK_TYPE;
} //COCO_MASK_TYPE

class CocoMaskClip : CocoSelfTexturedClip
{
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var MaskType :COCO_MASK_TYPE;
	public  var FillColor :Color;
	public  var Invert :Boolean;
	public  var Rectangles :Array<Float>;
	public  var __className :String;
} //CocoMaskClip

class COCO_SCREEN_ORIENTATION
{
	public var SCREEN_ORIENTATION_PORTRAIT :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE :COCO_SCREEN_ORIENTATION;
	public var SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE :COCO_SCREEN_ORIENTATION;
} //COCO_SCREEN_ORIENTATION

class CocoDeviceWrapper
{
	public function report() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var Force2D :Boolean;
	public  var ForceCSS3 :Boolean;
	public  var pixelRatio :Float;
	public  var screenWidth :Float;
	public  var screenHeight :Float;
	public  var unorientedScreenWidth :Float;
	public  var unorientedScreenHeight :Float;
	public  var screenOrientation :COCO_SCREEN_ORIENTATION;
	public  var isNative :Boolean;
	public  var isHTML5Browser :Boolean;
	public  var isChrome :Boolean;
	public  var isFirefox :Boolean;
	public  var isSafari :Boolean;
	public  var isIOS :Boolean;
	public  var isIPhone :Boolean;
	public  var isIPad :Boolean;
	public  var isIPad1 :Boolean;
	public  var isIPad2 :Boolean;
	public  var isIPad3 :Boolean;
	public  var isIPhone3 :Boolean;
	public  var isIPhone4 :Boolean;
	public  var isIPhone5 :Boolean;
	public  var isIPhone6 :Boolean;
	public  var isIPhone6Plus :Boolean;
	public  var isDesktopSafari :Boolean;
	public  var iOSVersion :String;
	public  var isAndroid :Boolean;
	public  var AndroidSDKVersion :String;
	public  var HasTouchscreen :Boolean;
	public  var __className :String;
} //CocoDeviceWrapper

class CocoPoint
{
	public function toJSON() :String {}
	public var x :Float;
	public var y :Float;
} //CocoPoint

class CocoRect
{
	public function toJSON() :String {}
	public var left :Float;
	public var top :Float;
	public var right :Float;
	public var bottom :Float;
} //CocoRect

class CocoSkinCacheItem
{
	public function toJSON() :String {}
	public var symbolName :String;
	public var width :Float;
	public var height :Float;
	public var image :CocoImage;
} //CocoSkinCacheItem

class CocoHVAlign
{
	public function toJSON() :String {}
	public var horiz :Float;
	public var vert :Float;
} //CocoHVAlign

class CocoGraphics
{
	public function NewCanvas(width:Float, height:Float, POT:Boolean) :HTMLCanvasElement {}
	public function ColorToHtmlRGBA(c:Color) :String {}
	public function GetSkinFromCache(skinImage:CocoImage, width:Float, height:Float) :CocoImage {}
	public function CocoImageFromHTMLCanvas(canvas:HTMLCanvasElement, textureWidth:Float, textureHeight:Float, mime:String) :CocoImage {}
	public function DrawSkin(ctx:CanvasRenderingContext2D, skinImage:CocoImage, x:Float, y:Float, width:Float, height:Float) {}
	private function __drawSlice(ctx:CanvasRenderingContext2D, skin:CocoImage, cx:Float, cy:Float, cw:Float, ch:Float, sx:Float, sy:Float, sw:Float, sh:Float, r:COCO_SKIN_TILE_ENUM) {}
	private function __countFixed(v:Array<Float>) :Integer {}
	private function __fixedW(v:Array<COCO_SKIN_TILE_ENUM>) :Boolean {}
	private function __fixedH(v:Array<COCO_SKIN_TILE_ENUM>) :Boolean {}
	private function __tileSkin(ctx:CanvasRenderingContext2D, image:CocoImage, cellX:Float, cellY:Float, cellWidth:Float, cellHeight:Float, x:Float, y:Float, width:Float, height:Float) {}
	private function __drawRegion(ctx:CanvasRenderingContext2D, image:CocoImage, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float) {}
	public function AlignToCocoHVAlign(h:COCO_TEXT_ALIGN_ENUM, v:COCO_TEXT_ALIGN_ENUM) :CocoHVAlign {}
	public function AnchorToCocoHVAlign(anchor:COCO_CONTROL_ANCHOR_ENUM) :CocoHVAlign {}
	public function Destructor() {}
	public function Constructor() {}
	public static  var skinsCache :Array<CocoSkinCacheItem>;
	public  var __className :String;
} //CocoGraphics

class CocoSequence
{
	public function Destructor() {}
	public function Constructor(name:String, framesArray:Array<Integer>) {}
	public  var name :String;
	public  var frames :Array<Integer>;
	public  var __className :String;
} //CocoSequence

class CocoImageResolution
{
	public function Destructor() {}
	public function Constructor(url:String, pixelRatio:Float, textureWidth:Float, textureHeight:Float, textureScale:Float, tileWidth:Float, tileHeight:Float, tileMap:Int32Array) {}
	public  var url :String;
	public  var pixelRatio :Float;
	public  var textureWidth :Float;
	public  var textureHeight :Float;
	public  var textureScale :Float;
	public  var tileWidth :Float;
	public  var tileHeight :Float;
	public  var tileMap :Int32Array;
	public  var __className :String;
} //CocoImageResolution

class CocoImage
{
	public function createFromURL(url:String, resizeWidth:Float, resizeHeight:Float) :CocoImage {}
	public function __error(hImage:Image) :Boolean {}
	public function __loaded(hImage:Image) {}
	public function createFromCanvas(canvas:HTMLCanvasElement, width:Float, height:Float) {}
	public function createFromBase64(url:String, width:Float, height:Float) {}
	public function addResolution(sibling:CocoImageResolution) :CocoImageResolution {}
	public function addSequence(sequence:CocoSequence) :CocoSequence {}
	public function getSequence(name:String) :CocoSequence {}
	public function load() {}
	public function loaded() :Boolean {}
	public function unload() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var symbolName :String;
	public  var hImage :Image;
	public  var scene :CocoScene;
	public  var textureCellWidth :Float;
	public  var textureCellHeight :Float;
	public  var textureScale :Float;
	public  var textureGrid :Float32Array;
	public  var textureTileMap :Float32Array;
	public  var color :Float32Array;
	public  var texSize :Float32Array;
	public  var isSpriteSheet :Boolean;
	public  var sequences :Array<CocoSequence>;
	public  var skin :Float32Array;
	public  var tileWidth :Integer;
	public  var tileHeight :Integer;
	public  var tileMap :Int32Array;
	public  var renderData :ICocoImageRenderData;
	public  var onLoadResizeWidth :Float;
	public  var onLoadResizeHeight :Float;
	public  var baseUrl :String;
	public  var viewOptimalWidth :Integer;
	public  var viewOptimalHeight :Integer;
	public  var viewSiblings :Array<CocoImageResolution>;
	public  var pixelRatio :Float;
	public  var scaleX :Float;
	public  var scaleY :Float;
	public  var __className :String;
} //CocoImage

class ICocoImageRenderData
{
	public function castRenderDataGL() :CocoImageRenderDataGL {}
	public function castRenderData2D() :CocoImageRenderData2D {}
} //ICocoImageRenderData

class CocoImageRenderDataGL
{
	public function castRenderDataGL() :CocoImageRenderDataGL {}
	public function castRenderData2D() :CocoImageRenderData2D {}
	public function Destructor() {}
	public function Constructor() {}
	public  var gl :WebGLRenderingContext;
	public  var texture :WebGLTexture;
	public  var buffer :WebGLBuffer;
	public  var drawType :Integer;
	public  var vertexCount :Integer;
	public  var __className :String;
} //CocoImageRenderDataGL

class CocoImageRenderData2D
{
	public function castRenderDataGL() :CocoImageRenderDataGL {}
	public function castRenderData2D() :CocoImageRenderData2D {}
	public function Destructor() {}
	public function Constructor() {}
	public  var imageData :ImageData;
	public  var __className :String;
} //CocoImageRenderData2D

class ICocoRenderContext
{
	public function getModelViewMatrix() :CocoMatrix {}
	public function getProjectionMatrix() :CocoMatrix {}
	public function apply(clip:CocoClip, F:CocoKeyFrame, matrix:CocoMatrix) {}
	public function getDisplayWidth() :Float {}
	public function getDisplayHeight() :Float {}
	public function getBufferWidth() :Float {}
	public function getBufferHeight() :Float {}
	public function cls() {}
	public function clip(x:Float, y:Float, w:Float, h:Float) {}
	public function flush() {}
	public function ready() :Boolean {}
	public function prepare(viewScale:Float) {}
	public function prepareClip(clip:CocoClip) {}
	public function prepareImage(img:CocoImage) :ICocoImageRenderData {}
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer) {}
	public function drawMaskBegin() {}
	public function drawMaskEnd(invert:Boolean) {}
	public function drawBoundingBox(clip:CocoClip) {}
	public function hide() {}
	public function show() {}
	public function getGLContext() :WebGLRenderingContext {}
	public function get2DContext() :CanvasRenderingContext2D {}
} //ICocoRenderContext

class CocoRenderContext
{
	public function createContext() :ICocoRenderContext {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //CocoRenderContext

class CocoRenderContext2D
{
	public function getGLContext() :WebGLRenderingContext {}
	public function get2DContext() :CanvasRenderingContext2D {}
	public function getDisplayWidth() :Float {}
	public function getDisplayHeight() :Float {}
	public function getBufferWidth() :Float {}
	public function getBufferHeight() :Float {}
	public function getModelViewMatrix() :CocoMatrix {}
	public function getProjectionMatrix() :CocoMatrix {}
	public function hide() {}
	public function show() {}
	public function ready() :Boolean {}
	public function flush() {}
	public function cls() {}
	public function clip(x:Float, y:Float, w:Float, h:Float) {}
	public function prepare(viewScale:Float) {}
	public function prepareImage(img:CocoImage) :ICocoImageRenderData {}
	public function prepareClip(clip:CocoClip) {}
	public function apply(clip:CocoClip, keyFrame:CocoKeyFrame, matrix:CocoMatrix) {}
	private function hideClipCanvas(clip:CocoClip) {}
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer) {}
	public function drawMaskBegin() {}
	public function drawMaskEnd(invert:Boolean) {}
	public function drawBoundingBox(clip:CocoClip) {}
	public function Destructor() {}
	public function Constructor(ctx:CanvasRenderingContext2D, css3:Boolean) {}
	private  var c2d :CanvasRenderingContext2D;
	private  var __modelViewMatrix :CocoMatrix;
	private  var __projectionMatrix :CocoMatrix;
	private  var __css3 :Boolean;
	public  var __className :String;
} //CocoRenderContext2D

class CocoRenderContextGL
{
	public function getGLContext() :WebGLRenderingContext {}
	public function get2DContext() :CanvasRenderingContext2D {}
	public function getDisplayWidth() :Float {}
	public function getDisplayHeight() :Float {}
	public function getBufferWidth() :Float {}
	public function getBufferHeight() :Float {}
	public function getModelViewMatrix() :CocoMatrix {}
	public function getProjectionMatrix() :CocoMatrix {}
	public function hide() {}
	public function show() {}
	public function ready() :Boolean {}
	public function flush() {}
	public function apply(clip:CocoClip, F:CocoKeyFrame, matrix:CocoMatrix) {}
	public function cls() {}
	public function clip(x:Float, y:Float, w:Float, h:Float) {}
	public function prepare(viewScale:Float) {}
	public function prepareImage(img:CocoImage) :ICocoImageRenderData {}
	public function prepareClip(clip:CocoClip) {}
	private function update(m:CocoMatrix, ul:WebGLUniformLocation) {}
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer) {}
	private function setFilter(filter:Integer) :Boolean {}
	public function drawMaskBegin() {}
	public function drawMaskEnd(invert:Boolean) {}
	public function drawBoundingBox(clip:CocoClip) {}
	public function Destructor() {}
	public function Constructor(ctx:WebGLRenderingContext) {}
	private  var gl :WebGLRenderingContext;
	private  var __modelViewMatrix :CocoMatrix;
	private  var __projectionMatrix :CocoMatrix;
	private  var __projectionMatrix2D :CocoMatrix;
	private  var __viewportVector :CocoVector;
	private  var maskDraw :Boolean;
	private  var activeShader :CocoShaderCommon;
	private  var shaderSimple :Array<CocoShaderSimple>;
	private  var shaderSimpleWithAlpha :Array<CocoShaderSimpleWithAlpha>;
	private  var shaderSaturationWithAlpha :Array<CocoShaderSaturationWithAlpha>;
	private  var shaderParallaxHor :Array<CocoShaderParallaxHor>;
	private  var shaderBoundingBox :CocoShaderBoundingBox;
	public  var __className :String;
} //CocoRenderContextGL

class CocoShader
{
	public function init(gl:WebGLRenderingContext) {}
	public function quit(gl:WebGLRenderingContext) {}
	public function begin(gl:WebGLRenderingContext) {}
	public function end(gl:WebGLRenderingContext) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var vertex_shader :String;
	public  var fragment_shader :String;
	public  var program :WebGLProgram;
	public  var __className :String;
} //CocoShader

class CocoShaderBoundingBox : CocoShader
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix) {}
	public function quit(gl:WebGLRenderingContext) {}
	public function begin(gl:WebGLRenderingContext) {}
	public function end(gl:WebGLRenderingContext) {}
	public function draw(gl:WebGLRenderingContext, data:Float32Array) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var vbo :WebGLBuffer;
	public  var iVecCoords :Integer;
	public  var uProjMat :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderBoundingBox

class CocoShaderCommon : CocoShader
{
	public function init(gl:WebGLRenderingContext) {}
	public function begin(gl:WebGLRenderingContext) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function drawFrame(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function end(gl:WebGLRenderingContext) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var iTexCoords :Integer;
	public  var iVecCoords :Integer;
	public  var uProjMat :WebGLUniformLocation;
	public  var uMVMat :WebGLUniformLocation;
	public  var uSprFrame :WebGLUniformLocation;
	public  var uSprSize :WebGLUniformLocation;
	public  var uSprFlip :WebGLUniformLocation;
	public  var uSampler :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderCommon

class CocoShaderSimple : CocoShaderCommon
{
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var __className :String;
} //CocoShaderSimple

class CocoShaderSimpleWithAlpha : CocoShaderCommon
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var uAlpha :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderSimpleWithAlpha

class CocoShaderSaturationWithAlpha : CocoShaderCommon
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var uColor :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderSaturationWithAlpha

class CocoShaderParallaxHor : CocoShaderCommon
{
	public function init(gl:WebGLRenderingContext) {}
	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix, viewportVector:CocoVector) {}
	public function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame) {}
	public function Destructor() {}
	public function Constructor(discard:Boolean) {}
	public  var uTextureSize :WebGLUniformLocation;
	public  var uDelta :WebGLUniformLocation;
	public  var uViewport :WebGLUniformLocation;
	public  var __className :String;
} //CocoShaderParallaxHor

class CocoTextStyle
{
	public function Destructor() {}
	public function Constructor(ff:String, fsp:Integer, fs:String, fw:String, u:Boolean, r:Integer, g:Integer, b:Integer, a:Integer, br:Integer, bg:Integer, bb:Integer, ba:Integer) {}
	public  var fontFamily :String;
	public  var fontSizePixels :Integer;
	public  var fontStyle :String;
	public  var fontWeight :String;
	public  var underline :Boolean;
	public  var color :Array<Integer>;
	public  var bgcolor :Array<Integer>;
	public  var __className :String;
} //CocoTextStyle

class CocoText
{
	public function npo2(i:Integer) :Integer {}
	public function init(width:Integer, height:Integer) {}
	public function drawSimpleText(ctx:CanvasRenderingContext2D, text:String, FontName:String, FontSizePx:Integer, FontBold:Boolean, FontItalic:Boolean, FontUnderline:Boolean, FontColor:Color, x:Float, y:Float, width:Float, height:Float, halign:Float, valign:Float, FontShadowX:Integer, FontShadowY:Integer, FontBlur:Integer, FontShadowColor:Color) {}
	public function wrap(width:Integer) {}
	public function wrapSimple(width:Integer, fontStyle:String) {}
	public function drawSimple(ctx:CanvasRenderingContext2D, fontStyle:String, underline:Boolean, color:String, x:Float, y:Float, width:Float, height:Float, halign:Float, valign:Float) {}
	public function draw(width:Float, height:Float, halign:Float, valign:Float, bgR:Integer, bgG:Integer, bgB:Integer, bgA:Integer) :String {}
	public function Destructor() {}
	public function Constructor() {}
	public static  var ctx :CanvasRenderingContext2D;
	public  var str :String;
	public  var styles :Array<CocoTextStyle>;
	public  var indices :Array<Integer>;
	public  var mappings :Array<Integer>;
	public  var lineBreaks :Array<Integer>;
	public  var lineWidths :Array<Float>;
	public  var lineHeights :Array<Float>;
	public  var totalHeight :Float;
	public  var lineSpacing :Float;
	public  var __className :String;
} //CocoText

class CocoTextBlock
{
	public function SetTextRect(left:Float, top:Float, width:Float, height:Float) {}
	public function toImage(selected:Boolean, scale:Float) :CocoImage {}
	public function Destructor() {}
	public function Constructor(Text:String, align:COCO_CONTROL_ANCHOR_ENUM) {}
	public  var text :String;
	public  var multiline :Boolean;
	public  var parent :CocoClip;
	public  var Left :Float;
	public  var Top :Float;
	public  var Width :Float;
	public  var Height :Float;
	public  var anchor :COCO_CONTROL_ANCHOR_ENUM;
	public  var fontColor :Color;
	public  var fontColorSel :Color;
	public  var fontName :String;
	public  var fontSize :Float;
	public  var fontBold :Boolean;
	public  var fontItalic :Boolean;
	public  var fontUnderline :Boolean;
	public  var fontShadowX :Integer;
	public  var fontShadowY :Integer;
	public  var fontBlur :Integer;
	public  var fontShadowColor :Color;
	public  var fontShadowColorSel :Color;
	public  var __className :String;
} //CocoTextBlock

class CocoAudio
{
	public function reset() {}
	public function tick() {}
	public function play() {}
	public function pause() {}
	public function stop() {}
	public function duration() :Float {}
	public function paused() :Boolean {}
	public function ended() :Boolean {}
	public function getCurrentTime() :Float {}
	public function setCurrentTime(t:Float) {}
	public function Destructor() {}
	public function Constructor(url:String, autoplay:Boolean, loops:Integer) {}
	public static  var __muted :Boolean;
	public  var src :String;
	public  var audio :Audio;
	public  var autoplay :Boolean;
	public  var loops :Integer;
	private  var __firstPlayed :Boolean;
	private  var __loopCount :Integer;
	public  var __className :String;
} //CocoAudio

class FACEBOOK_LOGIN
{
	public function toJSON() :String {}
	public var id :String;
	public var email :String;
	public var first_name :String;
	public var gender :String;
	public var last_name :String;
	public var link :String;
	public var locale :String;
	public var name :String;
	public var timezone :Float;
	public var updated_time :String;
	public var verified :Boolean;
	public var image :CocoImage;
	public var image_is_silhouette :Boolean;
	public var image_url :String;
	public var image_b64 :String;
} //FACEBOOK_LOGIN

class CocoFacebook
{
	public function Init(AppID:Integer) {}
	public function CreateDummyData() {}
	public function Login() {}
	public function isUserLoggedOn() :Boolean {}
	public function Like(URL:String) :Boolean {}
	public function Post(toUserID:String, URL:String) :Boolean {}
	public function Share(URL:String) :Boolean {}
	public function Invite(message:String) :Boolean {}
	public function __Facebook_Login_Callback(response:FACEBOOK_LOGIN) {}
	public function __Facebook_Action_Callback(success:Boolean) {}
	public function Ready() :Boolean {}
	public function Success() :Boolean {}
	public function Destructor() {}
	public function Constructor() {}
	public static  var DebugMode :Boolean;
	public static  var Permissions :String;
	public static  var ImageSize :Integer;
	public static  var TextureScale :Float;
	public static  var ImagePadding :Float;
	public static  var ImageBkColor :String;
	public static  var AppID :Integer;
	public static  var UserData :FACEBOOK_LOGIN;
	public static  var UserDenied :Boolean;
	private static  var __ready :Boolean;
	private static  var __success :Boolean;
	private static  var __tempImage :Image;
	public  var __className :String;
} //CocoFacebook

class CocoJSON
{
	public function read(dot:String) :String {}
	public function Destructor() {}
	public function Constructor(json:String) {}
	private  var json :Array<Object>;
	public  var __className :String;
} //CocoJSON

class CocoHttpRequest
{
	public function Ready() :Boolean {}
	public function Success() :Boolean {}
	public function responseText() :String {}
	public function Destructor() {}
	public function Constructor() {}
	public function open(method:String, url:String, async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send(data:String) {}
	public function send$1(data:ArrayBufferView) {}
	public function send$2() {}
	public function abort() {}
	public function getAllResponseHeaders() :String {}
	public function getResponseHeader(header:String) :String {}
	public  var xhttp :XMLHttpRequest;
	public  var __className :String;
} //CocoHttpRequest

class CocoUIView : CocoClip
{
	public function move(x:Float, y:Float, width:Float, height:Float) {}
	public function move$1(x:Float, y:Float) {}
	public function size(width:Float, height:Float) {}
	public function bringToFront() {}
	public function sendToBack() {}
	public function RefreshLayout(parent:CocoUIView) {}
	public function invalidate() {}
	public function addChild(clipInstance:CocoClip) :CocoClip {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __form :CocoUIFormView;
	public  var Form :CocoUIFormView;
	protected  var __enabled :Boolean;
	protected  var __invalidated :Boolean;
	public  var Name :String;
	public  var Enabled :Boolean;
	public  var Visible :Boolean;
	public  var Width :Float;
	public  var Height :Float;
	public  var Left :Float;
	public  var Top :Float;
	public  var Bounds :CocoRect;
	public  var __className :String;
} //CocoUIView

class COCO_UIFORM_ANIMATION
{
	public var SHOW_NORMAL :COCO_UIFORM_ANIMATION;
	public var SHOW_NEXT :COCO_UIFORM_ANIMATION;
	public var SHOW_PREVIOUS :COCO_UIFORM_ANIMATION;
} //COCO_UIFORM_ANIMATION

class CocoAppController : CocoClip
{
	public function addForm(Form:CocoUIFormView) :CocoUIFormView {}
	public function showForm(Form:CocoUIFormView, animation:COCO_UIFORM_ANIMATION) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor(Name:String, scene:CocoScene) {}
	public  var NavBar :CocoUINavBar;
	public  var ActiveForm :CocoUIFormView;
	public  var Forms :Array<CocoUIFormView>;
	public  var __className :String;
} //CocoAppController

class CocoUIControl : CocoUIView
{
	public function RefreshLayout(parent:CocoUIView) {}
	public function CalcHeight() :Float {}
	public function SetMargins(left:Float, right:Float, top:Float, bottom:Float) {}
	public function SetPaddings(left:Float, right:Float, top:Float, bottom:Float) {}
	public function __CocoUIControl_OnTouchStart(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean {}
	public function __CocoUIControl_OnTouchEnd(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean {}
	public function __CocoUIControl_Graphic_OnClick(sender:CocoClip, e:CocoEvent) :Boolean {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function ComposeControl() {}
	public function NewLayerFromImage(frameIndex:Integer, image:CocoImage, x:Float, y:Float, handleEvents:Boolean) :CocoClip {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public var OnGlyphClick :CocoUIControlOnGlyphClickEvent;
	public var OnChevronClick :CocoUIControlOnChevronClickEvent;
	protected  var __selectable :Boolean;
	protected  var __selected :Boolean;
	protected  var __selectionWaitTickCycles :Integer;
	public  var Selectable :Boolean;
	public  var Selected :Boolean;
	protected  var __marginLeft :Float;
	protected  var __marginRight :Float;
	protected  var __marginTop :Float;
	protected  var __marginBottom :Float;
	public  var MarginLeft :Float;
	public  var MarginRight :Float;
	public  var MarginTop :Float;
	public  var MarginBottom :Float;
	protected  var __paddingLeft :Float;
	protected  var __paddingRight :Float;
	protected  var __paddingTop :Float;
	protected  var __paddingBottom :Float;
	public  var PaddingLeft :Float;
	public  var PaddingRight :Float;
	public  var PaddingTop :Float;
	public  var PaddingBottom :Float;
	public  var PaddingWidth :Float;
	public  var PaddingHeight :Float;
	protected  var __borderStyle :COCO_CONTROL_BORDER_STYLE_ENUM;
	protected  var __borderRadius :Float;
	protected  var __borderColor :Color;
	protected  var __borderColorSel :Color;
	public  var BorderStyle :COCO_CONTROL_BORDER_STYLE_ENUM;
	public  var BorderRadius :Float;
	public  var BorderColor :Color;
	public  var BorderColorSel :Color;
	protected  var __backgroundGradient :Gradient;
	protected  var __backgroundGradientSel :Gradient;
	public  var BackgroundGradient :Gradient;
	public  var BackgroundGradientSel :Gradient;
	protected  var __skinImage :String;
	protected  var __skinImageSel :String;
	public  var SkinImage :String;
	public  var SkinImageSel :String;
	protected  var __glyphImage :String;
	protected  var __glyphImageSel :String;
	protected  var __glyphLeft :Float;
	protected  var __glyphTop :Float;
	protected  var __glyphEvents :Boolean;
	private  var __glyphClip :CocoClip;
	private  var __glyphSelClip :CocoClip;
	public  var GlyphImage :String;
	public  var GlyphImageSel :String;
	public  var GlyphLeft :Float;
	public  var GlyphTop :Float;
	public  var GlyphEvents :Boolean;
	protected  var __chevronImage :String;
	protected  var __chevronImageSel :String;
	protected  var __chevronLeft :Float;
	protected  var __chevronTop :Float;
	protected  var __chevronEvents :Boolean;
	private  var __chevronClip :CocoClip;
	private  var __chevronSelClip :CocoClip;
	public  var ChevronImage :String;
	public  var ChevronImageSel :String;
	public  var ChevronLeft :Float;
	public  var ChevronTop :Float;
	public  var ChevronEvents :Boolean;
	protected  var __texts :Array<CocoTextBlock>;
	public  var __className :String;
} //CocoUIControl

class CocoUIControlOnGlyphClickEvent : CocoEvent
{
} //CocoUIControlOnGlyphClickEvent

class CocoUIControlOnChevronClickEvent : CocoEvent
{
} //CocoUIControlOnChevronClickEvent

class CocoUIFormView : CocoUIView
{
	public function moveScrollView(left:Float, top:Float, width:Float, height:Float) {}
	public function addInlineControl(ctl:CocoUIControl) :CocoUIControl {}
	public function addFloatingControl(ctl:CocoUIControl, anchor:COCO_CONTROL_ANCHOR_ENUM) :CocoUIControl {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor(name:String, scene:CocoScene) {}
	private  var __scrollView :CocoUIScrollView;
	public  var __className :String;
} //CocoUIFormView

class CocoUIScrollView : CocoUIView
{
	public function getKeyFrame() :CocoKeyFrame {}
	public function inlineHeight() :Float {}
	public function resetSelection() {}
	public function addChild(ctl:CocoUIControl) :CocoUIControl {}
	public function RefreshLayout(parent:CocoUIView) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function __CocoUIScrollView_OnTouchStart(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean {}
	public function __CocoUIScrollView_OnTouchMove(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean {}
	public function __CocoUIScrollView_OnTouchEnd(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean {}
	public function Destructor() {}
	public function Constructor(name:String, scene:CocoScene) {}
	private  var __scrollLastTime :Time;
	private  var __scrollFirstPointY :Float;
	private  var __scrollLastPointY :Float;
	private  var __scrollSpeedY :Float;
	private  var __minY :Float;
	private  var __maxY :Float;
	private  var __bounceY :Boolean;
	private  var __scrollContainer :CocoClip;
	private  var __scrollDeceleration :Float;
	private  var __scrollSpringTension :Float;
	public  var ScrollDeceleration :Float;
	public  var ScrollSpringTension :Float;
	public  var __className :String;
} //CocoUIScrollView

class CocoUIButton : CocoUIControl
{
	public function RefreshLayout(parent:CocoUIView) {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var __caption :CocoTextBlock;
	public  var Caption :String;
	public  var CaptionAlign :COCO_CONTROL_ANCHOR_ENUM;
	public  var CaptionFontName :String;
	public  var CaptionFontSize :Float;
	public  var CaptionFontBold :Boolean;
	public  var CaptionFontItalic :Boolean;
	public  var CaptionFontUnderline :Boolean;
	public  var CaptionFontShadowX :Integer;
	public  var CaptionFontShadowY :Integer;
	public  var CaptionFontBlur :Integer;
	public  var CaptionFontColorSel :Color;
	public  var CaptionFontShadowColorSel :Color;
	public  var CaptionFontColor :Color;
	public  var CaptionFontShadowColor :Color;
	public  var __className :String;
} //CocoUIButton

class CocoUICheckBox : CocoUIControl
{
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var __className :String;
} //CocoUICheckBox

class CocoUIComboBox : CocoUIControl
{
	public function RefreshLayout(parent:CocoUIView) {}
	public function __CocoUITextEdit_OnClick(sender:CocoEventSource, e:CocoEvent) :Boolean {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var __text :CocoTextBlock;
	public  var __prompt :CocoTextBlock;
	public  var Text :String;
	public  var TextFontName :String;
	public  var TextFontSize :Float;
	public  var TextFontBold :Boolean;
	public  var TextFontItalic :Boolean;
	public  var TextFontUnderline :Boolean;
	public  var TextFontShadowX :Integer;
	public  var TextFontShadowY :Integer;
	public  var TextFontBlur :Integer;
	public  var TextFontColorSel :Color;
	public  var TextFontShadowColorSel :Color;
	public  var TextFontColor :Color;
	public  var TextFontShadowColor :Color;
	public  var Prompt :String;
	public  var PromptFontName :String;
	public  var PromptFontSize :Float;
	public  var PromptFontBold :Boolean;
	public  var PromptFontItalic :Boolean;
	public  var PromptFontUnderline :Boolean;
	public  var PromptFontShadowX :Integer;
	public  var PromptFontShadowY :Integer;
	public  var PromptFontBlur :Integer;
	public  var PromptFontColorSel :Color;
	public  var PromptFontShadowColorSel :Color;
	public  var PromptFontColor :Color;
	public  var PromptFontShadowColor :Color;
	public  var __className :String;
} //CocoUIComboBox

class CocoUILabel : CocoUIControl
{
	public function RefreshLayout(parent:CocoUIView) {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var __caption :CocoTextBlock;
	public  var Caption :String;
	public  var CaptionAlign :COCO_CONTROL_ANCHOR_ENUM;
	public  var CaptionMultiline :Boolean;
	public  var CaptionFontName :String;
	public  var CaptionFontSize :Float;
	public  var CaptionFontBold :Boolean;
	public  var CaptionFontItalic :Boolean;
	public  var CaptionFontUnderline :Boolean;
	public  var CaptionFontShadowX :Integer;
	public  var CaptionFontShadowY :Integer;
	public  var CaptionFontBlur :Integer;
	public  var CaptionFontColorSel :Color;
	public  var CaptionFontShadowColorSel :Color;
	public  var CaptionFontColor :Color;
	public  var CaptionFontShadowColor :Color;
	public  var __className :String;
} //CocoUILabel

class CocoUINavBar : CocoUIControl
{
	public function RefreshLayout(parent:CocoUIView) {}
	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer) {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var __caption :CocoTextBlock;
	public  var Caption :String;
	public  var CaptionAlign :COCO_CONTROL_ANCHOR_ENUM;
	public  var CaptionFontName :String;
	public  var CaptionFontSize :Float;
	public  var CaptionFontBold :Boolean;
	public  var CaptionFontItalic :Boolean;
	public  var CaptionFontUnderline :Boolean;
	public  var CaptionFontShadowX :Integer;
	public  var CaptionFontShadowY :Integer;
	public  var CaptionFontBlur :Integer;
	public  var CaptionFontColorSel :Color;
	public  var CaptionFontShadowColorSel :Color;
	public  var CaptionFontColor :Color;
	public  var CaptionFontShadowColor :Color;
	public  var __className :String;
} //CocoUINavBar

class CocoUIPictureList : CocoUIButton
{
	public function Destructor() {}
	public function Constructor(Name:String) {}
	public  var __className :String;
} //CocoUIPictureList

class CocoUITabBar : CocoUIControl
{
	public function Composer() {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var __className :String;
} //CocoUITabBar

class CocoUITextEdit : CocoUIControl
{
	public function RefreshLayout(parent:CocoUIView) {}
	public function __CocoUITextEdit_OnClick(sender:CocoEventSource, e:CocoEvent) :Boolean {}
	public function Destructor() {}
	public function Constructor(name:String) {}
	public  var __text :CocoTextBlock;
	public  var __prompt :CocoTextBlock;
	public  var Text :String;
	public  var TextFontName :String;
	public  var TextFontSize :Float;
	public  var TextFontBold :Boolean;
	public  var TextFontItalic :Boolean;
	public  var TextFontUnderline :Boolean;
	public  var TextFontShadowX :Integer;
	public  var TextFontShadowY :Integer;
	public  var TextFontBlur :Integer;
	public  var TextFontColorSel :Color;
	public  var TextFontShadowColorSel :Color;
	public  var TextFontColor :Color;
	public  var TextFontShadowColor :Color;
	public  var Prompt :String;
	public  var PromptFontName :String;
	public  var PromptFontSize :Float;
	public  var PromptFontBold :Boolean;
	public  var PromptFontItalic :Boolean;
	public  var PromptFontUnderline :Boolean;
	public  var PromptFontShadowX :Integer;
	public  var PromptFontShadowY :Integer;
	public  var PromptFontBlur :Integer;
	public  var PromptFontColorSel :Color;
	public  var PromptFontShadowColorSel :Color;
	public  var PromptFontColor :Color;
	public  var PromptFontShadowColor :Color;
	public  var __className :String;
} //CocoUITextEdit

class TestDataStream
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //TestDataStream

class TestOutsourcer
{
	public function work() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //TestOutsourcer

class TestIntegrator
{
	public function Destructor() {}
	public function Constructor() {}
	private function work() {}
	private  var delegator :TestOutsourcer;
	public  var __className :String;
} //TestIntegrator

class TestIntegratorClient
{
	public function Destructor() {}
	public function Constructor() {}
	private  var integrator :TestIntegrator;
	public  var __className :String;
} //TestIntegratorClient

class TestHTTP
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //TestHTTP

class ITest1
{
	public function foo() {}
} //ITest1

class ITest2 : ITest1
{
	public function goo() {}
} //ITest2

class ITest3
{
	public function zoo() {}
} //ITest3

class ClassTestInterfaces
{
	public function foo() {}
	public function goo() {}
	public function zoo() {}
	public function interface_test1(obj:ITest1) {}
	public function interface_test2(obj:ITest2) {}
	public function interface_test3(obj:ITest3) {}
	public function interface_class(obj:ClassTestInterfaces) {}
	public function interface_tests() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //ClassTestInterfaces

class TestPublishedStruct
{
	public function toJSON() :String {}
	public var pString :String;
	public var pInteger :Integer;
	public var pFloat :Float;
	public var pCocoClip :CocoClip;
	public var pTestPublished :TestPublished;
} //TestPublishedStruct

class TestPublished : CocoClip
{
	public function Destructor() {}
	public function Constructor(image:CocoImage) {}
	public  var pString :String;
	public  var pInteger :Integer;
	public  var pFloat :Float;
	public  var pStruct :TestPublishedStruct;
	public  var pCocoClip :CocoClip;
	public  var pTestPublished :TestPublished;
	public  var pArrayInteger :Array<Integer>;
	public  var pArrayCocoClip :Array<CocoClip>;
	public  var __className :String;
} //TestPublished

class TestPublishedDerived : TestPublished
{
	public function Destructor() {}
	public function Constructor(image:CocoImage) {}
	public  var mString :String;
	public  var mInteger :Integer;
	public  var mFloat :Float;
	public  var mStruct :TestPublishedStruct;
	public  var mCocoClip :CocoClip;
	public  var mTestPublished :TestPublished;
	public  var mArrayInteger :Array<Integer>;
	public  var mArrayCocoClip :Array<CocoClip>;
	public  var __className :String;
} //TestPublishedDerived

class Class1
{
	public function test_virtual() {}
	public function test() {}
	public function public_static_function(b:String) :String {}
	private function private_static_function(b:String) :String {}
	protected function protected_static_function(b:String) :String {}
	public function public_function(b:String) :String {}
	private function private_function(b:String) :String {}
	protected function protected_function(b:String) :String {}
	public function public_overload() :String {}
	public function public_overload$1(arg:String) :String {}
	public function public_overload$2(arg1:String, arg2:String) :String {}
	private function private_overload() :String {}
	private function private_overload$1(arg:String) :String {}
	private function private_overload$2(arg1:String, arg2:String) :String {}
	protected function protected_overload() :String {}
	protected function protected_overload$1(arg:String) :String {}
	protected function protected_overload$2(arg1:String, arg2:String) :String {}
	public function Destructor() {}
	public function Constructor(arg1:String, arg2:String) {}
	public  var public_var :String;
	private  var private_var :String;
	protected  var protected_var :String;
	public  var public_const :String;
	private  var private_const :String;
	protected  var protected_const :String;
	public static  var static_public_var :String;
	private static  var static_private_var :String;
	protected static  var static_protected_var :String;
	private  var __public_property :String;
	private  var __private_property :String;
	private  var __protected_property :String;
	private static  var __public_static_property :String;
	private static  var __private_static_property :String;
	private static  var __protected_static_property :String;
	public var public_state :State;
	private var private_state :State;
	protected var protected_state :State;
	public  var public_property :String;
	private  var private_property :String;
	protected  var protected_property :String;
	public static  var public_static_property :String;
	private static  var private_static_property :String;
	protected static  var protected_static_property :String;
	public  var __className :String;
} //Class1

class Class2 : Class1
{
	public function test() {}
	public function cls2_public_function() :String {}
	public function Destructor() {}
	public function Constructor(arg1:String) {}
	public  var x :String;
	private  var y :String;
	protected  var z :String;
	public  var __className :String;
	public static  var public_static_property :String;
	private static  var private_static_property :String;
	protected static  var protected_static_property :String;
} //Class2

class Class3 : Class2
{
	public function test_virtual() {}
	public function test() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
	public static  var public_static_property :String;
	private static  var private_static_property :String;
	protected static  var protected_static_property :String;
} //Class3

class TestSelf1
{
	public function save_this() {}
	public function Destructor() {}
	public function Constructor() {}
	public  var saved :Object;
	public  var __className :String;
} //TestSelf1

class TestSelf2 : TestSelf1
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //TestSelf2

class TestSelf3 : TestSelf2
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //TestSelf3

class TestThis
{
	public function Destructor() {}
	public function Constructor() {}
	public  var __className :String;
} //TestThis

class GameEngine : CocoEngine
{
	public function Destructor() {}
	public function Constructor() {}
	public  var scene :CocoScene;
	public  var app :CocoAppController;
	public var STATE_START_APP :State;
	public  var __className :String;
} //GameEngine

class ReservationsForm : CocoUIFormView
{
	private function addLookup(Caption:String, FieldName:String, IsLookup:Boolean, IsComboBox:Boolean) {}
	public function btnSubmit_OnClick(sender:CocoUIButton, e:CocoClipOnClickEvent) :Boolean {}
	public function Destructor() {}
	public function Constructor(name:String, scene:CocoScene) {}
	private  var btnSubmit :CocoUIButton;
	private  var btnDelete :CocoUIButton;
	public  var __className :String;
} //ReservationsForm

class NewAnimation : CocoScene
{
	public function Destructor() {}
	public function Constructor(engine:CocoEngine) {}
	public  var __className :String;
} //NewAnimation

