"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ______            _
//	  / ____/___  _________  / ____/___  ____ _(_)___  ___
//	 / /   / __ \/ ___/ __ \/ __/ / __ \/ __ `/ / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /___/ / / / /_/ / / / / /  __/
//	\____/\____/\___/\____/_____/_/ /_/\__, /_/_/ /_/\___/
//	                                  /____/
// ==================================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////
state class CocoEngine
{
	// To avoid frame skipping and to enable time-debugging
	// we need to enforce a fixed tick time interval. The
	// constant we choose is for 60 frames per second but
	// we must use division in order to set the float properly.
	public const TICK_TIME:Time = (1000.0/60.0);
	public var debugbreak:Boolean;
	private var __currentState:State;
	private var __nextState:State;
	private var __tickables:Array<ITickable>;
	public var __clock:Time;
	public var __ctx:ICocoRenderContext;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__ctx = CocoRenderContext.createContext();
		__currentState = null;
		__clock = 0;
		debugbreak=false;
		__attachDevice();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __ctx;
		delete __clicked;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function addTickListener(tickable:ITickable)
	{
		__tickables.push(tickable);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getTickableIndex(tickable:ITickable) :Integer
	{
		if(tickable)
		{
			for(var i:Integer =__tickables.size()-1; i>=0; i--)
			{
				if(__tickables[i]==tickable)
				{
					return i;
				}
			}
		}
		return -1;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function removeTickListener(tickable:ITickable)
	{
		var index:Integer = getTickableIndex(tickable);
		if(index!=-1)
			__tickables.splice(index,1);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function setNextState(s:State)
	{
		__nextState = s;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function run(time:Time)
	{
		if(!__currentState && !__nextState) return;

		if(__nextState!=null)
		{
			if(__currentState) __currentState.exit();
			__currentState = __nextState;
			__nextState = null;
			trace("\n@@STATE " + __currentState.__name);
			__clicked.clear();
			if(__currentState) __currentState.enter();
		}

		if(__currentState)
		{
			var i:Integer;
			for(i=0;i<__clicked.size();i++)
			{
				var clip:CocoClip = __clicked[i];
				//clip.dispatchEvent(clip.OnClick);
			}
			__currentState.tick(__clock);
		}
		__clicked.clear();

		if(__nextState==null && __currentState!=null)
		{
			__ctx.cls();
			__currentState.paint(__ctx, __clock);
			__ctx.flush();
		}

		__deviceMessageQueue.clear();

		// To avoid frame skipping we enfore a fixed time interval of 16.66~ ms.
		__clock += TICK_TIME;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __debug_trace(scene:CocoScene, clip:CocoClip, message: String)
	{
		/*
		if(scene && clip)
		{
			var rf:Float = scene.__root.__childWithMaxTimelineDuration.__timeline.__currentFrameIndex;
			var rt:Float = scene.__root.__currentTime;
			var cf:Float = clip.__timeline.__currentFrameIndex;
			var ct:Float = clip.__currentTime;

			message = message +
					  " R(f:" + rf.toFixed(2) +
					  ", t:" + rt.toFixed(2) +
					  ", L:" + scene.__root.__loops.toFixed(2) +
					  ")\tC(f:" + cf.toFixed(2) +
					  ", t:" + ct.toFixed(2) +
					  ", L:" + clip.__loops.toFixed(2) +
					  ", P:" + String(clip.__timeline.__paused) +
					  ")\tstate: " + __currentState.__name +
					  "\tclip: " + scene.__sceneName + clip.__clipPath;

		}
		trace(message);
		*/
	}

	// ==================================================================================================================================
	//	    ____                  __     __  __                _____
	//	   /  _/___  ____  __  __/ /_   / / / /___ _____  ____/ / (_)___  ____ _
	//	   / // __ \/ __ \/ / / / __/  / /_/ / __ `/ __ \/ __  / / / __ \/ __ `/
	//	 _/ // / / / /_/ / /_/ / /_   / __  / /_/ / / / / /_/ / / / / / / /_/ /
	//	/___/_/ /_/ .___/\__,_/\__/  /_/ /_/\__,_/_/ /_/\__,_/_/_/_/ /_/\__, /
	//	         /_/                                                   /____/
	// ==================================================================================================================================

	private var __deviceMessageQueue:Array<DEVICE_MESSAGE>;
	private var __clicked:Array<CocoClip>;
	private var __device_message_index:Integer;
	private var __track_mouse:Boolean;

	private function __attachDevice()
	{
		__track_mouse = false;
		__device_message_index = 0;
		__deviceMessageQueue = new Array<DEVICE_MESSAGE>;
		__clicked = new Array<CocoClip>;

		if(global.__native)
		{
			window.addEventListener("touchstart", __translateDeviceMessage);
			window.addEventListener("touchmove", __translateDeviceMessage);
			window.addEventListener("touchend", __translateDeviceMessage);
		}
		else
		{
			window.addEventListener("mousedown", __translateDeviceMessage);
			window.addEventListener("mousemove", __translateDeviceMessage);
			window.addEventListener("mouseup", __translateDeviceMessage);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __translateDeviceMessage(e:HTMLEvent)
	{
		// Convert an HTMLEvent to a DEVICE_MESSAGE structure. DEVICE_MESSAGE is a unified
		// structure for handling asynchronous device events from HTMLWindow object.
		// HTMLWindow is our "device" and in native ports such as iOS, Android, desktop and
		// other pors, HTMLWindow exposes the device capabilities and receives the device
		// events that wraps then isnide an HTMLEvent object.

		var MSG:DEVICE_MESSAGE = null;

		switch(e.type)
		{

		//=============================================================================
		// We need to latch the mouse down/move/up in order to synchronize it properly.

		case "mousedown":
			if(!__track_mouse)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_START;
				MSG.x0 = e.clientX;
				MSG.y0 = e.clientY;
				__track_mouse = true;
			}
			break;

		case "mousemove":
			if(__track_mouse)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_MOVE;
				MSG.x0 = e.clientX;
				MSG.y0 = e.clientY;
			}
			break;

		case "mouseup":
			if(__track_mouse)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_END;
				MSG.x0 = e.clientX;
				MSG.y0 = e.clientY;
				__track_mouse=false;
			}
			break;

		//=============================================================================

		case "touchstart":
			if(!__track_mouse)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_START;
				MSG.x0 = e.touches[0].clientX;
				MSG.y0 = e.touches[0].clientY;
				__track_mouse = true;
			}
			break;

		case "touchmove":
			if(__track_mouse)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_MOVE;
				MSG.x0 = e.touches[0].clientX;
				MSG.y0 = e.touches[0].clientY;
			}
			break;

		case "touchend":
			if(__track_mouse)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_END;
				MSG.x0 = e.touches[0].clientX;
				MSG.y0 = e.touches[0].clientY;
				__track_mouse = false;
			}
			break;
		}

		if(MSG)
		{
			// Add device message in the message queue.
			// ITickable objects will peek and handle
			// messages during the next tick cycle.

			__deviceMessageQueue.push(MSG);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __peekDeviceMessage(mask:DEVICE_MESSAGE_ENUM, first:Boolean) :DEVICE_MESSAGE
	{
		if(first)
			__device_message_index = 0;
		else
			__device_message_index++;

		var L:Integer =__deviceMessageQueue.size();
		if(__device_message_index<L)
		{
			var msg:DEVICE_MESSAGE;
			for(var i:Integer=__device_message_index; i<L; i++)
			{
				msg = __deviceMessageQueue[i];
				if((msg.type & mask)!=0)
				{
					__device_message_index = i;
					msg.peeked = true;
					return msg;
				}
			}
		}
		return null;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __clearDeviceMessageQueue()
	{
		var msg:DEVICE_MESSAGE;
		var L:Integer = __deviceMessageQueue.size();
		for(var i:Integer=L; i<L; i++)
		{
			msg = __deviceMessageQueue[i];
			if(msg.peeked)
				__deviceMessageQueue.splice(i,1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __pushTouched(clip:CocoClip)
	{
		trace("click: " + clip.__instanceName);
		__clicked.push(clip);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function isClicked(check:Array<CocoClip>):Integer
	{
		for(var i:Integer = __clicked.size()-1; i>=0; i--)
			for(var r:Integer = check.size()-1; r>=0; r--)
				if(check[r] == __clicked[i])
					return r;
		return -1;
	}
}
