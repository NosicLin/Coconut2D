/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native
#pragma export_web

// ==================================================================================================================================
//	   ______                _____
//	  / ____/___  _________ / ___/________  ____  ___
//	 / /   / __ \/ ___/ __ \\__ \/ ___/ _ \/ __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ / /__/  __/ / / /  __/
//	\____/\____/\___/\____/____/\___/\___/_/ /_/\___/
//
// ==================================================================================================================================

class CocoScene
{
	// Resources
	public var __sceneName:String;
	public var __imageSymbols:Array<CocoImage>;

	// Fixed View Port
	public var __fps:Float;
	public var __view_width:Float;
	public var __view_height:Float;
	public var __view_pixel_ratio:Float;
	public var __view_scale:Float;

	// Rendering
	public var __root:CocoClip;
	public var __levelParents:Array<CocoClip>;

	public var __ready:Boolean;
	public var __loaded_assets:Float;
	public var __finished:Boolean;

	private reference var m_ctx:ICocoRenderContext;
	private var m_width:Float;
	private var m_height:Float;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		m_width = 0;
		m_height = 0;

		__fps									= 0;
		__sceneName 							= "";
		__view_width							= 0;
		__view_height							= 0;
		__view_pixel_ratio						= 0;
		__view_scale							= 1;
		__root 									= null;
		__ready 								= false;
		__finished								= false;
		__imageSymbols							= new Array<CocoImage>;
		__levelParents							= new Array<CocoClip>;
		__loaded_assets							= 0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __root;

		for(var i:Integer = __imageSymbols.size(); i--;)
		{
			delete __imageSymbols[i];
		}

		delete __imageSymbols;
		delete __levelParents;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getImageSymbol(symbolName:String) :CocoImage
	{
		for(var i:Integer = __imageSymbols.size() - 1; i >= 0; i--)
		{
			if(__imageSymbols[i].symbolName == symbolName)
				return __imageSymbols[i];
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getImageSymbolHeight(symbolName:String):Float
	{
		var img:CocoImage = getImageSymbol(symbolName);
		return img.textureCellHeight / (img.pixelRatio / __view_pixel_ratio);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getClipByPath(ClipPath:String) :CocoClip
	{
		var vPath:Array<String> = ClipPath.split('/');
		var clip:CocoClip = __root;
		for(var i:Integer=1; i<vPath.size(); i++)
		{
			clip = clip.getChildByName(vPath[i]);
			if(!clip)
				return null;
		}
		return clip;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getClipsByClassName(className:String) :Array<CocoClip>
	{
		var arr:Array<CocoClip> = new Array<CocoClip>;
		arr = arr.concat(__root.getChildrenByClassName(className));
		return arr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function newResourceImage(symbolName:String, baseUrl:String) :CocoImage
	{
		if(getImageSymbol(symbolName)) throw "Resource image " + symbolName + " already exists.";
		var img:CocoImage = new CocoImage();
		img.symbolName = symbolName;
		img.baseUrl = baseUrl;
		img.scene = this;
		__imageSymbols.push(img);
		return img;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function prepare(ctx:ICocoRenderContext)
	{
		m_ctx = ctx;
		m_width = engine.device.screenWidth;
		m_height = engine.device.screenHeight;

		if(__view_width > 0 && __view_height > 0)
		{
			__view_scale = Math.min( Float(m_width) / __view_width, Float(m_height) / __view_height);
		}
		else
		{
			__view_scale = engine.device.pixelRatio;
		}

		// Prepare CocoClip and their timelines
		__root.prepare(ctx, this);

		if(!__ready)
		{
			var s:Float = __view_scale * engine.device.pixelRatio / __view_pixel_ratio;
			__root.analyze(s,s);

			var L:Integer = __imageSymbols.size();
			for(var i:Integer = 0; i < L ; i++)
		    {
		    	__imageSymbols[i].load();
		    }
		}

	    ctx.prepare(__view_scale);
	    ctx.clip(m_width/2.0 - (__view_width/2.0) * __view_scale, (m_height/2.0) - (__view_height/2.0) * __view_scale, __view_width*__view_scale, __view_height*__view_scale);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function tick(time:Time)
	{
		if(__root)
			__root.tick(time);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, time:Time)
	{
		if(!resourcesLoaded(ctx))
			return;

		// Orientation change or resize results in change of the drawing surface.
		// Therefore we need to detect such changes and re-initialize the rendering context.
		if(m_width != engine.device.screenWidth || m_height != engine.device.screenHeight)
		{
			prepare(ctx);
		}

		// Paint!
	    if(__root)
	    {
	    	__levelParents.push(__root);
			__root.paint(ctx, this, null, false, 0);
			__levelParents.clear();

			var max:CocoClip = __root.__childWithMaxTimelineDuration;
			if(max && max.__currentFrame && max.__currentFrame.frameIndex == max.__timeline.lastKeyFrame().frameIndex)
			{
				__finished=true;
			}
	    }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function resourcesLoaded(ctx:ICocoRenderContext) :Boolean
	{
		if(!__ready)
		{
			for (var i:Integer=0; i<__imageSymbols.size(); i++)
			{
				var img:CocoImage = __imageSymbols[i];
				if(!img.loaded())
				{
					__loaded_assets = i;
					return false;
				}
			}
			__ready = true;
		}
		__loaded_assets = __imageSymbols.size();
		return __ready;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function loadingProgress():Integer
	{
		var assets:Float = Float(__imageSymbols.size());
		var p:Float = Math.floor((Math.min(__loaded_assets, assets)/assets)*100.0);
		if(p<0) p = 0;
		if(p>100) p = 100;
		return p;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlayByName(LabelName:String)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByName(LabelName, false);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStopByName(LabelName:String)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByName(LabelName, true);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlayByIndex(FrameIndex:Integer)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(FrameIndex, false);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStopyByIndex(FrameIndex:Integer)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(FrameIndex, true);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stop()
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(COCO_STOP_ON_CURRENT_FRAME, true);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function worldX(deviceX:Float):Float
	{
		return (deviceX - m_ctx.getDisplayWidth() / 2.0) / __view_scale;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function worldY(deviceY:Float):Float
	{
		return (deviceY - m_ctx.getDisplayHeight() / 2.0) / __view_scale;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function viewX(worldX:Float):Float
	{
		return worldX + (m_ctx.getDisplayWidth()/2)/__view_scale-(((m_ctx.getDisplayWidth()/__view_scale)-__view_width)/2);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function viewY(worldY:Float):Float
	{
		return worldY + (m_ctx.getDisplayHeight()/2)/__view_scale-(((m_ctx.getDisplayHeight()/__view_scale)-__view_height)/2);
	}

}
