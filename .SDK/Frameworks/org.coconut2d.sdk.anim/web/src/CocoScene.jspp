"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____
//	  / ____/___  _________ / ___/________  ____  ___
//	 / /   / __ \/ ___/ __ \\__ \/ ___/ _ \/ __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ / /__/  __/ / / /  __/
//	\____/\____/\___/\____/____/\___/\___/_/ /_/\___/
//
// ==================================================================================================================================

class CocoScene
{
	// Resources
	public var __sceneName:String;
	public var __imageSymbols:Array<CocoImage>;

	// Fixed View Port
	public var __fps:Float;
	public var __view_width:Float;
	public var __view_height:Float;
	public var __view_pixel_ratio:Float;
	public var __view_scale:Float;

	// Rendering
	public var __root:CocoClip;
	public var __levelParents:Array<CocoClip>;

	public var __ready:Boolean;
	public var __finished:Boolean;


	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__sceneName 							= "";
		__view_width							= 0;
		__view_height							= 0;
		__view_pixel_ratio						= 0;
		__view_scale							= 1;
		__root 									= null;
		__ready 								= false;
		__finished								= false;
		__imageSymbols							= new Array<CocoImage>;
		__levelParents							= new Array<CocoClip>;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __root;

		for(var i:Integer = __imageSymbols.size(); i--;)
		{
			delete __imageSymbols[i];
		}

		delete __imageSymbols;
		delete __levelParents;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getImageSymbol(symbolName:String) :CocoImage
	{
		for(var i:Integer = __imageSymbols.size() - 1; i >= 0; i--)
		{
			if(__imageSymbols[i].symbolName == symbolName)
				return __imageSymbols[i];
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function newResourceImage(symbolName:String, baseUrl:String) :CocoImage
	{
		if(getImageSymbol(symbolName)) throw "Resource image " + symbolName + " already exists.";
		var img:CocoImage = new CocoImage();
		img.symbolName = symbolName;
		img.baseUrl = baseUrl;
		img.scene = this;
		__imageSymbols.push(img);
		return img;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(ctx:ICocoRenderContext)
	{
		__view_scale = __view_width > 0 && __view_height > 0 ? Math.min( Float(ctx.getWidth()) / __view_width, Float(ctx.getHeight()) / __view_height) : window.devicePixelRatio;

		// Prepare CocoClip and their timelines
		__root.prepare(this);

		var L:Integer = __imageSymbols.size();
		for(var i:Integer = 0; i < L ; i++)
	    {
	    	__imageSymbols[i].load();
	    }

	    ctx.prepare(this);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, time:Time)
	{
		if(!resourcesLoaded(ctx))
			return;

	    if(__root)
	    {
	    	__levelParents.push(__root);
			__root.paint(ctx, this, null, false, 0);
			__levelParents.clear();
			var max:CocoClip = __root.__childWithMaxTimelineDuration;
			if(max && max.__currentFrame && max.__currentFrame.frameIndex == max.__timeline.lastKeyFrame().frameIndex)
			{
				__finished=true;
				//__root.reset();
				//__startTime = -1;
			}
	    }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function resourcesLoaded(ctx:ICocoRenderContext) :Boolean
	{
		if(!__ready)
		{
			for (var i:Integer = __imageSymbols.size() - 1; i >= 0; i--)
			{
				var img:CocoImage = __imageSymbols[i];
				if(!img.loaded()) return false;
			}
			trace("Resources loaded.");
			__ready = true;
		}
		return __ready;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlayByName(LabelName:String)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByName(LabelName, false);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStopByName(LabelName:String)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByName(LabelName, true);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlayByIndex(FrameIndex:Integer)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(FrameIndex, false);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStopyByIndex(FrameIndex:Integer)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(FrameIndex, true);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stop()
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(COCO_STOP_ON_CURRENT_FRAME, true);
	}
}
