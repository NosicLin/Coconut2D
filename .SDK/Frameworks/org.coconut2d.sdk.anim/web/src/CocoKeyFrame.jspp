"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 __ __           ______
//	  / ____/___  _________  / //_/__  __  __/ ____/________ _____ ___  ___
//	 / /   / __ \/ ___/ __ \/ ,< / _ \/ / / / /_  / ___/ __ `/ __ `__ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /| /  __/ /_/ / __/ / /  / /_/ / / / / / /  __/
//	\____/\____/\___/\____/_/ |_\___/\__, /_/   /_/   \__,_/_/ /_/ /_/\___/
//	                                /____/
// ==================================================================================================================================

class CocoKeyFrame
{
	public var frameIndex:Integer;
	public var __frameIndex:Float;
	public var frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var handleEvents:Boolean;
	public var visible:Boolean;
	public var filter:Integer;
	public var red:Float;
	public var green:Float;
	public var blue:Float;
	public var alpha:Float;
	public var x:Float;
	public var y:Float;
	public var pivotX:Float;
	public var pivotY:Float;
	public var scaleX:Float;
	public var scaleY:Float;
	public var rotation:Float;
	public var action:CocoAction;
	public var nextState:State;
	public var audio:CocoAudio;
	public var flipH:Boolean;
	public var flipV:Boolean;
	public var spriteSequenceName:String;

	private var __isCloned:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		frameIndex					= 0;
		__frameIndex				= 0;
		frameInterpolation 			= COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN;
		handleEvents 				= false;
		visible						= true;
		filter						= 0;
		x							= 0.0;
		y							= 0.0;
		scaleX						= 1.0;
		scaleY						= 1.0;
		rotation					= 0.0;
		pivotX						= 0.0;
		pivotY						= 0.0;
		red							= 1.0;
		green						= 1.0;
		blue						= 1.0;
		alpha						= 1.0;
		action						= null;
		nextState					= null;
		audio						= null;
		flipH						= false;
		flipV						= false;
		__isCloned					= false;
		spriteSequenceName			= "";
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		if(audio && !__isCloned)
			delete audio;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clone(exact:Boolean) :CocoKeyFrame
	{
	    var c:CocoKeyFrame = new CocoKeyFrame();

		c.filter					= filter;
		c.red						= red;
		c.green						= green;
		c.blue						= blue;
		c.alpha						= alpha;
		c.frameIndex            	= frameIndex;
		c.frameInterpolation    	= frameInterpolation;
		c.handleEvents          	= handleEvents;
		c.pivotX                	= pivotX;
		c.pivotY                	= pivotY;
		c.rotation              	= rotation;
		c.scaleX                	= scaleX;
		c.scaleY                	= scaleY;
		c.visible               	= visible;
		c.x                     	= x;
		c.y                     	= y;
		c.flipH						= flipH;
		c.flipV						= flipV;
 		c.spriteSequenceName		= spriteSequenceName;
		c.__frameIndex				= Float(frameIndex);
 		c.__isCloned				= true;

		if(exact && (action || nextState || audio))
		{
			c.action				= action;
			c.nextState				= nextState;
			c.audio					= audio;
		}

	    return c;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/*
	public function clone(exact:Boolean) :Object
	{
	    var c:Object = {
			filter					: filter,
			red						: red,
			green					: green,
			blue					: blue,
			alpha					: alpha,
			frameIndex            	: frameIndex,
			frameInterpolation    	: frameInterpolation,
			handleEvents          	: handleEvents,
			pivotX                	: pivotX,
			pivotY                	: pivotY,
			rotation              	: rotation,
			scaleX                	: scaleX,
			scaleY                	: scaleY,
			visible               	: visible,
			x                     	: x,
			y                     	: y,
			flipH					: flipH,
			flipV					: flipV,
			spriteSequenceName		: spriteSequenceName,
			__frameIndex			: Float(frameIndex),
			__isCloned				: true
	    };

		if(exact && (action || nextState || audio))
		{
			c.action				= action;
			c.nextState				= nextState;
			c.audio					= audio;
		}

	    return c;
	}
	*/

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
		if(audio)
			audio.reset();
	}
}
