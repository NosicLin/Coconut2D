"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __________                 ____                 __          ______            __            __
//	   /  _/ ____/___  _________  / __ \___  ____  ____/ /__  _____/ ____/___  ____  / /____  _  __/ /_
//	   / // /   / __ \/ ___/ __ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ /   / __ \/ __ \/ __/ _ \| |/_/ __/
//	 _/ // /___/ /_/ / /__/ /_/ / _, _/  __/ / / / /_/ /  __/ /  / /___/ /_/ / / / / /_/  __/>  </ /_
//	/___/\____/\____/\___/\____/_/ |_|\___/_/ /_/\__,_/\___/_/   \____/\____/_/ /_/\__/\___/_/|_|\__/
//
// ==================================================================================================================================

class CocoRenderContext2D implements ICocoRenderContext
{
	// Canvas 2D Rendering Context
	private reference var c2d:CanvasRenderingContext2D;

	// Matrix
	private var __modelViewMatrix:CocoMatrix;
	private var __projectionMatrix:CocoMatrix;
	private var __viewportVector:CocoVector;


	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Constructor(ctx:CanvasRenderingContext2D)
 	{
 		c2d = ctx;

 		__modelViewMatrix = new CocoMatrix();
		__projectionMatrix = new CocoMatrix();
		__viewportVector = new CocoVector();
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Destructor()
 	{
 		delete __modelViewMatrix;
 		delete __projectionMatrix;
 		delete __viewportVector;
 	}

 	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function getGLContext():WebGLRenderingContext
 	{
 		return null;
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function flush()
 	{
 		//__Canvas2DRenderingContext_flush(c2d.canvas.__imageData.data.buffer.__uid, c2d.canvas.__imageData.data.buffer.byteLength, c2d.canvas.__imageData.width, c2d.canvas.__imageData.height);
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getModelViewMatrix():CocoMatrix
	{
		return __modelViewMatrix;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getProjectionMatrix():CocoMatrix
	{
		return __projectionMatrix;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getWidth():Float
	{
		return c2d.canvas.width;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getHeight():Float
	{
		return c2d.canvas.height;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function cls()
	{
		__modelViewMatrix.identity();
		c2d.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		c2d.fillStyle = "#000";
		c2d.fillRect(0.0, 0.0, c2d.canvas.width, c2d.canvas.height);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function ready():Boolean
	{
		return true;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(scene:CocoScene)
	{
		__projectionMatrix.identity();
		__projectionMatrix.translate(c2d.canvas.width / 2.0, c2d.canvas.height / 2.0);
		__projectionMatrix.scale(scene.__view_scale, scene.__view_scale);

		__modelViewMatrix.identity();
		__viewportVector.reset(-(Float(getWidth()) / 2.0) / scene.__view_scale, Float(getWidth()) / 2.0 / scene.__view_scale, Float(getHeight()) / 2.0 / scene.__view_scale, -(Float(getHeight()) / 2.0 / scene.__view_scale));
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareImage(img:CocoImage):ICocoImageRenderData
	{
		var data:CocoImageRenderData2D = new CocoImageRenderData2D();

		var sImg:Image = img.image;
		if(img.scaleX > 0.0 && img.scaleY > 0.0)
		{
			var canvas:HTMLCanvasElement = HTMLCanvasElement(document.createElement("canvas"));
			canvas.width = Math.floor(img.image.naturalWidth * img.scaleX / img.pixelRatio);
			canvas.height = Math.floor(img.image.naturalHeight * img.scaleY / img.pixelRatio);
			trace("Scaling image to " + String(canvas.width) + "x" + String(canvas.height) + " (x" + String(img.scaleX / img.pixelRatio) + ", x" + String(img.scaleY / img.pixelRatio) + ", @" + String(img.pixelRatio) + "): " + img.symbolName);
			var c2d:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));
			c2d.drawImage(img.image, 0.0, 0.0, canvas.width, canvas.height);
			sImg = new Image();
			sImg.load(canvas.toDataURL());
		}

		var w2:Float = img.textureCellWidth / 2.0;
		var h2:Float = img.textureCellHeight / 2.0;
		var texData:Float32Array = null;

		if(img.tileMap)
		{
			img.texSize = new Float32Array([img.tileWidth / img.image.naturalWidth, img.tileHeight / img.image.naturalHeight]);
			var d:Array<Float> = new Array<Float>();
			var tileCountX:Integer = img.tileMap[0];
			var tileMapCols:Integer = img.tileMap[1];
			var tileMapRows:Integer = img.tileMap[2];
			var vCount:Integer = Math.min(tileMapCols, Integer(Math.ceil(img.textureCellWidth / img.tileWidth)));
			var hCount:Integer = Math.min(tileMapRows, Integer(Math.ceil(img.textureCellHeight / img.tileHeight)));
			var tileCount:Integer = 0;
			var paddingSize:Float = img.pixelRatio;
			for(var y:Integer = hCount; y--;)
			{
				for(var x:Integer = vCount; x--;)
				{
					var idx:Integer = img.tileMap[3 + y * tileMapCols + x];
					if(idx == -1) continue;
					var texX:Float = idx % tileCountX;
					var texY:Float = Math.floor(idx / tileCountX);
					texX += (2.0 * texX + 1.0) * paddingSize / img.tileWidth;
					texY += (2.0 * texY + 1.0) * paddingSize / img.tileHeight;
					d.push(texX); d.push(texY); d.push(0.0); d.push(0.0); d.push((x + 0) * img.tileWidth - w2); d.push((y + 0) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(0.0); d.push(1.0); d.push((x + 0) * img.tileWidth - w2); d.push((y + 1) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(1.0); d.push(1.0); d.push((x + 1) * img.tileWidth - w2); d.push((y + 1) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(0.0); d.push(0.0); d.push((x + 0) * img.tileWidth - w2); d.push((y + 0) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(1.0); d.push(1.0); d.push((x + 1) * img.tileWidth - w2); d.push((y + 1) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(1.0); d.push(0.0); d.push((x + 1) * img.tileWidth - w2); d.push((y + 0) * img.tileHeight - h2);
					++tileCount;
				}
			}
			texData = new Float32Array(d);
		}
		else
		{
			img.texSize = new Float32Array([img.textureCellWidth / img.image.naturalWidth, img.textureCellHeight / img.image.naturalHeight]);
			texData = new Float32Array([0.0, 0.0, 0.0, 0.0, -w2, -h2, 0.0, 0.0, 0.0, 1.0, -w2, h2, 0.0, 0.0, 1.0, 0.0, w2, -h2, 0.0, 0.0, 1.0, 1.0, w2, h2]);
		}
		delete texData;

		return data;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame)
	{
		if(!image || !image.image) return;
		c2d.setTransform(__projectionMatrix.__m.rc11, __projectionMatrix.__m.rc12, __projectionMatrix.__m.rc21, __projectionMatrix.__m.rc22, __projectionMatrix.__m.rc41, __projectionMatrix.__m.rc42);
		c2d.transform(__modelViewMatrix.__m.rc11, __modelViewMatrix.__m.rc12, __modelViewMatrix.__m.rc21, __modelViewMatrix.__m.rc22, __modelViewMatrix.__m.rc41, __modelViewMatrix.__m.rc42);
		var sx:Float = (((KF.flipH ? 1.0 : 0.0) + image.textureGrid[frame * 2 + 1]) * image.texSize[0]) * image.image.naturalWidth;
		var sy:Float = (((KF.flipV ? 1.0 : 0.0) + image.textureGrid[frame * 2 + 0]) * image.texSize[1]) * image.image.naturalHeight;
		var sw:Float = image.texSize[0] * Float(image.image.naturalWidth);
		var sh:Float = image.texSize[1] * Float(image.image.naturalHeight);
		var dx:Float = -sw / 2.0;
		var dy:Float = -sh / 2.0;
		var dw:Float = sw;
		var dh:Float = sh;
		c2d.drawImage(image.image, sx, sy, sw, sh, dx, dy, dw, dh);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskBegin()
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskEnd(invert:Boolean)
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawBoundingBox(clip:CocoClip)
	{
	}
}
