"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____            __
//	  / ____/___  _________  / __ \___  _____/ /_
//	 / /   / __ \/ ___/ __ \/ /_/ / _ \/ ___/ __/
//	/ /___/ /_/ / /__/ /_/ / _, _/  __/ /__/ /_
//	\____/\____/\___/\____/_/ |_|\___/\___/\__/
//
// ==================================================================================================================================

struct CocoPoint
{
	x:Float;
	y:Float;
}

struct CocoRect
{
	left:Float;
	top:Float;
	right:Float;
	bottom:Float;
}

struct CocoSkinCacheItem
{
	symbolName:String;
	width:Float;
	height:Float;
	image:CocoImage;
}

struct CocoHVAlign
{
	horiz:Float;
	vert:Float;
}

// ==================================================================================================================================
//	   ______                 ______                 __    _
//	  / ____/___  _________  / ____/________ _____  / /_  (_)_________
//	 / /   / __ \/ ___/ __ \/ / __/ ___/ __ `/ __ \/ __ \/ / ___/ ___/
//	/ /___/ /_/ / /__/ /_/ / /_/ / /  / /_/ / /_/ / / / / / /__(__  )
//	\____/\____/\___/\____/\____/_/   \__,_/ .___/_/ /_/_/\___/____/
//	                                      /_/
// ==================================================================================================================================

class CocoGraphics
{
	public static var skinsCache:Array<CocoSkinCacheItem>;

 	public function Constructor()
 	{
 	}

 	public function Destructor()
 	{
 	}

	// ==================================================================================================================================
	//	   ______                               ______                 __  _
	//	  / ____/___ _____ _   ______ ______   / ____/_  ______  _____/ /_(_)___  ____  _____
	//	 / /   / __ `/ __ \ | / / __ `/ ___/  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	//	/ /___/ /_/ / / / / |/ / /_/ (__  )  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
	//	\____/\__,_/_/ /_/|___/\__,_/____/  /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
	//
	// ==================================================================================================================================

	public static function NewCanvas(width:Float, height:Float, POT:Boolean) :HTMLCanvasElement
	{
    	var canvas:HTMLCanvasElement = document.createElement("canvas");
    	width = Math.max(1.0, Math.floor(width));
    	height = Math.max(1.0, Math.floor(height));
		canvas.width = Math.max(1.0, Math.floor(POT ? Math.pow(2.0, Math.ceil(Math.log(width)/Math.log(2.0))) : width));
		canvas.height = Math.max(1.0, Math.floor(POT ? Math.pow(2.0, Math.ceil(Math.log(height)/Math.log(2.0))) : height));
		return canvas;
	}

	// ==================================================================================================================================
	//	   ______      __              ______                 __  _
	//	  / ____/___  / /___  _____   / ____/_  ______  _____/ /_(_)___  ____  _____
	//	 / /   / __ \/ / __ \/ ___/  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	//	/ /___/ /_/ / / /_/ / /     / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
	//	\____/\____/_/\____/_/     /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
	//
	// ==================================================================================================================================

	public static function ColorToHtmlRGBA(c:Color) :String
	{
		try
		{
			var R:Integer = Integer((c >> 16) & 0xFF);
			var G:Integer = Integer((c >> 8) & 0xFF);
			var B:Integer = Integer((c & 0xFF));
			var A:Float = Integer((c >> 24) & 0xFF) / 255.0;
			return "rgba(" + String(R) + "," + String(G) + "," + String(B) + "," + String(A) + ")";
		}
		catch(e)
		{
			return "rgba(0,0,0,0)";
		}
	}

	// ==================================================================================================================================
	//	   _____ __   _          ______                 __  _
	//	  / ___// /__(_)___     / ____/_  ______  _____/ /_(_)___  ____  _____
	//	  \__ \/ //_/ / __ \   / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	//	 ___/ / ,< / / / / /  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
	//	/____/_/|_/_/_/ /_/  /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
	//
	// ==================================================================================================================================

	public static function GetSkinFromCache(skinImage:CocoImage, width:Float, height:Float) :CocoImage
	{
		if(!skinImage || !width || !height)
			return null;

		// Initialize skin cache array
		if(!skinsCache)
			skinsCache = new Array<CocoSkinCacheItem>;

		// Search cache for skin
		for(var i:Integer = skinsCache.size()-1; i>=0; i--)
		{
			var img:CocoSkinCacheItem = skinsCache[i];
			if(img.symbolName==skinImage.symbolName && img.width==width && img.height==height)
				return img.image;
		}

		// Create a skin image
		var canvas:HTMLCanvasElement = NewCanvas(width*skinImage.pixelRatio, height*skinImage.pixelRatio, true);
		var ctx:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));
		CocoGraphics.DrawSkin(ctx, skinImage, 0, 0, width*skinImage.pixelRatio, height*skinImage.pixelRatio);
		ctx = null;
		var image:CocoImage = CocoImageFromHTMLCanvas(canvas, width*skinImage.pixelRatio, height*skinImage.pixelRatio);
		image.pixelRatio = skinImage.pixelRatio;
		delete canvas;

		// Save skin in cache
		var item:CocoSkinCacheItem = new CocoSkinCacheItem();
		item.symbolName = skinImage.symbolName;
		item.width = width;
		item.height = height;
		item.image = image;
		skinsCache.push(item);

		return image;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function CocoImageFromHTMLCanvas(canvas:HTMLCanvasElement, textureWidth:Float, textureHeight:Float, optional mime:String) :CocoImage
	{
        var img:CocoImage = new CocoImage();
        img.image = new Image();
        img.textureCellWidth = textureWidth;
        img.textureCellHeight = textureHeight;
        img.textureGrid = new Float32Array([0,0]);
        if(mime=="") mime = "image/png";
        img.image.load(canvas.toDataURL(mime));
        return img;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function DrawSkin(ctx:CanvasRenderingContext2D, skinImage:CocoImage, x:Float, y:Float, width:Float, height:Float)
	{
		if(!skinImage)
			return;

		var r:Float					  = 1;
		var p:Float					  = 1;
		var src:Image				  = skinImage.image;
		var cx:Float				  = 0;
		var cy:Float				  = 0;
		var cw:Float				  = width;
		var ch:Float				  = height;
		var W1:Float				  = skinImage.skin[0] * skinImage.pixelRatio;
		var W2:Float				  = skinImage.skin[1] * skinImage.pixelRatio;
		var W3:Float				  = skinImage.skin[2] * skinImage.pixelRatio;
		var H1:Float				  = skinImage.skin[3] * skinImage.pixelRatio;
		var H2:Float				  = skinImage.skin[4] * skinImage.pixelRatio;
		var H3:Float				  = skinImage.skin[5] * skinImage.pixelRatio;

		var RW1H1:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;
		var RW2H1:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_X;
		var RW3H1:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;
		var RW1H2:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_Y;
		var RW2H2:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_XY;
		var RW3H2:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_Y;
		var RW1H3:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;
		var RW2H3:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_X;
		var RW3H3:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;

		var	F:Float;
		var	RmW:Float;
		var	RmH:Float;
		var	R:Array<Float> = [0,0,0];
		var	C:Array<Float> = [0,0,0];

	    // Find slices with fixed width or height
	    if(__fixedH([RW1H1, RW2H1, RW3H1])) R[0] = H1;
	    if(__fixedH([RW1H2, RW2H2, RW3H2])) R[1] = H2;
	    if(__fixedH([RW1H3, RW2H3, RW3H3])) R[2] = H3;
	    if(__fixedW([RW1H1, RW1H2, RW1H3])) C[0] = W1;
	    if(__fixedW([RW2H1, RW2H2, RW2H3])) C[1] = W2;
	    if(__fixedW([RW3H1, RW3H2, RW3H3])) C[2] = W3;

		// Count how many cells have fixed height and divide the remaining height to the others
		F = Float(__countFixed([H1, H2, H3]) - __countFixed(R));
		RmH = Math.max(Float(0.0), height - R[0] - R[1] - R[2]);
		if(H1 && !R[0]) R[0] =(RmH / F);
		if(H2 && !R[1]) R[1] =(RmH / F);
		if(H3 && !R[2]) R[2] =(RmH / F);

		// Count how many cells have fixed width and divide the remaining width to the others
		F = Float(__countFixed([W1, W2, W3]) - __countFixed(C));
		RmW = Math.max(Float(0.0), width - C[0] - C[1] - C[2]);
		if(W1 && !C[0]) C[0] = (RmW / F);
		if(W2 && !C[1]) C[1] = (RmW / F);
		if(W3 && !C[2]) C[2] = (RmW / F);

	    // Draw slices

	    ctx.save();
	    ctx.setTransform(1,0,0,1,0,0);

	    __drawSlice ( ctx, skinImage, 	x, 					y, 				 	C[0],	R[0], 	0, 			0,			W1, 	H1, 	RW1H1);
	    __drawSlice ( ctx, skinImage, 	x + C[0], 			y, 				 	C[1],	R[0], 	W1, 		0,			W2, 	H1, 	RW2H1);
	    __drawSlice ( ctx, skinImage, 	x + C[0] + C[1], 	y, 				 	C[2],	R[0], 	W1 + W2, 	0,			W3, 	H1, 	RW3H1);
	    __drawSlice ( ctx, skinImage, 	x, 					y + R[0], 		 	C[0],	R[1], 	0, 			H1,			W1, 	H2, 	RW1H2);
	    __drawSlice ( ctx, skinImage, 	x + C[0], 			y + R[0], 		 	C[1],	R[1], 	W1, 		H1,			W2, 	H2, 	RW2H2);
	    __drawSlice ( ctx, skinImage, 	x + C[0] + C[1], 	y + R[0], 		 	C[2],	R[1], 	W1 + W2, 	H1,			W3, 	H2, 	RW3H2);
	    __drawSlice ( ctx, skinImage, 	x, 					y + R[0] + R[1], 	C[0],	R[2], 	0, 			H1 + H2, 	W1, 	H3, 	RW1H3);
	    __drawSlice ( ctx, skinImage, 	x + C[0], 			y + R[0] + R[1], 	C[1],	R[2], 	W1, 		H1 + H2, 	W2, 	H3, 	RW2H3);
	    __drawSlice ( ctx, skinImage, 	x + C[0] + C[1], 	y + R[0] + R[1], 	C[2],	R[2], 	W1 + W2, 	H1 + H2, 	W3, 	H3, 	RW3H3);

		//ctx.scale(r,r);
		ctx.restore();

	};

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __drawSlice(ctx:CanvasRenderingContext2D, skin:CocoImage, cx:Float, cy:Float, cw:Float, ch:Float, sx:Float, sy:Float, sw:Float, sh:Float, r:COCO_SKIN_TILE_ENUM)
	{
	    if(!cw || !ch || !sw || !sh) return;
	    if(r == COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE)
	        __drawRegion(ctx, skin, sx, sy, sw, sh, cx, cy, cw, ch);
	    else
	    	__tileSkin(ctx, skin, sx, sy, sw, sh, cx, cy, cw, ch);
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __countFixed(v:Array<Float>) :Integer
	{
	    var c:Integer = 0;
	    var L:Integer = v.size();
	    for(var i:Integer=0; i<L; i++)
	    	if(v[i]) c++;
	    return c;
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __fixedW(v:Array<COCO_SKIN_TILE_ENUM>) :Boolean
	{
		var R:Boolean = false;
		var L:Integer = v.size();
	    for(var i:Integer=0; i<L; i++)
	        R |= ((v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE) || (v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_Y));
	    return R;
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __fixedH(v:Array<COCO_SKIN_TILE_ENUM>) :Boolean
	{
		var R:Boolean = false;
		var L:Integer = v.size();
	    for(var i:Integer=0; i<L; i++)
	        R |= ((v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE) || (v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_X));
	    return R;
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __tileSkin(ctx:CanvasRenderingContext2D, image:CocoImage, cellX:Float, cellY:Float, cellWidth:Float, cellHeight:Float, x:Float, y:Float, width:Float, height:Float)
	{
		if(cellWidth==0 || cellHeight==0)
			return;

		var ix:Float, iy:Float, cx:Float, cy:Float, cw:Float, ch:Float ,r:Float;

		for(iy=y; iy<=y+height; iy+=cellHeight)
		{
			for(ix=x; ix<=x+width; ix+=cellWidth)
			{
				cw = (ix+cellWidth<=x+width ? cellWidth : x+width-ix);
				ch = (iy+cellHeight<=y+height ? cellHeight : y+height-iy);
				if(cw>0 && ch>0)
					__drawRegion(ctx, image, cellX, cellY, cw, ch, ix, iy, cw, ch);
			}
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __drawRegion(ctx:CanvasRenderingContext2D, image:CocoImage, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float)
	{
		if(!ctx || !image || !sw || !sh || !dw || !dh)
			return;
		ctx.drawImage(image.image, sx, sy, sw, sh, dx, dy, dw, dh);
	}

	// ==================================================================================================================================
	//	    ____                        __                        __   ___               __               _
	//	   / __ )____  __  ______  ____/ /____   ____ _____  ____/ /  /   |  ____  _____/ /_  ____  _____(_)___  ____ _
	//	  / __  / __ \/ / / / __ \/ __  / ___/  / __ `/ __ \/ __  /  / /| | / __ \/ ___/ __ \/ __ \/ ___/ / __ \/ __ `/
	//	 / /_/ / /_/ / /_/ / / / / /_/ (__  )  / /_/ / / / / /_/ /  / ___ |/ / / / /__/ / / / /_/ / /  / / / / / /_/ /
	//	/_____/\____/\__,_/_/ /_/\__,_/____/   \__,_/_/ /_/\__,_/  /_/  |_/_/ /_/\___/_/ /_/\____/_/  /_/_/ /_/\__, /
	//	                                                                                                      /____/
	// ==================================================================================================================================

	public static function AlignToCocoHVAlign(h:COCO_TEXT_ALIGN_ENUM, v:COCO_TEXT_ALIGN_ENUM) :CocoHVAlign
	{
		var align:CocoHVAlign = new CocoHVAlign();

		switch(h)
		{
			case COCO_TEXT_ALIGN_ENUM.TEXT_ALIGN_NEAR:		align.horiz = 0; break;
			case COCO_TEXT_ALIGN_ENUM.TEXT_ALIGN_CENTER:	align.horiz = 0.5; break;
			case COCO_TEXT_ALIGN_ENUM.TEXT_ALIGN_FAR:		align.horiz = 1; break;
		}

		switch(v)
		{
			case COCO_TEXT_ALIGN_ENUM.TEXT_ALIGN_NEAR:		align.vert = 0; break;
			case COCO_TEXT_ALIGN_ENUM.TEXT_ALIGN_CENTER:	align.vert = 0.5; break;
			case COCO_TEXT_ALIGN_ENUM.TEXT_ALIGN_FAR:		align.vert = 1; break;
		}

		return align;
	}

	/////////////////////////////////////////////////////////////////////////////////////
	public static function AnchorToCocoHVAlign(anchor:COCO_CONTROL_ANCHOR_ENUM) :CocoHVAlign
	{
		var align:CocoHVAlign = new CocoHVAlign();

		align.horiz = 0.5;
		align.vert = 0.5;

    	switch(anchor)
    	{
		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_TOP_LEFT:
			align.vert = 0.0;
			align.horiz = 0.0;
			break;

		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_TOP_MIDDLE:
			align.vert = 0.0;
			align.horiz = 0.5;
			break;

		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_TOP_RIGHT:
			align.vert = 0.0;
			align.horiz = 1.0;
			break;

		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT:
			align.vert = 0.5;
			align.horiz = 0.0;
			break;

		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_RIGHT:
			align.vert = 0.5;
			align.horiz = 1.0;
			break;

		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_BOTTOM_LEFT:
			align.vert = 1.0;
			align.horiz = 0.0;
			break;

		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_BOTTOM_MIDDLE:
			align.vert = 1.0;
			align.horiz = 0.5;
			break;

		case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_BOTTOM_RIGHT:
			align.vert = 1.0;
			align.horiz = 1.0;
			break;
    	}

    	return align;
	}
}



/*
CocoText.init(1024, 1024);
var text:CocoText = new CocoText;
text.str = "The quick brown fox jumps over the lazy dog";
text.styles.push(new CocoTextStyle("Helvetica", 48, "normal", "normal", true, 255, 0, 255, 255, 0, 0, 0, 255));
text.styles.push(new CocoTextStyle("Helvetica", 48, "italic", "bold", false, 255, 255, 0, 255, 0, 0, 0, 255));
text.indices.push(0); text.mappings.push(0);
text.indices.push(4); text.mappings.push(1);
text.indices.push(9); text.mappings.push(0);
text.wrap(300);
var image_b64:String = text.draw(600, 1000, 0.5, 0.0, 255, 216, 255, 255);
trace(image_b64);
////////////////////////////////////////////////////////////////////////////////////////////////////
public function ScreenToWorld(x:Float, y:Float) :CocoVector
{
y = window.innerHeight - y;
return CocoMatrix.Unproject(x, y, __modelViewMatrix, __projectionMatrix, 0, 0, window.innerWidth, window.innerHeight);
}
*/

