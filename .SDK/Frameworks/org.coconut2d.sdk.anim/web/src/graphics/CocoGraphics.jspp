
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____            __
//	  / ____/___  _________  / __ \___  _____/ /_
//	 / /   / __ \/ ___/ __ \/ /_/ / _ \/ ___/ __/
//	/ /___/ /_/ / /__/ /_/ / _, _/  __/ /__/ /_
//	\____/\____/\___/\____/_/ |_|\___/\___/\__/
//
// ==================================================================================================================================

class CocoRect
{
	public var left:Float;
	public var top:Float;
	public var right:Float;
	public var bottom:Float;
}

// ==================================================================================================================================
//	   ______                 ______                 __    _
//	  / ____/___  _________  / ____/________ _____  / /_  (_)_________
//	 / /   / __ \/ ___/ __ \/ / __/ ___/ __ `/ __ \/ __ \/ / ___/ ___/
//	/ /___/ /_/ / /__/ /_/ / /_/ / /  / /_/ / /_/ / / / / / /__(__  )
//	\____/\____/\___/\____/\____/_/   \__,_/ .___/_/ /_/_/\___/____/
//	                                      /_/
// ==================================================================================================================================

 /**
 * CocoGraphics encapsulate static graphics manipulation functions.
 *
 * @module CocoGraphics.jspp
 * @version 0.1
 * @author Elias Politakis <epolitakis@mobilefx.com>
 * @copyright www.coconut2D.org 2013-2014
 * @tutorial
 * @summary CocoGraphics encapsulate static graphics manipulation functions
 * @description CocoGraphics encapsulate static graphics manipulation functions
 */
class CocoGraphics
 {
 	public function Constructor()
 	{
 	}

 	public function Destructor()
 	{
 	}

	// ==================================================================================================================================
	//	  ______          __     ______                 __  _
	//	 /_  __/__  _  __/ /_   / ____/_  ______  _____/ /_(_)___  ____  _____
	//	  / / / _ \| |/_/ __/  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	//	 / / /  __/>  </ /_   / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
	//	/_/  \___/_/|_|\__/  /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/**
	 * Creates and assigns to a CocoClip a new texture image containing some text. This is a low-level
	 * text rendering function and should not be used directly.

	 * @returns void
	 * @param {!String} 					text 				- The text to draw
	 * @param {!String} 					fontName 			- The font name to use for drawing the text
	 * @param {!Integer} 					fontSizePixels		- The font size in pixels
	 * @param {!COCO_TEXT_ALIGN_ENUM} 		hAlign 				- Horizontal align of the text
	 * @param {!COCO_TEXT_ALIGN_ENUM} 		vAlign 				- Vertical align of the text
	 * @param {!Boolean} 					multiline 			- Text can be multilined
	 * @param {!COCO_TEXT_TRIMMING_ENUM}	trimming 			- Text trimming method
	 * @param {!CSSColor} 					CSSColor 			- Text color
	 * @param {!textRectWidth} 				textRectWidth 		- Surface width available for drawing the text
	 * @param {!textRectHeight} 			textRectHeight		- Surface height available for drawing the text
	 */
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function createTextTexture(scene:CocoScene, text:String, fontName:String, fontSizePixels:Integer, hAlign:COCO_TEXT_ALIGN_ENUM, vAlign:COCO_TEXT_ALIGN_ENUM, multiline:Boolean, trimming:COCO_TEXT_TRIMMING_ENUM, CSSColor:String, textRectWidth:Integer, textRectHeight:Integer) :CocoImage
	{
		// Create a power-of-two sized canvas and get 2d context
		var canvas:HTMLCanvasElement = document.createElement("canvas");
		canvas.width = Math.pow(2, Math.ceil(Math.log(textRectWidth)/Math.log(2)));
		canvas.height = Math.pow(2, Math.ceil(Math.log(textRectHeight)/Math.log(2)));
		var ctx:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));

		// Set the font
		ctx.font = "normal normal normal " + String(fontSizePixels) + "px / normal " + fontName;
		ctx.fillStyle = "white";
		ctx.fillText(text, 0, Float(fontSizePixels));

		// Create a texture image from the base64 PNG data of the canvas
        var image = new CocoImage();
        image.image = new Image();
        var url:String = canvas.toDataURL();
        image.image.load(url);
        image.textureCellWidth = Float(textRectWidth);
        image.textureCellHeight = Float(textRectHeight);
        image.textureGrid = new Float32Array([0,0]);
        image.prepare(scene, gl);

		// Dispose and return
        ctx = null;
        delete canvas;
        return image;
	}

	// ==================================================================================================================================
	//	   _____ __   _          ______                 __  _
	//	  / ___// /__(_)___     / ____/_  ______  _____/ /_(_)___  ____  _____
	//	  \__ \/ //_/ / __ \   / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	//	 ___/ / ,< / / / / /  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
	//	/____/_/|_/_/_/ /_/  /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function drawSkin(ctx:CanvasRenderingContext2D, skinImage:CocoImage, x:Float, y:Float, width:Float, height:Float, anchor:COCO_CONTROL_ANCHOR_ENUM)
	{
		if(!skinImage)
			return;

		var r:Float					  = 1;
		var p:Float					  = 1;
		var src:Image				  = skinImage.image;
		var cx:Float				  = 0;
		var cy:Float				  = 0;
		var cw:Float				  = width;
		var ch:Float				  = height;
		var W1:Float				  = skinImage.skin[0];
		var W2:Float				  = skinImage.skin[1];
		var W3:Float				  = skinImage.skin[2];
		var H1:Float				  = skinImage.skin[3];
		var H2:Float				  = skinImage.skin[4];
		var H3:Float				  = skinImage.skin[5];
		var RW1H1:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;
		var RW2H1:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_X;
		var RW3H1:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;
		var RW1H2:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_Y;
		var RW2H2:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_XY;
		var RW3H2:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_Y;
		var RW1H3:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;
		var RW2H3:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_X;
		var RW3H3:COCO_SKIN_TILE_ENUM = COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE;
		var	F:Float;
		var	RmW:Float;
		var	RmH:Float;
		var	R:Float32Array = [0,0,0];
		var	C:Float32Array = [0,0,0];

		/*
		x 		= Graphics.scale(x, 	 1, r);
		y 		= Graphics.scale(y, 	 1, r);
		width 	= Graphics.scale(width,  1, r);
		height 	= Graphics.scale(height, 1, r);
		*/

		// Anchor
		switch(anchor)
		{
			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_NONE:
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_CENTER:
				x = cx+(cw-width)/2;
				y = cy+(ch-height)/2;
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_TOP_LEFT:
				x = cx;
				y = cy;
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_TOP_MIDDLE:
				x = cx+(cw-width)/2;
				y = cy;
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_TOP_RIGHT:
				x = cx+(cw-width);
				y = cy;
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT:
				x = cx;
				y = cy+(ch-height)/2;
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_RIGHT:
				x = cx+(cw-width);
				y = cy+(ch-height)/2;
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_BOTTOM_LEFT:
				x = cx;
				y = cy+(ch-height);
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_BOTTOM_MIDDLE:
				x = cx+(cw-width)/2;
				y = cy+(ch-height);
				break;

			case COCO_CONTROL_ANCHOR_ENUM.ANCHOR_BOTTOM_RIGHT:
				x = cx+(cw-width);
				y = cy+(ch-height);
				break;
		}

		/*

	    // Find slices with fixed width or height
	    if(__fixedH([RW1H1, RW2H1, RW3H1])) R[0] = H1;
	    if(__fixedH([RW1H2, RW2H2, RW3H2])) R[1] = H2;
	    if(__fixedH([RW1H3, RW2H3, RW3H3])) R[2] = H3;
	    if(__fixedW([RW1H1, RW1H2, RW1H3])) C[0] = W1;
	    if(__fixedW([RW2H1, RW2H2, RW2H3])) C[1] = W2;
	    if(__fixedW([RW3H1, RW3H2, RW3H3])) C[2] = W3;

		// Count how many cells have fixed height and divide the remaining height to the others
		F = __countFixed([H1, H2, H3]) - __countFixed(R);
		RmH = Math.max(0, height - R[0] - R[1] - R[2]);
		if(H1 && !R[0]) R[0] =(RmH / F);
		if(H2 && !R[1]) R[1] =(RmH / F);
		if(H3 && !R[2]) R[2] =(RmH / F);

		// Count how many cells have fixed width and divide the remaining width to the others
		F = __countFixed([W1, W2, W3]) - __countFixed(C);
		RmW = Math.max(0, width - C[0] - C[1] - C[2]);
		if(W1 && !C[0]) C[0] = (RmW / F);
		if(W2 && !C[1]) C[1] = (RmW / F);
		if(W3 && !C[2]) C[2] = (RmW / F);

	    // Draw slices

	    ctx.save();
	    ctx.setTransform(1,0,0,1,0,0);

	    __drawSlice ( ctx, src, 	x, 					y, 				 	C[0],	R[0], 	0, 			0,			W1, 	H1, 	RW1H1);
	    __drawSlice ( ctx, src, 	x + C[0], 			y, 				 	C[1],	R[0], 	W1, 		0,			W2, 	H1, 	RW2H1);
	    __drawSlice ( ctx, src, 	x + C[0] + C[1], 	y, 				 	C[2],	R[0], 	W1 + W2, 	0,			W3, 	H1, 	RW3H1);
	    __drawSlice ( ctx, src, 	x, 					y + R[0], 		 	C[0],	R[1], 	0, 			H1,			W1, 	H2, 	RW1H2);
	    __drawSlice ( ctx, src, 	x + C[0], 			y + R[0], 		 	C[1],	R[1], 	W1, 		H1,			W2, 	H2, 	RW2H2);
	    __drawSlice ( ctx, src, 	x + C[0] + C[1], 	y + R[0], 		 	C[2],	R[1], 	W1 + W2, 	H1,			W3, 	H2, 	RW3H2);
	    __drawSlice ( ctx, src, 	x, 					y + R[0] + R[1], 	C[0],	R[2], 	0, 			H1 + H2, 	W1, 	H3, 	RW1H3);
	    __drawSlice ( ctx, src, 	x + C[0], 			y + R[0] + R[1], 	C[1],	R[2], 	W1, 		H1 + H2, 	W2, 	H3, 	RW2H3);
	    __drawSlice ( ctx, src, 	x + C[0] + C[1], 	y + R[0] + R[1], 	C[2],	R[2], 	W1 + W2, 	H1 + H2, 	W3, 	H3, 	RW3H3);

	    ctx.scale(r,r);
	    ctx.restore();

	    */
	};

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __drawSlice(ctx:CanvasRenderingContext2D, skin:CocoImage, cx:Float, cy:Float, cw:Float, ch:Float, sx:Float, sy:Float, sw:Float, sh:Float, r:COCO_SKIN_TILE_ENUM)
	{
	    if(!cw || !ch || !sw || !sh) return;
	    if(r == COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE)
	        __drawRegion(ctx, skin, sx, sy, sw, sh, cx, cy, cw, ch);
	    else
	    	__tileSkin(ctx, skin, sx, sy, sw, sh, cx, cy, cw, ch);
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __countFixed(v:Float32Array) :Integer
	{
	    var c:Integer = 0;
	    for(var i:Integer=0; i<v.length; i++)
	    	if(v[i]) c++;
	    return c;
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __fixedW(v:Float32Array) :Boolean
	{
		var R:Boolean = false;
	    for(var i:Integer=0; i<v.length; i++)
	        R |= ((v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE) || (v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_Y));
	    return R;
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __fixedH(v:Float32Array) :Boolean
	{
		var R:Boolean = false;
	    for(var i:Integer=0; i<v.length; i++)
	        R |= ((v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_NONE) || (v[i]==COCO_SKIN_TILE_ENUM.TILE_REPEAT_X));
	    return R;
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __tileSkin(ctx:CanvasRenderingContext2D, image:CocoImage, cellX:Float, cellY:Float, cellWidth:Float, cellHeight:Float, x:Float, y:Float, width:Float, height:Float)
	{
		if(cellWidth==0 || cellHeight==0)
			return;

		var ix:Float, iy:Float, cx:Float, cy:Float, cw:Float, ch:Float ,r:Float;

		for(iy=y; iy<=y+height; iy+=cellHeight)
		{
			for(ix=x; ix<=x+width; ix+=cellWidth)
			{
				cw = (ix+cellWidth<=x+width ? cellWidth : x+width-ix);
				ch = (iy+cellHeight<=y+height ? cellHeight : y+height-iy);
				if(cw>0 && ch>0)
					__drawRegion(ctx, image, cellX, cellY, cw, ch, ix, iy, cw, ch);
			}
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////
	private static function __drawRegion(ctx:CanvasRenderingContext2D, image:CocoImage, sx:Float, sy:Float, sw:Float, sh:Float, dx:Float, dy:Float, dw:Float, dh:Float)
	{
		if(!ctx || !image || !sw || !sh || !dw || !dh)
			return;

		try
		{
			ctx.drawImage(image.image, sx, sy, sw, sh, dx, dy, dw, dh);
		}
		catch(e)
		{
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////
	public static function drawImage(image:CocoImage, x:Float, y:Float, stretchW:Float, stretchH:Float, anchor:COCO_CONTROL_ANCHOR_ENUM, clear:Boolean)
	{
		/*
		if(!image) return { x:0, y:0 };

		if(x && x.left)
		{
			var res = x;
			x = res.left;
			y = res.top;
			stretchW = res.width;
			stretchH = res.height;
		}

		var $img = (image.$?image.$:image);
		if($img.nodeName!='CANVAS') throw new Error('Invalid image');
		var r = Graphics.screenPixelRatio;

		var w = (stretchW==null || stretchW==-1) ? image.width : Graphics.scale(stretchW, 1, r);
		var h = (stretchH==null || stretchH==-1) ? image.height : Graphics.scale(stretchH, 1, r);

		x = Graphics.scale(x|0, 1, r);
		y = Graphics.scale(y|0, 1, r);

		if(anchor!=null && anchor!=Const.ODP_ANCHOR_NONE)
		{
			var fit = Graphics.getBestFitInfo(w, h, width, height, false);
			w = fit.w;
			h = fit.h;
			var pt = calcAnchor(width, height, 0, 0, 0, 0, 0, 0, w, h, anchor);
			x = pt.x;
			y = pt.y;
		}

		x = Math.round(x);
		y = Math.round(y);
		w = Math.round(w);
		h = Math.round(h);

		var ctx = beginPaint();

		var backingStoreRatio = ctx.webkitBackingStorePixelRatio ||
								ctx.mozBackingStorePixelRatio ||
								ctx.msBackingStorePixelRatio ||
								ctx.oBackingStorePixelRatio ||
								ctx.backingStorePixelRatio || 1;

		var ratio = r / backingStoreRatio;

		try
		{
			ctx.setTransform(1,0,0,1,0,0);
			if(clear) ctx.clearRect(0,0,width,height);
			//ctx.drawImage($img, x, y, w, h);
			ctx.drawImage($img, 0,0,$img.width, $img.height, x, y, w, h);
		}
		finally
		{
			//ctx.scale(r,r);
			endPaint();
		}

		return { x: x/r, y: y/r };
		*/
	}
}



	    /*
	    CocoText.init(1024, 1024);
	    var text:CocoText = new CocoText;
	    text.str = "The quick brown fox jumps over the lazy dog";
	    text.styles.push(new CocoTextStyle("Helvetica", 48, "normal", "normal", true, 255, 0, 255, 255, 0, 0, 0, 255));
	    text.styles.push(new CocoTextStyle("Helvetica", 48, "italic", "bold", false, 255, 255, 0, 255, 0, 0, 0, 255));
	    text.indices.push(0); text.mappings.push(0);
	    text.indices.push(4); text.mappings.push(1);
	    text.indices.push(9); text.mappings.push(0);
	    text.wrap(300);
	    var image_b64:String = text.draw(600, 1000, 0.5, 0.0, 255, 216, 255, 255);
	    trace(image_b64);
		*/

