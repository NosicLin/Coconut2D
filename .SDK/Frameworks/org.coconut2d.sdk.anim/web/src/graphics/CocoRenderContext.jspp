"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __________                 ____                 __          ______            __            __
//	   /  _/ ____/___  _________  / __ \___  ____  ____/ /__  _____/ ____/___  ____  / /____  _  __/ /_
//	   / // /   / __ \/ ___/ __ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ /   / __ \/ __ \/ __/ _ \| |/_/ __/
//	 _/ // /___/ /_/ / /__/ /_/ / _, _/  __/ / / / /_/ /  __/ /  / /___/ /_/ / / / / /_/  __/>  </ /_
//	/___/\____/\____/\___/\____/_/ |_|\___/_/ /_/\__,_/\___/_/   \____/\____/_/ /_/\__/\___/_/|_|\__/
//
// ==================================================================================================================================

interface ICocoRenderContext
{
	public function getModelViewMatrix():CocoMatrix;
	public function getProjectionMatrix():CocoMatrix;
	public function getWidth():Float;
	public function getHeight():Float;
	public function cls();
	public function flush();
	public function ready():Boolean;
	public function prepare(scene:CocoScene);
	public function prepareImage(img:CocoImage):ICocoImageRenderData;
	public function drawFrame(scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame);
	public function drawMaskBegin();
	public function drawMaskEnd(invert:Boolean);
	public function drawBoundingBox(clip:CocoClip);
	public virtual function getGLContext():WebGLRenderingContext;
	public virtual function get2DContext():CanvasRenderingContext2D;
}

// ==================================================================================================================================
//	   ______                 ____                 __          ______            __            __
//	  / ____/___  _________  / __ \___  ____  ____/ /__  _____/ ____/___  ____  / /____  _  __/ /_
//	 / /   / __ \/ ___/ __ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ /   / __ \/ __ \/ __/ _ \| |/_/ __/
//	/ /___/ /_/ / /__/ /_/ / _, _/  __/ / / / /_/ /  __/ /  / /___/ /_/ / / / / /_/  __/>  </ /_
//	\____/\____/\___/\____/_/ |_|\___/_/ /_/\__,_/\___/_/   \____/\____/_/ /_/\__/\___/_/|_|\__/
//
// ==================================================================================================================================


class CocoRenderContext
{
	public function Constructor()
	{
	}

	public function Destructor()
	{
	}

	public static function createContext():ICocoRenderContext
	{
		// Create a CANVAS element in document BODY.
		var canvas:HTMLCanvasElement = document.body.appendChild(document.createElement("canvas"));
		canvas.width = Float(window.innerWidth);
		canvas.height = Float(window.innerHeight);

		var args:ContextArguments = new ContextArguments();
		args.stencil = true;

		// Get WebGL context if supported by device
		var gl:WebGLRenderingContext = WebGLRenderingContext(canvas.getContext("webgl", args));
		if(gl)
		{
			trace("Rendering with HTML5 WebGL Canvas API");
			return new CocoRenderContextGL(gl);
		}

		// Get WebGL context if supported by device
		gl = WebGLRenderingContext(canvas.getContext("experimental-webgl", args));
		if(gl)
		{
			trace("Rendering with HTML5 WebGL Experimental Canvas API");
			return new CocoRenderContextGL(gl);
		}

		// Fallback to CanvasRenderingContext2D
		var ctx:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));
		if(ctx)
		{
			trace("Rendering with HTML5 2D Canvas API");
			return new CocoRenderContext2D(ctx);
		}

		//alert("Please use an HTML5 Browser to view this page.");
		throw "Invalid rendering device.";
	}
}
