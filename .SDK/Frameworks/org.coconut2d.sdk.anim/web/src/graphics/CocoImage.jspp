"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____
//	  / ____/___  _________ / ___/___  ____ ___  _____  ____  ________
//	 / /   / __ \/ ___/ __ \\__ \/ _ \/ __ `/ / / / _ \/ __ \/ ___/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ /  __/ /_/ / /_/ /  __/ / / / /__/  __/
//	\____/\____/\___/\____/____/\___/\__, /\__,_/\___/_/ /_/\___/\___/
//	                                   /_/
// ==================================================================================================================================

class CocoSequence
{
	public var name:String;
	public var frames:Array<Integer>;
	public var sequenceStartTime:Time;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(name:String, framesArray:Array<Integer>)
	{
		this.name = name;
		this.frames = framesArray;
		this.sequenceStartTime=0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete frames;
	}
}

// ==================================================================================================================================
//	   ______                 ____                          _____ _ __    ___
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____ / ___/(_) /_  / (_)___  ____ _
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \\__ \/ / __ \/ / / __ \/ __ `/
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/__/ / / /_/ / / / / / / /_/ /
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/____/_/_.___/_/_/_/ /_/\__, /
//	                                          /____/                            /____/
// ==================================================================================================================================

class CocoImageResolution
{
	public var url:String;
	public var pixelRatio:Float;
	public var textureWidth:Float;
	public var textureHeight:Float;

	public function Constructor(url:String, pixelRatio:Float, textureWidth:Float, textureHeight:Float)
	{
		this.url = url;
		this.pixelRatio = pixelRatio;
		this.textureWidth = textureWidth;
		this.textureHeight = textureHeight;
	}

	public function Destructor()
	{
	}
}

// ==================================================================================================================================
//	   ______                 ____
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/
//	                                          /____/
// ==================================================================================================================================

class CocoImage
{
	public var symbolName:String;
	public var image:Image;

	public reference var scene:CocoScene;

	// Texture
	public var textureCellWidth:Float;
	public var textureCellHeight:Float;
	public var textureGrid:Float32Array;
	public var textureTileMap:Float32Array;
	public var color:Float32Array;
	public var texSize:Float32Array;
	public var isSpriteSheet:Boolean;

	// Sprite
	public var sequences:Array<CocoSequence>;

	// Skin
	public var skin:Float32Array;  // W1, W2, W3, H1, H2, H3

	// Render
	public var renderData:ICocoImageRenderData;

	// Resolution Siblings
	public var baseUrl:String;
	public var viewOptimalWidth:Integer;
	public var viewOptimalHeight:Integer;
	public var viewSiblings:Array<CocoImageResolution>;
	public var pixelRatio:Float;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		scene				= null;
		renderData			= null;
		baseUrl				= "";
		color				= new Float32Array([1.0, 1.0, 1.0, 1.0]);
		image				= null;
		isSpriteSheet		= false;
		pixelRatio			= 1.0;
		sequences			= new Array<CocoSequence>;
		skin				= null;
		symbolName			= "";
		texSize				= new Float32Array([1.0, 1.0]);
		textureCellHeight	= 0;
		textureCellWidth	= 0;
		textureGrid			= new Float32Array([0.0, 0.0]);
		textureGrid			= new Float32Array([0.0]);
		textureTileMap		= new Float32Array([0.0, 0.0]);
		viewOptimalHeight	= 0;
		viewOptimalWidth	= 0;
		viewSiblings		= new Array<CocoImageResolution>;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		scene = null;
		delete viewSiblings;
		delete sequences;
		delete textureGrid;
		delete textureTileMap;
		delete color;
		delete texSize;
		delete renderData;
		delete image;
		delete skin;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createFromCanvas(scene:CocoScene, canvas:HTMLCanvasElement, width:Float, height:Float)
	{
		delete image;

        var url:String = canvas.toDataURL();
        image = new Image();
        image.load(url);
        textureCellWidth = Float(width);
        textureCellHeight = Float(height);
        textureGrid = new Float32Array([0,0]);
		this.renderData = engine.__ctx.prepareImage(this);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addResolution(sibling:CocoImageResolution) :CocoImageResolution
	{
		viewSiblings.push(sibling);
		return sibling;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSequence(sequence:CocoSequence) :CocoSequence
	{
		if(!sequence) return null;
		if(getSequence(sequence.name)) throw "Sequence " + sequence.name + " already exists.";
		sequences.push(sequence);
		isSpriteSheet = true;
		return sequence;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSequence(name:String) :CocoSequence
	{
		for (var i:Integer = sequences.size() - 1; i >= 0; i--)
		{
			if(sequences[i].name == name)
				return sequences[i];
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function load()
	{
		var sibling:CocoImageResolution;

		if(scene.__view_width && scene.__view_height)
		{
			var w:Float = Float(viewOptimalWidth) * scene.__view_scale * window.devicePixelRatio;
			var h:Float = Float(viewOptimalHeight) * scene.__view_scale * window.devicePixelRatio;
			for(var j:Integer = 0; j<viewSiblings.size(); j++)
			{
				sibling = viewSiblings[j];
				if(sibling.textureWidth>=w && sibling.textureHeight>=h)
				{
					image = new Image();
					image.load(baseUrl + sibling.url);
					textureCellWidth = sibling.textureWidth;
					textureCellHeight = sibling.textureHeight;
					pixelRatio = sibling.pixelRatio;
					break;
				}
			}
		}
		if(!image)
		{
			sibling = viewSiblings[viewSiblings.size()-1];
			if(sibling)
			{
				image = new Image();
				image.load(baseUrl + sibling.url);
				textureCellWidth = sibling.textureWidth;
				textureCellHeight = sibling.textureHeight;
				pixelRatio = sibling.pixelRatio;
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function loaded():Boolean
	{
		if(renderData) return true;
		if(!image || !image.complete) return false;
		renderData = engine.__ctx.prepareImage(this);
		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function unload()
	{
		delete image;
	}
}
