"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ______            _
//	  / ____/___  _________  / ____/___  ____ _(_)___  ___
//	 / /   / __ \/ ___/ __ \/ __/ / __ \/ __ `/ / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /___/ / / / /_/ / / / / /  __/
//	\____/\____/\___/\____/_____/_/ /_/\__, /_/_/ /_/\___/
//	                                  /____/
// ==================================================================================================================================

state class CocoEngine
{
	// To avoid frame skipping and to enable time-debugging
	// we need to enforce a fixed tick time interval. The
	// constant we choose is for 60 frames per second but
	// we must use division in order to set the float properly.
	public const TICK_TIME:Time = (1000.0/60.0);
	public var debugbreak:Boolean;

	private var __currentState:State;
	private var __nextState:State;
	private var __deviceEvent:DeviceEvent;
	private var __clicked:Array<CocoClip>;
	private var __clock:Time;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__clicked = new Array<CocoClip>;
		__currentState = null;
		__deviceEvent = null;
		__clock = 0;
		debugbreak=false;

		//window.addEventListener("mousedown", __setTouchEvent);
		//window.addEventListener("mousemove", __setTouchEvent);
		window.addEventListener("mouseup", __setTouchEvent);
		window.addEventListener("touchstart", __setTouchEvent);
		window.addEventListener("touchmove", __setTouchEvent);
		window.addEventListener("touchend", __setTouchEvent);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __clicked;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function setNextState(s:State)
	{
		__nextState = s;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function run(gl:WebGLRenderingContext, time:Time)
	{
		if(!__currentState && !__nextState) return;

		if(__nextState!=null)
		{
			if(__currentState) __currentState.exit();
			__currentState = __nextState;
			__nextState = null;
			trace("\n@@STATE " + __currentState.__name);
			__clicked.clear();
			if(__currentState) __currentState.enter();
		}

		if(__currentState) __currentState.tick(__clock);
		__clicked.clear();

		if(__nextState==null && __currentState!=null)
		{
			gl.clearColor(0,0,0,1);
			gl.clear(gl.COLOR_BUFFER_BIT);
			__currentState.paint(gl, __clock);
		}

		__deviceEvent = null;

		// To avoid frame skipping we enfore a fixed time interval of 16.66~ ms.
		__clock += TICK_TIME;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __setTouchEvent(e:DeviceEvent)
	{
		__deviceEvent = e;
		__deviceEvent.__clientX = e.touches ? e.touches[0].clientX : e.clientX;
		__deviceEvent.__clientY = e.touches ? e.touches[0].clientY : e.clientY;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getTouchEvent() :DeviceEvent
	{
		// In the future we need to filter the event type
		return __deviceEvent;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function pushTouched(clip:CocoClip)
	{
		trace("click: " + clip.__instanceName);
		__clicked.push(clip);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function isClicked(check:Array<CocoClip>):Integer
	{
		for(var i:Integer = __clicked.size()-1; i>=0; i--)
			for(var r:Integer = check.size()-1; r>=0; r--)
				if(check[r] == __clicked[i])
					return r;
		return -1;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __debug_trace(scene:CocoScene, clip:CocoClip, message: String)
	{
		/*
		if(scene && clip)
		{
			var rf:Float = scene.__root.__childWithMaxTimelineDuration.__timeline.__currentFrameIndex;
			var rt:Float = scene.__root.__currentTime;
			var cf:Float = clip.__timeline.__currentFrameIndex;
			var ct:Float = clip.__currentTime;

			message = message +
					  " R(f:" + rf.toFixed(2) +
					  ", t:" + rt.toFixed(2) +
					  ", L:" + scene.__root.__loops.toFixed(2) +
					  ")\tC(f:" + cf.toFixed(2) +
					  ", t:" + ct.toFixed(2) +
					  ", L:" + clip.__loops.toFixed(2) +
					  ", P:" + String(clip.__timeline.__paused) +
					  ")\tstate: " + __currentState.__name +
					  "\tclip: " + scene.__sceneName + clip.__clipPath;

		}
		trace(message);
		*/
	}
}
