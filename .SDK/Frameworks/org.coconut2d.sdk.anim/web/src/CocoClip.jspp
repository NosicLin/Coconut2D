"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______				  _________
//	  / ____/___  _________  / ____/ (_)___
//	 / /   / __ \/ ___/ __ \/ /   / / / __ \
//	/ /___/ /_/ / /__/ /_/ / /___/ / / /_/ /
//	\____/\____/\___/\____/\____/_/_/ .___/
//								   /_/
// ==================================================================================================================================

/**
 * CocoClip encapsulates reusable pieces of animation and are the basic animation mechanism in Coconut2D.
 * CocoClips have their own multiframe timeline that can contain interactive controls, sounds, and even
 * other CocoClip instances. At runtime a CocoClip can be either a container of other CocoClips refered
 * as "container clip" or it can animate a single image, refered as "primitive clip".
 *
 * The functionality of a CocoClip is rather straight forward. Each CocoClip receives as input a "transformation
 * matrix" from its parent clip and combines it (multiplies it) with its current timeline interpolation frame.
 * The resulting transformation matrix is used to either paint the image (if it is a primitive) or its children
 * clips (if it is a container).
 *
 * When a CocoClip needs to calculate the current timeline frame it uses time-interpolation; it simply finds
 * the previous and next KeyFrames for a given time and performs linear interpolation in order to calculate
 * the key transformation values (translation, rotation, scale, alpha, etc.).
 *
 * A CocoClip can be set to calculate its bounding rectanble or bounding box. That is the rectangle used to
 * fully encapsulate either its image (if it is a primitive) or its children (if it is a container). Bounding
 * boxes are used for hit-tests so that we can detect when a user clicks/touches a CocoClip. Bounding box
 * calculation is somewhat expensive because it involves multiplication of matrixes and vectors, so we only
 * do it when the animation engine requests it on the current cycle so that it is available on the next.
 * This actually means that there is a 16ms delay from the time a user places his finger on the screen
 * before we are able to respond to it.
 *
 * CocoClips can also animate "Sprite Animation Sequences" if they detect that the primitive image has
 * spritesheet information associated with it.
 *
 * Last but not least, CocoClip API offers several animation control functions such as gotoFrameByName
 * and gotoFrameByIndex that jump the animation to a specific keyframe or time label. This feature is
 * used for programmatically controlling your animations and games.
 *
 * @module CocoClip.jspp
 * @version 0.1
 * @author Elias Politakis <epolitakis@mobilefx.com>
 * @copyright www.coconut2D.org 2013-2014
 * @tutorial
 * @summary CocoClips encapsulate reusable pieces of animation
 * @description CocoClips encapsulate reusable pieces of animation
 */

"#include CocoTimeline.jspp";

class CocoClip : CocoEventSource implements IEventListener, IEventTarget
{
	public var __instanceName:String;
	public var __clipPath:String;
	public var __symbolLoop:COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var __children:Array<CocoClip>;
	public var __timeline:CocoTimeline;

	// References to objects we do not own (do not delete in destructor)

	public reference var __scene:CocoScene;
	public reference var __image:CocoImage;
	public reference var __parent:CocoClip;
	public reference var __currentFrame:CocoKeyFrame;
	public reference var __childWithMaxTimelineDuration:CocoClip;
	public reference var __currentSequence:CocoSequence;
	public reference var __currentAudio:CocoAudio;

	// Animation Control Variables
	public var __currentTime:Time;
	public var __loopTime:Time;
	public var __loops:Integer;

	// Bounding Box & Hit Test
	public var __x:Float;
	public var __y:Float;
	public var __width:Float;
	public var __height:Float;
	public var __hasBoundingBox:Boolean;
	public var __vABS_TOP_LEFT:CocoVector;
	public var __vABS_TOP_RIGHT:CocoVector;
	public var __vABS_BOTTOM_LEFT:CocoVector;
	public var __vABS_BOTTOM_RIGHT:CocoVector;
	public var __vREL_TOP_LEFT:CocoVector;
	public var __vREL_TOP_RIGHT:CocoVector;
	public var __vREL_BOTTOM_LEFT:CocoVector;
	public var __vREL_BOTTOM_RIGHT:CocoVector;
	public var __vBBoxVrtx:CocoVector;
	public var __mBBox:CocoMatrix;

	// Touch Control Variables
	public var __touch_start_time:Time;
	public var __touch_start_point: CocoPoint;
	public var __touch_moved:Boolean;

	// Define CocoClip events
	public event OnClick();
	public event OnTouchStart(x:Float, y:Float);
	public event OnTouchMove(x:Float, y:Float);
	public event OnTouchEnd(x:Float, y:Float);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional image:CocoImage)
	{
		__symbolLoop					= COCO_CLIP_SYMBOL_LOOP_ENUM.CLIP_SYMBOL_LOOP_CONTINUOUS;
		__timeline						= new CocoTimeline();
		__children						= new Array<CocoClip>;
		__parent						= null;
		__currentTime					= 0.0;
		__currentFrame					= null;
		__hasBoundingBox				= false;
		__vABS_TOP_LEFT					= new CocoVector();
		__vABS_TOP_RIGHT				= new CocoVector();
		__vABS_BOTTOM_LEFT				= new CocoVector();
		__vABS_BOTTOM_RIGHT				= new CocoVector();
		__vREL_TOP_LEFT					= new CocoVector();
		__vREL_TOP_RIGHT				= new CocoVector();
		__vREL_BOTTOM_LEFT				= new CocoVector();
		__vREL_BOTTOM_RIGHT				= new CocoVector();
		__vBBoxVrtx						= new CocoVector();
		__mBBox							= new CocoMatrix();
		__touch_start_point 			= new CocoPoint;
		__childWithMaxTimelineDuration	= null;
		__currentSequence				= null;
		__currentAudio					= null;
		__clipPath						= "";
		__instanceName					= "";
		__scene							= null;
		__loopTime						= 0;
		__loops							= 0;
		__x								= 0.0;
		__y								= 0.0;
		__width							= 0.0;
		__height						= 0.0;
		__touch_start_time				= 0;
		__touch_moved					= false;
		__image = image;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __children;
		delete __timeline;
		delete __vABS_TOP_LEFT;
		delete __vABS_TOP_RIGHT;
		delete __vABS_BOTTOM_LEFT;
		delete __vABS_BOTTOM_RIGHT;
		delete __vREL_TOP_LEFT;
		delete __vREL_TOP_RIGHT;
		delete __vREL_BOTTOM_LEFT;
		delete __vREL_BOTTOM_RIGHT;
		delete __vBBoxVrtx;
		delete __mBBox;
		delete __touch_start_point;

		if(__currentFrame && __currentFrame.__isCloned)
			delete __currentFrame;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function prepare(scene:CocoScene)
	{
		__timeline.prepare(scene, this);
		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			__children[i].prepare(scene);
		}
		normalize();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
		if(__currentFrame)
			delete __currentFrame;

		__currentFrame = null;
		__currentTime = 0.0;
		__timeline.reset();

		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			__children[i].reset();
		}

		if(__currentAudio)
			__currentAudio.reset();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clear()
	{
		for(var i:Integer = __children.size()-1; i>=0; i--)
		{
			delete __children[i];
		}
		__children.clear();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function addChild(clipInstance:CocoClip) :CocoClip
	{
		if(!clipInstance) return null;
		if(!clipInstance.__instanceName) throw "Invalid instance name.";
		__children.push(clipInstance);
		clipInstance.__parent = this;
		if(__scene) clipInstance.__scene = __scene;
		normalize();
		clipInstance.__clipPath = (__clipPath ? __clipPath : __instanceName) + "/" + clipInstance.__instanceName;
		return clipInstance;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeChild(clipInstance:CocoClip) :CocoClip
	{
		if(!clipInstance) return null;
		var index:Integer = getChildIndex(clipInstance);
		clipInstance.__parent = null;
		if(index==-1) return null;
		__children.splice(index, 1);
		normalize();
		return clipInstance;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function normalize()
	{
		// Find clip with max timeline duration.
		__childWithMaxTimelineDuration = null;
		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			if(!__childWithMaxTimelineDuration)
			{
				__childWithMaxTimelineDuration = __children[i];
				continue;
			}
			if(__children[i].__timeline.__durationInTime > __childWithMaxTimelineDuration.__timeline.__durationInTime)
			{
				__childWithMaxTimelineDuration = __children[i];
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function moveChild(child:CocoClip, zIndex:Integer)
	{
		if(zIndex==-1) return;

		var children:Array<CocoClip> = new Array<CocoClip>;
		var i:Integer;
		var L:Integer = __children.size();

		for(i=0;i<zIndex;i++)
			if(child!=__children[i])
				children.push(__children[i]);

		children.push(child);

		for(i=zIndex;i<L;i++)
			if(child!=__children[i])
				children.push(__children[i]);

		delete __children;
		__children = children.reverse();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildByName(instanceName:String) :CocoClip
	{
		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			if(__children[i].__instanceName==instanceName)
			{
				return __children[i];
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildIndex(child:CocoClip) :Integer
	{
		if(child)
		{
			for(var i:Integer =__children.size()-1; i>=0; i--)
			{
				if(__children[i]==child)
				{
					return i;
				}
			}
		}
		return -1;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildrenByClassName(className:String) :Array<CocoClip>
	{
		var arr:Array<CocoClip> = new Array<CocoClip>;
		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			if(__children[i].__className==className)
			{
				arr.concat(__children[i].getChildrenByClassName(className));
				arr.push(__children[i]);
			}
		}
		return arr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoFrameByName(LabelName:String, optional pause:Boolean) :Boolean
	{
		var Label:CocoTimeLabel = __timeline.findLabelByName(LabelName);
		if(!Label) return false;

		//trace("\ngotoFrameByName: clip=" + __clipPath + ", label=" + LabelName + ", pause=" + String(pause));

		return gotoFrameByIndex(Label.frameIndex, pause);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoFrameByIndex(FrameIndex:Integer, optional pause:Boolean) :Boolean
	{
		//trace("\ngotoFrameByIndex: clip=" + __clipPath + ", index=" + (FrameIndex==-1 ? "STOP_ON_CURRENT_FRAME" : String(FrameIndex)) + ", pause=" + String(pause));

		var clip:CocoClip;
		for (var i:Integer = __children.size() - 1; i >= 0; i--)
		{
			clip = __children[i];

			if(FrameIndex==COCO_STOP_ON_CURRENT_FRAME)
				FrameIndex = clip.__currentFrame ? clip.__currentFrame.frameIndex : 0;

			clip.__timeline.__paused = pause;
			clip.__timeline.__currentFrameIndex = -1;

			clip.__currentTime = Time(FrameIndex) * clip.__timeline.__singleFrameDurationTime;

			//trace("-> child: " + clip.__clipPath + ", from=" + (clip.__currentFrame ? String(clip.__currentFrame.frameIndex) : "0") + ", to=" + String((FrameIndex==-1 ? clip.__currentFrame.frameIndex : FrameIndex)) + ", time=" + clip.__currentTime.toFixed(2) + ", paused=" + String(clip.__timeline.__paused));
		}
		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function __advanceTime(parentClipsDuration:Time)
	{
		if(__timeline.__paused) return;
		__currentTime += engine.TICK_TIME;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function tick(time:Time)
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
	{
		__scene = scene;

		var mv:CocoMatrix = ctx.getModelViewMatrix();
		var __pixelRatioScale:Float = 0;

		// Calculate the parent timeline duration in time from its children (which are siblings to this clip)
		var parentClipsDuration:Time = parentClip ? parentClip.__childWithMaxTimelineDuration.__timeline.__durationInTime : __timeline.__singleFrameDurationTime;

        // =============================================================================================================
        // Combine with parent clip and interpolate
        // =============================================================================================================
		if(parentClip)
		{
			// Calculate this clip's LoopTime which is the projection of this clip's timeline to its parent's timeline.
			__loops = Math.floor(__currentTime / parentClipsDuration);
			__loopTime = __currentTime - (Time(__loops) * parentClipsDuration);

			// Calculate frameIndex from time.
			var frameIndex:Float = __loopTime / __timeline.__singleFrameDurationTime;

			// Interpolate
			if(__currentFrame)
				delete __currentFrame;
			__currentFrame = __timeline.interpolate(frameIndex);
			if(!__currentFrame) return;

			// Combine parent clip currentframe values with this clip's interpolated frame values.
			 combine(__currentFrame, parentClip.__currentFrame);

			// If current frame is not visible then we skip processing children.
			if(__currentFrame.alpha == 0 || !__currentFrame.visible)
			{
				// Propagate clip's timeline.
				__advanceTime(parentClipsDuration);
				return;
			}

			// If we need to handle an event or if our parent has asked us to
			// calc our bounding box **AND** there is an actual event waiting
			// then we set calcBoundingBox to true.
			calcBoundingBox = (__currentFrame.handleEvents || calcBoundingBox) && engine.__hasTouchDeviceMessage();
		}

        // =============================================================================================================
		// RENDER!
        // =============================================================================================================

		__pixelRatioScale = window.devicePixelRatio;

		if(__image)
		{
			__pixelRatioScale = scene.__view_pixel_ratio / __image.pixelRatio;
			__currentFrame.scaleX *= __pixelRatioScale;
			__currentFrame.scaleY *= __pixelRatioScale;
			apply(__currentFrame, mv);
			__currentFrame.scaleX /= __pixelRatioScale;
			__currentFrame.scaleY /= __pixelRatioScale;

			// Get sequence name, first from current clip and if not found from parent clip.
			var sequenceName:String = __currentFrame.spriteSequenceName;
			if(!sequenceName && parentClip && parentClip.__currentFrame) sequenceName = parentClip.__currentFrame.spriteSequenceName;

			// Check if we should change sprite animation sequence
			if(!sequenceName)
			{
				__currentSequence = null;
			}
			else if(!__currentSequence || __currentSequence.name!=sequenceName)
			{
				//trace("Loading sprite animation sequence: " + __clipPath + " -> " + sequenceName);
				__currentSequence = __image.getSequence(sequenceName);
				__currentSequence.sequenceStartTime = __currentTime;
			}

			if(__image.isSpriteSheet && __currentSequence)
			{
				// Render animation sequence.
				var sequenceFrameIndex:Integer = __timeline.__paused ? 0 : Math.floor((__currentTime-__currentSequence.sequenceStartTime) / (1000.0 / scene.__fps)) % __currentSequence.frames.size();
				var frame:Integer = __currentSequence.frames[sequenceFrameIndex];
				ctx.drawFrame(scene, __image, frame, __currentFrame);
			}
			else
			{
				// Render a standard image.
				ctx.drawFrame(scene, __image, 0, __currentFrame);
			}
		}
		else
		{
			if(__currentFrame) apply(__currentFrame, mv);
			var childrenCount:Integer = __children.size();
			if(childrenCount>0)
			{
				var calcBoundingBoxChildren:Boolean = (calcBoundingBox && __width==0 && __height==0);
				var child:CocoClip;
				scene.__levelParents.push(this);
				for (var i:Integer = 0; i < childrenCount; i++)
				{
					mv.push();
					child = __children[i];
					child.paint(ctx, scene, this, calcBoundingBoxChildren, level+1);
					mv.pop();
				}
				scene.__levelParents.pop();
			}
		}

		if(this!=scene.__root)
		{
	        // =============================================================================================================
			// Calculare bounding box
	        // =============================================================================================================
			if(calcBoundingBox)
			{
				// Calculate bounding box from explicit width x height (eg. skin, CocoUIView, etc.)
				if(__width > 0 || __height > 0)
					initBoundingBoxFromRect(ctx, mv, __width/2, __height/2, __pixelRatioScale);

				// Calculate bounding box vertices
				else if(__image)
					initBoundingBoxFromRect(ctx, mv, __image.textureCellWidth/2, __image.textureCellHeight/2, __pixelRatioScale);

				// Calculate bounding box from children
				else if(__children.size()>0)
					initBoundingBoxFromChildren(scene, mv);
			}

	        // =============================================================================================================
			// Handle touch event
	        // =============================================================================================================
			if(calcBoundingBox && __currentFrame.handleEvents)
			{
				var deviceMessage:DEVICE_MESSAGE = engine.__peekDeviceMessage(DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_MASK);
				if(deviceMessage && !deviceMessage.handled)
				{
		   	        var x:Float = (deviceMessage.x0 - ctx.getWidth() / 2.0) / scene.__view_scale;
					var y:Float = (deviceMessage.y0 - ctx.getHeight() / 2.0) / scene.__view_scale;

					// Point in quad?
					if(hitTest(x,y))
		   	        {
		   	        	//trace("hit: " + __instanceName );
		   	        	switch(deviceMessage.type)
		   	        	{
						case DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_START:
							__touch_start_time = engine.__clock;
							__touch_start_point.x = deviceMessage.x0;
							__touch_start_point.y = deviceMessage.y0;
							dispatchEvent(this.OnTouchStart, deviceMessage.x0, deviceMessage.y0);
							if(this.OnTouchStart.stopPropagation)
							{
								deviceMessage.handled = true;
							}
							break;

						case DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_MOVE:
							dispatchEvent(this.OnTouchMove, deviceMessage.x0, deviceMessage.y0);
							if(this.OnTouchMove.stopPropagation)
							{
								deviceMessage.handled = true;
							}
							break;

						case DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_END:
							dispatchEvent(this.OnTouchEnd, deviceMessage.x0, deviceMessage.y0);
							if(this.OnTouchEnd.stopPropagation)
							{
								deviceMessage.handled = true;
							}
							else if(Math.abs(__touch_start_point.x-deviceMessage.x0)<COCO_CONTROL_MOVE_SNAP_PIXELS && Math.abs(__touch_start_point.y-deviceMessage.y0)<COCO_CONTROL_MOVE_SNAP_PIXELS)
							{
								// If the clip hasn't moved significantly, then it is a click
								trace("click: " + __instanceName);
								dispatchEvent(this.OnClick);
								engine.__pushClicked(this);
							}
							__touch_start_time = 0;
							break;
		   	        	}
					}
				}
			}

			//if(__clipPath=="frm_Reserverations/frm_ReserverationsScrollView")//frm_ReserverationsScrollView/__scrollContainer
			//ctx.drawBoundingBox(this);

	        // =============================================================================================================
			// Execute KeyFrame
	        // =============================================================================================================
			if(!__timeline.__paused)
			{
				if(__currentFrame.action)
				{
					//engine.__trace(scene, this, "@@ACTION");
					__currentFrame.action.call(scene);
				}

				if(__currentFrame.nextState)
				{
					//engine.__trace(scene, this, "@@NEXT_STATE");
					engine.setNextState(__currentFrame.nextState);
				}

				if(__currentFrame.audio)
				{
					//engine.__trace(scene, this, "@@AUDIO");
					__currentFrame.audio.tick();
				}

		        // =============================================================================================================
				// Audio Management (the trick here is not to reset a background sound when executing an action)
		        // =============================================================================================================
				if(__currentFrame.audio)
				{
					if(__currentAudio && ((__currentFrame.audio != __currentAudio) || (__currentAudio.loops!=0)))
						__currentAudio.reset();
					__currentAudio = __currentFrame.audio;
				}
			}

	        // =============================================================================================================
			// Tick audio
	        // =============================================================================================================
			if(__currentAudio)
			{
				__currentAudio.tick();
				if(__currentAudio.ended())
				{
					__currentAudio.reset();
					__currentAudio = null;
				}
			}
		}

		// =============================================================================================================
		// Propagate clip's timeline.
		// =============================================================================================================
		__advanceTime(parentClipsDuration);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function combine(F1:CocoKeyFrame, F2:CocoKeyFrame)
	{
		if(!F2) return;
		if(!F1.filter) F1.filter = F2.filter;
		F1.red = F1.red * F2.red;
		F1.green = F1.green * F2.green;
		F1.blue = F1.blue * F2.blue;
	    F1.alpha = F1.alpha * F2.alpha;
	    F1.visible = F1.visible && F2.visible;
	    F1.flipH = (F1.flipH && !F2.flipH) || (!F1.flipH && F2.flipH);
	    F1.flipV = (F1.flipV && !F2.flipV) || (!F1.flipV && F2.flipV);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected function apply(F:CocoKeyFrame, matrix:CocoMatrix)
	{
		if(F.x!=0 || F.y!=0) matrix.translate(F.x, F.y);
		if(F.rotation!=0) matrix.rotateZ(F.rotation * RADIANS);
		if(F.scaleX!=1 ||F.scaleY!=1) matrix.scale(F.scaleX, F.scaleY);
		if(F.pivotX!=0 || F.pivotY!=0) matrix.translate(-F.pivotX, -F.pivotY);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function hitTest(wx:Float, wy:Float) :Boolean
	{
		return ((((wx - __vABS_TOP_LEFT.X) * (__vABS_TOP_RIGHT.Y - __vABS_TOP_LEFT.Y) - (__vABS_TOP_RIGHT.X - __vABS_TOP_LEFT.X) * (wy - __vABS_TOP_LEFT.Y)) * ((wx - __vABS_BOTTOM_RIGHT.X) * (__vABS_BOTTOM_LEFT.Y - __vABS_BOTTOM_RIGHT.Y) - (__vABS_BOTTOM_LEFT.X - __vABS_BOTTOM_RIGHT.X) * (wy - __vABS_BOTTOM_RIGHT.Y))) > 0
			&& (((wx - __vABS_TOP_RIGHT.X) * (__vABS_BOTTOM_RIGHT.Y - __vABS_TOP_RIGHT.Y) - (__vABS_BOTTOM_RIGHT.X - __vABS_TOP_RIGHT.X) * (wy - __vABS_TOP_RIGHT.Y)) * ((wx - __vABS_BOTTOM_LEFT.X) * (__vABS_TOP_LEFT.Y - __vABS_BOTTOM_LEFT.Y) - (__vABS_TOP_LEFT.X - __vABS_BOTTOM_LEFT.X) * (wy - __vABS_BOTTOM_LEFT.Y))) > 0);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function initBoundingBoxFromRect(ctx:ICocoRenderContext, mv:CocoMatrix, W2:Float, H2:Float, __pixelRatioScale:Float)
	{
		__mBBox.identity();

		__currentFrame.scaleX *= __pixelRatioScale;
		__currentFrame.scaleY *= __pixelRatioScale;
		apply(__currentFrame,__mBBox);
		__currentFrame.scaleX /= __pixelRatioScale;
		__currentFrame.scaleY /= __pixelRatioScale;

		//__currentFrame.apply(__mBBox);

		__vBBoxVrtx.reset(-W2, -H2, 0, 1);
		__vREL_TOP_LEFT	= __mBBox.multiplyByVector(__vBBoxVrtx);
		__vABS_TOP_LEFT	= mv.multiplyByVector(__vBBoxVrtx);

		__vBBoxVrtx.reset(W2, -H2, 0, 1);
		__vREL_TOP_RIGHT = __mBBox.multiplyByVector(__vBBoxVrtx);
		__vABS_TOP_RIGHT = mv.multiplyByVector(__vBBoxVrtx);

		__vBBoxVrtx.reset(-W2, H2, 0, 1);
		__vREL_BOTTOM_LEFT = __mBBox.multiplyByVector(__vBBoxVrtx);
		__vABS_BOTTOM_LEFT = mv.multiplyByVector(__vBBoxVrtx);

		__vBBoxVrtx.reset(W2, H2, 0, 1);
		__vREL_BOTTOM_RIGHT	= __mBBox.multiplyByVector(__vBBoxVrtx);
		__vABS_BOTTOM_RIGHT = mv.multiplyByVector(__vBBoxVrtx);

	    __hasBoundingBox = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function initBoundingBoxFromChildren(scene:CocoScene, mv:CocoMatrix)
	{
	    // This function calculates the bounding box of all our children.

	    __hasBoundingBox = false;

	    if(__children.size()==0)
	    	return;

	    __vREL_TOP_LEFT.X = 100000;
		__vREL_TOP_RIGHT.X = -100000;
	    __vREL_TOP_LEFT.Y = 100000;
	    __vREL_BOTTOM_LEFT.Y = -100000;

        var Child :CocoClip
        var L:Integer = __children.size();
        for (var i:Integer = 0; i < L; i++)
	    {
            Child = __children[i];
            if(Child.__hasBoundingBox)
            {
				if(Child.__vREL_TOP_LEFT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_TOP_LEFT.X;
				if(Child.__vREL_TOP_LEFT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_TOP_LEFT.X;
				if(Child.__vREL_TOP_LEFT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_TOP_LEFT.Y;
				if(Child.__vREL_TOP_LEFT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_TOP_LEFT.Y;

				if(Child.__vREL_TOP_RIGHT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_TOP_RIGHT.X;
				if(Child.__vREL_TOP_RIGHT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_TOP_RIGHT.X;
				if(Child.__vREL_TOP_RIGHT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_TOP_RIGHT.Y;
				if(Child.__vREL_TOP_RIGHT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_TOP_RIGHT.Y;

				if(Child.__vREL_BOTTOM_LEFT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_BOTTOM_LEFT.X;
				if(Child.__vREL_BOTTOM_LEFT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_BOTTOM_LEFT.X;
				if(Child.__vREL_BOTTOM_LEFT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_BOTTOM_LEFT.Y;
				if(Child.__vREL_BOTTOM_LEFT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_BOTTOM_LEFT.Y;

				if(Child.__vREL_BOTTOM_RIGHT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_BOTTOM_RIGHT.X;
				if(Child.__vREL_BOTTOM_RIGHT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_BOTTOM_RIGHT.X;
				if(Child.__vREL_BOTTOM_RIGHT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_BOTTOM_RIGHT.Y;
				if(Child.__vREL_BOTTOM_RIGHT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_BOTTOM_RIGHT.Y;
            }
	    }

	    __vREL_TOP_RIGHT.Y = __vREL_TOP_LEFT.Y;
	    __vREL_BOTTOM_LEFT.X = __vREL_TOP_LEFT.X;
	    __vREL_BOTTOM_RIGHT.X = __vREL_TOP_RIGHT.X;
	    __vREL_BOTTOM_RIGHT.Y = __vREL_BOTTOM_LEFT.Y;

	    __vABS_TOP_LEFT = mv.multiplyByVector(__vREL_TOP_LEFT);
	    __vABS_TOP_RIGHT = mv.multiplyByVector(__vREL_TOP_RIGHT);
	    __vABS_BOTTOM_LEFT = mv.multiplyByVector(__vREL_BOTTOM_LEFT);
	    __vABS_BOTTOM_RIGHT = mv.multiplyByVector(__vREL_BOTTOM_RIGHT);

		__mBBox.identity();

		apply(__currentFrame, __mBBox);

	    __vREL_TOP_LEFT = __mBBox.multiplyByVector(__vREL_TOP_LEFT);
	    __vREL_TOP_RIGHT = __mBBox.multiplyByVector(__vREL_TOP_RIGHT);
	    __vREL_BOTTOM_LEFT = __mBBox.multiplyByVector(__vREL_BOTTOM_LEFT);
	    __vREL_BOTTOM_RIGHT = __mBBox.multiplyByVector(__vREL_BOTTOM_RIGHT);

	    __hasBoundingBox = true;
	}
}
