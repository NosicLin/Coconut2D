/* Generated by Coconut2D C++ Compiler from file CocoClip.jspp */

#ifndef __COCOCLIP_HPP__
#define __COCOCLIP_HPP__

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "Coconut2D.hpp"
#include "CocoEvents.hpp"
#include "IEventTarget.hpp"
#include "CocoScene.hpp"
#include "Constants.hpp"
#include "WebGLRenderingContext.hpp"
#include "CocoTimeline.hpp"
#include "CocoMatrix.hpp"
#include "CocoImage.hpp"
#include "CocoAudio.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoClipOnTouchCancelEvent : public CocoEvent
{
	float x;
	float y;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoClipOnTouchEndEvent : public CocoEvent
{
	float x;
	float y;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoClipOnTouchMoveEvent : public CocoEvent
{
	float x;
	float y;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoClipOnTouchStartEvent : public CocoEvent
{
	float x;
	float y;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoClipOnDblClickEvent : public CocoEvent {};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoClipOnClickEvent : public CocoEvent {};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoClip : public CocoEventSource, public IEventTarget
{
public:
	String __instanceName;
	String __clipPath;
	CocoScene* __scene;
	CocoImage* __image;
	COCO_CLIP_SYMBOL_LOOP_ENUM __symbolLoop;
	Array<CocoClip*>* __children;
	CocoTimeline* __timeline;
	CocoClip* __parent;
	String text;
	String textFontName;
	int textFontSize;
	COCO_TEXT_ALIGN_ENUM textHAlign;
	COCO_TEXT_ALIGN_ENUM textVAlign;
	bool textMultiline;
	COCO_TEXT_TRIMMING_ENUM textTrimming;
	String textColor;
	int textWidth;
	int textHeight;
	Time __currentTime;
	Time __loopTime;
	int __loops;
	CocoKeyFrame* __currentFrame;
	CocoClip* __childWithMaxTimelineDuration;
	bool __hasBoundingBox;
	CocoVector* __vABS_TOP_LEFT;
	CocoVector* __vABS_TOP_RIGHT;
	CocoVector* __vABS_BOTTOM_LEFT;
	CocoVector* __vABS_BOTTOM_RIGHT;
	CocoVector* __vREL_TOP_LEFT;
	CocoVector* __vREL_TOP_RIGHT;
	CocoVector* __vREL_BOTTOM_LEFT;
	CocoVector* __vREL_BOTTOM_RIGHT;
	CocoVector* __vTemp;
	CocoMatrix* __mTemp;
	CocoSequence* __currentSequence;
	CocoAudio* __currentAudio;
	static CocoClipOnClickEvent OnClick;
	static CocoClipOnDblClickEvent OnDblClick;
	static CocoClipOnTouchStartEvent OnTouchStart;
	static CocoClipOnTouchMoveEvent OnTouchMove;
	static CocoClipOnTouchEndEvent OnTouchEnd;
	static CocoClipOnTouchCancelEvent OnTouchCancel;
	CocoClip(CocoImage* image = nullptr);
	virtual ~CocoClip();
	void prepare(CocoScene* scene);
	void setText(String text);
	void setText(String text, String fontName, int fontSizePixels, COCO_TEXT_ALIGN_ENUM hAlign, COCO_TEXT_ALIGN_ENUM vAlign, bool multiline, COCO_TEXT_TRIMMING_ENUM trimming, String CSSColor, int textRectWidth, int textRectHeight);
	void reset();
	void clear();
	virtual CocoClip* addChild(CocoClip* clipInstance);
	CocoClip* removeChild(CocoClip* clipInstance);
	void normalize();
	CocoClip* getChildByName(String instanceName);
	int getChildIndex(CocoClip* child);
	bool gotoFrameByName(String LabelName, bool pause = false);
	bool gotoFrameByIndex(int FrameIndex, bool pause = false);
	void __advanceTime(Time parentClipsDuration);
	virtual void paint(WebGLRenderingContext* gl, CocoScene* scene, CocoClip* parentClip, bool calcBoundingBox, int level);
	void combine(CocoKeyFrame* F1, CocoKeyFrame* F2);
	void apply(CocoKeyFrame* F, CocoMatrix* matrix);
	bool hitTest(float wx, float wy);
	void initBoundingBoxFromTexture(CocoScene* scene, float W2, float H2);
	void initBoundingBoxFromChildren(CocoScene* scene);
	void drawBoundingBox(CocoScene* scene, WebGLRenderingContext* gl);
};

#endif // __COCOCLIP_HPP__
