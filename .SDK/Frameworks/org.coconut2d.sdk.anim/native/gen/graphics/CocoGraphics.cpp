/* Generated by Coconut2D C++ Compiler from file CocoGraphics.jspp */

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "CocoGraphics.hpp"
#include "CocoImage.hpp"
#include "CanvasRenderingContext2D.hpp"
#include "HTMLImageElement.hpp"
#include "Constants.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoGraphics::CocoGraphics()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoGraphics::~CocoGraphics()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoImage* CocoGraphics::createTextTexture(CocoScene* scene, String text, String fontName, int fontSizePixels, COCO_TEXT_ALIGN_ENUM hAlign, COCO_TEXT_ALIGN_ENUM vAlign, bool multiline, COCO_TEXT_TRIMMING_ENUM trimming, String CSSColor, int textRectWidth, int textRectHeight)
{
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoGraphics::drawSkin(CanvasRenderingContext2D* ctx, CocoImage* skinImage, float x, float y, float width, float height)
{
	if(!skinImage)
	{
		return;
	}
	float r = 1;
	float p = 1;
	Image* src = skinImage->image;
	float cx = 0;
	float cy = 0;
	float cw = width;
	float ch = height;
	float W1 = (*skinImage->skin)[0];
	float W2 = (*skinImage->skin)[1];
	float W3 = (*skinImage->skin)[2];
	float H1 = (*skinImage->skin)[3];
	float H2 = (*skinImage->skin)[4];
	float H3 = (*skinImage->skin)[5];
	COCO_SKIN_TILE_ENUM RW1H1 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_NONE;
	COCO_SKIN_TILE_ENUM RW2H1 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_X;
	COCO_SKIN_TILE_ENUM RW3H1 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_NONE;
	COCO_SKIN_TILE_ENUM RW1H2 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_Y;
	COCO_SKIN_TILE_ENUM RW2H2 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_XY;
	COCO_SKIN_TILE_ENUM RW3H2 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_Y;
	COCO_SKIN_TILE_ENUM RW1H3 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_NONE;
	COCO_SKIN_TILE_ENUM RW2H3 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_X;
	COCO_SKIN_TILE_ENUM RW3H3 = COCO_SKIN_TILE_ENUM::TILE_REPEAT_NONE;
	float F = 0.0;
	float RmW = 0.0;
	float RmH = 0.0;
	Array<float>* R = (new Array<float> ())->push(0)->push(0)->push(0);
	Array<float>* C = (new Array<float> ())->push(0)->push(0)->push(0);
	if(CocoGraphics::__fixedH((new Array<COCO_SKIN_TILE_ENUM> ())->push(RW1H1)->push(RW2H1)->push(RW3H1)))
	{
		(*R)[0] = H1;
	}
	if(CocoGraphics::__fixedH((new Array<COCO_SKIN_TILE_ENUM> ())->push(RW1H2)->push(RW2H2)->push(RW3H2)))
	{
		(*R)[1] = H2;
	}
	if(CocoGraphics::__fixedH((new Array<COCO_SKIN_TILE_ENUM> ())->push(RW1H3)->push(RW2H3)->push(RW3H3)))
	{
		(*R)[2] = H3;
	}
	if(CocoGraphics::__fixedW((new Array<COCO_SKIN_TILE_ENUM> ())->push(RW1H1)->push(RW1H2)->push(RW1H3)))
	{
		(*C)[0] = W1;
	}
	if(CocoGraphics::__fixedW((new Array<COCO_SKIN_TILE_ENUM> ())->push(RW2H1)->push(RW2H2)->push(RW2H3)))
	{
		(*C)[1] = W2;
	}
	if(CocoGraphics::__fixedW((new Array<COCO_SKIN_TILE_ENUM> ())->push(RW3H1)->push(RW3H2)->push(RW3H3)))
	{
		(*C)[2] = W3;
	}
	F = ((float)CocoGraphics::__countFixed((new Array<float> ())->push(H1)->push(H2)->push(H3)) - CocoGraphics::__countFixed(R));
	RmH = std::max(((float)0.0), height - (*R)[0] - (*R)[1] - (*R)[2]);
	if(H1 && !(*R)[0])
	{
		(*R)[0] = ((float)(RmH) / (float)(F));
	}
	if(H2 && !(*R)[1])
	{
		(*R)[1] = ((float)(RmH) / (float)(F));
	}
	if(H3 && !(*R)[2])
	{
		(*R)[2] = ((float)(RmH) / (float)(F));
	}
	F = ((float)CocoGraphics::__countFixed((new Array<float> ())->push(W1)->push(W2)->push(W3)) - CocoGraphics::__countFixed(C));
	RmW = std::max(((float)0.0), width - (*C)[0] - (*C)[1] - (*C)[2]);
	if(W1 && !(*C)[0])
	{
		(*C)[0] = ((float)(RmW) / (float)(F));
	}
	if(W2 && !(*C)[1])
	{
		(*C)[1] = ((float)(RmW) / (float)(F));
	}
	if(W3 && !(*C)[2])
	{
		(*C)[2] = ((float)(RmW) / (float)(F));
	}
	ctx->save();
	ctx->setTransform(1, 0, 0, 1, 0, 0);
	CocoGraphics::__drawSlice(ctx, skinImage, x, y, (*C)[0], (*R)[0], 0, 0, W1, H1, RW1H1);
	CocoGraphics::__drawSlice(ctx, skinImage, x + (*C)[0], y, (*C)[1], (*R)[0], W1, 0, W2, H1, RW2H1);
	CocoGraphics::__drawSlice(ctx, skinImage, x + (*C)[0] + (*C)[1], y, (*C)[2], (*R)[0], W1 + W2, 0, W3, H1, RW3H1);
	CocoGraphics::__drawSlice(ctx, skinImage, x, y + (*R)[0], (*C)[0], (*R)[1], 0, H1, W1, H2, RW1H2);
	CocoGraphics::__drawSlice(ctx, skinImage, x + (*C)[0], y + (*R)[0], (*C)[1], (*R)[1], W1, H1, W2, H2, RW2H2);
	CocoGraphics::__drawSlice(ctx, skinImage, x + (*C)[0] + (*C)[1], y + (*R)[0], (*C)[2], (*R)[1], W1 + W2, H1, W3, H2, RW3H2);
	CocoGraphics::__drawSlice(ctx, skinImage, x, y + (*R)[0] + (*R)[1], (*C)[0], (*R)[2], 0, H1 + H2, W1, H3, RW1H3);
	CocoGraphics::__drawSlice(ctx, skinImage, x + (*C)[0], y + (*R)[0] + (*R)[1], (*C)[1], (*R)[2], W1, H1 + H2, W2, H3, RW2H3);
	CocoGraphics::__drawSlice(ctx, skinImage, x + (*C)[0] + (*C)[1], y + (*R)[0] + (*R)[1], (*C)[2], (*R)[2], W1 + W2, H1 + H2, W3, H3, RW3H3);
	ctx->restore();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoGraphics::__drawSlice(CanvasRenderingContext2D* ctx, CocoImage* skin, float cx, float cy, float cw, float ch, float sx, float sy, float sw, float sh, COCO_SKIN_TILE_ENUM r)
{
	if(!cw || !ch || !sw || !sh)
	{
		return;
	}
	if(r == COCO_SKIN_TILE_ENUM::TILE_REPEAT_NONE)
	{
		CocoGraphics::__drawRegion(ctx, skin, sx, sy, sw, sh, cx, cy, cw, ch);
	}
	else
	{
		CocoGraphics::__tileSkin(ctx, skin, sx, sy, sw, sh, cx, cy, cw, ch);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
int CocoGraphics::__countFixed(Array<float>* v)
{
	int c = 0;
	int L = v->size();
	for(int i = 0; i < L; i++)
		if((*v)[i])
		{
			c++;
		}
	return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CocoGraphics::__fixedW(Array<COCO_SKIN_TILE_ENUM>* v)
{
	bool R = false;
	int L = v->size();
	for(int i = 0; i < L; i++)
	{
		R |= (((*v)[i] == COCO_SKIN_TILE_ENUM::TILE_REPEAT_NONE) || ((*v)[i] == COCO_SKIN_TILE_ENUM::TILE_REPEAT_Y));
	}
	return R;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CocoGraphics::__fixedH(Array<COCO_SKIN_TILE_ENUM>* v)
{
	bool R = false;
	int L = v->size();
	for(int i = 0; i < L; i++)
	{
		R |= (((*v)[i] == COCO_SKIN_TILE_ENUM::TILE_REPEAT_NONE) || ((*v)[i] == COCO_SKIN_TILE_ENUM::TILE_REPEAT_X));
	}
	return R;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoGraphics::__tileSkin(CanvasRenderingContext2D* ctx, CocoImage* image, float cellX, float cellY, float cellWidth, float cellHeight, float x, float y, float width, float height)
{
	if(cellWidth == 0 || cellHeight == 0)
	{
		return;
	}
	float ix = 0.0, iy = 0.0, cx = 0.0, cy = 0.0, cw = 0.0, ch = 0.0, r = 0.0;
	for(iy = y; iy <= y + height; iy += cellHeight)
	{
		for(ix = x; ix <= x + width; ix += cellWidth)
		{
			cw = (ix + cellWidth <= x + width ? cellWidth : x + width - ix);
			ch = (iy + cellHeight <= y + height ? cellHeight : y + height - iy);
			if(cw > 0 && ch > 0)
			{
				CocoGraphics::__drawRegion(ctx, image, cellX, cellY, cw, ch, ix, iy, cw, ch);
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoGraphics::__drawRegion(CanvasRenderingContext2D* ctx, CocoImage* image, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh)
{
	if(!ctx || !image || !sw || !sh || !dw || !dh)
	{
		return;
	}
	ctx->drawImage(image->image, sx, sy, sw, sh, dx, dy, dw, dh);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoGraphics::drawImage(CocoImage* image, float x, float y, float stretchW, float stretchH, COCO_CONTROL_ANCHOR_ENUM anchor, bool clear)
{
}
