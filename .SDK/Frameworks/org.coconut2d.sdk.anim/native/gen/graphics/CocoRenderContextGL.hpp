/* Generated by Coconut2D C++ Compiler from file CocoRenderContextGL.jspp */

#ifndef __COCORENDERCONTEXTGL_HPP__
#define __COCORENDERCONTEXTGL_HPP__

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Coconut2D.hpp"
#include "ICocoImageRenderData.hpp"
#include "WebGLRenderingContext.hpp"
#include "ICocoRenderContext.hpp"
#include "CocoMatrix.hpp"
#include "CocoScene.hpp"
#include "CocoImage.hpp"
#include "CocoTimeline.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CocoImageRenderDataGL : public ICocoImageRenderData
{
public:
	WebGLTexture* texture;
	WebGLBuffer* buffer;
	const String __className = String("CocoImageRenderDataGL");
	CocoImageRenderDataGL();
	virtual ~CocoImageRenderDataGL();
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CocoRenderContextGL : public ICocoRenderContext
{
public:
	CocoMatrix* __modelViewMatrix;
	CocoMatrix* __projectionMatrix;
	WebGLProgram* __glProgram;
	WebGLProgram* __glProgram_Simple;
	WebGLProgram* __glProgram_SimpleWithAlpha;
	WebGLProgram* __glProgram_SaturationWithAlpha;
	String __vertex_shader_Common;
	String __fragment_shader_Simple;
	String __fragment_shader_SimpleWithAlpha;
	String __fragment_shader_SaturationWithAlpha;
	String __boundingBoxVertexShader;
	String __boundingBoxFragmentShader;
	WebGLProgram* __boundingBoxProgram;
	WebGLBuffer* __boundingBoxBuffer;
	WebGLRenderingContext* gl;
	const String __className = String("CocoRenderContextGL");
	CocoRenderContextGL(WebGLRenderingContext* ctx);
	virtual ~CocoRenderContextGL();
	void flush();
	CocoMatrix* getModelViewMatrix();
	CocoMatrix* getProjectionMatrix();
	float getWidth();
	float getHeight();
	void cls();
	bool ready();
	void prepare(CocoScene* scene);
	WebGLProgram* makeProgram(WebGLRenderingContext* gl, String vs, String fs);
	ICocoImageRenderData* prepareImage(CocoImage* img);
	void update(CocoMatrix* m, WebGLUniformLocation* ul);
	void drawFrame(CocoScene* scene, CocoImage* image, int frame, CocoKeyFrame* KF);
	bool setFilter(int filter);
};

#endif // __COCORENDERCONTEXTGL_HPP__
