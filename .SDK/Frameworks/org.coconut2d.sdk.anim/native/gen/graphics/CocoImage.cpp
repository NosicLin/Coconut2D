/* Generated by Coconut2D C++ Compiler from file CocoImage.jspp */

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "CocoImage.hpp"
#include "HTMLImageElement.hpp"
#include "CocoScene.hpp"
#include "ICocoImageRenderData.hpp"
#include "HTMLCanvasElement.hpp"
#include "CocoEngine.hpp"
#include "ICocoRenderContext.hpp"
#include "HTMLWindow.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoSequence::CocoSequence(String name, Array<int>* framesArray)
{
	this->name = name;
	this->frames = framesArray;
	this->sequenceStartTime = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoSequence::~CocoSequence()
{
	if(frames)
	{
		frames = (delete frames, nullptr);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoImageSibling::CocoImageSibling(String url, float pixelRatio, float textureWidth, float textureHeight)
{
	this->url = url;
	this->pixelRatio = pixelRatio;
	this->textureWidth = textureWidth;
	this->textureHeight = textureHeight;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoImage::CocoImage()
{
	renderData = nullptr;
	baseUrl = String("");
	color = new Float32Array((new Array<float> ())->push(1.0)->push(1.0)->push(1.0)->push(1.0));
	image = nullptr;
	isSpriteSheet = false;
	pixelRatio = 1.0;
	sequences = new Array<CocoSequence*> ();
	skin = nullptr;
	symbolName = String("");
	texSize = new Float32Array((new Array<float> ())->push(1.0)->push(1.0));
	textureCellHeight = 0;
	textureCellWidth = 0;
	textureGrid = new Float32Array((new Array<float> ())->push(0.0)->push(0.0));
	textureGrid = new Float32Array((new Array<float> ())->push(0.0));
	viewOptimalHeight = 0;
	viewOptimalWidth = 0;
	viewSiblings = new Array<CocoImageSibling*> ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoImage::~CocoImage()
{
	scene = nullptr;
	if(viewSiblings)
	{
		viewSiblings = (delete viewSiblings, nullptr);
	}
	if(sequences)
	{
		sequences = (delete sequences, nullptr);
	}
	if(textureGrid)
	{
		textureGrid = (delete textureGrid, nullptr);
	}
	if(color)
	{
		color = (delete color, nullptr);
	}
	if(texSize)
	{
		texSize = (delete texSize, nullptr);
	}
	if(renderData)
	{
		renderData = (delete renderData, nullptr);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoImage::createFromCanvas(CocoScene* scene, HTMLCanvasElement* canvas, float width, float height)
{
	if(image)
	{
		image = (delete image, nullptr);
	}
	String url = canvas->toDataURL();
	image = new Image();
	image->load(url);
	textureCellWidth = ((float)width);
	textureCellHeight = ((float)height);
	textureGrid = new Float32Array((new Array<float> ())->push(0)->push(0));
	this->renderData = engine->__ctx->prepareImage(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoImageSibling* CocoImage::addSibling(CocoImageSibling* sibling)
{
	viewSiblings->push(sibling);
	return sibling;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoSequence* CocoImage::addSequence(CocoSequence* sequence)
{
	if(!sequence)
	{
		return nullptr;
	}
	if(getSequence(sequence->name))
	{
		throw CocoException(String("Sequence ") + sequence->name + String(" already exists."));
	}
	sequences->push(sequence);
	isSpriteSheet = true;
	return sequence;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoSequence* CocoImage::getSequence(String name)
{
	for(int i = sequences->size() - 1; i >= 0; i--)
	{
		if((*sequences)[i]->name == name)
		{
			return (*sequences)[i];
		}
	}
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoImage::load()
{
	CocoImageSibling* sibling;
	if(scene->__view_width && scene->__view_height)
	{
		float w = ((float)viewOptimalWidth) * scene->__view_scale * window->devicePixelRatio;
		float h = ((float)viewOptimalHeight) * scene->__view_scale * window->devicePixelRatio;
		for(int j = 0; j < viewSiblings->size(); j++)
		{
			sibling = (*viewSiblings)[j];
			if(sibling->textureWidth >= w && sibling->textureHeight >= h)
			{
				image = new Image();
				image->load(baseUrl + sibling->url);
				textureCellWidth = sibling->textureWidth;
				textureCellHeight = sibling->textureHeight;
				pixelRatio = sibling->pixelRatio;
				break;
			}
		}
	}
	if(!image)
	{
		sibling = (*viewSiblings)[viewSiblings->size() - 1];
		image = new Image();
		image->load(baseUrl + sibling->url);
		textureCellWidth = sibling->textureWidth;
		textureCellHeight = sibling->textureHeight;
		pixelRatio = sibling->pixelRatio;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CocoImage::loaded()
{
	if(renderData)
	{
		return true;
	}
	if(!image || !image->__get_complete())
	{
		return false;
	}
	renderData = engine->__ctx->prepareImage(this);
	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoImage::unload()
{
	if(image)
	{
		image = (delete image, nullptr);
	}
}
