/* Generated by Coconut2D C++ Compiler from file CocoEvents.jspp */

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CocoEvents.hpp"
#include "IEventListener.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoEvent::CocoEvent(String type, bool cancelable, bool bubbles)
{
	this->type = type;
	this->cancelable = cancelable;
	this->bubbles = bubbles;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoEvent::~CocoEvent()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CocoEvent::is(CocoEvent* Event)
{
	return Event->type == type;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoEvent::cancelBubble()
{
	stopPropagation = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoEvent::preventDefault()
{
	defaultPrevented = true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoEventConnectionPoint::CocoEventConnectionPoint(CocoEventSource* Source, CocoEvent* Event, IEventListener* Listener, Function* Callback)
{
	this->Event = Event;
	this->Listener = Listener;
	this->Callback = Callback;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoEventConnectionPoint::~CocoEventConnectionPoint()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoEventSource::CocoEventSource()
{
	__eventListeners = new Array<CocoEventConnectionPoint*> ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoEventSource::~CocoEventSource()
{
	if(__eventListeners)
	{
		__eventListeners = (delete __eventListeners, nullptr);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoEventSource::addEventListener(CocoEvent* Event, IEventListener* Listener, Function* Callback)
{
	CocoEventConnectionPoint* item = new CocoEventConnectionPoint(this, Event, Listener, Callback);
	__eventListeners->push(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CocoEventSource::removeEventListener(CocoEvent* Event, IEventListener* Listener, Function* Callback)
{
	int i = 0;
	for(i = __eventListeners->size() - 1; i >= 0; i--)
	{
		if((*__eventListeners)[i]->Event->is(Event) && (*__eventListeners)[i]->Listener == Listener && (*__eventListeners)[i]->Callback == Callback)
		{
			__eventListeners->splice(i, 1);
			return true;
		}
	}
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
int CocoEventSource::dispatchEvent(CocoEvent* Event)
{
	int c = 0;
	int i = 0;
	return 0;
}
