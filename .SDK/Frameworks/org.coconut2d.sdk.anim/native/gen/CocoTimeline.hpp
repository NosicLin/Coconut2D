/* Generated by Coconut2D C++ Compiler from file CocoTimeline.jspp */

#ifndef __COCOTIMELINE_HPP__
#define __COCOTIMELINE_HPP__

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Coconut2D.hpp"
#include "Constants.hpp"
#include "CocoAudio.hpp"
#include "CocoScene.hpp"
#include "CocoClip.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CocoKeyFrame
{
	int frameIndex;
	float __frameIndex;
	COCO_KEYFRAME_INTERPOLATION_ENUM frameInterpolation;
	bool handleEvents;
	bool visible;
	int filter;
	float red;
	float green;
	float blue;
	float alpha;
	float x;
	float y;
	float pivotX;
	float pivotY;
	float scaleX;
	float scaleY;
	float rotation;
	CocoAction action;
	State* nextState;
	CocoAudio* audio;
	bool flipH;
	bool flipV;
	String spriteSequenceName;
	bool __isCloned;
	CocoKeyFrame() {};
	CocoKeyFrame(CocoKeyFrame* T)
	{
		frameIndex = T->frameIndex;
		__frameIndex = T->__frameIndex;
		frameInterpolation = T->frameInterpolation;
		handleEvents = T->handleEvents;
		visible = T->visible;
		filter = T->filter;
		red = T->red;
		green = T->green;
		blue = T->blue;
		alpha = T->alpha;
		x = T->x;
		y = T->y;
		pivotX = T->pivotX;
		pivotY = T->pivotY;
		scaleX = T->scaleX;
		scaleY = T->scaleY;
		rotation = T->rotation;
		action = T->action;
		nextState = T->nextState;
		audio = T->audio;
		flipH = T->flipH;
		flipV = T->flipV;
		spriteSequenceName = T->spriteSequenceName;
		__isCloned = T->__isCloned;
	};
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CocoTimeLabel
{
public:
	int frameIndex;
	String name;
	const String __className = String("CocoTimeLabel");
	CocoTimeLabel(int FrameIndex, String LabelName);
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CocoTimeline
{
public:
	Array<CocoTimeLabel*>* __labels;
	Array<CocoKeyFrame*>* __keyFrames;
	float __singleFrameDurationTime;
	float __durationInTime;
	int __durationInFrames;
	bool __paused;
	float __fps;
	int __currentFrameIndex;
	int __firstKeyFrameIndex;
	int __lastKeyFrameIndex;
	const String __className = String("CocoTimeline");
	CocoTimeline();
	virtual ~CocoTimeline();
	void prepare(CocoScene* scene, CocoClip* clip);
	void clear();
	void reset();
	CocoTimeLabel* addLabel(CocoTimeLabel* Label);
	CocoTimeLabel* addLabelEx(int FrameIndex, String LabelName);
	CocoTimeLabel* findLabelByName(String LabelName);
	CocoKeyFrame* keyFrame(int frameIndex);
	CocoKeyFrame* firstKeyFrame();
	CocoKeyFrame* lastKeyFrame();
	CocoKeyFrame* addKeyFrame(CocoKeyFrame* KeyFrame);
	CocoKeyFrame* addKeyFrameEx(State* nextState, CocoAction actionCallback, int frameIndex, COCO_KEYFRAME_INTERPOLATION_ENUM frameInterpolation, bool handleEvents, bool visible, float x, float y, float scaleX, float scaleY, float rotation, float pivotX, float pivotY, int filter, float red, float green, float blue, float alpha, CocoAudio* audio, bool flipH, bool flipV, String spriteSequenceName);
	void normalizetimeline();
	CocoKeyFrame* findKeyFrameBeforeframeIndex(float frameIndex, bool inclusive, float excludeListIndex);
	CocoKeyFrame* findKeyFrameAfterframeIndex(float frameIndex, bool inclusive, float excludeListIndex);
	CocoKeyFrame* interpolate(float frameIndex);
	CocoKeyFrame* CloneKeyFrame(CocoKeyFrame* F, bool exact);
	void interpolate(CocoKeyFrame* F, CocoKeyFrame* F1, CocoKeyFrame* F2, float s);
};

#endif // __COCOTIMELINE_HPP__
