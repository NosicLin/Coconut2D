/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    ______                 __
//	   / ____/   _____  ____  / /_
//	  / __/ | | / / _ \/ __ \/ __/
//	 / /___ | |/ /  __/ / / / /_
//	/_____/ |___/\___/_/ /_/\__/
//
// ==================================================================================================================================

class DeviceEvent
{
	public const CAPTURING_PHASE:Integer 	= 1;
	public const AT_TARGET:Integer 			= 2;
	public const BUBBLING_PHASE:Integer 	= 3;

	public var type:String;
	public var target:EventTarget;
	public var currentTarget:EventTarget;
	public var eventPhase:Integer;
	public var bubbles:Boolean;
	public var cancelable:Boolean;
	public var timeStamp:Integer;
	public var defaultPrevented:Boolean;

	public var view:HTMLWindow;
	public var detail:Integer;

	public var touches:TouchList;           // all touches
	public var targetTouches:TouchList;     // all touches in this TouchEvent Target
	public var changedTouches:TouchList;    // all touches changed in the current event
	public var scale:Float;     			// distance (since event start) between fingers as multiplier of initial value. Initially 1.0, zoom out (pinch) < 1.0, zoom in > 1.0.
	public var rotation:Float;  			// rotation delta (since event start) in degrees (clockwise is positive). Initially 0.0.

	public var clientX:Integer;
	public var clientY:Integer;
	public var __clientX:Integer;
	public var __clientY:Integer;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		type="";
		target=null;
		currentTarget=null;
		eventPhase=CAPTURING_PHASE;
		bubbles=true;
		cancelable=true;
		timeStamp=0;
		defaultPrevented=false;
		scale = 0.0;
		rotation = 0.0;
		__clientX = 0;
		__clientY = 0;
		touches = new TouchList();
		targetTouches = new TouchList();
		changedTouches = new TouchList();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete touches;
		delete targetTouches;
		delete changedTouches;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function stopPropagation()
	{
		bubbles = false;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function preventDefault()
	{
		defaultPrevented = true;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function initEvent(type:String, canBubble:Boolean, cancelable:Boolean)
	{
		eventPhase = CAPTURING_PHASE;
		this.type = type;
		this.bubbles = canBubble;
		this.cancelable = cancelable;
		this.timeStamp = (new Date()).getTime();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function initUIEvent(type:String, canBubble:Boolean, cancelable:Boolean, view:HTMLWindow, detail:Integer)
	{
		this.initEvent(type, canBubble, cancelable);
		this.view = view;
		this.detail = detail;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function initTouchEvent(type:String, canBubble:Boolean, cancelable:Boolean, view:HTMLWindow, detail:Integer, screenX:Integer, screenY:Integer, clientX:Integer, clientY:Integer, ctrlKey:Boolean, altKey:Boolean, shiftKey:Boolean, metaKey:Boolean, touches:TouchList, targetTouches:TouchList, changedTouches:TouchList, scale:Float, rotation:Float)
     {
     	this.initUIEvent(type, canBubble, cancelable, view, detail);
     	this.scale = scale;
     	this.rotation = rotation;
     	this.touches = touches;
     	this.targetTouches = targetTouches;
     	this.changedTouches = changedTouches;
     }
}
