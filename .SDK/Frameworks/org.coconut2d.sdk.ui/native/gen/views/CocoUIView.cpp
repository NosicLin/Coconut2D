/* Generated by Coconut2D C++ Compiler from file CocoUIView.jspp */

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "CocoUIView.hpp"
#include "CocoClip.hpp"
#include "ICocoRenderContext.hpp"
#include "CocoScene.hpp"
#include "HTMLCanvasElement.hpp"
#include "CocoMatrix.hpp"
#include "CocoImage.hpp"
#include "HTMLDocument.hpp"
#include "CocoTimeline.hpp"
#include "Constants.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoUIView::CocoUIView()
{
	__textureIsInvalid = true;
	__enabled = true;
	__visible = true;
	__x = 0;
	__y = 0;
	__width = 0;
	__height = 0;
	__timeline->clear();
	__timeline->addKeyFrameEx(nullptr, nullptr, 0, COCO_KEYFRAME_INTERPOLATION_ENUM::KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, nullptr, false, false, String(""));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
CocoUIView::~CocoUIView()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
String CocoUIView::__get_Name()
{
	return __instanceName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::__set_Name(String v)
{
	__instanceName = v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CocoUIView::__get_Enabled()
{
	return __enabled;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::__set_Enabled(bool v)
{
	__enabled = v;
	invalidate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float CocoUIView::__get_Width()
{
	return __width;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::__set_Width(float v)
{
	__width = v;
	invalidate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float CocoUIView::__get_Height()
{
	return __height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::__set_Height(float v)
{
	__height = v;
	invalidate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float CocoUIView::__get_Left()
{
	return __x;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::__set_Left(float v)
{
	__x = v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float CocoUIView::__get_Top()
{
	return __y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::__set_Top(float v)
{
	__y = v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CocoUIView::__get_Visible()
{
	return __visible;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::__set_Visible(bool v)
{
	__visible = v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::move(float x, float y, float width, float height)
{
	__x = x;
	__y = y;
	__width = width;
	__height = height;
	invalidate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::move(float x, float y)
{
	move(x, y, __width, __height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::size(float width, float height)
{
	move(__x, __y, width, height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::invalidate()
{
	__textureIsInvalid = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CocoUIView::paint(ICocoRenderContext* ctx, CocoScene* scene, CocoClip* parentClip, bool calcBoundingBox, int level)
{
	if(!__visible || !parentClip || !scene)
	{
		return;
	}
	if(__textureIsInvalid)
	{
		if(__image)
			if(__image)
			{
				__image = (delete __image, nullptr);
			}
		if(__width > 0 && __height > 0)
		{
			HTMLCanvasElement* canvas = document->createElement(String("canvas"));
			canvas->width = pow(2, ceil((float)(log(__width)) / (float)(log(2))));
			canvas->height = pow(2, ceil((float)(log(__height)) / (float)(log(2))));
			repaint(scene, parentClip, canvas);
			__image = new CocoImage();
			__image->createFromCanvas(scene, canvas, __width, __height);
			if(canvas)
			{
				canvas = (delete canvas, nullptr);
			}
		}
		__textureIsInvalid = false;
	}
	CocoMatrix* mv = ctx->getModelViewMatrix();
	mv->push();
	mv->translate(__x, __y);
	CocoClip::paint(ctx, scene, parentClip, calcBoundingBox, level);
	mv->pop();
}
