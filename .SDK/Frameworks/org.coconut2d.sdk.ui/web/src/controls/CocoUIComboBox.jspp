"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 __  ____________                __          ____             _____ __      __
//	  / ____/___  _________  / / / /  _/ ____/___  ____ ___  / /_  ____  / __ )____  _  __/ ___// /___  / /_
//	 / /   / __ \/ ___/ __ \/ / / // // /   / __ \/ __ `__ \/ __ \/ __ \/ __  / __ \| |/_/\__ \/ / __ \/ __/
//	/ /___/ /_/ / /__/ /_/ / /_/ // // /___/ /_/ / / / / / / /_/ / /_/ / /_/ / /_/ />  < ___/ / / /_/ / /_
//	\____/\____/\___/\____/\____/___/\____/\____/_/ /_/ /_/_.___/\____/_____/\____/_/|_|/____/_/\____/\__/
//
// ==================================================================================================================================

"#include CocoUIControl.jspp";

class CocoUIComboBoxSlot
{
	public var keys: Array<String>;
	public var captions: Array<String>;
	public var width:Integer;
	public var textWidth:Float;
	public var selected:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}
}

// ==================================================================================================================================
//	   ______                 __  ____________                __          ____             ____
//	  / ____/___  _________  / / / /  _/ ____/___  ____ ___  / /_  ____  / __ )____  _  __/ __ \____  ____  __  ______
//	 / /   / __ \/ ___/ __ \/ / / // // /   / __ \/ __ `__ \/ __ \/ __ \/ __  / __ \| |/_/ /_/ / __ \/ __ \/ / / / __ \
//	/ /___/ /_/ / /__/ /_/ / /_/ // // /___/ /_/ / / / / / / /_/ / /_/ / /_/ / /_/ />  </ ____/ /_/ / /_/ / /_/ / /_/ /
//	\____/\____/\___/\____/\____/___/\____/\____/_/ /_/ /_/_.___/\____/_____/\____/_/|_/_/    \____/ .___/\__,_/ .___/
//	                                                                                              /_/         /_/
// ==================================================================================================================================

class CocoUIComboBoxPopup : CocoUIControl
{
	public var imgFrame:CocoImage;
	public var imgHeader:CocoImage;
	public var imgOK:CocoImage;

	private var slots:Array<CocoUIComboBoxSlot>;
	private var separator:String;

	private var ROW_HEIGHT:Integer;
	private var SELECTION_Y:Integer;
	private var PADDING:Integer;
	private var HEADER_HEIGHT:Integer;
	private var FRAME_HEIGHT:Integer;
	private var BUTTON_HEIGHT:Integer;
	private var FONT_SIZE:Float;

	private var my:Float;
	private var my0:Float;
	private var mx0:Float;
	private var slotScrolling:Integer;
	private var reEnter:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(name:String) :CocoUIControl(name)
	{
		slots = new Array<CocoUIComboBoxSlot>;

		this.addEventListener(this.OnTouchStart, __CocoUIComboBoxPopup_OnTouchStart);
 		this.addEventListener(this.OnTouchMove, __CocoUIComboBoxPopup_OnTouchMove);
 		this.addEventListener(this.OnTouchEnd, __CocoUIComboBoxPopup_OnTouchEnd);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		this.removeEventListener(this.OnTouchStart, __CocoUIComboBoxPopup_OnTouchStart);
 		this.removeEventListener(this.OnTouchMove, __CocoUIComboBoxPopup_OnTouchMove);
 		this.removeEventListener(this.OnTouchEnd, __CocoUIComboBoxPopup_OnTouchEnd);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function __CocoUIComboBoxPopup_OnTouchStart(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean
	{
		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUIComboBoxPopup_OnTouchMove(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean
	{
		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUIComboBoxPopup_OnTouchEnd(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean
	{
		return true;
	}

		//var ctx:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));
		//ctx.fillStyle = "rgba(255, 255, 255, 255)";
		//ctx.fillRect(0, 0, Width, Height);
		//CocoGraphics.drawSkin(ctx, imgHeader, 0, 0, Width, imgHeader.textureCellHeight);
		//CocoGraphics.drawSkin(ctx, imgFrame, 0, imgHeader.textureCellHeight, Width, imgFrame.textureCellHeight);
		//FontColor = 0xFFFFFFFF;
		//FontBold = true;
		//FontSize = 18;
    	//CocoText.drawSimpleText(ctx, "Please select", FontName, FontSize, FontBold, FontItalic, FontUnderline, FontColor, PaddingLeft, PaddingTop, PaddingWidth, PaddingHeight, COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT, FontShadowX, FontShadowY, FontBlur, FontShadowColor);
		//var btnWidth:Float = 50.0;
		//CocoGraphics.drawSkin(ctx, imgOK, Width - btnWidth - 4, (imgHeader.textureCellHeight - imgOK.textureCellHeight) / 2.0, btnWidth, imgOK.textureCellHeight);
		//FontBold = true;
		//FontSize = 14;
		//CocoText.drawSimpleText(ctx, "OK", FontName, FontSize, FontBold, FontItalic, FontUnderline, FontColor, Width - btnWidth - 4,  (imgHeader.textureCellHeight - imgOK.textureCellHeight) / 2.0, btnWidth, imgOK.textureCellHeight, COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT, FontShadowX, FontShadowY, FontBlur, FontShadowColor);

}

// ==================================================================================================================================
//	   ______                 __  ____________                __          ____
//	  / ____/___  _________  / / / /  _/ ____/___  ____ ___  / /_  ____  / __ )____  _  __
//	 / /   / __ \/ ___/ __ \/ / / // // /   / __ \/ __ `__ \/ __ \/ __ \/ __  / __ \| |/_/
//	/ /___/ /_/ / /__/ /_/ / /_/ // // /___/ /_/ / / / / / / /_/ / /_/ / /_/ / /_/ />  <
//	\____/\____/\___/\____/\____/___/\____/\____/_/ /_/ /_/_.___/\____/_____/\____/_/|_|
//
// ==================================================================================================================================

control class CocoUIComboBox : CocoUIControl
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Caption
	////////////////////////////////////////////////////////////////////////////////////////////////////

	public var __text:CocoUITextBlock;
	public var __prompt:CocoUITextBlock;

	published property Text							{ function get():String  { return __text.text; 						} 	function set(v:String) 		{ __text.text = v; invalidate(); 					}}
	published property TextFontName					{ function get():String  { return __text.fontName; 					} 	function set(v:String) 		{ __text.fontName = v; invalidate(); 				}}
	published property TextFontSize					{ function get():Float	 { return __text.fontSize; 					} 	function set(v:Float)	 	{ __text.fontSize = v; invalidate(); 				}}
	published property TextFontBold					{ function get():Boolean { return __text.fontBold; 					} 	function set(v:Boolean) 	{ __text.fontBold = v; invalidate(); 				}}
	published property TextFontItalic				{ function get():Boolean { return __text.fontItalic; 				} 	function set(v:Boolean) 	{ __text.fontItalic = v; invalidate(); 				}}
	published property TextFontUnderline			{ function get():Boolean { return __text.fontUnderline; 			} 	function set(v:Boolean) 	{ __text.fontUnderline = v; invalidate(); 			}}
	published property TextFontShadowX				{ function get():Integer { return __text.fontShadowX;				} 	function set(v:Integer) 	{ __text.fontShadowX = v; invalidate(); 			}}
	published property TextFontShadowY				{ function get():Integer { return __text.fontShadowY;				} 	function set(v:Integer) 	{ __text.fontShadowY = v; invalidate(); 			}}
	published property TextFontBlur					{ function get():Integer { return __text.fontBlur;					} 	function set(v:Integer) 	{ __text.fontBlur = v; invalidate(); 				}}
	published property TextFontColorSel				{ function get():Color   { return __text.fontColorSel; 				} 	function set(v:Color) 		{ __text.fontColorSel = v; invalidate(); 			}}
	published property TextFontShadowColorSel 		{ function get():Color	 { return __text.fontShadowColorSel;		} 	function set(v:Color) 		{ __text.fontShadowColorSel = v; invalidate(); 		}}
	published property TextFontColor				{ function get():Color   { return __text.fontColor;					} 	function set(v:Color) 		{ __text.fontColor = v; invalidate(); 				}}
	published property TextFontShadowColor 			{ function get():Color	 { return __text.fontColorSel				}	function set(v:Color) 		{ __text.fontShadowColor = v; invalidate(); 		}}

	published property Prompt						{ function get():String  { return __prompt.text; 					} 	function set(v:String) 		{ __prompt.text = v; invalidate(); 					}}
	published property PromptFontName				{ function get():String  { return __prompt.fontName; 				} 	function set(v:String) 		{ __prompt.fontName = v; invalidate(); 				}}
	published property PromptFontSize				{ function get():Float	 { return __prompt.fontSize; 				} 	function set(v:Float)	 	{ __prompt.fontSize = v; invalidate(); 				}}
	published property PromptFontBold				{ function get():Boolean { return __prompt.fontBold; 				} 	function set(v:Boolean) 	{ __prompt.fontBold = v; invalidate(); 				}}
	published property PromptFontItalic				{ function get():Boolean { return __prompt.fontItalic; 				} 	function set(v:Boolean) 	{ __prompt.fontItalic = v; invalidate(); 			}}
	published property PromptFontUnderline			{ function get():Boolean { return __prompt.fontUnderline; 			} 	function set(v:Boolean) 	{ __prompt.fontUnderline = v; invalidate(); 		}}
	published property PromptFontShadowX			{ function get():Integer { return __prompt.fontShadowX;				} 	function set(v:Integer) 	{ __prompt.fontShadowX = v; invalidate(); 			}}
	published property PromptFontShadowY			{ function get():Integer { return __prompt.fontShadowY;				} 	function set(v:Integer) 	{ __prompt.fontShadowY = v; invalidate(); 			}}
	published property PromptFontBlur				{ function get():Integer { return __prompt.fontBlur;				} 	function set(v:Integer) 	{ __prompt.fontBlur = v; invalidate(); 				}}
	published property PromptFontColorSel			{ function get():Color   { return __prompt.fontColorSel; 			} 	function set(v:Color) 		{ __prompt.fontColorSel = v; invalidate(); 			}}
	published property PromptFontShadowColorSel 	{ function get():Color	 { return __prompt.fontShadowColorSel;		} 	function set(v:Color) 		{ __prompt.fontShadowColorSel = v; invalidate(); 	}}
	published property PromptFontColor				{ function get():Color   { return __prompt.fontColor;				} 	function set(v:Color) 		{ __prompt.fontColor = v; invalidate(); 			}}
	published property PromptFontShadowColor 		{ function get():Color	 { return __prompt.fontColorSel				}	function set(v:Color) 		{ __prompt.fontShadowColor = v; invalidate(); 		}}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(name:String) : CocoUIControl(name)
	{
		// Control is not selectable
		__selectable = true;

		// Initial size
		Width = window.innerWidth;
		Height = Float(COCO_DEFAULT_FONT_SIZE) + PaddingTop + PaddingBottom;
		SetPaddings(5,0,0,0);
		SetMargins(4,4,4,4);

		// Set default text block
		__text = new CocoUITextBlock(Name, COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT);
		__text.fontColor = 0xff000000;
		__text.fontBold = false;
		__text.multiline = false;
		__text.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);

		__prompt = new CocoUITextBlock(Name, COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT);
		__prompt.text = "Please enter value...";
		__prompt.fontColor = 0xff444444;
		__prompt.fontColorSel = 0xff444444;
		__prompt.fontBold = false;
		__prompt.multiline = false;
		__prompt.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);
		__texts.push(__prompt);

		// Handle Clicks
		addEventListener(this.OnClick, __CocoUITextEdit_OnClick);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function RefreshLayout()
	{
		super.RefreshLayout;
		__text.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);
		__prompt.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		removeEventListener(this.OnClick, __CocoUITextEdit_OnClick);
		delete __text;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUITextEdit_OnClick(sender:CocoEventSource, e:CocoEvent) :Boolean
	{
		return false;
	}

	/*
	protected var __promptText:String;
	protected var __promptColor:Color;
	protected var __promptTextAlign:COCO_CONTROL_ANCHOR_ENUM;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(name:String) :CocoUIControl(name)
	{
		__promptText = "Caption";
		__promptColor = 0x444444;
		__promptTextAlign = COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT;
		PaddingLeft = 9.0;
		PaddingRight = 26.0;
		MarginLeft = 2;
		MarginRight = 2;
		this.addEventListener(this.OnClick, HandleClick);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property PromptText
	{
		function get():String { return __promptText; }
		function set(v:String) { __promptText = v; invalidate(); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property PromptColor
	{
		function get():Color { return __promptColor; }
		function set(v:Color) { __promptColor = v; invalidate(); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function HandleClick(sender:CocoEventSource, e:CocoEvent) :Boolean
	{
		var popup:CocoUIComboBoxPopup = new CocoUIComboBoxPopup("popup");

		popup.imgFrame = __scene.getImageSymbol("SkinSymbol_iPhone_SpinWheel_Frame");
		popup.imgHeader = __scene.getImageSymbol("SkinSymbol_iPhone_SpinWheel_Header");
		popup.imgOK = __scene.getImageSymbol("SkinSymbol_iPhone_SpinWheel_Button_OK");
		popup.Height = popup.imgFrame.textureCellHeight + popup.imgHeader.textureCellHeight;
		//popup.__timeline.clear();
		//popup.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, this.__parent.__height, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
		//popup.__timeline.addKeyFrameEx(null, CocoAction(__scene.stop), 4, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 0, Height - ctl.Height, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
		return false;
	}
	*/
}
