"#export native";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  _______    ___
//	  / / / /  _/ |  / (_)__ _      __
//	 / / / // / | | / / / _ \ | /| / /
//	/ /_/ // /  | |/ / /  __/ |/ |/ /
//	\____/___/  |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoClip.jspp";

class CocoUIView : CocoClip
{
	private var __x:Float;
	private var __y:Float;
	private var __width:Float;
	private var __height:Float;
	private var __visible:Boolean;
	private var __textureIsInvalid:Boolean;
	private var __enabled:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__textureIsInvalid = true;
		__enabled = true;
		__visible = true;
		__x = 0;
		__y = 0;
		__width = 320;
		__height = 480;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property Name
	{
		function get():String { return __instanceName; }
		function set(v:String) { __instanceName = v; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Enabled
	{
		function get():Boolean { return __enabled; }
		function set(v:Boolean) { __enabled = v; invalidate(); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Width
	{
		function get():Float { return __width; }
		function set(v:Float) { __width=v; invalidate(); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Height
	{
		function get():Float { return __height; }
		function set(v:Float) { __height=v; invalidate(); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Left
	{
		function get():Float { return __x; }
		function set(v:Float) { __x = v; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Top
	{
		function get():Float { return __y; }
		function set(v:Float) { __y = v; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Visible
	{
		function get():Boolean { return __visible; }
		function set(v:Boolean) { __visible = v; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function invalidate()
	{
		__textureIsInvalid = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(gl:WebGLRenderingContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
	{
		if(!__visible)
			return;

		// If the texture is invalid we need to recreate it
		if(__textureIsInvalid)
		{
			// Create a power-of-two sized temp canvas and get 2d context and call virtual repaint
			var canvas:HTMLCanvasElement = document.createElement("canvas");
			canvas.width = Math.pow(2, Math.ceil(Math.log(__width)/Math.log(2)));
			canvas.height = Math.pow(2, Math.ceil(Math.log(__height)/Math.log(2)));
			var ctx:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));

			// Repaint
			repaint(scene, parentClip, ctx);

			// Delete previous image
			delete __image;

			// Create a texture image from the base64 PNG data of the canvas
	        __image = new CocoImage();
	        __image.image = new Image();
	        var url:String = canvas.toDataURL();
	        __image.image.load(url);
	        __image.textureCellWidth = Float(__width);
	        __image.textureCellHeight = Float(__height);
	        __image.textureGrid = new Float32Array([0,0]);
	        __image.prepare(__scene, gl);

	        // Delete the temp canvas
	        ctx = null;
	        delete canvas;
		}

		// Paint the clip
		super.paint(gl, scene, parentClip, calcBoundingBox, level);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual abstract function repaint(scene:CocoScene, parentClip:CocoClip, ctx:CanvasRenderingContext2D);

}



