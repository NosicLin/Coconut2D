"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  _______    ___
//	  / / / /  _/ |  / (_)__ _      __
//	 / / / // / | | / / / _ \ | /| / /
//	/ /_/ // /  | |/ / /  __/ |/ |/ /
//	\____/___/  |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoClip.jspp";

class CocoUIView : CocoClip
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Parent Form
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public var __form:CocoUIFormView;
	public property Form { function get():CocoUIFormView { return __form; } }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __visible:Boolean;
	protected var __enabled:Boolean;
	protected var __invalidated:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__form = null;
		__enabled = true;
		__visible = true;
		__invalidated = false;
		__x = 0;
		__y = 0;
		__width = 0;
		__height = 0;
		__timeline.clear();
		__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
		move(0,0,window.innerWidth, window.innerHeight);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property Name
	{
		function get():String { return __instanceName; }
		function set(v:String) { __instanceName = v; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Enabled
	{
		function get():Boolean { return __enabled; }
		function set(v:Boolean) { __enabled = v; invalidate(); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Visible
	{
		function get():Boolean { return __visible; }
		function set(v:Boolean) { __visible = v; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Width
	{
		function get():Float { return __width; }
		function set(v:Float) { move(__x, __y, v, __height); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Height
	{
		function get():Float { return __height; }
		function set(v:Float) { move(__x, __y, __width, v); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Left
	{
		function get():Float { return __x; }
		function set(v:Float) { move(v, __y, __width, __height); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	published property Top
	{
		function get():Float { return __y; }
		function set(v:Float) { move(__x, v, __width, __height); }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function move(x:Float, y:Float, width:Float, height:Float)
	{
		__x = x;
		__y = y;

		if(__width != width)
		{
			__width = width;
			invalidate();
		}

		if(__height != height)
		{
			__height = height;
			invalidate();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function move(x:Float, y:Float)
	{
		move(x,y,__width,__height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function size(width:Float, height:Float)
	{
		move(__x,__y,width,height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bringToFront()
	{
		if(__parent)
			__parent.moveChild(this, 0);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function sendToBack()
	{
		if(__parent)
			__parent.moveChild(this, __children.size()-1);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function invalidate()
	{
		__invalidated = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function addChild(clipInstance:CocoClip) :CocoClip
	{
		var ctl:CocoUIView = CocoUIView(clipInstance);
		ctl.__form = this.__form;
		return super.addChild(clipInstance);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
	{
		if(!__visible || !parentClip || !scene)
			return;

		// Render if within screen region
		if(__form)
		{
			var KF:CocoKeyFrame = __form.getKeyFrame();
			var myKF:CocoKeyFrame = __timeline.keyFrame(0);
			if(KF.y + myKF.y + __height / 2 < __form.__y - __form.__height / 2 || KF.y + myKF.y - __height / 2 > __form.__y + __form.__height / 2)
				return;
		}

		super.paint;

		// We assume after paint the control is no more invlid
		__invalidated = false;
	}
}
