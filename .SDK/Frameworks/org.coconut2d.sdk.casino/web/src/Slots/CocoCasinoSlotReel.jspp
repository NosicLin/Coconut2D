"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * This is a private Framework of Coconut2D product and you should explicitly
 * own a license for using. Use of any portions or material related with this
 * Framework is prohibited. Please contact mobileFX for licensing inquiries.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ______           _            _____ __      __  ____            __
//	  / ____/___  _________  / ____/___ ______(_)___  ____ / ___// /___  / /_/ __ \___  ___  / /
//	 / /   / __ \/ ___/ __ \/ /   / __ `/ ___/ / __ \/ __ \\__ \/ / __ \/ __/ /_/ / _ \/ _ \/ /
//	/ /___/ /_/ / /__/ /_/ / /___/ /_/ (__  ) / / / / /_/ /__/ / / /_/ / /_/ _, _/  __/  __/ /
//	\____/\____/\___/\____/\____/\__,_/____/_/_/ /_/\____/____/_/\____/\__/_/ |_|\___/\___/_/
//
// ==================================================================================================================================

"#include CocoClip.jspp";

class CocoCasinoSlotReel : CocoClip
{
	published var TileWidth:Integer;
 	published var TileHeight:Integer;
	published var No_Of_Tiles_In_Reel:Integer; 	// Number of Tiles in Reel.
	published var Visible_Reel_Rows:Integer;	// Number of visible rows in Reel.

    // Time for a complet repetition in msec.
	public var  __reelSpeed:Float;
	published property ReelSpeed
 	{
 		function get():Float  { return __reelSpeed; }
 		function set(v:Float) { __reelSpeed = v; }
 	}

	published var HiddenSlotCells:Integer;

	private var ReelSymbols:Array<CocoClip>;
	private var __reelRepetition:Integer;		// Number of Reel Spins.


	// Events
	public event OnReelSpinEnd();				// Notify parent that reel spin is over.

	// ==================================================================================================================================
	//	    ______                 __  _
	//	   / ____/_  ______  _____/ /_(_)___  ____  _____
	//	  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	//	 / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
	//	/_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
	//
	// ==================================================================================================================================

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional image:CocoImage) : CocoClip(image)
	{
		ReelSymbols 			= new Array<CocoClip>;
		TileWidth 				= 179;					// Tile width
		TileHeight				= 136;					// Tile height
		No_Of_Tiles_In_Reel 	= 15;					// Number of Tiles in Reel
		Visible_Reel_Rows 		= 3;					// Number of visible rows in Reel
		__reelRepetition 		= 0;					// Number of Reel Spins
		__reelSpeed				= 1 / 500;				// Time for a complet repetition in msec
		HiddenSlotCells 		= 4;
		InitReelSymbols();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete ReelSymbols;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////
	function InitReelSymbols()
	{
		if(this.__children)
		{
			for(var i=__children.size()-1; i>=0; i--)
			{
				this.ReelSymbols
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public function randomTileRepetitionInRange(min:Integer, max:Integer):Integer
	{
		return Integer(Math.floor(Math.random() * Float(max - min + 1) + Float(min)));
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function Spin()
	{
		__reelRepetition = 5;//this.repeater;
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
 	{
 		var KF:CocoKeyFrame = this.__timeline.__keyFrames[0];
		var T:Time = this.__currentTime;
 		super.paint;
 		var dt:Float = Float(this.__currentTime - T);
 		var d:Integer = -(this.No_Of_Tiles_In_Reel-this.Visible_Reel_Rows-this.HiddenSlotCells);

 		if(__reelRepetition)
 		{
 			KF.y += Float(this.TileHeight * this.No_Of_Tiles_In_Reel) * __reelSpeed * dt;
 			//trace("===================================   KF.y = "+String(KF.y));
 			if(KF.y > 0)
 			{
 				if(--__reelRepetition) {
 					KF.y = -Float(this.TileHeight) * Float(this.No_Of_Tiles_In_Reel-this.HiddenSlotCells);
 					//trace("RESTART ===================================   KF.y = "+String(KF.y));
 				}
 				else
 				{
 					// Choose randomly the tile where the spin stops.
 					// Since the first tile's y is set to 0, and we show 3 tiles in the slot, we need to
 					// choose a number between 0 and (the number of tiles minus the number of visible tiles)
 					KF.y = Float(randomTileRepetitionInRange(0, d) * this.TileHeight);
 					//KF.y = Float(this.StopTile * this.TileHeight);
 					dispatchEvent(this.OnReelSpinEnd);
 				}
 			}
 		}
 	}


	////////////////////////////////////////////////////////////////////////////////////////////////////




}