"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.yourcompany.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

"#include CocoClip.jspp";

class CocoGameStage : CocoClip
{
	// Special Game Sprites
	published reference var PlayerSprite:CocoGamePlayerSprite;
	published var enemiesClassName:String;
	published var bonusesClassName:String;
	published var mazesClassName:String;
	published var platformsClassName:String;
	published reference var touchHandlerClip:CocoClip;

	public var enemiesSprites:Array<CocoClip>;
	public var bonusesSprites:Array<CocoClip>;
	public var mazesSprites:Array<CocoClip>;
	public var platformsSprites:Array<CocoClip>;

	// Physics
	public var world:b2World;
	public var worldTick:Float;

	private var __spritesToRemove:Array<CocoGameSprite>;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional image:CocoImage) : CocoClip(image)
	{
		enemiesClassName = "CocoGameSpriteEnemy";
		bonusesClassName = "CocoGameSpriteBonus";
		mazesClassName = "CocoGameSpriteMaze";
		platformsClassName = "CocoGameSpritePlatform";

		enemiesSprites = null;
		bonusesSprites = null;
		mazesSprites = null;
		platformsSprites = null;
		worldTick=0.016;

		PlayerSprite=null;
		world = new b2World(new b2Vec2(0.0, 20.0));
		__spritesToRemove=null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete enemiesSprites;
		delete bonusesSprites;
		delete mazesSprites;
		delete platformsSprites;
		PlayerSprite=null;
		//world.__destroy__();
		delete world;
		delete __spritesToRemove;
	}

	public virtual function prepare(scene:CocoScene)
	{
		worldTick = 0.02;// (( Float(engine.TICK_TIME) * scene.__fps / 60.0) /1000.0);

		PlayerSprite = CocoGamePlayerSprite(scene.getClipByPath("Root/Layer1/Stage/Player/Coconut/:: ImageSymbol_CoconutIdle"));
		touchHandlerClip = scene.getClipByPath("Root/TouchLayer");

		enemiesSprites = getChildrenByClassName(enemiesClassName);
		bonusesSprites = getChildrenByClassName(bonusesClassName);
		mazesSprites = getChildrenByClassName(mazesClassName);
		platformsSprites = getChildrenByClassName(platformsClassName);

		PlayerSprite.initBody(world);
		var i:Integer;
		for(i = mazesSprites.size(); i--;)
		{
			CocoGameSpriteMaze(mazesSprites[i]).initBody(world);
		}
		for(i = platformsSprites.size(); i--;)
		{
			CocoGameSpritePlatform(platformsSprites[i]).initBody(world);
		}
		for(i = bonusesSprites.size(); i--;)
		{
			CocoGameSpriteBonus(bonusesSprites[i]).initBody(world);
		}

		touchHandlerClip.addEventListener(touchHandlerClip.OnTouchStart, Jump);

		super.prepare;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function tick(time:Time)
	{
		removeDeadSprites();

		scrollStage();

		collisionDetection();

		super.tick;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//public virtual function paint(ctx:ICocoRenderContext, time:Time)
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
	{
		super.paint;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function scrollStage()
	{
		if(!__currentFrame) return;
		var kf:CocoKeyFrame = __timeline.keyFrame(__currentFrame.frameIndex);
		kf.x = -PlayerSprite.__parent.__parent.__currentFrame.x;
		kf.y = -Math.min(0.0, PlayerSprite.__parent.__parent.__currentFrame.y + 100.0);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function collisionDetection()
	{
		world.Step(worldTick, 2, 2);

		if(PlayerSprite.__parent.__parent.__currentFrame)
		{
			var pos:b2Vec2 = b2Vec2(PlayerSprite.body.GetPosition());
			var kf:CocoKeyFrame = PlayerSprite.__parent.__parent.__timeline.keyFrame(PlayerSprite.__parent.__parent.__currentFrame.frameIndex);
			kf.x = Float(pos.get_x() * BOX2D_SCALE);
			kf.y = Float(pos.get_y() * BOX2D_SCALE);
			var i:Integer;
			for(i = platformsSprites.size(); i--;)
			{
				if(!CocoGameSpritePlatform(platformsSprites[i]).body) continue;
				var active:Boolean = kf.y + PlayerSprite.CollisionRectangle.bottom < b2Vec2(CocoGameSpritePlatform(platformsSprites[i]).body.GetPosition()).get_y() * BOX2D_SCALE;
				CocoGameSpritePlatform(platformsSprites[i]).body.SetActive(active);
				if(PlayerSprite.collidesWith(CocoGameSprite(platformsSprites[i])))
					PlayerSprite.body.SetLinearVelocity(new b2Vec2(4.0, -8.0));
			}

			for(i = bonusesSprites.size(); i--;)
				if(PlayerSprite.collidesWith(CocoGameSprite(bonusesSprites[i])))
					CocoGameSpriteBonus(bonusesSprites[i]).acquire();

			for(i = mazesSprites.size(); i--;)
				if(PlayerSprite.collidesWith(CocoGameSprite(mazesSprites[i])))
					PlayerSprite.body.SetLinearVelocity(new b2Vec2(4.0, -8.0));
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function removeDeadSprites()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Jump(sender:CocoEventSource, e:CocoEvent) : Boolean
	{
		PlayerSprite.body.SetLinearVelocity(new b2Vec2(4.0, -10.0));
		return false;
	}
}
