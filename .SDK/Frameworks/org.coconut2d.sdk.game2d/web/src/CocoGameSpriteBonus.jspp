"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.yourcompany.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

"#include CocoGameSprite.jspp";

class CocoGameSpriteBonus : CocoGameSprite
{
	public function Constructor(optional image:CocoImage) : CocoGameSprite(image)
	{
		CollisionRectangle = new CocoRect();
		CollisionRectangle.left = -20.0;
		CollisionRectangle.top = -30.0;
		CollisionRectangle.right = 20.0;
		CollisionRectangle.bottom = 30.0;
	}

	public function Destructor()
	{
	}

	public virtual function initBody(world:b2World)
	{
		if(!CollisionRectangle) return;
		var bodyDef:b2BodyDef = new b2BodyDef();
		bodyDef.set_type(b2BodyType.b2_staticBody);
		body = b2Body(world.CreateBody(bodyDef));
		var kf:CocoKeyFrame = __parent.__parent.__timeline.keyFrame(0);
		body.SetTransform(new b2Vec2(kf.x / BOX2D_SCALE, kf.y / BOX2D_SCALE), 0.0);
		var shape:b2PolygonShape = createPolygonShape(calculateCollisionRectangleVertices());
		var fixtureDef:b2FixtureDef = new b2FixtureDef();
		fixtureDef.set_isSensor(true);
		fixtureDef.set_shape(shape);
		body.CreateFixture(fixtureDef);
	}

	public virtual function acquire()
	{
		__parent.__parent.gotoFrameByName("play", false);
	}
}
