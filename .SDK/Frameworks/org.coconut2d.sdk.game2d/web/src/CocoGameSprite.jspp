"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

"#include CocoClip.jspp";

class CocoGameSprite : CocoClip
{
	published var CollisionRectangle:CocoRect;
	public var body:b2Body;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional image:CocoImage) : CocoClip(image)
	{
		CollisionRectangle=null;
		body = null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete CollisionRectangle;
		delete body;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function tick(time:Time)
	{
		super.tick;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
	{
		super.paint;
	}

	/*public function calculateCollisionRectangleVertices(mv:CocoMatrix) : Array<b2Vec2>
	{
		var ret:Array<b2Vec2> = new Array<b2Vec2>();
		var t:CocoVector;
		var temp:CocoVector = new CocoVector();
		temp.X = CollisionRectangle.right;
		temp.Y = CollisionRectangle.top;
		t = mv.multiplyByVector(temp);
		ret.push(new b2Vec2(t.X, t.Y));
		temp.X = CollisionRectangle.right;
		temp.Y = CollisionRectangle.bottom;
		t = mv.multiplyByVector(temp);
		ret.push(new b2Vec2(t.X, t.Y));
		temp.X = CollisionRectangle.left;
		temp.Y = CollisionRectangle.bottom;
		var t:CocoVector = mv.multiplyByVector(temp);
		ret.push(new b2Vec2(t.X, t.Y));
		temp.X = CollisionRectangle.left;
		temp.Y = CollisionRectangle.top;
		var t:CocoVector = mv.multiplyByVector(temp);
		ret.push(new b2Vec2(t.X, t.Y));
		return ret;
	}*/

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function calculateCollisionRectangleVertices() : Array<b2Vec2>
	{
		var ret:Array<b2Vec2> = new Array<b2Vec2>();
		ret.push(new b2Vec2(CollisionRectangle.right / BOX2D_SCALE, CollisionRectangle.top / BOX2D_SCALE));
		ret.push(new b2Vec2(CollisionRectangle.right / BOX2D_SCALE, CollisionRectangle.bottom / BOX2D_SCALE));
		ret.push(new b2Vec2(CollisionRectangle.left / BOX2D_SCALE, CollisionRectangle.bottom / BOX2D_SCALE));
		ret.push(new b2Vec2(CollisionRectangle.left / BOX2D_SCALE, CollisionRectangle.top / BOX2D_SCALE));
		return ret;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function initBody(world:b2World)
	{
		if(body || !CollisionRectangle) return;
		var bodyDef:b2BodyDef = new b2BodyDef();
		bodyDef.set_type(b2BodyType.b2_staticBody);
		body = b2Body(world.CreateBody(bodyDef));
		var kf:CocoKeyFrame = __parent.__timeline.keyFrame(0);
		body.SetTransform(new b2Vec2(kf.x / BOX2D_SCALE, kf.y / BOX2D_SCALE), 0.0);
		var shape:b2PolygonShape = createPolygonShape(calculateCollisionRectangleVertices());
		var fixtureDef:b2FixtureDef = new b2FixtureDef();
		fixtureDef.set_shape(shape);
		body.CreateFixture(fixtureDef);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function collidesWith(sprite:CocoGameSprite) :Boolean
	{
		// Collision detection between Sprites using rectangles
		if(!body || !sprite || !sprite.body) return false;
		var first:b2ContactEdge = b2ContactEdge(body.GetContactList());
		var ce:b2ContactEdge = first;
		while(ce);
		{
			if(ce.get_other() == sprite.body && b2Contact(ce.get_contact()).IsTouching())
			{
				return true;
			}
			if(ce == b2ContactEdge(ce.get_next()))
				return false
			ce = b2ContactEdge(ce.get_next());
			if(ce == first)
				return false;
		}
		return false;
	}
}
