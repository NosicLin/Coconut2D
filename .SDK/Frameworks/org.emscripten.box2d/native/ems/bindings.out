zz ignoring ['b2Shape::m_type', 'b2BroadPhase::RayCast', 'b2BroadPhase::UpdatePairs', 'b2BroadPhase::Query', 'b2DynamicTree::RayCast', 'b2DynamicTree::Query', 'b2ChainShape::m_nextVertex', 'b2ChainShape::m_hasNextVertex', 'b2EdgeShape::m_hasVertex3', 'b2EdgeShape::m_vertex2', 'b2EdgeShape::m_vertex3', 'b2Mat22', 'b2Mat33']
Evaluating stack ['typedef', '__w64', 'unsigned', 'int', 'uintptr_t']
BraceDepth: 0
Evaluating stack ['typedef', '__w64', 'unsigned', 'int', 'uintptr_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', '__w64', 'unsigned', 'int', 'uintptr_t', ';'])
Evaluating stack ['typedef', 'char', '*', 'va_list']
BraceDepth: 0
Evaluating stack ['typedef', 'char', '*', 'va_list', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'char', '*', 'va_list', ';'])
Evaluating stack ['typedef', '__w64', 'unsigned', 'int', 'size_t']
BraceDepth: 0
Evaluating stack ['typedef', '__w64', 'unsigned', 'int', 'size_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', '__w64', 'unsigned', 'int', 'size_t', ';'])
Evaluating stack ['typedef', 'size_t', 'rsize_t']
BraceDepth: 0
Evaluating stack ['typedef', 'size_t', 'rsize_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'size_t', 'rsize_t', ';'])
Evaluating stack ['typedef', '__w64', 'int', 'intptr_t']
BraceDepth: 0
Evaluating stack ['typedef', '__w64', 'int', 'intptr_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', '__w64', 'int', 'intptr_t', ';'])
Evaluating stack ['typedef', '__w64', 'int', 'ptrdiff_t']
BraceDepth: 0
Evaluating stack ['typedef', '__w64', 'int', 'ptrdiff_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', '__w64', 'int', 'ptrdiff_t', ';'])
Evaluating stack ['typedef', 'unsigned', 'short', 'wchar_t']
BraceDepth: 0
Evaluating stack ['typedef', 'unsigned', 'short', 'wchar_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'unsigned', 'short', 'wchar_t', ';'])
Evaluating stack ['typedef', 'unsigned', 'short', 'wint_t']
BraceDepth: 0
Evaluating stack ['typedef', 'unsigned', 'short', 'wint_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'unsigned', 'short', 'wint_t', ';'])
Evaluating stack ['typedef', 'unsigned', 'short', 'wctype_t']
BraceDepth: 0
Evaluating stack ['typedef', 'unsigned', 'short', 'wctype_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'unsigned', 'short', 'wctype_t', ';'])
Evaluating stack ['typedef', 'int', 'errno_t']
BraceDepth: 0
Evaluating stack ['typedef', 'int', 'errno_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'int', 'errno_t', ';'])
Evaluating stack ['typedef', '__w64', 'long', '__time32_t']
BraceDepth: 0
Evaluating stack ['typedef', '__w64', 'long', '__time32_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', '__w64', 'long', '__time32_t', ';'])
Evaluating stack ['typedef', '__int64', '__time64_t']
BraceDepth: 0
Evaluating stack ['typedef', '__int64', '__time64_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', '__int64', '__time64_t', ';'])
Evaluating stack ['typedef', '__time64_t', 'time_t']
BraceDepth: 0
Evaluating stack ['typedef', '__time64_t', 'time_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', '__time64_t', 'time_t', ';'])
Evaluating stack ['void', '__cdecl', '_invalid_parameter_noinfo', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['void', '__cdecl', '_invalid_parameter_noinfo', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', '__cdecl', '_invalid_parameter_noinfo', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['void', '__cdecl', '_invalid_parameter_noinfo', '(', 'void', ')', ';'])
('is method namestack', True, ['void', '__cdecl', '_invalid_parameter_noinfo', '(', 'void', ')', ';'])
________________________________________________________________________________
_invalid_parameter_noinfo
('free function:', ['void', '__cdecl', '_invalid_parameter_noinfo', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invalid_parameter_noinfo_noreturn', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invalid_parameter_noinfo_noreturn', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invalid_parameter_noinfo_noreturn', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invalid_parameter_noinfo_noreturn', '(', 'void', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invalid_parameter_noinfo_noreturn', '(', 'void', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invalid_parameter_noinfo_noreturn', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['noreturn']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invoke_watson', '(', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'unsigned', 'int', ',', 'uintptr_t', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invoke_watson', '(', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'unsigned', 'int', ',', 'uintptr_t', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invoke_watson', '(', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'unsigned', 'int', ',', 'uintptr_t', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invoke_watson', '(', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'unsigned', 'int', ',', 'uintptr_t', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invoke_watson', '(', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'unsigned', 'int', ',', 'uintptr_t', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'noreturn', ')', 'void', '__cdecl', '_invoke_watson', '(', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'const', 'wchar_t', '*', ',', 'unsigned', 'int', ',', 'uintptr_t', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['noreturn']
None
________________________________________________________________________________
Evaluating stack ['struct', 'threadlocaleinfostruct']
BraceDepth: 0
Evaluating stack ['struct', 'threadlocaleinfostruct', ';']
BraceDepth: 0
Evaluating stack ['struct', 'threadmbcinfostruct']
BraceDepth: 0
Evaluating stack ['struct', 'threadmbcinfostruct', ';']
BraceDepth: 0
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '*', 'pthreadlocinfo']
BraceDepth: 0
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '*', 'pthreadlocinfo', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '*', 'pthreadlocinfo', ';'])
Evaluating stack ['typedef', 'struct', 'threadmbcinfostruct', '*', 'pthreadmbcinfo']
BraceDepth: 0
Evaluating stack ['typedef', 'struct', 'threadmbcinfostruct', '*', 'pthreadmbcinfo', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'struct', 'threadmbcinfostruct', '*', 'pthreadmbcinfo', ';'])
Evaluating stack ['struct', '__lc_time_data']
BraceDepth: 0
Evaluating stack ['struct', '__lc_time_data', ';']
BraceDepth: 0
Evaluating stack ['typedef', 'struct', 'localeinfo_struct']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', '{']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'localeinfo_struct', '{'])
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', 'pthreadlocinfo', 'locinfo']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', '{', 'pthreadlocinfo', 'locinfo', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'localeinfo_struct', '{', 'pthreadlocinfo', 'locinfo', ';'])
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', 'pthreadlocinfo', 'locinfo', 'pthreadmbcinfo', 'mbcinfo']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', '{', 'pthreadlocinfo', 'locinfo', ';', 'pthreadmbcinfo', 'mbcinfo', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'localeinfo_struct', '{', 'pthreadlocinfo', 'locinfo', ';', 'pthreadmbcinfo', 'mbcinfo', ';'])
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', 'pthreadlocinfo', 'locinfo', 'pthreadmbcinfo', 'mbcinfo']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', '{', 'pthreadlocinfo', 'locinfo', ';', 'pthreadmbcinfo', 'mbcinfo', ';', '}']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'localeinfo_struct', '{', 'pthreadlocinfo', 'locinfo', ';', 'pthreadmbcinfo', 'mbcinfo', ';', '}'])
Evaluating stack ['typedef', 'struct', 'localeinfo_struct', 'pthreadlocinfo', 'locinfo', 'pthreadmbcinfo', 'mbcinfo', '_locale_tstruct', ',', '*', '_locale_t']
BraceDepth: 0
Evaluating stack ['_locale_tstruct', ',', '*', '_locale_t', ';']
BraceDepth: 0
('HIT TYPEDEF', ['_locale_tstruct', ',', '*', '_locale_t', ';'])
Evaluating stack ['typedef', 'struct', 'tagLC_ID']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'tagLC_ID', '{']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'tagLC_ID', '{'])
Evaluating stack ['typedef', 'struct', 'tagLC_ID', 'unsigned', 'short', 'wLanguage']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';'])
Evaluating stack ['typedef', 'struct', 'tagLC_ID', 'unsigned', 'short', 'wLanguage', 'unsigned', 'short', 'wCountry']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';', 'unsigned', 'short', 'wCountry', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';', 'unsigned', 'short', 'wCountry', ';'])
Evaluating stack ['typedef', 'struct', 'tagLC_ID', 'unsigned', 'short', 'wLanguage', 'unsigned', 'short', 'wCountry', 'unsigned', 'short', 'wCodePage']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';', 'unsigned', 'short', 'wCountry', ';', 'unsigned', 'short', 'wCodePage', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';', 'unsigned', 'short', 'wCountry', ';', 'unsigned', 'short', 'wCodePage', ';'])
Evaluating stack ['typedef', 'struct', 'tagLC_ID', 'unsigned', 'short', 'wLanguage', 'unsigned', 'short', 'wCountry', 'unsigned', 'short', 'wCodePage']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';', 'unsigned', 'short', 'wCountry', ';', 'unsigned', 'short', 'wCodePage', ';', '}']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'tagLC_ID', '{', 'unsigned', 'short', 'wLanguage', ';', 'unsigned', 'short', 'wCountry', ';', 'unsigned', 'short', 'wCodePage', ';', '}'])
Evaluating stack ['typedef', 'struct', 'tagLC_ID', 'unsigned', 'short', 'wLanguage', 'unsigned', 'short', 'wCountry', 'unsigned', 'short', 'wCodePage', 'LC_ID', ',', '*', 'LPLC_ID']
BraceDepth: 0
Evaluating stack ['LC_ID', ',', '*', 'LPLC_ID', ';']
BraceDepth: 0
('HIT TYPEDEF', ['LC_ID', ',', '*', 'LPLC_ID', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']', 'struct']
BraceDepth: 2
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{']
BraceDepth: 2
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']', 'struct', 'char', '*', 'locale']
BraceDepth: 2
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';']
BraceDepth: 2
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']', 'struct', 'char', '*', 'locale', 'wchar_t', '*', 'wlocale']
BraceDepth: 2
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';']
BraceDepth: 2
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']', 'struct', 'char', '*', 'locale', 'wchar_t', '*', 'wlocale', 'int', '*', 'refcount']
BraceDepth: 2
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';']
BraceDepth: 2
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']', 'struct', 'char', '*', 'locale', 'wchar_t', '*', 'wlocale', 'int', '*', 'refcount', 'int', '*', 'wrefcount']
BraceDepth: 2
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';', 'int', '*', 'wrefcount', ';']
BraceDepth: 2
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';', 'int', '*', 'wrefcount', ';'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']', 'struct', 'char', '*', 'locale', 'wchar_t', '*', 'wlocale', 'int', '*', 'refcount', 'int', '*', 'wrefcount']
BraceDepth: 2
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';', 'int', '*', 'wrefcount', ';', '}']
BraceDepth: 2
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';', 'int', '*', 'wrefcount', ';', '}'])
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', 'int', 'refcount', 'unsigned', 'int', 'lc_codepage', 'unsigned', 'int', 'lc_collate_cp', 'unsigned', 'long', 'lc_handle', '[', '6', ']', 'LC_ID', 'lc_id', '[', '6', ']', 'struct', 'char', '*', 'locale', 'wchar_t', '*', 'wlocale', 'int', '*', 'refcount', 'int', '*', 'wrefcount', 'lc_category', '[', '6', ']']
BraceDepth: 1
Evaluating stack ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';', 'int', '*', 'wrefcount', ';', '}', 'lc_category', '[', '6', ']', ';']
BraceDepth: 1
('HIT TYPEDEF', ['typedef', 'struct', 'threadlocaleinfostruct', '{', 'int', 'refcount', ';', 'unsigned', 'int', 'lc_codepage', ';', 'unsigned', 'int', 'lc_collate_cp', ';', 'unsigned', 'long', 'lc_handle', '[', '6', ']', ';', 'LC_ID', 'lc_id', '[', '6', ']', ';', 'struct', '{', 'char', '*', 'locale', ';', 'wchar_t', '*', 'wlocale', ';', 'int', '*', 'refcount', ';', 'int', '*', 'wrefcount', ';', '}', 'lc_category', '[', '6', ']', ';'])
Evaluating stack ['int', 'lc_clike']
BraceDepth: 1
Evaluating stack ['int', 'lc_clike', ';']
BraceDepth: 1
Evaluating stack ['int', 'mb_cur_max']
BraceDepth: 1
Evaluating stack ['int', 'mb_cur_max', ';']
BraceDepth: 1
Evaluating stack ['int', '*', 'lconv_intl_refcount']
BraceDepth: 1
Evaluating stack ['int', '*', 'lconv_intl_refcount', ';']
BraceDepth: 1
Evaluating stack ['int', '*', 'lconv_num_refcount']
BraceDepth: 1
Evaluating stack ['int', '*', 'lconv_num_refcount', ';']
BraceDepth: 1
Evaluating stack ['int', '*', 'lconv_mon_refcount']
BraceDepth: 1
Evaluating stack ['int', '*', 'lconv_mon_refcount', ';']
BraceDepth: 1
Evaluating stack ['struct', 'lconv', '*', 'lconv']
BraceDepth: 1
Evaluating stack ['struct', 'lconv', '*', 'lconv', ';']
BraceDepth: 1
Evaluating stack ['int', '*', 'ctype1_refcount']
BraceDepth: 1
Evaluating stack ['int', '*', 'ctype1_refcount', ';']
BraceDepth: 1
Evaluating stack ['unsigned', 'short', '*', 'ctype1']
BraceDepth: 1
Evaluating stack ['unsigned', 'short', '*', 'ctype1', ';']
BraceDepth: 1
Evaluating stack ['const', 'unsigned', 'short', '*', 'pctype']
BraceDepth: 1
Evaluating stack ['const', 'unsigned', 'short', '*', 'pctype', ';']
BraceDepth: 1
Evaluating stack ['const', 'unsigned', 'char', '*', 'pclmap']
BraceDepth: 1
Evaluating stack ['const', 'unsigned', 'char', '*', 'pclmap', ';']
BraceDepth: 1
Evaluating stack ['const', 'unsigned', 'char', '*', 'pcumap']
BraceDepth: 1
Evaluating stack ['const', 'unsigned', 'char', '*', 'pcumap', ';']
BraceDepth: 1
Evaluating stack ['struct', '__lc_time_data', '*', 'lc_time_curr']
BraceDepth: 1
Evaluating stack ['struct', '__lc_time_data', '*', 'lc_time_curr', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
Evaluating stack ['threadlocinfo']
BraceDepth: 0
Evaluating stack ['threadlocinfo', ';']
BraceDepth: 0
Evaluating stack ['struct', '_exception']
BraceDepth: 1
Evaluating stack ['struct', '_exception', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['int', 'type']
BraceDepth: 1
Evaluating stack ['int', 'type', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', 'type']
['int', 'type', ';']
________________________________________________________________________________
Evaluating stack ['char', '*', 'name']
BraceDepth: 1
Evaluating stack ['char', '*', 'name', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['char', '*', 'name']
['char', '*', 'name', ';']
________________________________________________________________________________
Evaluating stack ['double', 'arg1']
BraceDepth: 1
Evaluating stack ['double', 'arg1', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', 'arg1']
['double', 'arg1', ';']
________________________________________________________________________________
Evaluating stack ['double', 'arg2']
BraceDepth: 1
Evaluating stack ['double', 'arg2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', 'arg2']
['double', 'arg2', ';']
________________________________________________________________________________
Evaluating stack ['double', 'retval']
BraceDepth: 1
Evaluating stack ['double', 'retval', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', 'retval']
['double', 'retval', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', '_complex']
BraceDepth: 1
Evaluating stack ['struct', '_complex', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['double', 'x', ',', 'y']
BraceDepth: 1
Evaluating stack ['double', 'x', ',', 'y', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', 'x', ',', 'y']
['double', 'x', ',', 'y', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['extern', 'double', '_HUGE']
BraceDepth: 0
Evaluating stack ['extern', 'double', '_HUGE', ';']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', 'abs', '(', 'int', '_X', ')']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', 'abs', '(', 'int', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int', '__cdecl', 'abs', '(', 'int', '_X', ')', ';'])
('CLEAN ARRAYS', ['int', '__cdecl', 'abs', '(', 'int', '_X', ')', ';'])
('is method namestack', True, ['int', '__cdecl', 'abs', '(', 'int', '_X', ')', ';'])
________________________________________________________________________________
abs
('free function:', ['int', '__cdecl', 'abs', '(', 'int', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '_X']
None
________________________________________________________________________________
Evaluating stack ['long', '__cdecl', 'labs', '(', 'long', '_X', ')']
BraceDepth: 0
Evaluating stack ['long', '__cdecl', 'labs', '(', 'long', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['long', '__cdecl', 'labs', '(', 'long', '_X', ')', ';'])
('CLEAN ARRAYS', ['long', '__cdecl', 'labs', '(', 'long', '_X', ')', ';'])
('is method namestack', True, ['long', '__cdecl', 'labs', '(', 'long', '_X', ')', ';'])
________________________________________________________________________________
labs
('free function:', ['long', '__cdecl', 'labs', '(', 'long', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['long', '_X']
None
________________________________________________________________________________
Evaluating stack ['long', 'long', '__cdecl', 'llabs', '(', 'long', 'long', '_X', ')']
BraceDepth: 0
Evaluating stack ['long', 'long', '__cdecl', 'llabs', '(', 'long', 'long', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['long', 'long', '__cdecl', 'llabs', '(', 'long', 'long', '_X', ')', ';'])
('CLEAN ARRAYS', ['long', 'long', '__cdecl', 'llabs', '(', 'long', 'long', '_X', ')', ';'])
('is method namestack', True, ['long', 'long', '__cdecl', 'llabs', '(', 'long', 'long', '_X', ')', ';'])
________________________________________________________________________________
llabs
('free function:', ['long', 'long', '__cdecl', 'llabs', '(', 'long', 'long', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['long', 'long', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'acos', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'acos', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'acos', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'acos', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'acos', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
acos
('free function:', ['double', '__cdecl', 'acos', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'asin', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'asin', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'asin', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'asin', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'asin', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
asin
('free function:', ['double', '__cdecl', 'asin', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'atan', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'atan', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'atan', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'atan', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'atan', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
atan
('free function:', ['double', '__cdecl', 'atan', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'atan2', '(', 'double', '_Y', ',', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'atan2', '(', 'double', '_Y', ',', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'atan2', '(', 'double', '_Y', ',', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'atan2', '(', 'double', '_Y', ',', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'atan2', '(', 'double', '_Y', ',', 'double', '_X', ')', ';'])
________________________________________________________________________________
atan2
('free function:', ['double', '__cdecl', 'atan2', '(', 'double', '_Y', ',', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_copysign', '(', 'double', '_Number', ',', 'double', '_Sign', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_copysign', '(', 'double', '_Number', ',', 'double', '_Sign', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_copysign', '(', 'double', '_Number', ',', 'double', '_Sign', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_copysign', '(', 'double', '_Number', ',', 'double', '_Sign', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_copysign', '(', 'double', '_Number', ',', 'double', '_Sign', ')', ';'])
________________________________________________________________________________
_copysign
('free function:', ['double', '__cdecl', '_copysign', '(', 'double', '_Number', ',', 'double', '_Sign', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Number']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Sign']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_chgsign', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_chgsign', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_chgsign', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_chgsign', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_chgsign', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_chgsign
('free function:', ['double', '__cdecl', '_chgsign', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'cos', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'cos', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'cos', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'cos', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'cos', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
cos
('free function:', ['double', '__cdecl', 'cos', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'cosh', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'cosh', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'cosh', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'cosh', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'cosh', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
cosh
('free function:', ['double', '__cdecl', 'cosh', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'exp', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'exp', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'exp', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'exp', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'exp', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
exp
('free function:', ['double', '__cdecl', 'exp', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'fabs', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'fabs', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'fabs', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'fabs', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'fabs', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
fabs
('free function:', ['double', '__cdecl', 'fabs', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'fmod', '(', 'double', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'fmod', '(', 'double', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'fmod', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'fmod', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'fmod', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
fmod
('free function:', ['double', '__cdecl', 'fmod', '(', 'double', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'log', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'log', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'log', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'log', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'log', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
log
('free function:', ['double', '__cdecl', 'log', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'log10', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'log10', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'log10', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'log10', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'log10', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
log10
('free function:', ['double', '__cdecl', 'log10', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'pow', '(', 'double', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'pow', '(', 'double', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'pow', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'pow', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'pow', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
pow
('free function:', ['double', '__cdecl', 'pow', '(', 'double', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'sin', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'sin', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'sin', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'sin', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'sin', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
sin
('free function:', ['double', '__cdecl', 'sin', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'sinh', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'sinh', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'sinh', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'sinh', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'sinh', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
sinh
('free function:', ['double', '__cdecl', 'sinh', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'tan', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'tan', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'tan', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'tan', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'tan', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
tan
('free function:', ['double', '__cdecl', 'tan', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'tanh', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'tanh', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'tanh', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'tanh', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'tanh', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
tanh
('free function:', ['double', '__cdecl', 'tanh', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'sqrt', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'sqrt', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'sqrt', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'sqrt', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'sqrt', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
sqrt
('free function:', ['double', '__cdecl', 'sqrt', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'atof', '(', 'const', 'char', '*', '_String', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'atof', '(', 'const', 'char', '*', '_String', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'atof', '(', 'const', 'char', '*', '_String', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'atof', '(', 'const', 'char', '*', '_String', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'atof', '(', 'const', 'char', '*', '_String', ')', ';'])
________________________________________________________________________________
atof
('free function:', ['double', '__cdecl', 'atof', '(', 'const', 'char', '*', '_String', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'char', '*', '_String']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_atof_l', '(', 'const', 'char', '*', '_String', ',', '_locale_t', '_Locale', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_atof_l', '(', 'const', 'char', '*', '_String', ',', '_locale_t', '_Locale', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_atof_l', '(', 'const', 'char', '*', '_String', ',', '_locale_t', '_Locale', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_atof_l', '(', 'const', 'char', '*', '_String', ',', '_locale_t', '_Locale', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_atof_l', '(', 'const', 'char', '*', '_String', ',', '_locale_t', '_Locale', ')', ';'])
________________________________________________________________________________
_atof_l
('free function:', ['double', '__cdecl', '_atof_l', '(', 'const', 'char', '*', '_String', ',', '_locale_t', '_Locale', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'char', '*', '_String']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['_locale_t', '_Locale']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_cabs', '(', 'struct', '_complex', '_Complex_value', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_cabs', '(', 'struct', '_complex', '_Complex_value', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_cabs', '(', 'struct', '_complex', '_Complex_value', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_cabs', '(', 'struct', '_complex', '_Complex_value', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_cabs', '(', 'struct', '_complex', '_Complex_value', ')', ';'])
________________________________________________________________________________
_cabs
('free function:', ['double', '__cdecl', '_cabs', '(', 'struct', '_complex', '_Complex_value', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['struct', '_complex', '_Complex_value']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'ceil', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'ceil', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'ceil', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'ceil', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'ceil', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
ceil
('free function:', ['double', '__cdecl', 'ceil', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'floor', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'floor', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'floor', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'floor', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'floor', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
floor
('free function:', ['double', '__cdecl', 'floor', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'frexp', '(', 'double', '_X', ',', 'int', '*', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'frexp', '(', 'double', '_X', ',', 'int', '*', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'frexp', '(', 'double', '_X', ',', 'int', '*', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'frexp', '(', 'double', '_X', ',', 'int', '*', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'frexp', '(', 'double', '_X', ',', 'int', '*', '_Y', ')', ';'])
________________________________________________________________________________
frexp
('free function:', ['double', '__cdecl', 'frexp', '(', 'double', '_X', ',', 'int', '*', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '*', '_Y']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_hypot', '(', 'double', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
_hypot
('free function:', ['double', '__cdecl', '_hypot', '(', 'double', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
Evaluating stack ['float', '__cdecl', '_hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')']
BraceDepth: 0
Evaluating stack ['float', '__cdecl', '_hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['float', '__cdecl', '_hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', ';'])
('CLEAN ARRAYS', ['float', '__cdecl', '_hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', ';'])
('is method namestack', True, ['float', '__cdecl', '_hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', ';'])
________________________________________________________________________________
_hypotf
('free function:', ['float', '__cdecl', '_hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float', '_Y']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_j0', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_j0', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_j0', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_j0', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_j0', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_j0
('free function:', ['double', '__cdecl', '_j0', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_j1', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_j1', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_j1', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_j1', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_j1', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_j1
('free function:', ['double', '__cdecl', '_j1', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_jn', '(', 'int', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
_jn
('free function:', ['double', '__cdecl', '_jn', '(', 'int', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'ldexp', '(', 'double', '_X', ',', 'int', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'ldexp', '(', 'double', '_X', ',', 'int', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'ldexp', '(', 'double', '_X', ',', 'int', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'ldexp', '(', 'double', '_X', ',', 'int', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'ldexp', '(', 'double', '_X', ',', 'int', '_Y', ')', ';'])
________________________________________________________________________________
ldexp
('free function:', ['double', '__cdecl', 'ldexp', '(', 'double', '_X', ',', 'int', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '_Y']
None
________________________________________________________________________________
Evaluating stack ['int', '__cdecl', '_matherr', '(', 'struct', '_exception', '*', '_Except', ')']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', '_matherr', '(', 'struct', '_exception', '*', '_Except', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int', '__cdecl', '_matherr', '(', 'struct', '_exception', '*', '_Except', ')', ';'])
('CLEAN ARRAYS', ['int', '__cdecl', '_matherr', '(', 'struct', '_exception', '*', '_Except', ')', ';'])
('is method namestack', True, ['int', '__cdecl', '_matherr', '(', 'struct', '_exception', '*', '_Except', ')', ';'])
________________________________________________________________________________
_matherr
('free function:', ['int', '__cdecl', '_matherr', '(', 'struct', '_exception', '*', '_Except', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['struct', '_exception', '*', '_Except']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', 'modf', '(', 'double', '_X', ',', 'double', '*', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', 'modf', '(', 'double', '_X', ',', 'double', '*', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', 'modf', '(', 'double', '_X', ',', 'double', '*', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', 'modf', '(', 'double', '_X', ',', 'double', '*', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', 'modf', '(', 'double', '_X', ',', 'double', '*', '_Y', ')', ';'])
________________________________________________________________________________
modf
('free function:', ['double', '__cdecl', 'modf', '(', 'double', '_X', ',', 'double', '*', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '*', '_Y']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_y0', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_y0', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_y0', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_y0', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_y0', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_y0
('free function:', ['double', '__cdecl', '_y0', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_y1', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_y1', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_y1', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_y1', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_y1', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_y1
('free function:', ['double', '__cdecl', '_y1', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_yn', '(', 'int', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
_yn
('free function:', ['double', '__cdecl', '_yn', '(', 'int', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
Evaluating stack ['static', '__inline', 'double', '__cdecl', 'hypot', '(', 'double', '_X', ',', 'double', '_Y', ')']
BraceDepth: 1
Evaluating stack ['static', '__inline', 'double', '__cdecl', 'hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', '__inline', 'double', '__cdecl', 'hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', '{'])
('CLEAN ARRAYS', ['static', '__inline', 'double', '__cdecl', 'hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', '{'])
('is method namestack', True, ['static', '__inline', 'double', '__cdecl', 'hypot', '(', 'double', '_X', ',', 'double', '_Y', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
hypot
('free function:', ['static', '__inline', 'double', '__cdecl', 'hypot', '(', 'double', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
Evaluating stack ['return', '_hypot', '(', '_X', ',', '_Y', ')']
BraceDepth: 1
Evaluating stack ['return', '_hypot', '(', '_X', ',', '_Y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['static', '__inline', 'float', '__cdecl', 'hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')']
BraceDepth: 1
Evaluating stack ['static', '__inline', 'float', '__cdecl', 'hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', '__inline', 'float', '__cdecl', 'hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', '{'])
('CLEAN ARRAYS', ['static', '__inline', 'float', '__cdecl', 'hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', '{'])
('is method namestack', True, ['static', '__inline', 'float', '__cdecl', 'hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
hypotf
('free function:', ['static', '__inline', 'float', '__cdecl', 'hypotf', '(', 'float', '_X', ',', 'float', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float', '_Y']
None
________________________________________________________________________________
Evaluating stack ['return', '_hypotf', '(', '_X', ',', '_Y', ')']
BraceDepth: 1
Evaluating stack ['return', '_hypotf', '(', '_X', ',', '_Y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['int', '__cdecl', '_set_SSE2_enable', '(', 'int', '_Flag', ')']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', '_set_SSE2_enable', '(', 'int', '_Flag', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int', '__cdecl', '_set_SSE2_enable', '(', 'int', '_Flag', ')', ';'])
('CLEAN ARRAYS', ['int', '__cdecl', '_set_SSE2_enable', '(', 'int', '_Flag', ')', ';'])
('is method namestack', True, ['int', '__cdecl', '_set_SSE2_enable', '(', 'int', '_Flag', ')', ';'])
________________________________________________________________________________
_set_SSE2_enable
('free function:', ['int', '__cdecl', '_set_SSE2_enable', '(', 'int', '_Flag', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '_Flag']
None
________________________________________________________________________________
Evaluating stack ['extern', 'double', 'HUGE']
BraceDepth: 0
Evaluating stack ['extern', 'double', 'HUGE', ';']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_cabs"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'cabs', '(', 'struct', '_complex', '_X', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_cabs"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'cabs', '(', 'struct', '_complex', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_cabs"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'cabs', '(', 'struct', '_complex', '_X', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_cabs"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'cabs', '(', 'struct', '_complex', '_X', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_cabs"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'cabs', '(', 'struct', '_complex', '_X', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_cabs"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'cabs', '(', 'struct', '_complex', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: ""_cabs"". See online help for details."))', 'double', '__cdecl', 'cabs(struct_complex_X']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j0', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j0', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j0', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j0', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j0', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j0', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: ""_j0"". See online help for details."))', 'double', '__cdecl', 'j0(double_X']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j1', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j1', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j1', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j1', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j1', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_j1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'j1', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: ""_j1"". See online help for details."))', 'double', '__cdecl', 'j1(double_X']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_jn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'jn', '(', 'int', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_jn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_jn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_jn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_jn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'jn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_jn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'jn', '(', 'int', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: ""_jn"". See online help for details."))', 'double', '__cdecl', 'jn(int_X,double_Y']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y0', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y0', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y0', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y0', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y0', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y0"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y0', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: ""_y0"". See online help for details."))', 'double', '__cdecl', 'y0(double_X']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y1', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y1', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y1', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y1', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y1', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_y1"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'y1', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: ""_y1"". See online help for details."))', 'double', '__cdecl', 'y1(double_X']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_yn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'yn', '(', 'int', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_yn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_yn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_yn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_yn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'yn', '(', 'int', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: "', '"_yn"', '". See online help for details."', ')', ')', 'double', '__cdecl', 'yn', '(', 'int', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: ""_yn"". See online help for details."))', 'double', '__cdecl', 'yn(int_X,double_Y']
None
________________________________________________________________________________
Evaluating stack ['typedef', 'signed', 'char', 'int8']
BraceDepth: 0
Evaluating stack ['typedef', 'signed', 'char', 'int8', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'signed', 'char', 'int8', ';'])
Evaluating stack ['typedef', 'signed', 'short', 'int16']
BraceDepth: 0
Evaluating stack ['typedef', 'signed', 'short', 'int16', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'signed', 'short', 'int16', ';'])
Evaluating stack ['typedef', 'signed', 'int', 'int32']
BraceDepth: 0
Evaluating stack ['typedef', 'signed', 'int', 'int32', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'signed', 'int', 'int32', ';'])
Evaluating stack ['typedef', 'unsigned', 'char', 'uint8']
BraceDepth: 0
Evaluating stack ['typedef', 'unsigned', 'char', 'uint8', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'unsigned', 'char', 'uint8', ';'])
Evaluating stack ['typedef', 'unsigned', 'short', 'uint16']
BraceDepth: 0
Evaluating stack ['typedef', 'unsigned', 'short', 'uint16', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'unsigned', 'short', 'uint16', ';'])
Evaluating stack ['typedef', 'unsigned', 'int', 'uint32']
BraceDepth: 0
Evaluating stack ['typedef', 'unsigned', 'int', 'uint32', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'unsigned', 'int', 'uint32', ';'])
Evaluating stack ['typedef', 'float', 'float32']
BraceDepth: 0
Evaluating stack ['typedef', 'float', 'float32', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'float', 'float32', ';'])
Evaluating stack ['typedef', 'double', 'float64']
BraceDepth: 0
Evaluating stack ['typedef', 'double', 'float64', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'double', 'float64', ';'])
Evaluating stack ['void', '*', 'b2Alloc', '(', 'int32', 'size', ')']
BraceDepth: 0
Evaluating stack ['void', '*', 'b2Alloc', '(', 'int32', 'size', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', '*', 'b2Alloc', '(', 'int32', 'size', ')', ';'])
('CLEAN ARRAYS', ['void', '*', 'b2Alloc', '(', 'int32', 'size', ')', ';'])
('is method namestack', True, ['void', '*', 'b2Alloc', '(', 'int32', 'size', ')', ';'])
________________________________________________________________________________
b2Alloc
('free function:', ['void', '*', 'b2Alloc', '(', 'int32', 'size', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'size']
None
________________________________________________________________________________
Evaluating stack ['void', 'b2Free', '(', 'void', '*', 'mem', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2Free', '(', 'void', '*', 'mem', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2Free', '(', 'void', '*', 'mem', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2Free', '(', 'void', '*', 'mem', ')', ';'])
('is method namestack', True, ['void', 'b2Free', '(', 'void', '*', 'mem', ')', ';'])
________________________________________________________________________________
b2Free
('free function:', ['void', 'b2Free', '(', 'void', '*', 'mem', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'mem']
None
________________________________________________________________________________
Evaluating stack ['void', 'b2Log', '(', 'const', 'char', '*', 'string', ',', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2Log', '(', 'const', 'char', '*', 'string', ',', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2Log', '(', 'const', 'char', '*', 'string', ',', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2Log', '(', 'const', 'char', '*', 'string', ',', ')', ';'])
('is method namestack', True, ['void', 'b2Log', '(', 'const', 'char', '*', 'string', ',', ')', ';'])
________________________________________________________________________________
b2Log
('free function:', ['void', 'b2Log', '(', 'const', 'char', '*', 'string', ',', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'char', '*', 'string']
None
________________________________________________________________________________
Evaluating stack ['struct', 'b2Version']
BraceDepth: 1
Evaluating stack ['struct', 'b2Version', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['int32', 'major']
BraceDepth: 1
Evaluating stack ['int32', 'major', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'major']
['int32', 'major', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'minor']
BraceDepth: 1
Evaluating stack ['int32', 'minor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'minor']
['int32', 'minor', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'revision']
BraceDepth: 1
Evaluating stack ['int32', 'revision', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'revision']
['int32', 'revision', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['extern', 'b2Version', 'b2_version']
BraceDepth: 0
Evaluating stack ['extern', 'b2Version', 'b2_version', ';']
BraceDepth: 0
Evaluating stack ['unsigned', 'int', '__cdecl', '_clearfp', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['unsigned', 'int', '__cdecl', '_clearfp', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['unsigned', 'int', '__cdecl', '_clearfp', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['unsigned', 'int', '__cdecl', '_clearfp', '(', 'void', ')', ';'])
('is method namestack', True, ['unsigned', 'int', '__cdecl', '_clearfp', '(', 'void', ')', ';'])
________________________________________________________________________________
_clearfp
('free function:', ['unsigned', 'int', '__cdecl', '_clearfp', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"This function or variable may be unsafe. Consider using "', '"_controlfp_s"', '" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."', ')', ')', 'unsigned', 'int', '__cdecl', '_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')']
BraceDepth: 0
Evaluating stack ['__declspec', '(', 'deprecated', '(', '"This function or variable may be unsafe. Consider using "', '"_controlfp_s"', '" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."', ')', ')', 'unsigned', 'int', '__cdecl', '_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['__declspec', '(', 'deprecated', '(', '"This function or variable may be unsafe. Consider using "', '"_controlfp_s"', '" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."', ')', ')', 'unsigned', 'int', '__cdecl', '_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('CLEAN ARRAYS', ['__declspec', '(', 'deprecated', '(', '"This function or variable may be unsafe. Consider using "', '"_controlfp_s"', '" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."', ')', ')', 'unsigned', 'int', '__cdecl', '_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('is method namestack', True, ['__declspec', '(', 'deprecated', '(', '"This function or variable may be unsafe. Consider using "', '"_controlfp_s"', '" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."', ')', ')', 'unsigned', 'int', '__cdecl', '_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
________________________________________________________________________________
__declspec
('free function:', ['__declspec', '(', 'deprecated', '(', '"This function or variable may be unsafe. Consider using "', '"_controlfp_s"', '" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."', ')', ')', 'unsigned', 'int', '__cdecl', '_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['deprecated("This function or variable may be unsafe. Consider using ""_controlfp_s"" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))', 'unsigned', 'int', '__cdecl', '_controlfp(unsignedint_NewValue,unsignedint_Mask']
None
________________________________________________________________________________
Evaluating stack ['void', '__cdecl', '_set_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')']
BraceDepth: 0
Evaluating stack ['void', '__cdecl', '_set_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', '__cdecl', '_set_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('CLEAN ARRAYS', ['void', '__cdecl', '_set_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('is method namestack', True, ['void', '__cdecl', '_set_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
________________________________________________________________________________
_set_controlfp
('free function:', ['void', '__cdecl', '_set_controlfp', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_NewValue']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_Mask']
None
________________________________________________________________________________
Evaluating stack ['errno_t', '__cdecl', '_controlfp_s', '(', 'unsigned', 'int', '*', '_CurrentState', ',', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')']
BraceDepth: 0
Evaluating stack ['errno_t', '__cdecl', '_controlfp_s', '(', 'unsigned', 'int', '*', '_CurrentState', ',', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['errno_t', '__cdecl', '_controlfp_s', '(', 'unsigned', 'int', '*', '_CurrentState', ',', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('CLEAN ARRAYS', ['errno_t', '__cdecl', '_controlfp_s', '(', 'unsigned', 'int', '*', '_CurrentState', ',', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('is method namestack', True, ['errno_t', '__cdecl', '_controlfp_s', '(', 'unsigned', 'int', '*', '_CurrentState', ',', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
________________________________________________________________________________
_controlfp_s
('free function:', ['errno_t', '__cdecl', '_controlfp_s', '(', 'unsigned', 'int', '*', '_CurrentState', ',', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '*', '_CurrentState']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_NewValue']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_Mask']
None
________________________________________________________________________________
Evaluating stack ['unsigned', 'int', '__cdecl', '_statusfp', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['unsigned', 'int', '__cdecl', '_statusfp', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['unsigned', 'int', '__cdecl', '_statusfp', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['unsigned', 'int', '__cdecl', '_statusfp', '(', 'void', ')', ';'])
('is method namestack', True, ['unsigned', 'int', '__cdecl', '_statusfp', '(', 'void', ')', ';'])
________________________________________________________________________________
_statusfp
('free function:', ['unsigned', 'int', '__cdecl', '_statusfp', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['void', '__cdecl', '_fpreset', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['void', '__cdecl', '_fpreset', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', '__cdecl', '_fpreset', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['void', '__cdecl', '_fpreset', '(', 'void', ')', ';'])
('is method namestack', True, ['void', '__cdecl', '_fpreset', '(', 'void', ')', ';'])
________________________________________________________________________________
_fpreset
('free function:', ['void', '__cdecl', '_fpreset', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['void', '__cdecl', '_statusfp2', '(', 'unsigned', 'int', '*', '_X86_status', ',', 'unsigned', 'int', '*', '_SSE2_status', ')']
BraceDepth: 0
Evaluating stack ['void', '__cdecl', '_statusfp2', '(', 'unsigned', 'int', '*', '_X86_status', ',', 'unsigned', 'int', '*', '_SSE2_status', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', '__cdecl', '_statusfp2', '(', 'unsigned', 'int', '*', '_X86_status', ',', 'unsigned', 'int', '*', '_SSE2_status', ')', ';'])
('CLEAN ARRAYS', ['void', '__cdecl', '_statusfp2', '(', 'unsigned', 'int', '*', '_X86_status', ',', 'unsigned', 'int', '*', '_SSE2_status', ')', ';'])
('is method namestack', True, ['void', '__cdecl', '_statusfp2', '(', 'unsigned', 'int', '*', '_X86_status', ',', 'unsigned', 'int', '*', '_SSE2_status', ')', ';'])
________________________________________________________________________________
_statusfp2
('free function:', ['void', '__cdecl', '_statusfp2', '(', 'unsigned', 'int', '*', '_X86_status', ',', 'unsigned', 'int', '*', '_SSE2_status', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '*', '_X86_status']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '*', '_SSE2_status']
None
________________________________________________________________________________
Evaluating stack ['unsigned', 'int', '__cdecl', '_control87', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')']
BraceDepth: 0
Evaluating stack ['unsigned', 'int', '__cdecl', '_control87', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['unsigned', 'int', '__cdecl', '_control87', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('CLEAN ARRAYS', ['unsigned', 'int', '__cdecl', '_control87', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
('is method namestack', True, ['unsigned', 'int', '__cdecl', '_control87', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')', ';'])
________________________________________________________________________________
_control87
('free function:', ['unsigned', 'int', '__cdecl', '_control87', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_NewValue']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_Mask']
None
________________________________________________________________________________
Evaluating stack ['int', '__cdecl', '__control87_2', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ',', 'unsigned', 'int', '*', '_X86_cw', ',', 'unsigned', 'int', '*', '_Sse2_cw', ')']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', '__control87_2', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ',', 'unsigned', 'int', '*', '_X86_cw', ',', 'unsigned', 'int', '*', '_Sse2_cw', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int', '__cdecl', '__control87_2', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ',', 'unsigned', 'int', '*', '_X86_cw', ',', 'unsigned', 'int', '*', '_Sse2_cw', ')', ';'])
('CLEAN ARRAYS', ['int', '__cdecl', '__control87_2', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ',', 'unsigned', 'int', '*', '_X86_cw', ',', 'unsigned', 'int', '*', '_Sse2_cw', ')', ';'])
('is method namestack', True, ['int', '__cdecl', '__control87_2', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ',', 'unsigned', 'int', '*', '_X86_cw', ',', 'unsigned', 'int', '*', '_Sse2_cw', ')', ';'])
________________________________________________________________________________
__control87_2
('free function:', ['int', '__cdecl', '__control87_2', '(', 'unsigned', 'int', '_NewValue', ',', 'unsigned', 'int', '_Mask', ',', 'unsigned', 'int', '*', '_X86_cw', ',', 'unsigned', 'int', '*', '_Sse2_cw', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_NewValue']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '_Mask']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '*', '_X86_cw']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['unsigned', 'int', '*', '_Sse2_cw']
None
________________________________________________________________________________
Evaluating stack ['extern', 'int', '*', '__cdecl', '__fpecode', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['extern', 'int', '*', '__cdecl', '__fpecode', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['extern', 'int', '*', '__cdecl', '__fpecode', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['extern', 'int', '*', '__cdecl', '__fpecode', '(', 'void', ')', ';'])
('is method namestack', True, ['extern', 'int', '*', '__cdecl', '__fpecode', '(', 'void', ')', ';'])
________________________________________________________________________________
__fpecode
('free function:', ['extern', 'int', '*', '__cdecl', '__fpecode', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_scalb', '(', 'double', '_X', ',', 'long', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_scalb', '(', 'double', '_X', ',', 'long', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_scalb', '(', 'double', '_X', ',', 'long', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_scalb', '(', 'double', '_X', ',', 'long', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_scalb', '(', 'double', '_X', ',', 'long', '_Y', ')', ';'])
________________________________________________________________________________
_scalb
('free function:', ['double', '__cdecl', '_scalb', '(', 'double', '_X', ',', 'long', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['long', '_Y']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_logb', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_logb', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_logb', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_logb', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_logb', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_logb
('free function:', ['double', '__cdecl', '_logb', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['double', '__cdecl', '_nextafter', '(', 'double', '_X', ',', 'double', '_Y', ')']
BraceDepth: 0
Evaluating stack ['double', '__cdecl', '_nextafter', '(', 'double', '_X', ',', 'double', '_Y', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['double', '__cdecl', '_nextafter', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('CLEAN ARRAYS', ['double', '__cdecl', '_nextafter', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
('is method namestack', True, ['double', '__cdecl', '_nextafter', '(', 'double', '_X', ',', 'double', '_Y', ')', ';'])
________________________________________________________________________________
_nextafter
('free function:', ['double', '__cdecl', '_nextafter', '(', 'double', '_X', ',', 'double', '_Y', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_Y']
None
________________________________________________________________________________
Evaluating stack ['int', '__cdecl', '_finite', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', '_finite', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int', '__cdecl', '_finite', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['int', '__cdecl', '_finite', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['int', '__cdecl', '_finite', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_finite
('free function:', ['int', '__cdecl', '_finite', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['int', '__cdecl', '_isnan', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', '_isnan', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int', '__cdecl', '_isnan', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['int', '__cdecl', '_isnan', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['int', '__cdecl', '_isnan', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_isnan
('free function:', ['int', '__cdecl', '_isnan', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['int', '__cdecl', '_fpclass', '(', 'double', '_X', ')']
BraceDepth: 0
Evaluating stack ['int', '__cdecl', '_fpclass', '(', 'double', '_X', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int', '__cdecl', '_fpclass', '(', 'double', '_X', ')', ';'])
('CLEAN ARRAYS', ['int', '__cdecl', '_fpclass', '(', 'double', '_X', ')', ';'])
('is method namestack', True, ['int', '__cdecl', '_fpclass', '(', 'double', '_X', ')', ';'])
________________________________________________________________________________
_fpclass
('free function:', ['int', '__cdecl', '_fpclass', '(', 'double', '_X', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['double', '_X']
None
________________________________________________________________________________
Evaluating stack ['void', '__cdecl', 'fpreset', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['void', '__cdecl', 'fpreset', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', '__cdecl', 'fpreset', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['void', '__cdecl', 'fpreset', '(', 'void', ')', ';'])
('is method namestack', True, ['void', '__cdecl', 'fpreset', '(', 'void', ')', ';'])
________________________________________________________________________________
fpreset
('free function:', ['void', '__cdecl', 'fpreset', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['extern', 'int', '*', '__cdecl', '_errno', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['extern', 'int', '*', '__cdecl', '_errno', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['extern', 'int', '*', '__cdecl', '_errno', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['extern', 'int', '*', '__cdecl', '_errno', '(', 'void', ')', ';'])
('is method namestack', True, ['extern', 'int', '*', '__cdecl', '_errno', '(', 'void', ')', ';'])
________________________________________________________________________________
_errno
('free function:', ['extern', 'int', '*', '__cdecl', '_errno', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['errno_t', '__cdecl', '_set_errno', '(', 'int', '_Value', ')']
BraceDepth: 0
Evaluating stack ['errno_t', '__cdecl', '_set_errno', '(', 'int', '_Value', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['errno_t', '__cdecl', '_set_errno', '(', 'int', '_Value', ')', ';'])
('CLEAN ARRAYS', ['errno_t', '__cdecl', '_set_errno', '(', 'int', '_Value', ')', ';'])
('is method namestack', True, ['errno_t', '__cdecl', '_set_errno', '(', 'int', '_Value', ')', ';'])
________________________________________________________________________________
_set_errno
('free function:', ['errno_t', '__cdecl', '_set_errno', '(', 'int', '_Value', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '_Value']
None
________________________________________________________________________________
Evaluating stack ['errno_t', '__cdecl', '_get_errno', '(', 'int', '*', '_Value', ')']
BraceDepth: 0
Evaluating stack ['errno_t', '__cdecl', '_get_errno', '(', 'int', '*', '_Value', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['errno_t', '__cdecl', '_get_errno', '(', 'int', '*', '_Value', ')', ';'])
('CLEAN ARRAYS', ['errno_t', '__cdecl', '_get_errno', '(', 'int', '*', '_Value', ')', ';'])
('is method namestack', True, ['errno_t', '__cdecl', '_get_errno', '(', 'int', '*', '_Value', ')', ';'])
________________________________________________________________________________
_get_errno
('free function:', ['errno_t', '__cdecl', '_get_errno', '(', 'int', '*', '_Value', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int', '*', '_Value']
None
________________________________________________________________________________
Evaluating stack ['extern', 'unsigned', 'long', '__cdecl', '__threadid', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['extern', 'unsigned', 'long', '__cdecl', '__threadid', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['extern', 'unsigned', 'long', '__cdecl', '__threadid', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['extern', 'unsigned', 'long', '__cdecl', '__threadid', '(', 'void', ')', ';'])
('is method namestack', True, ['extern', 'unsigned', 'long', '__cdecl', '__threadid', '(', 'void', ')', ';'])
________________________________________________________________________________
__threadid
('free function:', ['extern', 'unsigned', 'long', '__cdecl', '__threadid', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['extern', 'uintptr_t', '__cdecl', '__threadhandle', '(', 'void', ')']
BraceDepth: 0
Evaluating stack ['extern', 'uintptr_t', '__cdecl', '__threadhandle', '(', 'void', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['extern', 'uintptr_t', '__cdecl', '__threadhandle', '(', 'void', ')', ';'])
('CLEAN ARRAYS', ['extern', 'uintptr_t', '__cdecl', '__threadhandle', '(', 'void', ')', ';'])
('is method namestack', True, ['extern', 'uintptr_t', '__cdecl', '__threadhandle', '(', 'void', ')', ';'])
________________________________________________________________________________
__threadhandle
('free function:', ['extern', 'uintptr_t', '__cdecl', '__threadhandle', '(', 'void', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void']
None
________________________________________________________________________________
Evaluating stack ['inline', 'bool', 'b2IsValid', '(', 'float32', 'x', ')']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2IsValid', '(', 'float32', 'x', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2IsValid', '(', 'float32', 'x', ')', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2IsValid', '(', 'float32', 'x', ')', '{'])
('is method namestack', True, ['inline', 'bool', 'b2IsValid', '(', 'float32', 'x', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2IsValid
('free function:', ['inline', 'bool', 'b2IsValid', '(', 'float32', 'x', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x']
None
________________________________________________________________________________
Evaluating stack ['if', '(', 'x', '=', 'x', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'x', '=', 'x', ')', '{']
BraceDepth: 2
Evaluating stack ['return', 'false']
BraceDepth: 2
Evaluating stack ['return', 'false', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['float32', 'infinity', '=', 'std', ':', ':', 'numeric_limits', '<float32', '>', ':', ':', 'infinity', '(', ')']
BraceDepth: 1
Evaluating stack ['}', 'float32', 'infinity', '=', 'std', ':', ':', 'numeric_limits', '<float32', '>', ':', ':', 'infinity', '(', ')', ';']
BraceDepth: 1
Evaluating stack ['return', '-', 'infinity', '<', 'x', '&', '&', 'x', '<', 'infinity']
BraceDepth: 1
Evaluating stack ['return', '-', 'infinity', '<', 'x', '&', '&', 'x', '<', 'infinity', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2InvSqrt', '(', 'float32', 'x', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2InvSqrt', '(', 'float32', 'x', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2InvSqrt', '(', 'float32', 'x', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2InvSqrt', '(', 'float32', 'x', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2InvSqrt', '(', 'float32', 'x', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2InvSqrt
('free function:', ['inline', 'float32', 'b2InvSqrt', '(', 'float32', 'x', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x']
None
________________________________________________________________________________
Evaluating stack ['union']
BraceDepth: 2
Evaluating stack ['union', '{']
BraceDepth: 2
Evaluating stack ['float32', 'x']
BraceDepth: 2
Evaluating stack ['float32', 'x', ';']
BraceDepth: 2
Evaluating stack ['int32', 'i']
BraceDepth: 2
Evaluating stack ['int32', 'i', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['convert']
BraceDepth: 1
Evaluating stack ['}', 'convert', ';']
BraceDepth: 1
Evaluating stack ['convert', 'x', '=', 'x']
BraceDepth: 1
Evaluating stack ['convert', 'x', '=', 'x', ';']
BraceDepth: 1
Evaluating stack ['float32', 'xhalf', '=', '0', '5f', '*', 'x']
BraceDepth: 1
Evaluating stack ['float32', 'xhalf', '=', '0', '5f', '*', 'x', ';']
BraceDepth: 1
Evaluating stack ['convert', 'i', '=', '0x5f3759df', '-', '(', 'convert', 'i', '>', '>', '1', ')']
BraceDepth: 1
Evaluating stack ['convert', 'i', '=', '0x5f3759df', '-', '(', 'convert', 'i', '>', '>', '1', ')', ';']
BraceDepth: 1
Evaluating stack ['x', '=', 'convert', 'x']
BraceDepth: 1
Evaluating stack ['x', '=', 'convert', 'x', ';']
BraceDepth: 1
Evaluating stack ['x', '=', 'x', '*', '(', '1', '5f', '-', 'xhalf', '*', 'x', '*', 'x', ')']
BraceDepth: 1
Evaluating stack ['x', '=', 'x', '*', '(', '1', '5f', '-', 'xhalf', '*', 'x', '*', 'x', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'x']
BraceDepth: 1
Evaluating stack ['return', 'x', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2Vec2']
BraceDepth: 1
Evaluating stack ['struct', 'b2Vec2', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Vec2', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Vec2', '(', ')', '{'])
('is method namestack', True, ['b2Vec2', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Vec2
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Vec2', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Vec2 ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', '(', 'float32', 'x', ',', 'float32', 'y', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')']
BraceDepth: 2
Evaluating stack ['b2Vec2', '(', 'float32', 'x', ',', 'float32', 'y', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', '(', 'float32', 'x', ',', 'float32', 'y', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', '{'])
('CLEAN ARRAYS', ['b2Vec2', '(', 'float32', 'x', ',', 'float32', 'y', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', '{'])
('is method namestack', True, ['b2Vec2', '(', 'float32', 'x', ',', 'float32', 'y', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Vec2
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Vec2', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Vec2 ( float32 x , float32 y ) : x ( x ) , y ( y ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'y']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetZero', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetZero', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetZero', '(', ')', '{'])
('is method namestack', True, ['void', 'SetZero', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetZero
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'SetZero', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['x', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['x', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['y', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['y', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ')']
BraceDepth: 2
Evaluating stack ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ')', '{'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ')', '{'])
('is method namestack', True, ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Set
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Set', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Set ( float32 x_ , float32 y_ ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x_']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'y_']
None
________________________________________________________________________________
Evaluating stack ['x', '=', 'x_']
BraceDepth: 2
Evaluating stack ['x', '=', 'x_', ';']
BraceDepth: 2
Evaluating stack ['y', '=', 'y_']
BraceDepth: 2
Evaluating stack ['y', '=', 'y_', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'operator', '-', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'operator', '-', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', 'operator', '-', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec2', 'operator', '-', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Vec2', 'operator', '-', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____sub__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____sub__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '-', 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 operator - ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['b2Vec2', 'v']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'v', ';']
BraceDepth: 2
Evaluating stack ['v', 'Set', '(', '-', 'x', ',', '-', 'y', ')']
BraceDepth: 2
Evaluating stack ['v', 'Set', '(', '-', 'x', ',', '-', 'y', ')', ';']
BraceDepth: 2
Evaluating stack ['return', 'v']
BraceDepth: 2
Evaluating stack ['return', 'v', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'operator', '(', ')', '(', 'int32', 'i', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'operator', '(', ')', '(', 'int32', 'i', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'operator', '(', ')', '(', 'int32', 'i', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'operator', '(', ')', '(', 'int32', 'i', ')', 'const', '{'])
('is method namestack', True, ['float32', 'operator', '(', ')', '(', 'int32', 'i', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Evaluating stack ['return', '(', '&', 'x', ')', '[', 'i', ']']
BraceDepth: 2
Evaluating stack ['return', '(', '&', 'x', ')', '[', 'i', ']', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', '&', 'operator', '(', ')', '(', 'int32', 'i', ')']
BraceDepth: 2
Evaluating stack ['float32', '&', 'operator', '(', ')', '(', 'int32', 'i', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', '&', 'operator', '(', ')', '(', 'int32', 'i', ')', '{'])
('CLEAN ARRAYS', ['float32', '&', 'operator', '(', ')', '(', 'int32', 'i', ')', '{'])
('is method namestack', True, ['float32', '&', 'operator', '(', ')', '(', 'int32', 'i', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Evaluating stack ['return', '(', '&', 'x', ')', '[', 'i', ']']
BraceDepth: 2
Evaluating stack ['return', '(', '&', 'x', ')', '[', 'i', ']', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'operator', '+', '=', '(', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 2
Evaluating stack ['void', 'operator', '+', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'operator', '+', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['void', 'operator', '+', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['void', 'operator', '+', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____iadd__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____iadd__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '+=', 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void operator + = ( const b2Vec2 & v ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['x', '+', '=', 'v', 'x']
BraceDepth: 2
Evaluating stack ['x', '+', '=', 'v', 'x', ';']
BraceDepth: 2
Evaluating stack ['y', '+', '=', 'v', 'y']
BraceDepth: 2
Evaluating stack ['y', '+', '=', 'v', 'y', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'operator', '-', '=', '(', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 2
Evaluating stack ['void', 'operator', '-', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'operator', '-', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['void', 'operator', '-', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['void', 'operator', '-', '=', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____isub__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____isub__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '-=', 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void operator - = ( const b2Vec2 & v ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['x', '-', '=', 'v', 'x']
BraceDepth: 2
Evaluating stack ['x', '-', '=', 'v', 'x', ';']
BraceDepth: 2
Evaluating stack ['y', '-', '=', 'v', 'y']
BraceDepth: 2
Evaluating stack ['y', '-', '=', 'v', 'y', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'operator', '*', '=', '(', 'float32', 'a', ')']
BraceDepth: 2
Evaluating stack ['void', 'operator', '*', '=', '(', 'float32', 'a', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'operator', '*', '=', '(', 'float32', 'a', ')', '{'])
('CLEAN ARRAYS', ['void', 'operator', '*', '=', '(', 'float32', 'a', ')', '{'])
('is method namestack', True, ['void', 'operator', '*', '=', '(', 'float32', 'a', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____imult__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____imult__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '*=', 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void operator * = ( float32 a ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'a']
None
________________________________________________________________________________
Evaluating stack ['x', '*', '=', 'a']
BraceDepth: 2
Evaluating stack ['x', '*', '=', 'a', ';']
BraceDepth: 2
Evaluating stack ['y', '*', '=', 'a']
BraceDepth: 2
Evaluating stack ['y', '*', '=', 'a', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'Length', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'Length', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'Length', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'Length', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'Length', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Length
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Length', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'float32', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'float32 Length ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'std', ':', ':', 'sqrt', '(', 'x', '*', 'x', '+', 'y', '*', 'y', ')']
BraceDepth: 2
Evaluating stack ['return', 'std', ':', ':', 'sqrt', '(', 'x', '*', 'x', '+', 'y', '*', 'y', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'LengthSquared', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'LengthSquared', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'LengthSquared', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'LengthSquared', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'LengthSquared', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
LengthSquared
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'LengthSquared', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'float32', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'float32 LengthSquared ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'x', '*', 'x', '+', 'y', '*', 'y']
BraceDepth: 2
Evaluating stack ['return', 'x', '*', 'x', '+', 'y', '*', 'y', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'Normalize', '(', ')']
BraceDepth: 2
Evaluating stack ['float32', 'Normalize', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'Normalize', '(', ')', '{'])
('CLEAN ARRAYS', ['float32', 'Normalize', '(', ')', '{'])
('is method namestack', True, ['float32', 'Normalize', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Normalize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Normalize', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'float32', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'float32 Normalize ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['float32', 'length', '=', 'Length', '(', ')']
BraceDepth: 2
Evaluating stack ['float32', 'length', '=', 'Length', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'length', '<', '1', '192092896e', '-', '07F', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'length', '<', '1', '192092896e', '-', '07F', ')', '{']
BraceDepth: 3
Evaluating stack ['return', '0', '0f']
BraceDepth: 3
Evaluating stack ['return', '0', '0f', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['float32', 'invLength', '=', '1', '0f', 'length']
BraceDepth: 2
Evaluating stack ['}', 'float32', 'invLength', '=', '1', '0f', '/ ', 'length', ';']
BraceDepth: 2
Evaluating stack ['x', '*', '=', 'invLength']
BraceDepth: 2
Evaluating stack ['x', '*', '=', 'invLength', ';']
BraceDepth: 2
Evaluating stack ['y', '*', '=', 'invLength']
BraceDepth: 2
Evaluating stack ['y', '*', '=', 'invLength', ';']
BraceDepth: 2
Evaluating stack ['return', 'length']
BraceDepth: 2
Evaluating stack ['return', 'length', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'IsValid', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['bool', 'IsValid', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'IsValid', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['bool', 'IsValid', '(', ')', 'const', '{'])
('is method namestack', True, ['bool', 'IsValid', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
IsValid
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'IsValid', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool IsValid ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'b2IsValid', '(', 'x', ')', '&', '&', 'b2IsValid', '(', 'y', ')']
BraceDepth: 2
Evaluating stack ['return', 'b2IsValid', '(', 'x', ')', '&', '&', 'b2IsValid', '(', 'y', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'Skew', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'Skew', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', 'Skew', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec2', 'Skew', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Vec2', 'Skew', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Skew
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Skew', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 Skew ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'b2Vec2', '(', '-', 'y', ',', 'x', ')']
BraceDepth: 2
Evaluating stack ['return', 'b2Vec2', '(', '-', 'y', ',', 'x', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'x']
BraceDepth: 1
Evaluating stack ['float32', 'x', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x']
['float32', 'x', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'y']
BraceDepth: 1
Evaluating stack ['float32', 'y', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'y']
['float32', 'y', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Vec3']
BraceDepth: 1
Evaluating stack ['struct', 'b2Vec3', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec3', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Vec3', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec3', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Vec3', '(', ')', '{'])
('is method namestack', True, ['b2Vec3', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Vec3
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Vec3', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Vec3 ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec3', '(', 'float32', 'x', ',', 'float32', 'y', ',', 'float32', 'z', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', ',', 'z', '(', 'z', ')']
BraceDepth: 2
Evaluating stack ['b2Vec3', '(', 'float32', 'x', ',', 'float32', 'y', ',', 'float32', 'z', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', ',', 'z', '(', 'z', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec3', '(', 'float32', 'x', ',', 'float32', 'y', ',', 'float32', 'z', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', ',', 'z', '(', 'z', ')', '{'])
('CLEAN ARRAYS', ['b2Vec3', '(', 'float32', 'x', ',', 'float32', 'y', ',', 'float32', 'z', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', ',', 'z', '(', 'z', ')', '{'])
('is method namestack', True, ['b2Vec3', '(', 'float32', 'x', ',', 'float32', 'y', ',', 'float32', 'z', ')', ':', 'x', '(', 'x', ')', ',', 'y', '(', 'y', ')', ',', 'z', '(', 'z', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Vec3
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Vec3', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Vec3 ( float32 x , float32 y , float32 z ) : x ( x ) , y ( y ) , z ( z ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'y']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'z']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetZero', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetZero', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetZero', '(', ')', '{'])
('is method namestack', True, ['void', 'SetZero', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetZero
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'SetZero', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['x', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['x', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['y', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['y', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['z', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['z', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ',', 'float32', 'z_', ')']
BraceDepth: 2
Evaluating stack ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ',', 'float32', 'z_', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ',', 'float32', 'z_', ')', '{'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ',', 'float32', 'z_', ')', '{'])
('is method namestack', True, ['void', 'Set', '(', 'float32', 'x_', ',', 'float32', 'y_', ',', 'float32', 'z_', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Set
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Set', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Set ( float32 x_ , float32 y_ , float32 z_ ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x_']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'y_']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'z_']
None
________________________________________________________________________________
Evaluating stack ['x', '=', 'x_']
BraceDepth: 2
Evaluating stack ['x', '=', 'x_', ';']
BraceDepth: 2
Evaluating stack ['y', '=', 'y_']
BraceDepth: 2
Evaluating stack ['y', '=', 'y_', ';']
BraceDepth: 2
Evaluating stack ['z', '=', 'z_']
BraceDepth: 2
Evaluating stack ['z', '=', 'z_', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec3', 'operator', '-', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec3', 'operator', '-', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec3', 'operator', '-', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec3', 'operator', '-', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Vec3', 'operator', '-', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____sub__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____sub__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '-', 'returns': 'b2Vec3', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec3 operator - ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['b2Vec3', 'v']
BraceDepth: 2
Evaluating stack ['b2Vec3', 'v', ';']
BraceDepth: 2
Evaluating stack ['v', 'Set', '(', '-', 'x', ',', '-', 'y', ',', '-', 'z', ')']
BraceDepth: 2
Evaluating stack ['v', 'Set', '(', '-', 'x', ',', '-', 'y', ',', '-', 'z', ')', ';']
BraceDepth: 2
Evaluating stack ['return', 'v']
BraceDepth: 2
Evaluating stack ['return', 'v', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'operator', '+', '=', '(', 'const', 'b2Vec3', '&', 'v', ')']
BraceDepth: 2
Evaluating stack ['void', 'operator', '+', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'operator', '+', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['void', 'operator', '+', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{'])
('is method namestack', True, ['void', 'operator', '+', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____iadd__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____iadd__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '+=', 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void operator + = ( const b2Vec3 & v ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['x', '+', '=', 'v', 'x']
BraceDepth: 2
Evaluating stack ['x', '+', '=', 'v', 'x', ';']
BraceDepth: 2
Evaluating stack ['y', '+', '=', 'v', 'y']
BraceDepth: 2
Evaluating stack ['y', '+', '=', 'v', 'y', ';']
BraceDepth: 2
Evaluating stack ['z', '+', '=', 'v', 'z']
BraceDepth: 2
Evaluating stack ['z', '+', '=', 'v', 'z', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'operator', '-', '=', '(', 'const', 'b2Vec3', '&', 'v', ')']
BraceDepth: 2
Evaluating stack ['void', 'operator', '-', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'operator', '-', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['void', 'operator', '-', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{'])
('is method namestack', True, ['void', 'operator', '-', '=', '(', 'const', 'b2Vec3', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____isub__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____isub__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '-=', 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void operator - = ( const b2Vec3 & v ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['x', '-', '=', 'v', 'x']
BraceDepth: 2
Evaluating stack ['x', '-', '=', 'v', 'x', ';']
BraceDepth: 2
Evaluating stack ['y', '-', '=', 'v', 'y']
BraceDepth: 2
Evaluating stack ['y', '-', '=', 'v', 'y', ';']
BraceDepth: 2
Evaluating stack ['z', '-', '=', 'v', 'z']
BraceDepth: 2
Evaluating stack ['z', '-', '=', 'v', 'z', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'operator', '*', '=', '(', 'float32', 's', ')']
BraceDepth: 2
Evaluating stack ['void', 'operator', '*', '=', '(', 'float32', 's', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'operator', '*', '=', '(', 'float32', 's', ')', '{'])
('CLEAN ARRAYS', ['void', 'operator', '*', '=', '(', 'float32', 's', ')', '{'])
('is method namestack', True, ['void', 'operator', '*', '=', '(', 'float32', 's', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
__operator____imult__
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': '__operator____imult__', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': '*=', 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void operator * = ( float32 s ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 's']
None
________________________________________________________________________________
Evaluating stack ['x', '*', '=', 's']
BraceDepth: 2
Evaluating stack ['x', '*', '=', 's', ';']
BraceDepth: 2
Evaluating stack ['y', '*', '=', 's']
BraceDepth: 2
Evaluating stack ['y', '*', '=', 's', ';']
BraceDepth: 2
Evaluating stack ['z', '*', '=', 's']
BraceDepth: 2
Evaluating stack ['z', '*', '=', 's', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'x', ',', 'y', ',', 'z']
BraceDepth: 1
Evaluating stack ['float32', 'x', ',', 'y', ',', 'z', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'x', ',', 'y', ',', 'z']
['float32', 'x', ',', 'y', ',', 'z', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Mat22']
BraceDepth: 1
Evaluating stack ['struct', 'b2Mat22', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Mat22', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Mat22', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Mat22', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Mat22', '(', ')', '{'])
('is method namestack', True, ['b2Mat22', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Mat22
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Mat22', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Mat22 ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Mat22', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')']
BraceDepth: 2
Evaluating stack ['b2Mat22', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Mat22', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{'])
('CLEAN ARRAYS', ['b2Mat22', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{'])
('is method namestack', True, ['b2Mat22', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Mat22
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Mat22', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Mat22 ( const b2Vec2 & c1 , const b2Vec2 & c2 ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'c1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'c2']
None
________________________________________________________________________________
Evaluating stack ['ex', '=', 'c1']
BraceDepth: 2
Evaluating stack ['ex', '=', 'c1', ';']
BraceDepth: 2
Evaluating stack ['ey', '=', 'c2']
BraceDepth: 2
Evaluating stack ['ey', '=', 'c2', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Mat22', '(', 'float32', 'a11', ',', 'float32', 'a12', ',', 'float32', 'a21', ',', 'float32', 'a22', ')']
BraceDepth: 2
Evaluating stack ['b2Mat22', '(', 'float32', 'a11', ',', 'float32', 'a12', ',', 'float32', 'a21', ',', 'float32', 'a22', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Mat22', '(', 'float32', 'a11', ',', 'float32', 'a12', ',', 'float32', 'a21', ',', 'float32', 'a22', ')', '{'])
('CLEAN ARRAYS', ['b2Mat22', '(', 'float32', 'a11', ',', 'float32', 'a12', ',', 'float32', 'a21', ',', 'float32', 'a22', ')', '{'])
('is method namestack', True, ['b2Mat22', '(', 'float32', 'a11', ',', 'float32', 'a12', ',', 'float32', 'a21', ',', 'float32', 'a22', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Mat22
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Mat22', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Mat22 ( float32 a11 , float32 a12 , float32 a21 , float32 a22 ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'a11']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'a12']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'a21']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'a22']
None
________________________________________________________________________________
Evaluating stack ['ex', 'x', '=', 'a11']
BraceDepth: 2
Evaluating stack ['ex', 'x', '=', 'a11', ';']
BraceDepth: 2
Evaluating stack ['ex', 'y', '=', 'a21']
BraceDepth: 2
Evaluating stack ['ex', 'y', '=', 'a21', ';']
BraceDepth: 2
Evaluating stack ['ey', 'x', '=', 'a12']
BraceDepth: 2
Evaluating stack ['ey', 'x', '=', 'a12', ';']
BraceDepth: 2
Evaluating stack ['ey', 'y', '=', 'a22']
BraceDepth: 2
Evaluating stack ['ey', 'y', '=', 'a22', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')']
BraceDepth: 2
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{'])
('is method namestack', True, ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'c1', ',', 'const', 'b2Vec2', '&', 'c2', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Set
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Set', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Set ( const b2Vec2 & c1 , const b2Vec2 & c2 ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'c1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'c2']
None
________________________________________________________________________________
Evaluating stack ['ex', '=', 'c1']
BraceDepth: 2
Evaluating stack ['ex', '=', 'c1', ';']
BraceDepth: 2
Evaluating stack ['ey', '=', 'c2']
BraceDepth: 2
Evaluating stack ['ey', '=', 'c2', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetIdentity', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetIdentity', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetIdentity', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetIdentity', '(', ')', '{'])
('is method namestack', True, ['void', 'SetIdentity', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetIdentity
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'SetIdentity', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void SetIdentity ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['ex', 'x', '=', '1', '0f']
BraceDepth: 2
Evaluating stack ['ex', 'x', '=', '1', '0f', ';']
BraceDepth: 2
Evaluating stack ['ey', 'x', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['ey', 'x', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['ex', 'y', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['ex', 'y', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['ey', 'y', '=', '1', '0f']
BraceDepth: 2
Evaluating stack ['ey', 'y', '=', '1', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetZero', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetZero', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetZero', '(', ')', '{'])
('is method namestack', True, ['void', 'SetZero', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetZero
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'SetZero', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['ex', 'x', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['ex', 'x', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['ey', 'x', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['ey', 'x', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['ex', 'y', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['ex', 'y', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['ey', 'y', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['ey', 'y', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Mat22', 'GetInverse', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Mat22', 'GetInverse', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Mat22', 'GetInverse', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Mat22', 'GetInverse', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Mat22', 'GetInverse', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetInverse
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetInverse', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Mat22', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Mat22 GetInverse ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['float32', 'a', '=', 'ex', 'x', ',', 'b', '=', 'ey', 'x', ',', 'c', '=', 'ex', 'y', ',', 'd', '=', 'ey', 'y']
BraceDepth: 2
Evaluating stack ['float32', 'a', '=', 'ex', 'x', ',', 'b', '=', 'ey', 'x', ',', 'c', '=', 'ex', 'y', ',', 'd', '=', 'ey', 'y', ';']
BraceDepth: 2
Evaluating stack ['b2Mat22', 'B']
BraceDepth: 2
Evaluating stack ['b2Mat22', 'B', ';']
BraceDepth: 2
Evaluating stack ['float32', 'det', '=', 'a', '*', 'd', '-', 'b', '*', 'c']
BraceDepth: 2
Evaluating stack ['float32', 'det', '=', 'a', '*', 'd', '-', 'b', '*', 'c', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'det', '=', '0', '0f', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'det', '=', '0', '0f', ')', '{']
BraceDepth: 3
Evaluating stack ['det', '=', '1', '0f', 'det']
BraceDepth: 3
Evaluating stack ['det', '=', '1', '0f', '/ ', 'det', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['B', 'ex', 'x', '=', 'det', '*', 'd']
BraceDepth: 2
Evaluating stack ['}', 'B', 'ex', 'x', '=', 'det', '*', 'd', ';']
BraceDepth: 2
Evaluating stack ['B', 'ey', 'x', '=', '-', 'det', '*', 'b']
BraceDepth: 2
Evaluating stack ['B', 'ey', 'x', '=', '-', 'det', '*', 'b', ';']
BraceDepth: 2
Evaluating stack ['B', 'ex', 'y', '=', '-', 'det', '*', 'c']
BraceDepth: 2
Evaluating stack ['B', 'ex', 'y', '=', '-', 'det', '*', 'c', ';']
BraceDepth: 2
Evaluating stack ['B', 'ey', 'y', '=', 'det', '*', 'a']
BraceDepth: 2
Evaluating stack ['B', 'ey', 'y', '=', 'det', '*', 'a', ';']
BraceDepth: 2
Evaluating stack ['return', 'B']
BraceDepth: 2
Evaluating stack ['return', 'B', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'Solve', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'Solve', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', 'Solve', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec2', 'Solve', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', '{'])
('is method namestack', True, ['b2Vec2', 'Solve', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Solve
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Solve', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 Solve ( const b2Vec2 & b ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['float32', 'a11', '=', 'ex', 'x', ',', 'a12', '=', 'ey', 'x', ',', 'a21', '=', 'ex', 'y', ',', 'a22', '=', 'ey', 'y']
BraceDepth: 2
Evaluating stack ['float32', 'a11', '=', 'ex', 'x', ',', 'a12', '=', 'ey', 'x', ',', 'a21', '=', 'ex', 'y', ',', 'a22', '=', 'ey', 'y', ';']
BraceDepth: 2
Evaluating stack ['float32', 'det', '=', 'a11', '*', 'a22', '-', 'a12', '*', 'a21']
BraceDepth: 2
Evaluating stack ['float32', 'det', '=', 'a11', '*', 'a22', '-', 'a12', '*', 'a21', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'det', '=', '0', '0f', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'det', '=', '0', '0f', ')', '{']
BraceDepth: 3
Evaluating stack ['det', '=', '1', '0f', 'det']
BraceDepth: 3
Evaluating stack ['det', '=', '1', '0f', '/ ', 'det', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['b2Vec2', 'x']
BraceDepth: 2
Evaluating stack ['}', 'b2Vec2', 'x', ';']
BraceDepth: 2
Evaluating stack ['x', 'x', '=', 'det', '*', '(', 'a22', '*', 'b', 'x', '-', 'a12', '*', 'b', 'y', ')']
BraceDepth: 2
Evaluating stack ['x', 'x', '=', 'det', '*', '(', 'a22', '*', 'b', 'x', '-', 'a12', '*', 'b', 'y', ')', ';']
BraceDepth: 2
Evaluating stack ['x', 'y', '=', 'det', '*', '(', 'a11', '*', 'b', 'y', '-', 'a21', '*', 'b', 'x', ')']
BraceDepth: 2
Evaluating stack ['x', 'y', '=', 'det', '*', '(', 'a11', '*', 'b', 'y', '-', 'a21', '*', 'b', 'x', ')', ';']
BraceDepth: 2
Evaluating stack ['return', 'x']
BraceDepth: 2
Evaluating stack ['return', 'x', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'ex', ',', 'ey']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'ex', ',', 'ey', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'ex', ',', 'ey']
['b2Vec2', 'ex', ',', 'ey', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Mat33']
BraceDepth: 1
Evaluating stack ['struct', 'b2Mat33', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Mat33', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Mat33', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Mat33', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Mat33', '(', ')', '{'])
('is method namestack', True, ['b2Mat33', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Mat33
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Mat33', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Mat33 ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Mat33', '(', 'const', 'b2Vec3', '&', 'c1', ',', 'const', 'b2Vec3', '&', 'c2', ',', 'const', 'b2Vec3', '&', 'c3', ')']
BraceDepth: 2
Evaluating stack ['b2Mat33', '(', 'const', 'b2Vec3', '&', 'c1', ',', 'const', 'b2Vec3', '&', 'c2', ',', 'const', 'b2Vec3', '&', 'c3', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Mat33', '(', 'const', 'b2Vec3', '&', 'c1', ',', 'const', 'b2Vec3', '&', 'c2', ',', 'const', 'b2Vec3', '&', 'c3', ')', '{'])
('CLEAN ARRAYS', ['b2Mat33', '(', 'const', 'b2Vec3', '&', 'c1', ',', 'const', 'b2Vec3', '&', 'c2', ',', 'const', 'b2Vec3', '&', 'c3', ')', '{'])
('is method namestack', True, ['b2Mat33', '(', 'const', 'b2Vec3', '&', 'c1', ',', 'const', 'b2Vec3', '&', 'c2', ',', 'const', 'b2Vec3', '&', 'c3', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Mat33
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Mat33', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Mat33 ( const b2Vec3 & c1 , const b2Vec3 & c2 , const b2Vec3 & c3 ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'c1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'c2']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'c3']
None
________________________________________________________________________________
Evaluating stack ['ex', '=', 'c1']
BraceDepth: 2
Evaluating stack ['ex', '=', 'c1', ';']
BraceDepth: 2
Evaluating stack ['ey', '=', 'c2']
BraceDepth: 2
Evaluating stack ['ey', '=', 'c2', ';']
BraceDepth: 2
Evaluating stack ['ez', '=', 'c3']
BraceDepth: 2
Evaluating stack ['ez', '=', 'c3', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetZero', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetZero', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetZero', '(', ')', '{'])
('is method namestack', True, ['void', 'SetZero', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetZero
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'SetZero', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['ex', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['ex', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['ey', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['ey', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['ez', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['ez', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec3', 'Solve33', '(', 'const', 'b2Vec3', '&', 'b', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec3', 'Solve33', '(', 'const', 'b2Vec3', '&', 'b', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec3', 'Solve33', '(', 'const', 'b2Vec3', '&', 'b', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec3', 'Solve33', '(', 'const', 'b2Vec3', '&', 'b', ')', 'const', ';'])
('is method namestack', True, ['b2Vec3', 'Solve33', '(', 'const', 'b2Vec3', '&', 'b', ')', 'const', ';'])
________________________________________________________________________________
Solve33
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Solve33', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec3', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec3 Solve33 ( const b2Vec3 & b ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'Solve22', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'Solve22', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'Solve22', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'Solve22', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'Solve22', '(', 'const', 'b2Vec2', '&', 'b', ')', 'const', ';'])
________________________________________________________________________________
Solve22
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Solve22', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 Solve22 ( const b2Vec2 & b ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['void', 'GetInverse22', '(', 'b2Mat33', '*', 'M', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetInverse22', '(', 'b2Mat33', '*', 'M', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetInverse22', '(', 'b2Mat33', '*', 'M', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetInverse22', '(', 'b2Mat33', '*', 'M', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetInverse22', '(', 'b2Mat33', '*', 'M', ')', 'const', ';'])
________________________________________________________________________________
GetInverse22
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetInverse22', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void GetInverse22 ( b2Mat33 * M ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Mat33', '*', 'M']
None
________________________________________________________________________________
Evaluating stack ['void', 'GetSymInverse33', '(', 'b2Mat33', '*', 'M', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetSymInverse33', '(', 'b2Mat33', '*', 'M', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetSymInverse33', '(', 'b2Mat33', '*', 'M', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetSymInverse33', '(', 'b2Mat33', '*', 'M', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetSymInverse33', '(', 'b2Mat33', '*', 'M', ')', 'const', ';'])
________________________________________________________________________________
GetSymInverse33
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetSymInverse33', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void GetSymInverse33 ( b2Mat33 * M ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Mat33', '*', 'M']
None
________________________________________________________________________________
Evaluating stack ['b2Vec3', 'ex', ',', 'ey', ',', 'ez']
BraceDepth: 1
Evaluating stack ['b2Vec3', 'ex', ',', 'ey', ',', 'ez', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec3', 'ex', ',', 'ey', ',', 'ez']
['b2Vec3', 'ex', ',', 'ey', ',', 'ez', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Rot']
BraceDepth: 1
Evaluating stack ['struct', 'b2Rot', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Rot', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Rot', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Rot', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Rot', '(', ')', '{'])
('is method namestack', True, ['b2Rot', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Rot
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Rot', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Rot ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['explicit', 'b2Rot', '(', 'float32', 'angle', ')']
BraceDepth: 2
Evaluating stack ['explicit', 'b2Rot', '(', 'float32', 'angle', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['explicit', 'b2Rot', '(', 'float32', 'angle', ')', '{'])
('CLEAN ARRAYS', ['explicit', 'b2Rot', '(', 'float32', 'angle', ')', '{'])
('is method namestack', True, ['explicit', 'b2Rot', '(', 'float32', 'angle', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Rot
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Rot', 'pure_virtual': False, 'defined': True, 'explicit': True, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'explicit b2Rot ( float32 angle ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angle']
None
________________________________________________________________________________
Evaluating stack ['s', '=', '(', '(', 'float', ')', 'sin', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')']
BraceDepth: 2
Evaluating stack ['s', '=', '(', '(', 'float', ')', 'sin', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')', ';']
BraceDepth: 2
Evaluating stack ['c', '=', '(', '(', 'float', ')', 'cos', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')']
BraceDepth: 2
Evaluating stack ['c', '=', '(', '(', 'float', ')', 'cos', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Set', '(', 'float32', 'angle', ')']
BraceDepth: 2
Evaluating stack ['void', 'Set', '(', 'float32', 'angle', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Set', '(', 'float32', 'angle', ')', '{'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'float32', 'angle', ')', '{'])
('is method namestack', True, ['void', 'Set', '(', 'float32', 'angle', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Set
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Set', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Set ( float32 angle ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angle']
None
________________________________________________________________________________
Evaluating stack ['s', '=', '(', '(', 'float', ')', 'sin', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')']
BraceDepth: 2
Evaluating stack ['s', '=', '(', '(', 'float', ')', 'sin', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')', ';']
BraceDepth: 2
Evaluating stack ['c', '=', '(', '(', 'float', ')', 'cos', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')']
BraceDepth: 2
Evaluating stack ['c', '=', '(', '(', 'float', ')', 'cos', '(', '(', 'double', ')', '(', 'angle', ')', ')', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetIdentity', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetIdentity', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetIdentity', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetIdentity', '(', ')', '{'])
('is method namestack', True, ['void', 'SetIdentity', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetIdentity
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'SetIdentity', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void SetIdentity ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['s', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['s', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['c', '=', '1', '0f']
BraceDepth: 2
Evaluating stack ['c', '=', '1', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetAngle', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetAngle', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetAngle', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetAngle', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetAngle', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetAngle
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetAngle', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'float32', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'float32 GetAngle ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'std', ':', ':', 'atan2', '(', 's', ',', 'c', ')']
BraceDepth: 2
Evaluating stack ['return', 'std', ':', ':', 'atan2', '(', 's', ',', 'c', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'GetXAxis', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'GetXAxis', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', 'GetXAxis', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec2', 'GetXAxis', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Vec2', 'GetXAxis', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetXAxis
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetXAxis', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetXAxis ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'b2Vec2', '(', 'c', ',', 's', ')']
BraceDepth: 2
Evaluating stack ['return', 'b2Vec2', '(', 'c', ',', 's', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'GetYAxis', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'GetYAxis', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', 'GetYAxis', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec2', 'GetYAxis', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Vec2', 'GetYAxis', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetYAxis
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetYAxis', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetYAxis ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'b2Vec2', '(', '-', 's', ',', 'c', ')']
BraceDepth: 2
Evaluating stack ['return', 'b2Vec2', '(', '-', 's', ',', 'c', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 's', ',', 'c']
BraceDepth: 1
Evaluating stack ['float32', 's', ',', 'c', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 's', ',', 'c']
['float32', 's', ',', 'c', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Transform']
BraceDepth: 1
Evaluating stack ['struct', 'b2Transform', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Transform', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Transform', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Transform', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Transform', '(', ')', '{'])
('is method namestack', True, ['b2Transform', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Transform
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Transform', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Transform ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Transform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'const', 'b2Rot', '&', 'rotation', ')', ':', 'p', '(', 'position', ')', ',', 'q', '(', 'rotation', ')']
BraceDepth: 2
Evaluating stack ['b2Transform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'const', 'b2Rot', '&', 'rotation', ')', ':', 'p', '(', 'position', ')', ',', 'q', '(', 'rotation', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Transform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'const', 'b2Rot', '&', 'rotation', ')', ':', 'p', '(', 'position', ')', ',', 'q', '(', 'rotation', ')', '{'])
('CLEAN ARRAYS', ['b2Transform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'const', 'b2Rot', '&', 'rotation', ')', ':', 'p', '(', 'position', ')', ',', 'q', '(', 'rotation', ')', '{'])
('is method namestack', True, ['b2Transform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'const', 'b2Rot', '&', 'rotation', ')', ':', 'p', '(', 'position', ')', ',', 'q', '(', 'rotation', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Transform
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Transform', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Transform ( const b2Vec2 & position , const b2Rot & rotation ) : p ( position ) , q ( rotation ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'position']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Rot', '&', 'rotation']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetIdentity', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetIdentity', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetIdentity', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetIdentity', '(', ')', '{'])
('is method namestack', True, ['void', 'SetIdentity', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetIdentity
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'SetIdentity', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void SetIdentity ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['p', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['p', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['q', 'SetIdentity', '(', ')']
BraceDepth: 2
Evaluating stack ['q', 'SetIdentity', '(', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')']
BraceDepth: 2
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', '{'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', '{'])
('is method namestack', True, ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Set
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Set', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Set ( const b2Vec2 & position , float32 angle ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'position']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angle']
None
________________________________________________________________________________
Evaluating stack ['p', '=', 'position']
BraceDepth: 2
Evaluating stack ['p', '=', 'position', ';']
BraceDepth: 2
Evaluating stack ['q', 'Set', '(', 'angle', ')']
BraceDepth: 2
Evaluating stack ['q', 'Set', '(', 'angle', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'p']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'p', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'p']
['b2Vec2', 'p', ';']
________________________________________________________________________________
Evaluating stack ['b2Rot', 'q']
BraceDepth: 1
Evaluating stack ['b2Rot', 'q', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Rot', 'q']
['b2Rot', 'q', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Sweep']
BraceDepth: 1
Evaluating stack ['struct', 'b2Sweep', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['void', 'GetTransform', '(', 'b2Transform', '*', 'xfb', ',', 'float32', 'beta', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetTransform', '(', 'b2Transform', '*', 'xfb', ',', 'float32', 'beta', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetTransform', '(', 'b2Transform', '*', 'xfb', ',', 'float32', 'beta', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetTransform', '(', 'b2Transform', '*', 'xfb', ',', 'float32', 'beta', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetTransform', '(', 'b2Transform', '*', 'xfb', ',', 'float32', 'beta', ')', 'const', ';'])
________________________________________________________________________________
GetTransform
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetTransform', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void GetTransform ( b2Transform * xfb , float32 beta ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Transform', '*', 'xfb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'beta']
None
________________________________________________________________________________
Evaluating stack ['void', 'Advance', '(', 'float32', 'alpha', ')']
BraceDepth: 1
Evaluating stack ['void', 'Advance', '(', 'float32', 'alpha', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Advance', '(', 'float32', 'alpha', ')', ';'])
('CLEAN ARRAYS', ['void', 'Advance', '(', 'float32', 'alpha', ')', ';'])
('is method namestack', True, ['void', 'Advance', '(', 'float32', 'alpha', ')', ';'])
________________________________________________________________________________
Advance
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Advance', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Advance ( float32 alpha ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'alpha']
None
________________________________________________________________________________
Evaluating stack ['void', 'Normalize', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Normalize', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Normalize', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Normalize', '(', ')', ';'])
('is method namestack', True, ['void', 'Normalize', '(', ')', ';'])
________________________________________________________________________________
Normalize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Normalize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Normalize ( ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['b2Vec2', 'localCenter']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localCenter', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localCenter']
['b2Vec2', 'localCenter', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'c0', ',', 'c']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'c0', ',', 'c', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'c0', ',', 'c']
['b2Vec2', 'c0', ',', 'c', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'a0', ',', 'a']
BraceDepth: 1
Evaluating stack ['float32', 'a0', ',', 'a', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'a0', ',', 'a']
['float32', 'a0', ',', 'a', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'alpha0']
BraceDepth: 1
Evaluating stack ['float32', 'alpha0', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'alpha0']
['float32', 'alpha0', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['extern', 'const', 'b2Vec2', 'b2Vec2_zero']
BraceDepth: 0
Evaluating stack ['extern', 'const', 'b2Vec2', 'b2Vec2_zero', ';']
BraceDepth: 0
Evaluating stack ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Dot
('free function:', ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'a', 'x', '*', 'b', 'x', '+', 'a', 'y', '*', 'b', 'y']
BraceDepth: 1
Evaluating stack ['return', 'a', 'x', '*', 'b', 'x', '+', 'a', 'y', '*', 'b', 'y', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Cross
('free function:', ['inline', 'float32', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'a', 'x', '*', 'b', 'y', '-', 'a', 'y', '*', 'b', 'x']
BraceDepth: 1
Evaluating stack ['return', 'a', 'x', '*', 'b', 'y', '-', 'a', 'y', '*', 'b', 'x', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'float32', 's', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'float32', 's', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'float32', 's', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'float32', 's', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'float32', 's', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Cross
('free function:', ['inline', 'b2Vec2', 'b2Cross', '(', 'const', 'b2Vec2', '&', 'a', ',', 'float32', 's', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 's']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 's', '*', 'a', 'y', ',', '-', 's', '*', 'a', 'x', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 's', '*', 'a', 'y', ',', '-', 's', '*', 'a', 'x', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Cross', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Cross', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Cross', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Cross', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Cross', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Cross
('free function:', ['inline', 'b2Vec2', 'b2Cross', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 's']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', '-', 's', '*', 'a', 'y', ',', 's', '*', 'a', 'x', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', '-', 's', '*', 'a', 'y', ',', 's', '*', 'a', 'x', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul
('free function:', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat22', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'A', 'ex', 'x', '*', 'v', 'x', '+', 'A', 'ey', 'x', '*', 'v', 'y', ',', 'A', 'ex', 'y', '*', 'v', 'x', '+', 'A', 'ey', 'y', '*', 'v', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'A', 'ex', 'x', '*', 'v', 'x', '+', 'A', 'ey', 'x', '*', 'v', 'y', ',', 'A', 'ex', 'y', '*', 'v', 'x', '+', 'A', 'ey', 'y', '*', 'v', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MulT
('free function:', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat22', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'b2Dot', '(', 'v', ',', 'A', 'ex', ')', ',', 'b2Dot', '(', 'v', ',', 'A', 'ey', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'b2Dot', '(', 'v', ',', 'A', 'ex', ')', ',', 'b2Dot', '(', 'v', ',', 'A', 'ey', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'operator', '+', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'operator', '+', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'operator', '+', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'operator', '+', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'operator', '+', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____add__
('free function:', ['inline', 'b2Vec2', 'operator', '+', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
Evaluating stack ['return', 'b2Vec2', '(', 'a', 'x', '+', 'b', 'x', ',', 'a', 'y', '+', 'b', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'a', 'x', '+', 'b', 'x', ',', 'a', 'y', '+', 'b', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'operator', '-', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'operator', '-', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'operator', '-', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'operator', '-', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'operator', '-', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____sub__
('free function:', ['inline', 'b2Vec2', 'operator', '-', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
Evaluating stack ['return', 'b2Vec2', '(', 'a', 'x', '-', 'b', 'x', ',', 'a', 'y', '-', 'b', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'a', 'x', '-', 'b', 'x', ',', 'a', 'y', '-', 'b', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____mul__
('free function:', ['inline', 'b2Vec2', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec2', '&', 'a', ')'])
Evaluating stack ['return', 'b2Vec2', '(', 's', '*', 'a', 'x', ',', 's', '*', 'a', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 's', '*', 'a', 'x', ',', 's', '*', 'a', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'operator', '=', '=', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'operator', '=', '=', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'operator', '=', '=', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'operator', '=', '=', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'bool', 'operator', '=', '=', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____eq__
('free function:', ['inline', 'bool', 'operator', '=', '=', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
Evaluating stack ['return', 'a', 'x', '=', '=', 'b', 'x', '&', '&', 'a', 'y', '=', '=', 'b', 'y']
BraceDepth: 1
Evaluating stack ['return', 'a', 'x', '=', '=', 'b', 'x', '&', '&', 'a', 'y', '=', '=', 'b', 'y', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Distance', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Distance', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Distance', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Distance', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Distance', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Distance
('free function:', ['inline', 'float32', 'b2Distance', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'c', '=', 'a', '-', 'b']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'c', '=', 'a', '-', 'b', ';']
BraceDepth: 1
Evaluating stack ['return', 'c', 'Length', '(', ')']
BraceDepth: 1
Evaluating stack ['return', 'c', 'Length', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2DistanceSquared', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2DistanceSquared', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2DistanceSquared', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2DistanceSquared', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2DistanceSquared', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceSquared
('free function:', ['inline', 'float32', 'b2DistanceSquared', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'c', '=', 'a', '-', 'b']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'c', '=', 'a', '-', 'b', ';']
BraceDepth: 1
Evaluating stack ['return', 'b2Dot', '(', 'c', ',', 'c', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Dot', '(', 'c', ',', 'c', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec3', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec3', '&', 'a', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec3', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec3', '&', 'a', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec3', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec3', '&', 'a', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec3', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec3', '&', 'a', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec3', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec3', '&', 'a', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____mul__
('free function:', ['inline', 'b2Vec3', 'operator', '*', '(', 'float32', 's', ',', 'const', 'b2Vec3', '&', 'a', ')'])
Evaluating stack ['return', 'b2Vec3', '(', 's', '*', 'a', 'x', ',', 's', '*', 'a', 'y', ',', 's', '*', 'a', 'z', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec3', '(', 's', '*', 'a', 'x', ',', 's', '*', 'a', 'y', ',', 's', '*', 'a', 'z', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec3', 'operator', '+', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec3', 'operator', '+', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec3', 'operator', '+', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec3', 'operator', '+', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec3', 'operator', '+', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____add__
('free function:', ['inline', 'b2Vec3', 'operator', '+', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')'])
Evaluating stack ['return', 'b2Vec3', '(', 'a', 'x', '+', 'b', 'x', ',', 'a', 'y', '+', 'b', 'y', ',', 'a', 'z', '+', 'b', 'z', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec3', '(', 'a', 'x', '+', 'b', 'x', ',', 'a', 'y', '+', 'b', 'y', ',', 'a', 'z', '+', 'b', 'z', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec3', 'operator', '-', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec3', 'operator', '-', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec3', 'operator', '-', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec3', 'operator', '-', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec3', 'operator', '-', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____sub__
('free function:', ['inline', 'b2Vec3', 'operator', '-', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')'])
Evaluating stack ['return', 'b2Vec3', '(', 'a', 'x', '-', 'b', 'x', ',', 'a', 'y', '-', 'b', 'y', ',', 'a', 'z', '-', 'b', 'z', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec3', '(', 'a', 'x', '-', 'b', 'x', ',', 'a', 'y', '-', 'b', 'y', ',', 'a', 'z', '-', 'b', 'z', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Dot
('free function:', ['inline', 'float32', 'b2Dot', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'a', 'x', '*', 'b', 'x', '+', 'a', 'y', '*', 'b', 'y', '+', 'a', 'z', '*', 'b', 'z']
BraceDepth: 1
Evaluating stack ['return', 'a', 'x', '*', 'b', 'x', '+', 'a', 'y', '*', 'b', 'y', '+', 'a', 'z', '*', 'b', 'z', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec3', 'b2Cross', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec3', 'b2Cross', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec3', 'b2Cross', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec3', 'b2Cross', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec3', 'b2Cross', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Cross
('free function:', ['inline', 'b2Vec3', 'b2Cross', '(', 'const', 'b2Vec3', '&', 'a', ',', 'const', 'b2Vec3', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec3', '(', 'a', 'y', '*', 'b', 'z', '-', 'a', 'z', '*', 'b', 'y', ',', 'a', 'z', '*', 'b', 'x', '-', 'a', 'x', '*', 'b', 'z', ',', 'a', 'x', '*', 'b', 'y', '-', 'a', 'y', '*', 'b', 'x', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec3', '(', 'a', 'y', '*', 'b', 'z', '-', 'a', 'z', '*', 'b', 'y', ',', 'a', 'z', '*', 'b', 'x', '-', 'a', 'x', '*', 'b', 'z', ',', 'a', 'x', '*', 'b', 'y', '-', 'a', 'y', '*', 'b', 'x', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Mat22', 'operator', '+', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Mat22', 'operator', '+', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Mat22', 'operator', '+', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Mat22', 'operator', '+', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
('is method namestack', True, ['inline', 'b2Mat22', 'operator', '+', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
__operator____add__
('free function:', ['inline', 'b2Mat22', 'operator', '+', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')'])
Evaluating stack ['return', 'b2Mat22', '(', 'A', 'ex', '+', 'B', 'ex', ',', 'A', 'ey', '+', 'B', 'ey', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Mat22', '(', 'A', 'ex', '+', 'B', 'ex', ',', 'A', 'ey', '+', 'B', 'ey', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Mat22', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Mat22', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Mat22', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Mat22', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
('is method namestack', True, ['inline', 'b2Mat22', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul
('free function:', ['inline', 'b2Mat22', 'b2Mul', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat22', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat22', '&', 'B']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Mat22', '(', 'b2Mul', '(', 'A', ',', 'B', 'ex', ')', ',', 'b2Mul', '(', 'A', ',', 'B', 'ey', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Mat22', '(', 'b2Mul', '(', 'A', ',', 'B', 'ex', ')', ',', 'b2Mul', '(', 'A', ',', 'B', 'ey', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Mat22', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Mat22', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Mat22', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Mat22', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
('is method namestack', True, ['inline', 'b2Mat22', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MulT
('free function:', ['inline', 'b2Mat22', 'b2MulT', '(', 'const', 'b2Mat22', '&', 'A', ',', 'const', 'b2Mat22', '&', 'B', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat22', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat22', '&', 'B']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'c1', '(', 'b2Dot', '(', 'A', 'ex', ',', 'B', 'ex', ')', ',', 'b2Dot', '(', 'A', 'ey', ',', 'B', 'ex', ')', ')']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'c1', '(', 'b2Dot', '(', 'A', 'ex', ',', 'B', 'ex', ')', ',', 'b2Dot', '(', 'A', 'ey', ',', 'B', 'ex', ')', ')', ';']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'c2', '(', 'b2Dot', '(', 'A', 'ex', ',', 'B', 'ey', ')', ',', 'b2Dot', '(', 'A', 'ey', ',', 'B', 'ey', ')', ')']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'c2', '(', 'b2Dot', '(', 'A', 'ex', ',', 'B', 'ey', ')', ',', 'b2Dot', '(', 'A', 'ey', ',', 'B', 'ey', ')', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'b2Mat22', '(', 'c1', ',', 'c2', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Mat22', '(', 'c1', ',', 'c2', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec3', 'b2Mul', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec3', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec3', 'b2Mul', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec3', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec3', 'b2Mul', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec3', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec3', 'b2Mul', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec3', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec3', 'b2Mul', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec3', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul
('free function:', ['inline', 'b2Vec3', 'b2Mul', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec3', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat33', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec3', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['return', 'v', 'x', '*', 'A', 'ex', '+', 'v', 'y', '*', 'A', 'ey', '+', 'v', 'z', '*', 'A', 'ez']
BraceDepth: 1
Evaluating stack ['return', 'v', 'x', '*', 'A', 'ex', '+', 'v', 'y', '*', 'A', 'ey', '+', 'v', 'z', '*', 'A', 'ez', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Mul22', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Mul22', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Mul22', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Mul22', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Mul22', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul22
('free function:', ['inline', 'b2Vec2', 'b2Mul22', '(', 'const', 'b2Mat33', '&', 'A', ',', 'const', 'b2Vec2', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat33', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'A', 'ex', 'x', '*', 'v', 'x', '+', 'A', 'ey', 'x', '*', 'v', 'y', ',', 'A', 'ex', 'y', '*', 'v', 'x', '+', 'A', 'ey', 'y', '*', 'v', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'A', 'ex', 'x', '*', 'v', 'x', '+', 'A', 'ey', 'x', '*', 'v', 'y', ',', 'A', 'ex', 'y', '*', 'v', 'x', '+', 'A', 'ey', 'y', '*', 'v', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Rot', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Rot', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Rot', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Rot', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{'])
('is method namestack', True, ['inline', 'b2Rot', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul
('free function:', ['inline', 'b2Rot', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Rot', '&', 'q']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Rot', '&', 'r']
None
________________________________________________________________________________
Evaluating stack ['b2Rot', 'qr']
BraceDepth: 1
Evaluating stack ['b2Rot', 'qr', ';']
BraceDepth: 1
Evaluating stack ['qr', 's', '=', 'q', 's', '*', 'r', 'c', '+', 'q', 'c', '*', 'r', 's']
BraceDepth: 1
Evaluating stack ['qr', 's', '=', 'q', 's', '*', 'r', 'c', '+', 'q', 'c', '*', 'r', 's', ';']
BraceDepth: 1
Evaluating stack ['qr', 'c', '=', 'q', 'c', '*', 'r', 'c', '-', 'q', 's', '*', 'r', 's']
BraceDepth: 1
Evaluating stack ['qr', 'c', '=', 'q', 'c', '*', 'r', 'c', '-', 'q', 's', '*', 'r', 's', ';']
BraceDepth: 1
Evaluating stack ['return', 'qr']
BraceDepth: 1
Evaluating stack ['return', 'qr', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Rot', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Rot', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Rot', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Rot', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{'])
('is method namestack', True, ['inline', 'b2Rot', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MulT
('free function:', ['inline', 'b2Rot', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Rot', '&', 'r', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Rot', '&', 'q']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Rot', '&', 'r']
None
________________________________________________________________________________
Evaluating stack ['b2Rot', 'qr']
BraceDepth: 1
Evaluating stack ['b2Rot', 'qr', ';']
BraceDepth: 1
Evaluating stack ['qr', 's', '=', 'q', 'c', '*', 'r', 's', '-', 'q', 's', '*', 'r', 'c']
BraceDepth: 1
Evaluating stack ['qr', 's', '=', 'q', 'c', '*', 'r', 's', '-', 'q', 's', '*', 'r', 'c', ';']
BraceDepth: 1
Evaluating stack ['qr', 'c', '=', 'q', 'c', '*', 'r', 'c', '+', 'q', 's', '*', 'r', 's']
BraceDepth: 1
Evaluating stack ['qr', 'c', '=', 'q', 'c', '*', 'r', 'c', '+', 'q', 's', '*', 'r', 's', ';']
BraceDepth: 1
Evaluating stack ['return', 'qr']
BraceDepth: 1
Evaluating stack ['return', 'qr', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul
('free function:', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Rot', '&', 'q']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'q', 'c', '*', 'v', 'x', '-', 'q', 's', '*', 'v', 'y', ',', 'q', 's', '*', 'v', 'x', '+', 'q', 'c', '*', 'v', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'q', 'c', '*', 'v', 'x', '-', 'q', 's', '*', 'v', 'y', ',', 'q', 's', '*', 'v', 'x', '+', 'q', 'c', '*', 'v', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MulT
('free function:', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Rot', '&', 'q', ',', 'const', 'b2Vec2', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Rot', '&', 'q']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'q', 'c', '*', 'v', 'x', '+', 'q', 's', '*', 'v', 'y', ',', '-', 'q', 's', '*', 'v', 'x', '+', 'q', 'c', '*', 'v', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'q', 'c', '*', 'v', 'x', '+', 'q', 's', '*', 'v', 'y', ',', '-', 'q', 's', '*', 'v', 'x', '+', 'q', 'c', '*', 'v', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul
('free function:', ['inline', 'b2Vec2', 'b2Mul', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'T']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['float32', 'x', '=', '(', 'T', 'q', 'c', '*', 'v', 'x', '-', 'T', 'q', 's', '*', 'v', 'y', ')', '+', 'T', 'p', 'x']
BraceDepth: 1
Evaluating stack ['float32', 'x', '=', '(', 'T', 'q', 'c', '*', 'v', 'x', '-', 'T', 'q', 's', '*', 'v', 'y', ')', '+', 'T', 'p', 'x', ';']
BraceDepth: 1
Evaluating stack ['float32', 'y', '=', '(', 'T', 'q', 's', '*', 'v', 'x', '+', 'T', 'q', 'c', '*', 'v', 'y', ')', '+', 'T', 'p', 'y']
BraceDepth: 1
Evaluating stack ['float32', 'y', '=', '(', 'T', 'q', 's', '*', 'v', 'x', '+', 'T', 'q', 'c', '*', 'v', 'y', ')', '+', 'T', 'p', 'y', ';']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'x', ',', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'x', ',', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MulT
('free function:', ['inline', 'b2Vec2', 'b2MulT', '(', 'const', 'b2Transform', '&', 'T', ',', 'const', 'b2Vec2', '&', 'v', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'T']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['float32', 'px', '=', 'v', 'x', '-', 'T', 'p', 'x']
BraceDepth: 1
Evaluating stack ['float32', 'px', '=', 'v', 'x', '-', 'T', 'p', 'x', ';']
BraceDepth: 1
Evaluating stack ['float32', 'py', '=', 'v', 'y', '-', 'T', 'p', 'y']
BraceDepth: 1
Evaluating stack ['float32', 'py', '=', 'v', 'y', '-', 'T', 'p', 'y', ';']
BraceDepth: 1
Evaluating stack ['float32', 'x', '=', '(', 'T', 'q', 'c', '*', 'px', '+', 'T', 'q', 's', '*', 'py', ')']
BraceDepth: 1
Evaluating stack ['float32', 'x', '=', '(', 'T', 'q', 'c', '*', 'px', '+', 'T', 'q', 's', '*', 'py', ')', ';']
BraceDepth: 1
Evaluating stack ['float32', 'y', '=', '(', '-', 'T', 'q', 's', '*', 'px', '+', 'T', 'q', 'c', '*', 'py', ')']
BraceDepth: 1
Evaluating stack ['float32', 'y', '=', '(', '-', 'T', 'q', 's', '*', 'px', '+', 'T', 'q', 'c', '*', 'py', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'x', ',', 'y', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'x', ',', 'y', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Transform', 'b2Mul', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Transform', 'b2Mul', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Transform', 'b2Mul', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Transform', 'b2Mul', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{'])
('is method namestack', True, ['inline', 'b2Transform', 'b2Mul', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Mul
('free function:', ['inline', 'b2Transform', 'b2Mul', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'B']
None
________________________________________________________________________________
Evaluating stack ['b2Transform', 'C']
BraceDepth: 1
Evaluating stack ['b2Transform', 'C', ';']
BraceDepth: 1
Evaluating stack ['C', 'q', '=', 'b2Mul', '(', 'A', 'q', ',', 'B', 'q', ')']
BraceDepth: 1
Evaluating stack ['C', 'q', '=', 'b2Mul', '(', 'A', 'q', ',', 'B', 'q', ')', ';']
BraceDepth: 1
Evaluating stack ['C', 'p', '=', 'b2Mul', '(', 'A', 'q', ',', 'B', 'p', ')', '+', 'A', 'p']
BraceDepth: 1
Evaluating stack ['C', 'p', '=', 'b2Mul', '(', 'A', 'q', ',', 'B', 'p', ')', '+', 'A', 'p', ';']
BraceDepth: 1
Evaluating stack ['return', 'C']
BraceDepth: 1
Evaluating stack ['return', 'C', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Transform', 'b2MulT', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Transform', 'b2MulT', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Transform', 'b2MulT', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Transform', 'b2MulT', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{'])
('is method namestack', True, ['inline', 'b2Transform', 'b2MulT', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MulT
('free function:', ['inline', 'b2Transform', 'b2MulT', '(', 'const', 'b2Transform', '&', 'A', ',', 'const', 'b2Transform', '&', 'B', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'A']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'B']
None
________________________________________________________________________________
Evaluating stack ['b2Transform', 'C']
BraceDepth: 1
Evaluating stack ['b2Transform', 'C', ';']
BraceDepth: 1
Evaluating stack ['C', 'q', '=', 'b2MulT', '(', 'A', 'q', ',', 'B', 'q', ')']
BraceDepth: 1
Evaluating stack ['C', 'q', '=', 'b2MulT', '(', 'A', 'q', ',', 'B', 'q', ')', ';']
BraceDepth: 1
Evaluating stack ['C', 'p', '=', 'b2MulT', '(', 'A', 'q', ',', 'B', 'p', '-', 'A', 'p', ')']
BraceDepth: 1
Evaluating stack ['C', 'p', '=', 'b2MulT', '(', 'A', 'q', ',', 'B', 'p', '-', 'A', 'p', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'C']
BraceDepth: 1
Evaluating stack ['return', 'C', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Abs', '(', 'T', 'a', ')']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Abs', '(', 'T', 'a', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'T', 'b2Abs', '(', 'T', 'a', ')', '{'])
('CLEAN ARRAYS', ['inline', 'T', 'b2Abs', '(', 'T', 'a', ')', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Abs', '(', 'T', 'a', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Abs
('free function:', ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Abs', '(', 'T', 'a', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'a']
None
________________________________________________________________________________
Evaluating stack ['return', 'a', '>', 'T', '(', '0', ')', 'a', ':', '-', 'a']
BraceDepth: 1
Evaluating stack ['return', 'a', '>', 'T', '(', '0', ')', 'a', ':', '-', 'a', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Abs', '(', 'const', 'b2Vec2', '&', 'a', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Abs', '(', 'const', 'b2Vec2', '&', 'a', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Abs', '(', 'const', 'b2Vec2', '&', 'a', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Abs', '(', 'const', 'b2Vec2', '&', 'a', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Abs', '(', 'const', 'b2Vec2', '&', 'a', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Abs
('free function:', ['inline', 'b2Vec2', 'b2Abs', '(', 'const', 'b2Vec2', '&', 'a', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'b2Abs', '(', 'a', 'x', ')', ',', 'b2Abs', '(', 'a', 'y', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'b2Abs', '(', 'a', 'x', ')', ',', 'b2Abs', '(', 'a', 'y', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Mat22', 'b2Abs', '(', 'const', 'b2Mat22', '&', 'A', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Mat22', 'b2Abs', '(', 'const', 'b2Mat22', '&', 'A', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Mat22', 'b2Abs', '(', 'const', 'b2Mat22', '&', 'A', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Mat22', 'b2Abs', '(', 'const', 'b2Mat22', '&', 'A', ')', '{'])
('is method namestack', True, ['inline', 'b2Mat22', 'b2Abs', '(', 'const', 'b2Mat22', '&', 'A', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Abs
('free function:', ['inline', 'b2Mat22', 'b2Abs', '(', 'const', 'b2Mat22', '&', 'A', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Mat22', '&', 'A']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Mat22', '(', 'b2Abs', '(', 'A', 'ex', ')', ',', 'b2Abs', '(', 'A', 'ey', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Mat22', '(', 'b2Abs', '(', 'A', 'ex', ')', ',', 'b2Abs', '(', 'A', 'ey', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Min', '(', 'T', 'a', ',', 'T', 'b', ')']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Min', '(', 'T', 'a', ',', 'T', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'T', 'b2Min', '(', 'T', 'a', ',', 'T', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'T', 'b2Min', '(', 'T', 'a', ',', 'T', 'b', ')', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Min', '(', 'T', 'a', ',', 'T', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Min
('free function:', ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Min', '(', 'T', 'a', ',', 'T', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'a', '<', 'b', 'a', ':', 'b']
BraceDepth: 1
Evaluating stack ['return', 'a', '<', 'b', 'a', ':', 'b', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Min', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Min', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Min', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Min', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Min', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Min
('free function:', ['inline', 'b2Vec2', 'b2Min', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'b2Min', '(', 'a', 'x', ',', 'b', 'x', ')', ',', 'b2Min', '(', 'a', 'y', ',', 'b', 'y', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'b2Min', '(', 'a', 'x', ',', 'b', 'x', ')', ',', 'b2Min', '(', 'a', 'y', ',', 'b', 'y', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Max', '(', 'T', 'a', ',', 'T', 'b', ')']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Max', '(', 'T', 'a', ',', 'T', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'T', 'b2Max', '(', 'T', 'a', ',', 'T', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'T', 'b2Max', '(', 'T', 'a', ',', 'T', 'b', ')', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Max', '(', 'T', 'a', ',', 'T', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Max
('free function:', ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Max', '(', 'T', 'a', ',', 'T', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'a', '>', 'b', 'a', ':', 'b']
BraceDepth: 1
Evaluating stack ['return', 'a', '>', 'b', 'a', ':', 'b', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Max', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Max', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Max', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Max', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Max', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Max
('free function:', ['inline', 'b2Vec2', 'b2Max', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Vec2', '(', 'b2Max', '(', 'a', 'x', ',', 'b', 'x', ')', ',', 'b2Max', '(', 'a', 'y', ',', 'b', 'y', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Vec2', '(', 'b2Max', '(', 'a', 'x', ',', 'b', 'x', ')', ',', 'b2Max', '(', 'a', 'y', ',', 'b', 'y', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Clamp', '(', 'T', 'a', ',', 'T', 'low', ',', 'T', 'high', ')']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Clamp', '(', 'T', 'a', ',', 'T', 'low', ',', 'T', 'high', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'T', 'b2Clamp', '(', 'T', 'a', ',', 'T', 'low', ',', 'T', 'high', ')', '{'])
('CLEAN ARRAYS', ['inline', 'T', 'b2Clamp', '(', 'T', 'a', ',', 'T', 'low', ',', 'T', 'high', ')', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Clamp', '(', 'T', 'a', ',', 'T', 'low', ',', 'T', 'high', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Clamp
('free function:', ['template', '<typename', 'T', '>', 'inline', 'T', 'b2Clamp', '(', 'T', 'a', ',', 'T', 'low', ',', 'T', 'high', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'low']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'high']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Max', '(', 'low', ',', 'b2Min', '(', 'a', ',', 'high', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Max', '(', 'low', ',', 'b2Min', '(', 'a', ',', 'high', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Clamp', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'low', ',', 'const', 'b2Vec2', '&', 'high', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Clamp', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'low', ',', 'const', 'b2Vec2', '&', 'high', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Clamp', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'low', ',', 'const', 'b2Vec2', '&', 'high', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Clamp', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'low', ',', 'const', 'b2Vec2', '&', 'high', ')', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Clamp', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'low', ',', 'const', 'b2Vec2', '&', 'high', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Clamp
('free function:', ['inline', 'b2Vec2', 'b2Clamp', '(', 'const', 'b2Vec2', '&', 'a', ',', 'const', 'b2Vec2', '&', 'low', ',', 'const', 'b2Vec2', '&', 'high', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'low']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'high']
None
________________________________________________________________________________
Evaluating stack ['return', 'b2Max', '(', 'low', ',', 'b2Min', '(', 'a', ',', 'high', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Max', '(', 'low', ',', 'b2Min', '(', 'a', ',', 'high', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2Swap', '(', 'T', '&', 'a', ',', 'T', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2Swap', '(', 'T', '&', 'a', ',', 'T', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Swap', '(', 'T', '&', 'a', ',', 'T', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Swap', '(', 'T', '&', 'a', ',', 'T', '&', 'b', ')', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'void', 'b2Swap', '(', 'T', '&', 'a', ',', 'T', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Swap
('free function:', ['template', '<typename', 'T', '>', 'inline', 'void', 'b2Swap', '(', 'T', '&', 'a', ',', 'T', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['T', 'tmp', '=', 'a']
BraceDepth: 1
Evaluating stack ['T', 'tmp', '=', 'a', ';']
BraceDepth: 1
Evaluating stack ['a', '=', 'b']
BraceDepth: 1
Evaluating stack ['a', '=', 'b', ';']
BraceDepth: 1
Evaluating stack ['b', '=', 'tmp']
BraceDepth: 1
Evaluating stack ['b', '=', 'tmp', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'uint32', 'b2NextPowerOfTwo', '(', 'uint32', 'x', ')']
BraceDepth: 1
Evaluating stack ['inline', 'uint32', 'b2NextPowerOfTwo', '(', 'uint32', 'x', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'uint32', 'b2NextPowerOfTwo', '(', 'uint32', 'x', ')', '{'])
('CLEAN ARRAYS', ['inline', 'uint32', 'b2NextPowerOfTwo', '(', 'uint32', 'x', ')', '{'])
('is method namestack', True, ['inline', 'uint32', 'b2NextPowerOfTwo', '(', 'uint32', 'x', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2NextPowerOfTwo
('free function:', ['inline', 'uint32', 'b2NextPowerOfTwo', '(', 'uint32', 'x', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'x']
None
________________________________________________________________________________
Evaluating stack ['x', '=', '(', 'x', '>', '>', '1', ')']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '1', ')', ';']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '2', ')']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '2', ')', ';']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '4', ')']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '4', ')', ';']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '8', ')']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '8', ')', ';']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '16', ')']
BraceDepth: 1
Evaluating stack ['x', '=', '(', 'x', '>', '>', '16', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'x', '+', '1']
BraceDepth: 1
Evaluating stack ['return', 'x', '+', '1', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2IsPowerOfTwo', '(', 'uint32', 'x', ')']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2IsPowerOfTwo', '(', 'uint32', 'x', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2IsPowerOfTwo', '(', 'uint32', 'x', ')', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2IsPowerOfTwo', '(', 'uint32', 'x', ')', '{'])
('is method namestack', True, ['inline', 'bool', 'b2IsPowerOfTwo', '(', 'uint32', 'x', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2IsPowerOfTwo
('free function:', ['inline', 'bool', 'b2IsPowerOfTwo', '(', 'uint32', 'x', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'x']
None
________________________________________________________________________________
Evaluating stack ['bool', 'result', '=', 'x', '>', '0', '&', '&', '(', 'x', '&', '(', 'x', '-', '1', ')', ')', '=', '=', '0']
BraceDepth: 1
Evaluating stack ['bool', 'result', '=', 'x', '>', '0', '&', '&', '(', 'x', '&', '(', 'x', '-', '1', ')', ')', '=', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['return', 'result']
BraceDepth: 1
Evaluating stack ['return', 'result', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Sweep', ':', ':', 'GetTransform', '(', 'b2Transform', '*', 'xf', ',', 'float32', 'beta', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Sweep', ':', ':', 'GetTransform', '(', 'b2Transform', '*', 'xf', ',', 'float32', 'beta', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Sweep', ':', ':', 'GetTransform', '(', 'b2Transform', '*', 'xf', ',', 'float32', 'beta', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Sweep', ':', ':', 'GetTransform', '(', 'b2Transform', '*', 'xf', ',', 'float32', 'beta', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', 'b2Sweep', ':', ':', 'GetTransform', '(', 'b2Transform', '*', 'xf', ',', 'float32', 'beta', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Sweep::GetTransform
Evaluating stack ['xf', '-', '>p', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'c0', '+', 'beta', '*', 'c']
BraceDepth: 1
Evaluating stack ['xf', '-', '>p', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'c0', '+', 'beta', '*', 'c', ';']
BraceDepth: 1
Evaluating stack ['float32', 'angle', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'a0', '+', 'beta', '*', 'a']
BraceDepth: 1
Evaluating stack ['float32', 'angle', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'a0', '+', 'beta', '*', 'a', ';']
BraceDepth: 1
Evaluating stack ['xf', '-', '>q', 'Set', '(', 'angle', ')']
BraceDepth: 1
Evaluating stack ['xf', '-', '>q', 'Set', '(', 'angle', ')', ';']
BraceDepth: 1
Evaluating stack ['xf', '-', '>p', '-', '=', 'b2Mul', '(', 'xf', '-', '>q', ',', 'localCenter', ')']
BraceDepth: 1
Evaluating stack ['xf', '-', '>p', '-', '=', 'b2Mul', '(', 'xf', '-', '>q', ',', 'localCenter', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Sweep', ':', ':', 'Advance', '(', 'float32', 'alpha', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Sweep', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Sweep', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Sweep', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Sweep', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Sweep::Advance
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['float32', 'beta', '=', '(', 'alpha', '-', 'alpha0', ')', '(', '1', '0f', '-', 'alpha0', ')']
BraceDepth: 1
Evaluating stack ['float32', 'beta', '=', '(', 'alpha', '-', 'alpha0', ')', '/ ', '(', '1', '0f', '-', 'alpha0', ')', ';']
BraceDepth: 1
Evaluating stack ['c0', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'c0', '+', 'beta', '*', 'c']
BraceDepth: 1
Evaluating stack ['c0', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'c0', '+', 'beta', '*', 'c', ';']
BraceDepth: 1
Evaluating stack ['a0', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'a0', '+', 'beta', '*', 'a']
BraceDepth: 1
Evaluating stack ['a0', '=', '(', '1', '0f', '-', 'beta', ')', '*', 'a0', '+', 'beta', '*', 'a', ';']
BraceDepth: 1
Evaluating stack ['alpha0', '=', 'alpha']
BraceDepth: 1
Evaluating stack ['alpha0', '=', 'alpha', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Sweep', ':', ':', 'Normalize', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Sweep', ':', ':', 'Normalize', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Sweep', ':', ':', 'Normalize', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Sweep', ':', ':', 'Normalize', '(', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Sweep', ':', ':', 'Normalize', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Sweep::Normalize
Evaluating stack ['float32', 'twoPi', '=', '2', '0f', '*', '3', '14159265359f']
BraceDepth: 1
Evaluating stack ['float32', 'twoPi', '=', '2', '0f', '*', '3', '14159265359f', ';']
BraceDepth: 1
Evaluating stack ['float32', 'd', '=', 'twoPi', '*', '(', '(', 'float', ')', 'floor', '(', '(', 'double', ')', '(', 'a0', 'twoPi', ')', ')', ')']
BraceDepth: 1
Evaluating stack ['float32', 'd', '=', 'twoPi', '*', '(', '(', 'float', ')', 'floor', '(', '(', 'double', ')', '(', 'a0', '/ ', 'twoPi', ')', ')', ')', ';']
BraceDepth: 1
Evaluating stack ['a0', '-', '=', 'd']
BraceDepth: 1
Evaluating stack ['a0', '-', '=', 'd', ';']
BraceDepth: 1
Evaluating stack ['a', '-', '=', 'd']
BraceDepth: 1
Evaluating stack ['a', '-', '=', 'd', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2Color']
BraceDepth: 1
Evaluating stack ['struct', 'b2Color', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Color', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Color', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Color', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Color', '(', ')', '{'])
('is method namestack', True, ['b2Color', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Color
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Color', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Color ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Color', '(', 'float32', 'r', ',', 'float32', 'g', ',', 'float32', 'b', ')', ':', 'r', '(', 'r', ')', ',', 'g', '(', 'g', ')', ',', 'b', '(', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Color', '(', 'float32', 'r', ',', 'float32', 'g', ',', 'float32', 'b', ')', ':', 'r', '(', 'r', ')', ',', 'g', '(', 'g', ')', ',', 'b', '(', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Color', '(', 'float32', 'r', ',', 'float32', 'g', ',', 'float32', 'b', ')', ':', 'r', '(', 'r', ')', ',', 'g', '(', 'g', ')', ',', 'b', '(', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Color', '(', 'float32', 'r', ',', 'float32', 'g', ',', 'float32', 'b', ')', ':', 'r', '(', 'r', ')', ',', 'g', '(', 'g', ')', ',', 'b', '(', 'b', ')', '{'])
('is method namestack', True, ['b2Color', '(', 'float32', 'r', ',', 'float32', 'g', ',', 'float32', 'b', ')', ':', 'r', '(', 'r', ')', ',', 'g', '(', 'g', ')', ',', 'b', '(', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Color
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Color', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Color ( float32 r , float32 g , float32 b ) : r ( r ) , g ( g ) , b ( b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'r']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'g']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'b']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Set', '(', 'float32', 'ri', ',', 'float32', 'gi', ',', 'float32', 'bi', ')']
BraceDepth: 2
Evaluating stack ['void', 'Set', '(', 'float32', 'ri', ',', 'float32', 'gi', ',', 'float32', 'bi', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Set', '(', 'float32', 'ri', ',', 'float32', 'gi', ',', 'float32', 'bi', ')', '{'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'float32', 'ri', ',', 'float32', 'gi', ',', 'float32', 'bi', ')', '{'])
('is method namestack', True, ['void', 'Set', '(', 'float32', 'ri', ',', 'float32', 'gi', ',', 'float32', 'bi', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Set
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Set', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Set ( float32 ri , float32 gi , float32 bi ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ri']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'gi']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'bi']
None
________________________________________________________________________________
Evaluating stack ['r', '=', 'ri']
BraceDepth: 2
Evaluating stack ['r', '=', 'ri', ';']
BraceDepth: 2
Evaluating stack ['g', '=', 'gi']
BraceDepth: 2
Evaluating stack ['g', '=', 'gi', ';']
BraceDepth: 2
Evaluating stack ['b', '=', 'bi']
BraceDepth: 2
Evaluating stack ['b', '=', 'bi', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'r']
BraceDepth: 1
Evaluating stack ['float32', 'r', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'r']
['float32', 'r', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'g']
BraceDepth: 1
Evaluating stack ['float32', 'g', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'g']
['float32', 'g', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'b']
BraceDepth: 1
Evaluating stack ['float32', 'b', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'b']
['float32', 'b', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Draw']
BraceDepth: 1
Evaluating stack ['class', 'b2Draw', '{']
BraceDepth: 1
('NEWCLASS', 'class b2Draw')
('stack IN', 'class b2Draw')
('HEAD', ['class', 'b2Draw'])
______________
('TAIL', [])
('CLASS OK', 'b2Draw')
('CURACCESS-set', 'public')
Evaluating stack ['b2Draw', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Draw', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Draw', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Draw', '(', ')', ';'])
('is method namestack', True, ['b2Draw', '(', ')', ';'])
________________________________________________________________________________
b2Draw
Evaluating stack ['virtual', '~b2Draw', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2Draw', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2Draw', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2Draw', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2Draw', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2Draw
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['enum', '{', 'e_shapeBit', '=', '0x0001', ',', 'e_jointBit', '=', '0x0002', ',', 'e_aabbBit', '=', '0x0004', ',', 'e_pairBit', '=', '0x0008', ',', 'e_centerOfMassBit', '=', '0x0010', '}']
BraceDepth: 1
Evaluating stack ['enum', '{', 'e_shapeBit', '=', '0x0001', ',', 'e_jointBit', '=', '0x0002', ',', 'e_aabbBit', '=', '0x0004', ',', 'e_pairBit', '=', '0x0008', ',', 'e_centerOfMassBit', '=', '0x0010', '}', ';']
BraceDepth: 1
('WARN-enum: nameless enum', ['enum', '{', 'e_shapeBit', '=', '0x0001', ',', 'e_jointBit', '=', '0x0002', ',', 'e_aabbBit', '=', '0x0004', ',', 'e_pairBit', '=', '0x0008', ',', 'e_centerOfMassBit', '=', '0x0010', '}'])
Evaluating stack ['void', 'SetFlags', '(', 'uint32', 'flags', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetFlags', '(', 'uint32', 'flags', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetFlags', '(', 'uint32', 'flags', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetFlags', '(', 'uint32', 'flags', ')', ';'])
('is method namestack', True, ['void', 'SetFlags', '(', 'uint32', 'flags', ')', ';'])
________________________________________________________________________________
SetFlags
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'flags']
None
________________________________________________________________________________
Evaluating stack ['uint32', 'GetFlags', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['uint32', 'GetFlags', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['uint32', 'GetFlags', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['uint32', 'GetFlags', '(', ')', 'const', ';'])
('is method namestack', True, ['uint32', 'GetFlags', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFlags
Evaluating stack ['void', 'AppendFlags', '(', 'uint32', 'flags', ')']
BraceDepth: 1
Evaluating stack ['void', 'AppendFlags', '(', 'uint32', 'flags', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'AppendFlags', '(', 'uint32', 'flags', ')', ';'])
('CLEAN ARRAYS', ['void', 'AppendFlags', '(', 'uint32', 'flags', ')', ';'])
('is method namestack', True, ['void', 'AppendFlags', '(', 'uint32', 'flags', ')', ';'])
________________________________________________________________________________
AppendFlags
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'flags']
None
________________________________________________________________________________
Evaluating stack ['void', 'ClearFlags', '(', 'uint32', 'flags', ')']
BraceDepth: 1
Evaluating stack ['void', 'ClearFlags', '(', 'uint32', 'flags', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ClearFlags', '(', 'uint32', 'flags', ')', ';'])
('CLEAN ARRAYS', ['void', 'ClearFlags', '(', 'uint32', 'flags', ')', ';'])
('is method namestack', True, ['void', 'ClearFlags', '(', 'uint32', 'flags', ')', ';'])
________________________________________________________________________________
ClearFlags
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'flags']
None
________________________________________________________________________________
Evaluating stack ['virtual', 'void', 'DrawPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'DrawPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'DrawPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'DrawPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'DrawPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
DrawPolygon
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '*', 'vertices']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'vertexCount']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Color', '&', 'color']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'DrawSolidPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'DrawSolidPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'DrawSolidPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'DrawSolidPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'DrawSolidPolygon', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
DrawSolidPolygon
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '*', 'vertices']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'vertexCount']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Color', '&', 'color']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'DrawCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Color', '&', 'color', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'DrawCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Color', '&', 'color', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'DrawCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'DrawCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'DrawCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
DrawCircle
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'center']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'radius']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Color', '&', 'color']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'DrawSolidCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Vec2', '&', 'axis', ',', 'const', 'b2Color', '&', 'color', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'DrawSolidCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Vec2', '&', 'axis', ',', 'const', 'b2Color', '&', 'color', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'DrawSolidCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Vec2', '&', 'axis', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'DrawSolidCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Vec2', '&', 'axis', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'DrawSolidCircle', '(', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'radius', ',', 'const', 'b2Vec2', '&', 'axis', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
DrawSolidCircle
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'center']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'radius']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'axis']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Color', '&', 'color']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'DrawSegment', '(', 'const', 'b2Vec2', '&', 'p1', ',', 'const', 'b2Vec2', '&', 'p2', ',', 'const', 'b2Color', '&', 'color', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'DrawSegment', '(', 'const', 'b2Vec2', '&', 'p1', ',', 'const', 'b2Vec2', '&', 'p2', ',', 'const', 'b2Color', '&', 'color', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'DrawSegment', '(', 'const', 'b2Vec2', '&', 'p1', ',', 'const', 'b2Vec2', '&', 'p2', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'DrawSegment', '(', 'const', 'b2Vec2', '&', 'p1', ',', 'const', 'b2Vec2', '&', 'p2', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'DrawSegment', '(', 'const', 'b2Vec2', '&', 'p1', ',', 'const', 'b2Vec2', '&', 'p2', ',', 'const', 'b2Color', '&', 'color', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
DrawSegment
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p2']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Color', '&', 'color']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'DrawTransform', '(', 'const', 'b2Transform', '&', 'xf', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'DrawTransform', '(', 'const', 'b2Transform', '&', 'xf', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'DrawTransform', '(', 'const', 'b2Transform', '&', 'xf', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'DrawTransform', '(', 'const', 'b2Transform', '&', 'xf', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'DrawTransform', '(', 'const', 'b2Transform', '&', 'xf', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
DrawTransform
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xf']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
('CURACCESS-set', 'protected')
Evaluating stack ['uint32', 'm_drawFlags']
BraceDepth: 1
Evaluating stack ['uint32', 'm_drawFlags', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'm_drawFlags']
['uint32', 'm_drawFlags', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Timer']
BraceDepth: 1
Evaluating stack ['class', 'b2Timer', '{']
BraceDepth: 1
('NEWCLASS', 'class b2Timer')
('stack IN', 'class b2Timer')
('HEAD', ['class', 'b2Timer'])
______________
('TAIL', [])
('CLASS OK', 'b2Timer')
('CURACCESS-set', 'public')
Evaluating stack ['b2Timer', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Timer', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Timer', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Timer', '(', ')', ';'])
('is method namestack', True, ['b2Timer', '(', ')', ';'])
________________________________________________________________________________
b2Timer
Evaluating stack ['void', 'Reset', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Reset', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Reset', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Reset', '(', ')', ';'])
('is method namestack', True, ['void', 'Reset', '(', ')', ';'])
________________________________________________________________________________
Reset
Evaluating stack ['float32', 'GetMilliseconds', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMilliseconds', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMilliseconds', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMilliseconds', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMilliseconds', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMilliseconds
('CURACCESS-set', 'private')
Evaluating stack ['float64', 'm_start']
BraceDepth: 1
Evaluating stack ['float64', 'm_start', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float64', 'm_start']
['float64', 'm_start', ';']
________________________________________________________________________________
Evaluating stack ['static', 'float64', 's_invFrequency']
BraceDepth: 1
Evaluating stack ['static', 'float64', 's_invFrequency', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['static', 'float64', 's_invFrequency']
['static', 'float64', 's_invFrequency', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_chunkSize', '=', '16', '*', '1024']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_chunkSize', '=', '16', '*', '1024', ';']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_maxBlockSize', '=', '640']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_maxBlockSize', '=', '640', ';']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_blockSizes', '=', '14']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_blockSizes', '=', '14', ';']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_chunkArrayIncrement', '=', '128']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_chunkArrayIncrement', '=', '128', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Block']
BraceDepth: 0
Evaluating stack ['struct', 'b2Block', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Chunk']
BraceDepth: 0
Evaluating stack ['struct', 'b2Chunk', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator']
BraceDepth: 1
Evaluating stack ['class', 'b2BlockAllocator', '{']
BraceDepth: 1
('NEWCLASS', 'class b2BlockAllocator')
('stack IN', 'class b2BlockAllocator')
('HEAD', ['class', 'b2BlockAllocator'])
______________
('TAIL', [])
('CLASS OK', 'b2BlockAllocator')
('CURACCESS-set', 'public')
Evaluating stack ['b2BlockAllocator', '(', ')']
BraceDepth: 1
Evaluating stack ['b2BlockAllocator', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2BlockAllocator', '(', ')', ';'])
('CLEAN ARRAYS', ['b2BlockAllocator', '(', ')', ';'])
('is method namestack', True, ['b2BlockAllocator', '(', ')', ';'])
________________________________________________________________________________
b2BlockAllocator
Evaluating stack ['~b2BlockAllocator', '(', ')']
BraceDepth: 1
Evaluating stack ['~b2BlockAllocator', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['~b2BlockAllocator', '(', ')', ';'])
('CLEAN ARRAYS', ['~b2BlockAllocator', '(', ')', ';'])
('is method namestack', True, ['~b2BlockAllocator', '(', ')', ';'])
________________________________________________________________________________
~b2BlockAllocator
Evaluating stack ['void', '*', 'Allocate', '(', 'int32', 'size', ')']
BraceDepth: 1
Evaluating stack ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';'])
('CLEAN ARRAYS', ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';'])
('is method namestack', True, ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';'])
________________________________________________________________________________
Allocate
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'size']
None
________________________________________________________________________________
Evaluating stack ['void', 'Free', '(', 'void', '*', 'p', ',', 'int32', 'size', ')']
BraceDepth: 1
Evaluating stack ['void', 'Free', '(', 'void', '*', 'p', ',', 'int32', 'size', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Free', '(', 'void', '*', 'p', ',', 'int32', 'size', ')', ';'])
('CLEAN ARRAYS', ['void', 'Free', '(', 'void', '*', 'p', ',', 'int32', 'size', ')', ';'])
('is method namestack', True, ['void', 'Free', '(', 'void', '*', 'p', ',', 'int32', 'size', ')', ';'])
________________________________________________________________________________
Free
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'p']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'size']
None
________________________________________________________________________________
Evaluating stack ['void', 'Clear', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Clear', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Clear', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Clear', '(', ')', ';'])
('is method namestack', True, ['void', 'Clear', '(', ')', ';'])
________________________________________________________________________________
Clear
('CURACCESS-set', 'private')
Evaluating stack ['b2Chunk', '*', 'm_chunks']
BraceDepth: 1
Evaluating stack ['b2Chunk', '*', 'm_chunks', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Chunk', '*', 'm_chunks']
['b2Chunk', '*', 'm_chunks', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_chunkCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_chunkCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_chunkCount']
['int32', 'm_chunkCount', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_chunkSpace']
BraceDepth: 1
Evaluating stack ['int32', 'm_chunkSpace', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_chunkSpace']
['int32', 'm_chunkSpace', ';']
________________________________________________________________________________
Evaluating stack ['b2Block', '*', 'm_freeLists', '[', 'b2_blockSizes', ']']
BraceDepth: 1
Evaluating stack ['b2Block', '*', 'm_freeLists', '[', 'b2_blockSizes', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Block', '*', 'm_freeLists', '[', 'b2_blockSizes', ']']
['b2Block', '*', 'm_freeLists', '[', 'b2_blockSizes', ']', ';']
________________________________________________________________________________
Evaluating stack ['static', 'int32', 's_blockSizes', '[', 'b2_blockSizes', ']']
BraceDepth: 1
Evaluating stack ['static', 'int32', 's_blockSizes', '[', 'b2_blockSizes', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['static', 'int32', 's_blockSizes', '[', 'b2_blockSizes', ']']
['static', 'int32', 's_blockSizes', '[', 'b2_blockSizes', ']', ';']
________________________________________________________________________________
Evaluating stack ['static', 'uint8', 's_blockSizeLookup', '[', 'b2_maxBlockSize', '+', '1', ']']
BraceDepth: 1
Evaluating stack ['static', 'uint8', 's_blockSizeLookup', '[', 'b2_maxBlockSize', '+', '1', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['static', 'uint8', 's_blockSizeLookup', '[', 'b2_maxBlockSize', '+', '1', ']']
['static', 'uint8', 's_blockSizeLookup', '[', 'b2_maxBlockSize', '+', '1', ']', ';']
________________________________________________________________________________
Evaluating stack ['static', 'bool', 's_blockSizeLookupInitialized']
BraceDepth: 1
Evaluating stack ['static', 'bool', 's_blockSizeLookupInitialized', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['static', 'bool', 's_blockSizeLookupInitialized']
['static', 'bool', 's_blockSizeLookupInitialized', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Shape']
BraceDepth: 0
Evaluating stack ['class', 'b2Shape', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2CircleShape']
BraceDepth: 0
Evaluating stack ['class', 'b2CircleShape', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2EdgeShape']
BraceDepth: 0
Evaluating stack ['class', 'b2EdgeShape', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2PolygonShape']
BraceDepth: 0
Evaluating stack ['class', 'b2PolygonShape', ';']
BraceDepth: 0
Evaluating stack ['const', 'uint8', 'b2_nullFeature', '=', '0xff']
BraceDepth: 0
Evaluating stack ['const', 'uint8', 'b2_nullFeature', '=', '0xff', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2ContactFeature']
BraceDepth: 1
Evaluating stack ['struct', 'b2ContactFeature', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['enum', 'Type', '{', 'e_vertex', '=', '0', ',', 'e_face', '=', '1', '}']
BraceDepth: 1
Evaluating stack ['enum', 'Type', '{', 'e_vertex', '=', '0', ',', 'e_face', '=', '1', '}', ';']
BraceDepth: 1
Evaluating stack ['uint8', 'indexA']
BraceDepth: 1
Evaluating stack ['uint8', 'indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint8', 'indexA']
['uint8', 'indexA', ';']
________________________________________________________________________________
Evaluating stack ['uint8', 'indexB']
BraceDepth: 1
Evaluating stack ['uint8', 'indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint8', 'indexB']
['uint8', 'indexB', ';']
________________________________________________________________________________
Evaluating stack ['uint8', 'typeA']
BraceDepth: 1
Evaluating stack ['uint8', 'typeA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint8', 'typeA']
['uint8', 'typeA', ';']
________________________________________________________________________________
Evaluating stack ['uint8', 'typeB']
BraceDepth: 1
Evaluating stack ['uint8', 'typeB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint8', 'typeB']
['uint8', 'typeB', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['union', 'b2ContactID']
BraceDepth: 1
Evaluating stack ['union', 'b2ContactID', '{']
BraceDepth: 1
Evaluating stack ['b2ContactFeature', 'cf']
BraceDepth: 1
Evaluating stack ['union', 'b2ContactID', '{', 'b2ContactFeature', 'cf', ';']
BraceDepth: 1
Evaluating stack ['uint32', 'key']
BraceDepth: 1
Evaluating stack ['uint32', 'key', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2ManifoldPoint']
BraceDepth: 1
Evaluating stack ['struct', 'b2ManifoldPoint', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'localPoint']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localPoint', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localPoint']
['b2Vec2', 'localPoint', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'normalImpulse']
BraceDepth: 1
Evaluating stack ['float32', 'normalImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'normalImpulse']
['float32', 'normalImpulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'tangentImpulse']
BraceDepth: 1
Evaluating stack ['float32', 'tangentImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'tangentImpulse']
['float32', 'tangentImpulse', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactID', 'id']
BraceDepth: 1
Evaluating stack ['b2ContactID', 'id', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactID', 'id']
['b2ContactID', 'id', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Manifold']
BraceDepth: 1
Evaluating stack ['struct', 'b2Manifold', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['enum', 'Type', '{', 'e_circles', ',', 'e_faceA', ',', 'e_faceB', '}']
BraceDepth: 1
Evaluating stack ['enum', 'Type', '{', 'e_circles', ',', 'e_faceA', ',', 'e_faceB', '}', ';']
BraceDepth: 1
Evaluating stack ['b2ManifoldPoint', 'points', '[', '2', ']']
BraceDepth: 1
Evaluating stack ['b2ManifoldPoint', 'points', '[', '2', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ManifoldPoint', 'points', '[', '2', ']']
['b2ManifoldPoint', 'points', '[', '2', ']', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localNormal']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localNormal', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localNormal']
['b2Vec2', 'localNormal', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localPoint']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localPoint', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localPoint']
['b2Vec2', 'localPoint', ';']
________________________________________________________________________________
Evaluating stack ['Type', 'type']
BraceDepth: 1
Evaluating stack ['Type', 'type', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['Type', 'type']
['Type', 'type', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'pointCount']
BraceDepth: 1
Evaluating stack ['int32', 'pointCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'pointCount']
['int32', 'pointCount', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2WorldManifold']
BraceDepth: 1
Evaluating stack ['struct', 'b2WorldManifold', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['void', 'Initialize', '(', 'const', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'float32', 'radiusA', ',', 'const', 'b2Transform', '&', 'xfB', ',', 'float32', 'radiusB', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'const', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'float32', 'radiusA', ',', 'const', 'b2Transform', '&', 'xfB', ',', 'float32', 'radiusB', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'const', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'float32', 'radiusA', ',', 'const', 'b2Transform', '&', 'xfB', ',', 'float32', 'radiusB', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'const', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'float32', 'radiusA', ',', 'const', 'b2Transform', '&', 'xfB', ',', 'float32', 'radiusB', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'const', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'float32', 'radiusA', ',', 'const', 'b2Transform', '&', 'xfB', ',', 'float32', 'radiusB', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( const b2Manifold * manifold , const b2Transform & xfA , float32 radiusA , const b2Transform & xfB , float32 radiusB ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Manifold', '*', 'manifold']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'radiusA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'radiusB']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'normal']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'normal', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'normal']
['b2Vec2', 'normal', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'points', '[', '2', ']']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'points', '[', '2', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'points', '[', '2', ']']
['b2Vec2', 'points', '[', '2', ']', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['enum', 'b2PointState', '{', 'b2_nullState', ',', 'b2_addState', ',', 'b2_persistState', ',', 'b2_removeState', '}']
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['void', 'b2GetPointStates', '(', 'b2PointState', 'state1', '[', '2', ']', ',', 'b2PointState', 'state2', '[', '2', ']', ',', 'const', 'b2Manifold', '*', 'manifold1', ',', 'const', 'b2Manifold', '*', 'manifold2', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2GetPointStates', '(', 'b2PointState', 'state1', '[', '2', ']', ',', 'b2PointState', 'state2', '[', '2', ']', ',', 'const', 'b2Manifold', '*', 'manifold1', ',', 'const', 'b2Manifold', '*', 'manifold2', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2GetPointStates', '(', 'b2PointState', 'state1', '[', '2', ']', ',', 'b2PointState', 'state2', '[', '2', ']', ',', 'const', 'b2Manifold', '*', 'manifold1', ',', 'const', 'b2Manifold', '*', 'manifold2', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2GetPointStates', '(', 'b2PointState', 'state1', ',', 'b2PointState', 'state2', ',', 'const', 'b2Manifold', '*', 'manifold1', ',', 'const', 'b2Manifold', '*', 'manifold2', ')', ';'])
('is method namestack', True, ['void', 'b2GetPointStates', '(', 'b2PointState', 'state1', '[', '2', ']', ',', 'b2PointState', 'state2', '[', '2', ']', ',', 'const', 'b2Manifold', '*', 'manifold1', ',', 'const', 'b2Manifold', '*', 'manifold2', ')', ';'])
________________________________________________________________________________
b2GetPointStates
('free function:', ['void', 'b2GetPointStates', '(', 'b2PointState', 'state1', '[', '2', ']', ',', 'b2PointState', 'state2', '[', '2', ']', ',', 'const', 'b2Manifold', '*', 'manifold1', ',', 'const', 'b2Manifold', '*', 'manifold2', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2PointState', 'state1', '[', '2', ']']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2PointState', 'state2', '[', '2', ']']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Manifold', '*', 'manifold1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Manifold', '*', 'manifold2']
None
________________________________________________________________________________
Evaluating stack ['struct', 'b2ClipVertex']
BraceDepth: 1
Evaluating stack ['struct', 'b2ClipVertex', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'v']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'v', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'v']
['b2Vec2', 'v', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactID', 'id']
BraceDepth: 1
Evaluating stack ['b2ContactID', 'id', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactID', 'id']
['b2ContactID', 'id', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2RayCastInput']
BraceDepth: 1
Evaluating stack ['struct', 'b2RayCastInput', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'p1', ',', 'p2']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'p1', ',', 'p2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'p1', ',', 'p2']
['b2Vec2', 'p1', ',', 'p2', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxFraction']
BraceDepth: 1
Evaluating stack ['float32', 'maxFraction', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxFraction']
['float32', 'maxFraction', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2RayCastOutput']
BraceDepth: 1
Evaluating stack ['struct', 'b2RayCastOutput', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'normal']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'normal', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'normal']
['b2Vec2', 'normal', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'fraction']
BraceDepth: 1
Evaluating stack ['float32', 'fraction', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'fraction']
['float32', 'fraction', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2AABB']
BraceDepth: 1
Evaluating stack ['struct', 'b2AABB', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2AABB', '(', ')']
BraceDepth: 2
Evaluating stack ['b2AABB', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2AABB', '(', ')', '{'])
('CLEAN ARRAYS', ['b2AABB', '(', ')', '{'])
('is method namestack', True, ['b2AABB', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2AABB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2AABB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2AABB ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'IsValid', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsValid', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsValid', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsValid', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsValid', '(', ')', 'const', ';'])
________________________________________________________________________________
IsValid
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'IsValid', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool IsValid ( ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['b2Vec2', 'GetCenter', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'GetCenter', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', 'GetCenter', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec2', 'GetCenter', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Vec2', 'GetCenter', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetCenter
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetCenter', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetCenter ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', '0', '5f', '*', '(', 'lowerBound', '+', 'upperBound', ')']
BraceDepth: 2
Evaluating stack ['return', '0', '5f', '*', '(', 'lowerBound', '+', 'upperBound', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'GetExtents', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'GetExtents', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Vec2', 'GetExtents', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['b2Vec2', 'GetExtents', '(', ')', 'const', '{'])
('is method namestack', True, ['b2Vec2', 'GetExtents', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetExtents
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetExtents', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Vec2', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetExtents ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', '0', '5f', '*', '(', 'upperBound', '-', 'lowerBound', ')']
BraceDepth: 2
Evaluating stack ['return', '0', '5f', '*', '(', 'upperBound', '-', 'lowerBound', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetPerimeter', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetPerimeter', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetPerimeter', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetPerimeter', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetPerimeter', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetPerimeter
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetPerimeter', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'float32', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'float32 GetPerimeter ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['float32', 'wx', '=', 'upperBound', 'x', '-', 'lowerBound', 'x']
BraceDepth: 2
Evaluating stack ['float32', 'wx', '=', 'upperBound', 'x', '-', 'lowerBound', 'x', ';']
BraceDepth: 2
Evaluating stack ['float32', 'wy', '=', 'upperBound', 'y', '-', 'lowerBound', 'y']
BraceDepth: 2
Evaluating stack ['float32', 'wy', '=', 'upperBound', 'y', '-', 'lowerBound', 'y', ';']
BraceDepth: 2
Evaluating stack ['return', '2', '0f', '*', '(', 'wx', '+', 'wy', ')']
BraceDepth: 2
Evaluating stack ['return', '2', '0f', '*', '(', 'wx', '+', 'wy', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb', ')']
BraceDepth: 2
Evaluating stack ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb', ')', '{'])
('CLEAN ARRAYS', ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb', ')', '{'])
('is method namestack', True, ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Combine
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Combine', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Combine ( const b2AABB & aabb ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
Evaluating stack ['lowerBound', '=', 'b2Min', '(', 'lowerBound', ',', 'aabb', 'lowerBound', ')']
BraceDepth: 2
Evaluating stack ['lowerBound', '=', 'b2Min', '(', 'lowerBound', ',', 'aabb', 'lowerBound', ')', ';']
BraceDepth: 2
Evaluating stack ['upperBound', '=', 'b2Max', '(', 'upperBound', ',', 'aabb', 'upperBound', ')']
BraceDepth: 2
Evaluating stack ['upperBound', '=', 'b2Max', '(', 'upperBound', ',', 'aabb', 'upperBound', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2AABB', '&', 'aabb2', ')']
BraceDepth: 2
Evaluating stack ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2AABB', '&', 'aabb2', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2AABB', '&', 'aabb2', ')', '{'])
('CLEAN ARRAYS', ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2AABB', '&', 'aabb2', ')', '{'])
('is method namestack', True, ['void', 'Combine', '(', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2AABB', '&', 'aabb2', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Combine
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Combine', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Combine ( const b2AABB & aabb1 , const b2AABB & aabb2 ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb2']
None
________________________________________________________________________________
Evaluating stack ['lowerBound', '=', 'b2Min', '(', 'aabb1', 'lowerBound', ',', 'aabb2', 'lowerBound', ')']
BraceDepth: 2
Evaluating stack ['lowerBound', '=', 'b2Min', '(', 'aabb1', 'lowerBound', ',', 'aabb2', 'lowerBound', ')', ';']
BraceDepth: 2
Evaluating stack ['upperBound', '=', 'b2Max', '(', 'aabb1', 'upperBound', ',', 'aabb2', 'upperBound', ')']
BraceDepth: 2
Evaluating stack ['upperBound', '=', 'b2Max', '(', 'aabb1', 'upperBound', ',', 'aabb2', 'upperBound', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'Contains', '(', 'const', 'b2AABB', '&', 'aabb', ')', 'const']
BraceDepth: 2
Evaluating stack ['bool', 'Contains', '(', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'Contains', '(', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
('CLEAN ARRAYS', ['bool', 'Contains', '(', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
('is method namestack', True, ['bool', 'Contains', '(', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Contains
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Contains', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool Contains ( const b2AABB & aabb ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
Evaluating stack ['bool', 'result', '=', 'true']
BraceDepth: 2
Evaluating stack ['bool', 'result', '=', 'true', ';']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'lowerBound', 'x', '<', '=', 'aabb', 'lowerBound', 'x']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'lowerBound', 'x', '<', '=', 'aabb', 'lowerBound', 'x', ';']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'lowerBound', 'y', '<', '=', 'aabb', 'lowerBound', 'y']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'lowerBound', 'y', '<', '=', 'aabb', 'lowerBound', 'y', ';']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'aabb', 'upperBound', 'x', '<', '=', 'upperBound', 'x']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'aabb', 'upperBound', 'x', '<', '=', 'upperBound', 'x', ';']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'aabb', 'upperBound', 'y', '<', '=', 'upperBound', 'y']
BraceDepth: 2
Evaluating stack ['result', '=', 'result', '&', '&', 'aabb', 'upperBound', 'y', '<', '=', 'upperBound', 'y', ';']
BraceDepth: 2
Evaluating stack ['return', 'result']
BraceDepth: 2
Evaluating stack ['return', 'result', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
('is method namestack', True, ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
________________________________________________________________________________
RayCast
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'RayCast', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool RayCast ( b2RayCastOutput * output , const b2RayCastInput & input ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'lowerBound']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'lowerBound', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'lowerBound']
['b2Vec2', 'lowerBound', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'upperBound']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'upperBound', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'upperBound']
['b2Vec2', 'upperBound', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['void', 'b2CollideCircles', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2CircleShape', '*', 'circleA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2CollideCircles', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2CircleShape', '*', 'circleA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2CollideCircles', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2CircleShape', '*', 'circleA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2CollideCircles', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2CircleShape', '*', 'circleA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('is method namestack', True, ['void', 'b2CollideCircles', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2CircleShape', '*', 'circleA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
________________________________________________________________________________
b2CollideCircles
('free function:', ['void', 'b2CollideCircles', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2CircleShape', '*', 'circleA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Manifold', '*', 'manifold']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2CircleShape', '*', 'circleA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2CircleShape', '*', 'circleB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
Evaluating stack ['void', 'b2CollidePolygonAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2CollidePolygonAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2CollidePolygonAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2CollidePolygonAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('is method namestack', True, ['void', 'b2CollidePolygonAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
________________________________________________________________________________
b2CollidePolygonAndCircle
('free function:', ['void', 'b2CollidePolygonAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Manifold', '*', 'manifold']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2PolygonShape', '*', 'polygonA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2CircleShape', '*', 'circleB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
Evaluating stack ['void', 'b2CollidePolygons', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'polygonB', ',', 'const', 'b2Transform', '&', 'xfB', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2CollidePolygons', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'polygonB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2CollidePolygons', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'polygonB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2CollidePolygons', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'polygonB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('is method namestack', True, ['void', 'b2CollidePolygons', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'polygonB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
________________________________________________________________________________
b2CollidePolygons
('free function:', ['void', 'b2CollidePolygons', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2PolygonShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'polygonB', ',', 'const', 'b2Transform', '&', 'xfB', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Manifold', '*', 'manifold']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2PolygonShape', '*', 'polygonA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2PolygonShape', '*', 'polygonB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
Evaluating stack ['void', 'b2CollideEdgeAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2CollideEdgeAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2CollideEdgeAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2CollideEdgeAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('is method namestack', True, ['void', 'b2CollideEdgeAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
________________________________________________________________________________
b2CollideEdgeAndCircle
('free function:', ['void', 'b2CollideEdgeAndCircle', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'polygonA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2CircleShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Manifold', '*', 'manifold']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2EdgeShape', '*', 'polygonA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2CircleShape', '*', 'circleB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
Evaluating stack ['void', 'b2CollideEdgeAndPolygon', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'edgeA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2CollideEdgeAndPolygon', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'edgeA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2CollideEdgeAndPolygon', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'edgeA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2CollideEdgeAndPolygon', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'edgeA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('is method namestack', True, ['void', 'b2CollideEdgeAndPolygon', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'edgeA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
________________________________________________________________________________
b2CollideEdgeAndPolygon
('free function:', ['void', 'b2CollideEdgeAndPolygon', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2EdgeShape', '*', 'edgeA', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2PolygonShape', '*', 'circleB', ',', 'const', 'b2Transform', '&', 'xfB', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Manifold', '*', 'manifold']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2EdgeShape', '*', 'edgeA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2PolygonShape', '*', 'circleB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
Evaluating stack ['int32', 'b2ClipSegmentToLine', '(', 'b2ClipVertex', 'vOut', '[', '2', ']', ',', 'const', 'b2ClipVertex', 'vIn', '[', '2', ']', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'offset', ',', 'int32', 'vertexIndexA', ')']
BraceDepth: 0
Evaluating stack ['int32', 'b2ClipSegmentToLine', '(', 'b2ClipVertex', 'vOut', '[', '2', ']', ',', 'const', 'b2ClipVertex', 'vIn', '[', '2', ']', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'offset', ',', 'int32', 'vertexIndexA', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['int32', 'b2ClipSegmentToLine', '(', 'b2ClipVertex', 'vOut', '[', '2', ']', ',', 'const', 'b2ClipVertex', 'vIn', '[', '2', ']', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'offset', ',', 'int32', 'vertexIndexA', ')', ';'])
('CLEAN ARRAYS', ['int32', 'b2ClipSegmentToLine', '(', 'b2ClipVertex', 'vOut', ',', 'const', 'b2ClipVertex', 'vIn', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'offset', ',', 'int32', 'vertexIndexA', ')', ';'])
('is method namestack', True, ['int32', 'b2ClipSegmentToLine', '(', 'b2ClipVertex', 'vOut', '[', '2', ']', ',', 'const', 'b2ClipVertex', 'vIn', '[', '2', ']', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'offset', ',', 'int32', 'vertexIndexA', ')', ';'])
________________________________________________________________________________
b2ClipSegmentToLine
('free function:', ['int32', 'b2ClipSegmentToLine', '(', 'b2ClipVertex', 'vOut', '[', '2', ']', ',', 'const', 'b2ClipVertex', 'vIn', '[', '2', ']', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'offset', ',', 'int32', 'vertexIndexA', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ClipVertex', 'vOut', '[', '2', ']']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2ClipVertex', 'vIn', '[', '2', ']']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'normal']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'offset']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'vertexIndexA']
None
________________________________________________________________________________
Evaluating stack ['bool', 'b2TestOverlap', '(', 'const', 'b2Shape', '*', 'shapeA', ',', 'int32', 'indexA', ',', 'const', 'b2Shape', '*', 'shapeB', ',', 'int32', 'indexB', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')']
BraceDepth: 0
Evaluating stack ['bool', 'b2TestOverlap', '(', 'const', 'b2Shape', '*', 'shapeA', ',', 'int32', 'indexA', ',', 'const', 'b2Shape', '*', 'shapeB', ',', 'int32', 'indexB', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['bool', 'b2TestOverlap', '(', 'const', 'b2Shape', '*', 'shapeA', ',', 'int32', 'indexA', ',', 'const', 'b2Shape', '*', 'shapeB', ',', 'int32', 'indexB', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('CLEAN ARRAYS', ['bool', 'b2TestOverlap', '(', 'const', 'b2Shape', '*', 'shapeA', ',', 'int32', 'indexA', ',', 'const', 'b2Shape', '*', 'shapeB', ',', 'int32', 'indexB', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
('is method namestack', True, ['bool', 'b2TestOverlap', '(', 'const', 'b2Shape', '*', 'shapeA', ',', 'int32', 'indexA', ',', 'const', 'b2Shape', '*', 'shapeB', ',', 'int32', 'indexB', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', ';'])
________________________________________________________________________________
b2TestOverlap
('free function:', ['bool', 'b2TestOverlap', '(', 'const', 'b2Shape', '*', 'shapeA', ',', 'int32', 'indexA', ',', 'const', 'b2Shape', '*', 'shapeB', ',', 'int32', 'indexB', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Shape', '*', 'shapeA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'indexA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Shape', '*', 'shapeB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'indexB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
Evaluating stack ['inline', 'bool', 'b2AABB', ':', ':', 'IsValid', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2AABB', ':', ':', 'IsValid', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2AABB', ':', ':', 'IsValid', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2AABB', ':', ':', 'IsValid', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2AABB', ':', ':', 'IsValid', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2AABB::IsValid
Evaluating stack ['b2Vec2', 'd', '=', 'upperBound', '-', 'lowerBound']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'd', '=', 'upperBound', '-', 'lowerBound', ';']
BraceDepth: 1
Evaluating stack ['bool', 'valid', '=', 'd', 'x', '>', '=', '0', '0f', '&', '&', 'd', 'y', '>', '=', '0', '0f']
BraceDepth: 1
Evaluating stack ['bool', 'valid', '=', 'd', 'x', '>', '=', '0', '0f', '&', '&', 'd', 'y', '>', '=', '0', '0f', ';']
BraceDepth: 1
Evaluating stack ['valid', '=', 'valid', '&', '&', 'lowerBound', 'IsValid', '(', ')', '&', '&', 'upperBound', 'IsValid', '(', ')']
BraceDepth: 1
Evaluating stack ['valid', '=', 'valid', '&', '&', 'lowerBound', 'IsValid', '(', ')', '&', '&', 'upperBound', 'IsValid', '(', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'valid']
BraceDepth: 1
Evaluating stack ['return', 'valid', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2TestOverlap', '(', 'const', 'b2AABB', '&', 'a', ',', 'const', 'b2AABB', '&', 'b', ')']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2TestOverlap', '(', 'const', 'b2AABB', '&', 'a', ',', 'const', 'b2AABB', '&', 'b', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2TestOverlap', '(', 'const', 'b2AABB', '&', 'a', ',', 'const', 'b2AABB', '&', 'b', ')', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2TestOverlap', '(', 'const', 'b2AABB', '&', 'a', ',', 'const', 'b2AABB', '&', 'b', ')', '{'])
('is method namestack', True, ['inline', 'bool', 'b2TestOverlap', '(', 'const', 'b2AABB', '&', 'a', ',', 'const', 'b2AABB', '&', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2TestOverlap
('free function:', ['inline', 'bool', 'b2TestOverlap', '(', 'const', 'b2AABB', '&', 'a', ',', 'const', 'b2AABB', '&', 'b', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'a']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'b']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'd1', ',', 'd2']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'd1', ',', 'd2', ';']
BraceDepth: 1
Evaluating stack ['d1', '=', 'b', 'lowerBound', '-', 'a', 'upperBound']
BraceDepth: 1
Evaluating stack ['d1', '=', 'b', 'lowerBound', '-', 'a', 'upperBound', ';']
BraceDepth: 1
Evaluating stack ['d2', '=', 'a', 'lowerBound', '-', 'b', 'upperBound']
BraceDepth: 1
Evaluating stack ['d2', '=', 'a', 'lowerBound', '-', 'b', 'upperBound', ';']
BraceDepth: 1
Evaluating stack ['if', '(', 'd1', 'x', '>', '0', '0f', 'd1', 'y', '>', '0', '0f', ')', 'return', 'false']
BraceDepth: 1
Evaluating stack ['if', '(', 'd1', 'x', '>', '0', '0f', 'd1', 'y', '>', '0', '0f', ')', 'return', 'false', ';']
BraceDepth: 1
Evaluating stack ['if', '(', 'd2', 'x', '>', '0', '0f', 'd2', 'y', '>', '0', '0f', ')', 'return', 'false']
BraceDepth: 1
Evaluating stack ['if', '(', 'd2', 'x', '>', '0', '0f', 'd2', 'y', '>', '0', '0f', ')', 'return', 'false', ';']
BraceDepth: 1
Evaluating stack ['return', 'true']
BraceDepth: 1
Evaluating stack ['return', 'true', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2MassData']
BraceDepth: 1
Evaluating stack ['struct', 'b2MassData', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['float32', 'mass']
BraceDepth: 1
Evaluating stack ['float32', 'mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'mass']
['float32', 'mass', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'center']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'center', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'center']
['b2Vec2', 'center', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'I']
BraceDepth: 1
Evaluating stack ['float32', 'I', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'I']
['float32', 'I', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Shape']
BraceDepth: 1
Evaluating stack ['class', 'b2Shape', '{']
BraceDepth: 1
('NEWCLASS', 'class b2Shape')
('stack IN', 'class b2Shape')
('HEAD', ['class', 'b2Shape'])
______________
('TAIL', [])
('CLASS OK', 'b2Shape')
('CURACCESS-set', 'public')
Evaluating stack ['enum', 'Type', '{', 'e_circle', '=', '0', ',', 'e_edge', '=', '1', ',', 'e_polygon', '=', '2', ',', 'e_chain', '=', '3', ',', 'e_typeCount', '=', '4', '}']
BraceDepth: 1
Evaluating stack ['enum', 'Type', '{', 'e_circle', '=', '0', ',', 'e_edge', '=', '1', ',', 'e_polygon', '=', '2', ',', 'e_chain', '=', '3', ',', 'e_typeCount', '=', '4', '}', ';']
BraceDepth: 1
Evaluating stack ['virtual', '~b2Shape', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2Shape', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2Shape', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2Shape', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2Shape', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2Shape
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
Clone
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['Type', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['Type', 'GetType', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['Type', 'GetType', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['Type', 'GetType', '(', ')', 'const', ';'])
('is method namestack', True, ['Type', 'GetType', '(', ')', 'const', ';'])
________________________________________________________________________________
GetType
Evaluating stack ['virtual', 'int32', 'GetChildCount', '(', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'int32', 'GetChildCount', '(', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'int32', 'GetChildCount', '(', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'int32', 'GetChildCount', '(', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'int32', 'GetChildCount', '(', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
GetChildCount
Evaluating stack ['virtual', 'bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
TestPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xf']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p']
None
________________________________________________________________________________
Evaluating stack ['virtual', 'bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['virtual', 'void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'xf', ',', 'int32', 'childIndex', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'xf', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'xf', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'xf', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'xf', ',', 'int32', 'childIndex', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
ComputeAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2AABB', '*', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xf']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['virtual', 'void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
ComputeMass
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2MassData', '*', 'massData']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
None
________________________________________________________________________________
Evaluating stack ['Type', 'm_type']
BraceDepth: 1
Evaluating stack ['Type', 'm_type', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['Type', 'm_type']
['Type', 'm_type', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_radius']
BraceDepth: 1
Evaluating stack ['float32', 'm_radius', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_radius']
['float32', 'm_radius', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2Shape', ':', ':', 'Type', 'b2Shape', ':', ':', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Shape', ':', ':', 'Type', 'b2Shape', ':', ':', 'GetType', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Shape', ':', ':', 'Type', 'b2Shape', ':', ':', 'GetType', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Shape', ':', ':', 'Type', 'b2Shape', ':', ':', 'GetType', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Shape', ':', ':', 'Type', 'b2Shape', ':', ':', 'GetType', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Shape::GetType
Evaluating stack ['return', 'm_type']
BraceDepth: 1
Evaluating stack ['return', 'm_type', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2CircleShape', ':', 'public', 'b2Shape']
BraceDepth: 1
Evaluating stack ['class', 'b2CircleShape', ':', 'public', 'b2Shape', '{']
BraceDepth: 1
('NEWCLASS', 'class b2CircleShape : public b2Shape')
('stack IN', 'class b2CircleShape : public b2Shape')
('HEAD', ['class', 'b2CircleShape'])
______________
('TAIL', ['public', 'b2Shape'])
('CLASS OK', 'b2CircleShape')
('CURACCESS-set', 'public')
Evaluating stack ['b2CircleShape', '(', ')']
BraceDepth: 1
Evaluating stack ['b2CircleShape', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2CircleShape', '(', ')', ';'])
('CLEAN ARRAYS', ['b2CircleShape', '(', ')', ';'])
('is method namestack', True, ['b2CircleShape', '(', ')', ';'])
________________________________________________________________________________
b2CircleShape
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('is method namestack', True, ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
________________________________________________________________________________
Clone
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetChildCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetChildCount
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('is method namestack', True, ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
________________________________________________________________________________
TestPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p']
None
________________________________________________________________________________
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
ComputeAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2AABB', '*', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
________________________________________________________________________________
ComputeMass
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2MassData', '*', 'massData']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
________________________________________________________________________________
GetSupport
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'd']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
________________________________________________________________________________
GetSupportVertex
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'd']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetVertexCount', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['int32', 'GetVertexCount', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['int32', 'GetVertexCount', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['int32', 'GetVertexCount', '(', ')', 'const', '{'])
('is method namestack', True, ['int32', 'GetVertexCount', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetVertexCount
Evaluating stack ['return', '1']
BraceDepth: 2
Evaluating stack ['return', '1', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
________________________________________________________________________________
GetVertex
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_p']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_p', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_p']
['b2Vec2', 'm_p', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2CircleShape', ':', ':', 'b2CircleShape', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2CircleShape', ':', ':', 'b2CircleShape', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2CircleShape', ':', ':', 'b2CircleShape', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2CircleShape', ':', ':', 'b2CircleShape', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2CircleShape', ':', ':', 'b2CircleShape', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2CircleShape::b2CircleShape
Evaluating stack ['m_type', '=', 'e_circle']
BraceDepth: 1
Evaluating stack ['m_type', '=', 'e_circle', ';']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '0', '0f']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '0', '0f', ';']
BraceDepth: 1
Evaluating stack ['m_p', 'SetZero', '(', ')']
BraceDepth: 1
Evaluating stack ['m_p', 'SetZero', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2CircleShape', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2CircleShape', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2CircleShape', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2CircleShape', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2CircleShape', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2CircleShape::GetSupport
Evaluating stack ['(', '(', 'void', ')', '(', 'd', ')', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '(', 'd', ')', ')', ';']
BraceDepth: 1
Evaluating stack ['return', '0']
BraceDepth: 1
Evaluating stack ['return', '0', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2CircleShape::GetSupportVertex
Evaluating stack ['(', '(', 'void', ')', '(', 'd', ')', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '(', 'd', ')', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'm_p']
BraceDepth: 1
Evaluating stack ['return', 'm_p', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2CircleShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2CircleShape::GetVertex
Evaluating stack ['(', '(', 'void', ')', '(', 'index', ')', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '(', 'index', ')', ')', ';']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'm_p']
BraceDepth: 1
Evaluating stack ['return', 'm_p', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2EdgeShape', ':', 'public', 'b2Shape']
BraceDepth: 1
Evaluating stack ['class', 'b2EdgeShape', ':', 'public', 'b2Shape', '{']
BraceDepth: 1
('NEWCLASS', 'class b2EdgeShape : public b2Shape')
('stack IN', 'class b2EdgeShape : public b2Shape')
('HEAD', ['class', 'b2EdgeShape'])
______________
('TAIL', ['public', 'b2Shape'])
('CLASS OK', 'b2EdgeShape')
('CURACCESS-set', 'public')
Evaluating stack ['b2EdgeShape', '(', ')']
BraceDepth: 1
Evaluating stack ['b2EdgeShape', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2EdgeShape', '(', ')', ';'])
('CLEAN ARRAYS', ['b2EdgeShape', '(', ')', ';'])
('is method namestack', True, ['b2EdgeShape', '(', ')', ';'])
________________________________________________________________________________
b2EdgeShape
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'v1', ',', 'const', 'b2Vec2', '&', 'v2', ')']
BraceDepth: 1
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'v1', ',', 'const', 'b2Vec2', '&', 'v2', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'v1', ',', 'const', 'b2Vec2', '&', 'v2', ')', ';'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'v1', ',', 'const', 'b2Vec2', '&', 'v2', ')', ';'])
('is method namestack', True, ['void', 'Set', '(', 'const', 'b2Vec2', '&', 'v1', ',', 'const', 'b2Vec2', '&', 'v2', ')', ';'])
________________________________________________________________________________
Set
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v2']
None
________________________________________________________________________________
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('is method namestack', True, ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
________________________________________________________________________________
Clone
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetChildCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetChildCount
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('is method namestack', True, ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
________________________________________________________________________________
TestPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p']
None
________________________________________________________________________________
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
ComputeAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2AABB', '*', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
________________________________________________________________________________
ComputeMass
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2MassData', '*', 'massData']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_vertex1', ',', 'm_vertex2']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_vertex1', ',', 'm_vertex2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_vertex1', ',', 'm_vertex2']
['b2Vec2', 'm_vertex1', ',', 'm_vertex2', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_vertex0', ',', 'm_vertex3']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_vertex0', ',', 'm_vertex3', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_vertex0', ',', 'm_vertex3']
['b2Vec2', 'm_vertex0', ',', 'm_vertex3', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_hasVertex0', ',', 'm_hasVertex3']
BraceDepth: 1
Evaluating stack ['bool', 'm_hasVertex0', ',', 'm_hasVertex3', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_hasVertex0', ',', 'm_hasVertex3']
['bool', 'm_hasVertex0', ',', 'm_hasVertex3', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2EdgeShape', ':', ':', 'b2EdgeShape', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2EdgeShape', ':', ':', 'b2EdgeShape', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2EdgeShape', ':', ':', 'b2EdgeShape', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2EdgeShape', ':', ':', 'b2EdgeShape', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2EdgeShape', ':', ':', 'b2EdgeShape', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2EdgeShape::b2EdgeShape
Evaluating stack ['m_type', '=', 'e_edge']
BraceDepth: 1
Evaluating stack ['m_type', '=', 'e_edge', ';']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '(', '2', '0f', '*', '0', '005f', ')']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '(', '2', '0f', '*', '0', '005f', ')', ';']
BraceDepth: 1
Evaluating stack ['m_vertex0', 'x', '=', '0', '0f']
BraceDepth: 1
Evaluating stack ['m_vertex0', 'x', '=', '0', '0f', ';']
BraceDepth: 1
Evaluating stack ['m_vertex0', 'y', '=', '0', '0f']
BraceDepth: 1
Evaluating stack ['m_vertex0', 'y', '=', '0', '0f', ';']
BraceDepth: 1
Evaluating stack ['m_vertex3', 'x', '=', '0', '0f']
BraceDepth: 1
Evaluating stack ['m_vertex3', 'x', '=', '0', '0f', ';']
BraceDepth: 1
Evaluating stack ['m_vertex3', 'y', '=', '0', '0f']
BraceDepth: 1
Evaluating stack ['m_vertex3', 'y', '=', '0', '0f', ';']
BraceDepth: 1
Evaluating stack ['m_hasVertex0', '=', 'false']
BraceDepth: 1
Evaluating stack ['m_hasVertex0', '=', 'false', ';']
BraceDepth: 1
Evaluating stack ['m_hasVertex3', '=', 'false']
BraceDepth: 1
Evaluating stack ['m_hasVertex3', '=', 'false', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2EdgeShape']
BraceDepth: 0
Evaluating stack ['class', 'b2EdgeShape', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2ChainShape', ':', 'public', 'b2Shape']
BraceDepth: 1
Evaluating stack ['class', 'b2ChainShape', ':', 'public', 'b2Shape', '{']
BraceDepth: 1
('NEWCLASS', 'class b2ChainShape : public b2Shape')
('stack IN', 'class b2ChainShape : public b2Shape')
('HEAD', ['class', 'b2ChainShape'])
______________
('TAIL', ['public', 'b2Shape'])
('CLASS OK', 'b2ChainShape')
('CURACCESS-set', 'public')
Evaluating stack ['b2ChainShape', '(', ')']
BraceDepth: 1
Evaluating stack ['b2ChainShape', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2ChainShape', '(', ')', ';'])
('CLEAN ARRAYS', ['b2ChainShape', '(', ')', ';'])
('is method namestack', True, ['b2ChainShape', '(', ')', ';'])
________________________________________________________________________________
b2ChainShape
Evaluating stack ['~b2ChainShape', '(', ')']
BraceDepth: 1
Evaluating stack ['~b2ChainShape', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['~b2ChainShape', '(', ')', ';'])
('CLEAN ARRAYS', ['~b2ChainShape', '(', ')', ';'])
('is method namestack', True, ['~b2ChainShape', '(', ')', ';'])
________________________________________________________________________________
~b2ChainShape
Evaluating stack ['void', 'CreateLoop', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')']
BraceDepth: 1
Evaluating stack ['void', 'CreateLoop', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'CreateLoop', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';'])
('CLEAN ARRAYS', ['void', 'CreateLoop', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';'])
('is method namestack', True, ['void', 'CreateLoop', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';'])
________________________________________________________________________________
CreateLoop
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '*', 'vertices']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'count']
None
________________________________________________________________________________
Evaluating stack ['void', 'CreateChain', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')']
BraceDepth: 1
Evaluating stack ['void', 'CreateChain', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'CreateChain', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';'])
('CLEAN ARRAYS', ['void', 'CreateChain', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';'])
('is method namestack', True, ['void', 'CreateChain', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'count', ')', ';'])
________________________________________________________________________________
CreateChain
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '*', 'vertices']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'count']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetPrevVertex', '(', 'const', 'b2Vec2', '&', 'prevVertex', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetPrevVertex', '(', 'const', 'b2Vec2', '&', 'prevVertex', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetPrevVertex', '(', 'const', 'b2Vec2', '&', 'prevVertex', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetPrevVertex', '(', 'const', 'b2Vec2', '&', 'prevVertex', ')', ';'])
('is method namestack', True, ['void', 'SetPrevVertex', '(', 'const', 'b2Vec2', '&', 'prevVertex', ')', ';'])
________________________________________________________________________________
SetPrevVertex
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'prevVertex']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetNextVertex', '(', 'const', 'b2Vec2', '&', 'nextVertex', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetNextVertex', '(', 'const', 'b2Vec2', '&', 'nextVertex', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetNextVertex', '(', 'const', 'b2Vec2', '&', 'nextVertex', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetNextVertex', '(', 'const', 'b2Vec2', '&', 'nextVertex', ')', ';'])
('is method namestack', True, ['void', 'SetNextVertex', '(', 'const', 'b2Vec2', '&', 'nextVertex', ')', ';'])
________________________________________________________________________________
SetNextVertex
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'nextVertex']
None
________________________________________________________________________________
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('is method namestack', True, ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
________________________________________________________________________________
Clone
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetChildCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetChildCount
Evaluating stack ['void', 'GetChildEdge', '(', 'b2EdgeShape', '*', 'edge', ',', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetChildEdge', '(', 'b2EdgeShape', '*', 'edge', ',', 'int32', 'index', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetChildEdge', '(', 'b2EdgeShape', '*', 'edge', ',', 'int32', 'index', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetChildEdge', '(', 'b2EdgeShape', '*', 'edge', ',', 'int32', 'index', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetChildEdge', '(', 'b2EdgeShape', '*', 'edge', ',', 'int32', 'index', ')', 'const', ';'])
________________________________________________________________________________
GetChildEdge
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2EdgeShape', '*', 'edge']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('is method namestack', True, ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
________________________________________________________________________________
TestPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p']
None
________________________________________________________________________________
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
ComputeAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2AABB', '*', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
________________________________________________________________________________
ComputeMass
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2MassData', '*', 'massData']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', '*', 'm_vertices']
BraceDepth: 1
Evaluating stack ['b2Vec2', '*', 'm_vertices', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', '*', 'm_vertices']
['b2Vec2', '*', 'm_vertices', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_count']
BraceDepth: 1
Evaluating stack ['int32', 'm_count', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_count']
['int32', 'm_count', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_prevVertex', ',', 'm_nextVertex']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_prevVertex', ',', 'm_nextVertex', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_prevVertex', ',', 'm_nextVertex']
['b2Vec2', 'm_prevVertex', ',', 'm_nextVertex', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_hasPrevVertex', ',', 'm_hasNextVertex']
BraceDepth: 1
Evaluating stack ['bool', 'm_hasPrevVertex', ',', 'm_hasNextVertex', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_hasPrevVertex', ',', 'm_hasNextVertex']
['bool', 'm_hasPrevVertex', ',', 'm_hasNextVertex', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2ChainShape', ':', ':', 'b2ChainShape', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2ChainShape', ':', ':', 'b2ChainShape', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2ChainShape', ':', ':', 'b2ChainShape', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2ChainShape', ':', ':', 'b2ChainShape', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2ChainShape', ':', ':', 'b2ChainShape', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2ChainShape::b2ChainShape
Evaluating stack ['m_type', '=', 'e_chain']
BraceDepth: 1
Evaluating stack ['m_type', '=', 'e_chain', ';']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '(', '2', '0f', '*', '0', '005f', ')']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '(', '2', '0f', '*', '0', '005f', ')', ';']
BraceDepth: 1
Evaluating stack ['m_vertices', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['m_vertices', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['m_count', '=', '0']
BraceDepth: 1
Evaluating stack ['m_count', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['m_hasPrevVertex', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['m_hasPrevVertex', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['m_hasNextVertex', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['m_hasNextVertex', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2PolygonShape', ':', 'public', 'b2Shape']
BraceDepth: 1
Evaluating stack ['class', 'b2PolygonShape', ':', 'public', 'b2Shape', '{']
BraceDepth: 1
('NEWCLASS', 'class b2PolygonShape : public b2Shape')
('stack IN', 'class b2PolygonShape : public b2Shape')
('HEAD', ['class', 'b2PolygonShape'])
______________
('TAIL', ['public', 'b2Shape'])
('CLASS OK', 'b2PolygonShape')
('CURACCESS-set', 'public')
Evaluating stack ['b2PolygonShape', '(', ')']
BraceDepth: 1
Evaluating stack ['b2PolygonShape', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2PolygonShape', '(', ')', ';'])
('CLEAN ARRAYS', ['b2PolygonShape', '(', ')', ';'])
('is method namestack', True, ['b2PolygonShape', '(', ')', ';'])
________________________________________________________________________________
b2PolygonShape
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
('is method namestack', True, ['b2Shape', '*', 'Clone', '(', 'b2BlockAllocator', '*', 'allocator', ')', 'const', ';'])
________________________________________________________________________________
Clone
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetChildCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetChildCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetChildCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetChildCount
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ')']
BraceDepth: 1
Evaluating stack ['void', 'Set', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Set', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ')', ';'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ')', ';'])
('is method namestack', True, ['void', 'Set', '(', 'const', 'b2Vec2', '*', 'vertices', ',', 'int32', 'vertexCount', ')', ';'])
________________________________________________________________________________
Set
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '*', 'vertices']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'vertexCount']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ')', ';'])
('is method namestack', True, ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ')', ';'])
________________________________________________________________________________
SetAsBox
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hx']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hy']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ',', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'angle', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ',', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'angle', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ',', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'angle', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ',', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'angle', ')', ';'])
('is method namestack', True, ['void', 'SetAsBox', '(', 'float32', 'hx', ',', 'float32', 'hy', ',', 'const', 'b2Vec2', '&', 'center', ',', 'float32', 'angle', ')', ';'])
________________________________________________________________________________
SetAsBox
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hx']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hy']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'center']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angle']
None
________________________________________________________________________________
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('is method namestack', True, ['bool', 'TestPoint', '(', 'const', 'b2Transform', '&', 'transform', ',', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
________________________________________________________________________________
TestPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p']
None
________________________________________________________________________________
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeAABB', '(', 'b2AABB', '*', 'aabb', ',', 'const', 'b2Transform', '&', 'transform', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
ComputeAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2AABB', '*', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'transform']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
('is method namestack', True, ['void', 'ComputeMass', '(', 'b2MassData', '*', 'massData', ',', 'float32', 'density', ')', 'const', ';'])
________________________________________________________________________________
ComputeMass
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2MassData', '*', 'massData']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetVertexCount', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['int32', 'GetVertexCount', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['int32', 'GetVertexCount', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['int32', 'GetVertexCount', '(', ')', 'const', '{'])
('is method namestack', True, ['int32', 'GetVertexCount', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetVertexCount
Evaluating stack ['return', 'm_vertexCount']
BraceDepth: 2
Evaluating stack ['return', 'm_vertexCount', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
________________________________________________________________________________
GetVertex
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_centroid']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_centroid', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_centroid']
['b2Vec2', 'm_centroid', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_vertices', '[', '8', ']']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_vertices', '[', '8', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_vertices', '[', '8', ']']
['b2Vec2', 'm_vertices', '[', '8', ']', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_normals', '[', '8', ']']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_normals', '[', '8', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_normals', '[', '8', ']']
['b2Vec2', 'm_normals', '[', '8', ']', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_vertexCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_vertexCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_vertexCount']
['int32', 'm_vertexCount', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2PolygonShape', ':', ':', 'b2PolygonShape', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2PolygonShape', ':', ':', 'b2PolygonShape', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2PolygonShape', ':', ':', 'b2PolygonShape', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2PolygonShape', ':', ':', 'b2PolygonShape', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2PolygonShape', ':', ':', 'b2PolygonShape', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2PolygonShape::b2PolygonShape
Evaluating stack ['m_type', '=', 'e_polygon']
BraceDepth: 1
Evaluating stack ['m_type', '=', 'e_polygon', ';']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '(', '2', '0f', '*', '0', '005f', ')']
BraceDepth: 1
Evaluating stack ['m_radius', '=', '(', '2', '0f', '*', '0', '005f', ')', ';']
BraceDepth: 1
Evaluating stack ['m_vertexCount', '=', '0']
BraceDepth: 1
Evaluating stack ['m_vertexCount', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['m_centroid', 'SetZero', '(', ')']
BraceDepth: 1
Evaluating stack ['m_centroid', 'SetZero', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2PolygonShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2PolygonShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2PolygonShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2PolygonShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2PolygonShape', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2PolygonShape::GetVertex
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'm_vertices', '[', 'index', ']']
BraceDepth: 1
Evaluating stack ['return', 'm_vertices', '[', 'index', ']', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', ',', 'int32', 'N', '>', 'class', 'b2GrowableStack']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', ',', 'int32', 'N', '>', 'class', 'b2GrowableStack', '{']
BraceDepth: 1
('NEWCLASS', 'template <typename T , int32 N > class b2GrowableStack')
('stack IN', 'template <typename T , int32 N > class b2GrowableStack')
('HEAD', ['template', '<typename', 'T', ',', 'int32', 'N', '>', 'class', 'b2GrowableStack'])
______________
('TAIL', [])
('CLASS OK', 'b2GrowableStack')
('CURACCESS-set', 'public')
Evaluating stack ['b2GrowableStack', '(', ')']
BraceDepth: 2
Evaluating stack ['b2GrowableStack', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2GrowableStack', '(', ')', '{'])
('CLEAN ARRAYS', ['b2GrowableStack', '(', ')', '{'])
('is method namestack', True, ['b2GrowableStack', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2GrowableStack
Evaluating stack ['m_stack', '=', 'm_array']
BraceDepth: 2
Evaluating stack ['m_stack', '=', 'm_array', ';']
BraceDepth: 2
Evaluating stack ['m_count', '=', '0']
BraceDepth: 2
Evaluating stack ['m_count', '=', '0', ';']
BraceDepth: 2
Evaluating stack ['m_capacity', '=', 'N']
BraceDepth: 2
Evaluating stack ['m_capacity', '=', 'N', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['~b2GrowableStack', '(', ')']
BraceDepth: 2
Evaluating stack ['~b2GrowableStack', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['~b2GrowableStack', '(', ')', '{'])
('CLEAN ARRAYS', ['~b2GrowableStack', '(', ')', '{'])
('is method namestack', True, ['~b2GrowableStack', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2GrowableStack
Evaluating stack ['if', '(', 'm_stack', '=', 'm_array', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'm_stack', '=', 'm_array', ')', '{']
BraceDepth: 3
Evaluating stack ['b2Free', '(', 'm_stack', ')']
BraceDepth: 3
Evaluating stack ['b2Free', '(', 'm_stack', ')', ';']
BraceDepth: 3
Evaluating stack ['m_stack', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 3
Evaluating stack ['m_stack', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}', '}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Push', '(', 'const', 'T', '&', 'element', ')']
BraceDepth: 2
Evaluating stack ['void', 'Push', '(', 'const', 'T', '&', 'element', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Push', '(', 'const', 'T', '&', 'element', ')', '{'])
('CLEAN ARRAYS', ['void', 'Push', '(', 'const', 'T', '&', 'element', ')', '{'])
('is method namestack', True, ['void', 'Push', '(', 'const', 'T', '&', 'element', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Push
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'T', '&', 'element']
None
________________________________________________________________________________
Evaluating stack ['if', '(', 'm_count', '=', '=', 'm_capacity', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'm_count', '=', '=', 'm_capacity', ')', '{']
BraceDepth: 3
Evaluating stack ['T', '*', 'old', '=', 'm_stack']
BraceDepth: 3
Evaluating stack ['T', '*', 'old', '=', 'm_stack', ';']
BraceDepth: 3
Evaluating stack ['m_capacity', '*', '=', '2']
BraceDepth: 3
Evaluating stack ['m_capacity', '*', '=', '2', ';']
BraceDepth: 3
Evaluating stack ['m_stack', '=', '(', 'T', '*', ')', 'b2Alloc', '(', 'm_capacity', '*', 'sizeof', '(', 'T', ')', ')']
BraceDepth: 3
Evaluating stack ['m_stack', '=', '(', 'T', '*', ')', 'b2Alloc', '(', 'm_capacity', '*', 'sizeof', '(', 'T', ')', ')', ';']
BraceDepth: 3
Evaluating stack ['std', ':', ':', 'memcpy', '(', 'm_stack', ',', 'old', ',', 'm_count', '*', 'sizeof', '(', 'T', ')', ')']
BraceDepth: 3
Evaluating stack ['std', ':', ':', 'memcpy', '(', 'm_stack', ',', 'old', ',', 'm_count', '*', 'sizeof', '(', 'T', ')', ')', ';']
BraceDepth: 3
Evaluating stack ['if', '(', 'old', '=', 'm_array', ')']
BraceDepth: 4
Evaluating stack ['if', '(', 'old', '=', 'm_array', ')', '{']
BraceDepth: 4
Evaluating stack ['b2Free', '(', 'old', ')']
BraceDepth: 4
Evaluating stack ['b2Free', '(', 'old', ')', ';']
BraceDepth: 4
Evaluating stack []
BraceDepth: 4
Evaluating stack ['}']
BraceDepth: 4
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}', '}']
BraceDepth: 3
Evaluating stack ['m_stack', '[', 'm_count', ']', '=', 'element']
BraceDepth: 2
Evaluating stack ['}', '}', 'm_stack', '[', 'm_count', ']', '=', 'element', ';']
BraceDepth: 2
Evaluating stack ['+', '+', 'm_count']
BraceDepth: 2
Evaluating stack ['+', '+', 'm_count', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['T', 'Pop', '(', ')']
BraceDepth: 2
Evaluating stack ['T', 'Pop', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['T', 'Pop', '(', ')', '{'])
('CLEAN ARRAYS', ['T', 'Pop', '(', ')', '{'])
('is method namestack', True, ['T', 'Pop', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Pop
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['-', '-', 'm_count']
BraceDepth: 2
Evaluating stack ['-', '-', 'm_count', ';']
BraceDepth: 2
Evaluating stack ['return', 'm_stack', '[', 'm_count', ']']
BraceDepth: 2
Evaluating stack ['return', 'm_stack', '[', 'm_count', ']', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['int32', 'GetCount', '(', ')']
BraceDepth: 2
Evaluating stack ['int32', 'GetCount', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['int32', 'GetCount', '(', ')', '{'])
('CLEAN ARRAYS', ['int32', 'GetCount', '(', ')', '{'])
('is method namestack', True, ['int32', 'GetCount', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetCount
Evaluating stack ['return', 'm_count']
BraceDepth: 2
Evaluating stack ['return', 'm_count', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
('CURACCESS-set', 'private')
Evaluating stack ['T', '*', 'm_stack']
BraceDepth: 1
Evaluating stack ['T', '*', 'm_stack', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '*', 'm_stack']
['T', '*', 'm_stack', ';']
________________________________________________________________________________
Evaluating stack ['T', 'm_array', '[', 'N', ']']
BraceDepth: 1
Evaluating stack ['T', 'm_array', '[', 'N', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', 'm_array', '[', 'N', ']']
['T', 'm_array', '[', 'N', ']', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_count']
BraceDepth: 1
Evaluating stack ['int32', 'm_count', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_count']
['int32', 'm_count', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_capacity']
BraceDepth: 1
Evaluating stack ['int32', 'm_capacity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_capacity']
['int32', 'm_capacity', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2TreeNode']
BraceDepth: 1
Evaluating stack ['struct', 'b2TreeNode', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['bool', 'IsLeaf', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['bool', 'IsLeaf', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'IsLeaf', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['bool', 'IsLeaf', '(', ')', 'const', '{'])
('is method namestack', True, ['bool', 'IsLeaf', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
IsLeaf
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'IsLeaf', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool IsLeaf ( ) const {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['return', 'child1', '=', '=', '(', '-', '1', ')']
BraceDepth: 2
Evaluating stack ['return', 'child1', '=', '=', '(', '-', '1', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2AABB', 'aabb']
BraceDepth: 1
Evaluating stack ['b2AABB', 'aabb', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2AABB', 'aabb']
['b2AABB', 'aabb', ';']
________________________________________________________________________________
Evaluating stack ['void', '*', 'userData']
BraceDepth: 1
Evaluating stack ['void', '*', 'userData', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'userData']
['void', '*', 'userData', ';']
________________________________________________________________________________
Evaluating stack ['union']
BraceDepth: 2
Evaluating stack ['union', '{']
BraceDepth: 2
Evaluating stack ['int32', 'parent']
BraceDepth: 2
Evaluating stack ['union', '{', 'int32', 'parent', ';']
BraceDepth: 2
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'parent']
['union', '{', 'int32', 'parent', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'next']
BraceDepth: 2
Evaluating stack ['int32', 'next', ';']
BraceDepth: 2
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'next']
['int32', 'next', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', ';']
BraceDepth: 1
Evaluating stack ['int32', 'child1']
BraceDepth: 1
Evaluating stack ['int32', 'child1', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'child1']
['int32', 'child1', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'child2']
BraceDepth: 1
Evaluating stack ['int32', 'child2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'child2']
['int32', 'child2', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'height']
BraceDepth: 1
Evaluating stack ['int32', 'height', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'height']
['int32', 'height', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2DynamicTree']
BraceDepth: 1
Evaluating stack ['class', 'b2DynamicTree', '{']
BraceDepth: 1
('NEWCLASS', 'class b2DynamicTree')
('stack IN', 'class b2DynamicTree')
('HEAD', ['class', 'b2DynamicTree'])
______________
('TAIL', [])
('CLASS OK', 'b2DynamicTree')
('CURACCESS-set', 'public')
Evaluating stack ['b2DynamicTree', '(', ')']
BraceDepth: 1
Evaluating stack ['b2DynamicTree', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2DynamicTree', '(', ')', ';'])
('CLEAN ARRAYS', ['b2DynamicTree', '(', ')', ';'])
('is method namestack', True, ['b2DynamicTree', '(', ')', ';'])
________________________________________________________________________________
b2DynamicTree
Evaluating stack ['~b2DynamicTree', '(', ')']
BraceDepth: 1
Evaluating stack ['~b2DynamicTree', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['~b2DynamicTree', '(', ')', ';'])
('CLEAN ARRAYS', ['~b2DynamicTree', '(', ')', ';'])
('is method namestack', True, ['~b2DynamicTree', '(', ')', ';'])
________________________________________________________________________________
~b2DynamicTree
Evaluating stack ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')']
BraceDepth: 1
Evaluating stack ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';'])
('CLEAN ARRAYS', ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';'])
('is method namestack', True, ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';'])
________________________________________________________________________________
CreateProxy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'userData']
None
________________________________________________________________________________
Evaluating stack ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';'])
('CLEAN ARRAYS', ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';'])
('is method namestack', True, ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';'])
________________________________________________________________________________
DestroyProxy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['bool', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2Vec2', '&', 'displacement', ')']
BraceDepth: 1
Evaluating stack ['bool', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';'])
('CLEAN ARRAYS', ['bool', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';'])
('is method namestack', True, ['bool', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb1', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';'])
________________________________________________________________________________
MoveProxy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'displacement']
None
________________________________________________________________________________
Evaluating stack ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';'])
('is method namestack', True, ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';'])
________________________________________________________________________________
GetUserData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';'])
________________________________________________________________________________
GetFatAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
________________________________________________________________________________
Query
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '*', 'callback']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '*', 'callback']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
Evaluating stack ['void', 'Validate', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'Validate', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Validate', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'Validate', '(', ')', 'const', ';'])
('is method namestack', True, ['void', 'Validate', '(', ')', 'const', ';'])
________________________________________________________________________________
Validate
Evaluating stack ['int32', 'GetHeight', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetHeight', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetHeight', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetHeight', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetHeight', '(', ')', 'const', ';'])
________________________________________________________________________________
GetHeight
Evaluating stack ['int32', 'GetMaxBalance', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetMaxBalance', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetMaxBalance', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetMaxBalance', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetMaxBalance', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMaxBalance
Evaluating stack ['float32', 'GetAreaRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetAreaRatio', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetAreaRatio', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetAreaRatio', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetAreaRatio', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAreaRatio
Evaluating stack ['void', 'RebuildBottomUp', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'RebuildBottomUp', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'RebuildBottomUp', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'RebuildBottomUp', '(', ')', ';'])
('is method namestack', True, ['void', 'RebuildBottomUp', '(', ')', ';'])
________________________________________________________________________________
RebuildBottomUp
('CURACCESS-set', 'private')
Evaluating stack ['int32', 'AllocateNode', '(', ')']
BraceDepth: 1
Evaluating stack ['int32', 'AllocateNode', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'AllocateNode', '(', ')', ';'])
('CLEAN ARRAYS', ['int32', 'AllocateNode', '(', ')', ';'])
('is method namestack', True, ['int32', 'AllocateNode', '(', ')', ';'])
________________________________________________________________________________
AllocateNode
Evaluating stack ['void', 'FreeNode', '(', 'int32', 'node', ')']
BraceDepth: 1
Evaluating stack ['void', 'FreeNode', '(', 'int32', 'node', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'FreeNode', '(', 'int32', 'node', ')', ';'])
('CLEAN ARRAYS', ['void', 'FreeNode', '(', 'int32', 'node', ')', ';'])
('is method namestack', True, ['void', 'FreeNode', '(', 'int32', 'node', ')', ';'])
________________________________________________________________________________
FreeNode
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'node']
None
________________________________________________________________________________
Evaluating stack ['void', 'InsertLeaf', '(', 'int32', 'node', ')']
BraceDepth: 1
Evaluating stack ['void', 'InsertLeaf', '(', 'int32', 'node', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InsertLeaf', '(', 'int32', 'node', ')', ';'])
('CLEAN ARRAYS', ['void', 'InsertLeaf', '(', 'int32', 'node', ')', ';'])
('is method namestack', True, ['void', 'InsertLeaf', '(', 'int32', 'node', ')', ';'])
________________________________________________________________________________
InsertLeaf
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'node']
None
________________________________________________________________________________
Evaluating stack ['void', 'RemoveLeaf', '(', 'int32', 'node', ')']
BraceDepth: 1
Evaluating stack ['void', 'RemoveLeaf', '(', 'int32', 'node', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'RemoveLeaf', '(', 'int32', 'node', ')', ';'])
('CLEAN ARRAYS', ['void', 'RemoveLeaf', '(', 'int32', 'node', ')', ';'])
('is method namestack', True, ['void', 'RemoveLeaf', '(', 'int32', 'node', ')', ';'])
________________________________________________________________________________
RemoveLeaf
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'node']
None
________________________________________________________________________________
Evaluating stack ['int32', 'Balance', '(', 'int32', 'index', ')']
BraceDepth: 1
Evaluating stack ['int32', 'Balance', '(', 'int32', 'index', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'Balance', '(', 'int32', 'index', ')', ';'])
('CLEAN ARRAYS', ['int32', 'Balance', '(', 'int32', 'index', ')', ';'])
('is method namestack', True, ['int32', 'Balance', '(', 'int32', 'index', ')', ';'])
________________________________________________________________________________
Balance
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['int32', 'ComputeHeight', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'ComputeHeight', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'ComputeHeight', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'ComputeHeight', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'ComputeHeight', '(', ')', 'const', ';'])
________________________________________________________________________________
ComputeHeight
Evaluating stack ['int32', 'ComputeHeight', '(', 'int32', 'nodeId', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'ComputeHeight', '(', 'int32', 'nodeId', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'ComputeHeight', '(', 'int32', 'nodeId', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'ComputeHeight', '(', 'int32', 'nodeId', ')', 'const', ';'])
('is method namestack', True, ['int32', 'ComputeHeight', '(', 'int32', 'nodeId', ')', 'const', ';'])
________________________________________________________________________________
ComputeHeight
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'nodeId']
None
________________________________________________________________________________
Evaluating stack ['void', 'ValidateStructure', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ValidateStructure', '(', 'int32', 'index', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ValidateStructure', '(', 'int32', 'index', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ValidateStructure', '(', 'int32', 'index', ')', 'const', ';'])
('is method namestack', True, ['void', 'ValidateStructure', '(', 'int32', 'index', ')', 'const', ';'])
________________________________________________________________________________
ValidateStructure
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['void', 'ValidateMetrics', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'ValidateMetrics', '(', 'int32', 'index', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ValidateMetrics', '(', 'int32', 'index', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'ValidateMetrics', '(', 'int32', 'index', ')', 'const', ';'])
('is method namestack', True, ['void', 'ValidateMetrics', '(', 'int32', 'index', ')', 'const', ';'])
________________________________________________________________________________
ValidateMetrics
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['int32', 'm_root']
BraceDepth: 1
Evaluating stack ['int32', 'm_root', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_root']
['int32', 'm_root', ';']
________________________________________________________________________________
Evaluating stack ['b2TreeNode', '*', 'm_nodes']
BraceDepth: 1
Evaluating stack ['b2TreeNode', '*', 'm_nodes', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2TreeNode', '*', 'm_nodes']
['b2TreeNode', '*', 'm_nodes', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_nodeCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_nodeCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_nodeCount']
['int32', 'm_nodeCount', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_nodeCapacity']
BraceDepth: 1
Evaluating stack ['int32', 'm_nodeCapacity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_nodeCapacity']
['int32', 'm_nodeCapacity', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_freeList']
BraceDepth: 1
Evaluating stack ['int32', 'm_freeList', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_freeList']
['int32', 'm_freeList', ';']
________________________________________________________________________________
Evaluating stack ['uint32', 'm_path']
BraceDepth: 1
Evaluating stack ['uint32', 'm_path', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'm_path']
['uint32', 'm_path', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_insertionCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_insertionCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_insertionCount']
['int32', 'm_insertionCount', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'void', '*', 'b2DynamicTree', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', '*', 'b2DynamicTree', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', '*', 'b2DynamicTree', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', '*', 'b2DynamicTree', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', '*', 'b2DynamicTree', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DynamicTree::GetUserData
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'm_nodes', '[', 'proxyId', ']', 'userData']
BraceDepth: 1
Evaluating stack ['return', 'm_nodes', '[', 'proxyId', ']', 'userData', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2AABB', '&', 'b2DynamicTree', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2AABB', '&', 'b2DynamicTree', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2AABB', '&', 'b2DynamicTree', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2AABB', '&', 'b2DynamicTree', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2AABB', '&', 'b2DynamicTree', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DynamicTree::GetFatAABB
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'm_nodes', '[', 'proxyId', ']', 'aabb']
BraceDepth: 1
Evaluating stack ['return', 'm_nodes', '[', 'proxyId', ']', 'aabb', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2DynamicTree', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2DynamicTree', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2DynamicTree', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2DynamicTree', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'void', 'b2DynamicTree', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DynamicTree::Query
Evaluating stack ['b2GrowableStack', '<int32', ',', '256', '>', 'stack']
BraceDepth: 1
Evaluating stack ['b2GrowableStack', '<int32', ',', '256', '>', 'stack', ';']
BraceDepth: 1
Evaluating stack ['stack', 'Push', '(', 'm_root', ')']
BraceDepth: 1
Evaluating stack ['stack', 'Push', '(', 'm_root', ')', ';']
BraceDepth: 1
Evaluating stack ['while', '(', 'stack', 'GetCount', '(', ')', '>', '0', ')']
BraceDepth: 2
Evaluating stack ['while', '(', 'stack', 'GetCount', '(', ')', '>', '0', ')', '{']
BraceDepth: 2
Evaluating stack ['int32', 'nodeId', '=', 'stack', 'Pop', '(', ')']
BraceDepth: 2
Evaluating stack ['int32', 'nodeId', '=', 'stack', 'Pop', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'nodeId', '=', '=', '(', '-', '1', ')', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'nodeId', '=', '=', '(', '-', '1', ')', ')', '{']
BraceDepth: 3
Evaluating stack ['continue']
BraceDepth: 3
Evaluating stack ['continue', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['const', 'b2TreeNode', '*', 'node', '=', 'm_nodes', '+', 'nodeId']
BraceDepth: 2
Evaluating stack ['}', 'const', 'b2TreeNode', '*', 'node', '=', 'm_nodes', '+', 'nodeId', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'b2TestOverlap', '(', 'node', '-', '>aabb', ',', 'aabb', ')', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'b2TestOverlap', '(', 'node', '-', '>aabb', ',', 'aabb', ')', ')', '{']
BraceDepth: 3
Evaluating stack ['if', '(', 'node', '-', '>IsLeaf', '(', ')', ')']
BraceDepth: 4
Evaluating stack ['if', '(', 'node', '-', '>IsLeaf', '(', ')', ')', '{']
BraceDepth: 4
Evaluating stack ['bool', 'proceed', '=', 'callback', '-', '>QueryCallback', '(', 'nodeId', ')']
BraceDepth: 4
Evaluating stack ['bool', 'proceed', '=', 'callback', '-', '>QueryCallback', '(', 'nodeId', ')', ';']
BraceDepth: 4
Evaluating stack ['if', '(', 'proceed', '=', '=', 'false', ')']
BraceDepth: 5
Evaluating stack ['if', '(', 'proceed', '=', '=', 'false', ')', '{']
BraceDepth: 5
Evaluating stack ['return']
BraceDepth: 5
Evaluating stack ['return', ';']
BraceDepth: 5
Evaluating stack []
BraceDepth: 5
Evaluating stack ['}']
BraceDepth: 5
Evaluating stack []
BraceDepth: 4
Evaluating stack ['}', '}']
BraceDepth: 4
Evaluating stack ['else']
BraceDepth: 4
Evaluating stack ['}', '}', 'else', '{']
BraceDepth: 4
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child1', ')']
BraceDepth: 4
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child1', ')', ';']
BraceDepth: 4
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child2', ')']
BraceDepth: 4
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child2', ')', ';']
BraceDepth: 4
Evaluating stack []
BraceDepth: 4
Evaluating stack ['}']
BraceDepth: 4
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}', '}']
BraceDepth: 3
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}', '}', '}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}', '}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2DynamicTree', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2DynamicTree', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2DynamicTree', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2DynamicTree', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'void', 'b2DynamicTree', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DynamicTree::RayCast
Evaluating stack ['b2Vec2', 'p1', '=', 'input', 'p1']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'p1', '=', 'input', 'p1', ';']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'p2', '=', 'input', 'p2']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'p2', '=', 'input', 'p2', ';']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'r', '=', 'p2', '-', 'p1']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'r', '=', 'p2', '-', 'p1', ';']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['r', 'Normalize', '(', ')']
BraceDepth: 1
Evaluating stack ['r', 'Normalize', '(', ')', ';']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'v', '=', 'b2Cross', '(', '1', '0f', ',', 'r', ')']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'v', '=', 'b2Cross', '(', '1', '0f', ',', 'r', ')', ';']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'abs_v', '=', 'b2Abs', '(', 'v', ')']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'abs_v', '=', 'b2Abs', '(', 'v', ')', ';']
BraceDepth: 1
Evaluating stack ['float32', 'maxFraction', '=', 'input', 'maxFraction']
BraceDepth: 1
Evaluating stack ['float32', 'maxFraction', '=', 'input', 'maxFraction', ';']
BraceDepth: 1
Evaluating stack ['b2AABB', 'segmentAABB']
BraceDepth: 1
Evaluating stack ['b2AABB', 'segmentAABB', ';']
BraceDepth: 1
Evaluating stack ['{', 'b2Vec2', 't', '=', 'p1', '+', 'maxFraction', '*', '(', 'p2', '-', 'p1', ')']
BraceDepth: 2
Evaluating stack ['{', 'b2Vec2', 't', '=', 'p1', '+', 'maxFraction', '*', '(', 'p2', '-', 'p1', ')', ';']
BraceDepth: 2
Evaluating stack ['segmentAABB', 'lowerBound', '=', 'b2Min', '(', 'p1', ',', 't', ')']
BraceDepth: 2
Evaluating stack ['segmentAABB', 'lowerBound', '=', 'b2Min', '(', 'p1', ',', 't', ')', ';']
BraceDepth: 2
Evaluating stack ['segmentAABB', 'upperBound', '=', 'b2Max', '(', 'p1', ',', 't', ')']
BraceDepth: 2
Evaluating stack ['segmentAABB', 'upperBound', '=', 'b2Max', '(', 'p1', ',', 't', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['b2GrowableStack', '<int32', ',', '256', '>', 'stack']
BraceDepth: 1
Evaluating stack ['}', 'b2GrowableStack', '<int32', ',', '256', '>', 'stack', ';']
BraceDepth: 1
Evaluating stack ['stack', 'Push', '(', 'm_root', ')']
BraceDepth: 1
Evaluating stack ['stack', 'Push', '(', 'm_root', ')', ';']
BraceDepth: 1
Evaluating stack ['while', '(', 'stack', 'GetCount', '(', ')', '>', '0', ')']
BraceDepth: 2
Evaluating stack ['while', '(', 'stack', 'GetCount', '(', ')', '>', '0', ')', '{']
BraceDepth: 2
Evaluating stack ['int32', 'nodeId', '=', 'stack', 'Pop', '(', ')']
BraceDepth: 2
Evaluating stack ['int32', 'nodeId', '=', 'stack', 'Pop', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'nodeId', '=', '=', '(', '-', '1', ')', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'nodeId', '=', '=', '(', '-', '1', ')', ')', '{']
BraceDepth: 3
Evaluating stack ['continue']
BraceDepth: 3
Evaluating stack ['continue', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['const', 'b2TreeNode', '*', 'node', '=', 'm_nodes', '+', 'nodeId']
BraceDepth: 2
Evaluating stack ['}', 'const', 'b2TreeNode', '*', 'node', '=', 'm_nodes', '+', 'nodeId', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'b2TestOverlap', '(', 'node', '-', '>aabb', ',', 'segmentAABB', ')', '=', '=', 'false', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'b2TestOverlap', '(', 'node', '-', '>aabb', ',', 'segmentAABB', ')', '=', '=', 'false', ')', '{']
BraceDepth: 3
Evaluating stack ['continue']
BraceDepth: 3
Evaluating stack ['continue', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['b2Vec2', 'c', '=', 'node', '-', '>aabb', 'GetCenter', '(', ')']
BraceDepth: 2
Evaluating stack ['}', 'b2Vec2', 'c', '=', 'node', '-', '>aabb', 'GetCenter', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'h', '=', 'node', '-', '>aabb', 'GetExtents', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Vec2', 'h', '=', 'node', '-', '>aabb', 'GetExtents', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['float32', 'separation', '=', 'b2Abs', '(', 'b2Dot', '(', 'v', ',', 'p1', '-', 'c', ')', ')', '-', 'b2Dot', '(', 'abs_v', ',', 'h', ')']
BraceDepth: 2
Evaluating stack ['float32', 'separation', '=', 'b2Abs', '(', 'b2Dot', '(', 'v', ',', 'p1', '-', 'c', ')', ')', '-', 'b2Dot', '(', 'abs_v', ',', 'h', ')', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'separation', '>', '0', '0f', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'separation', '>', '0', '0f', ')', '{']
BraceDepth: 3
Evaluating stack ['continue']
BraceDepth: 3
Evaluating stack ['continue', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['if', '(', 'node', '-', '>IsLeaf', '(', ')', ')']
BraceDepth: 3
Evaluating stack ['}', 'if', '(', 'node', '-', '>IsLeaf', '(', ')', ')', '{']
BraceDepth: 3
Evaluating stack ['b2RayCastInput', 'subInput']
BraceDepth: 3
Evaluating stack ['b2RayCastInput', 'subInput', ';']
BraceDepth: 3
Evaluating stack ['subInput', 'p1', '=', 'input', 'p1']
BraceDepth: 3
Evaluating stack ['subInput', 'p1', '=', 'input', 'p1', ';']
BraceDepth: 3
Evaluating stack ['subInput', 'p2', '=', 'input', 'p2']
BraceDepth: 3
Evaluating stack ['subInput', 'p2', '=', 'input', 'p2', ';']
BraceDepth: 3
Evaluating stack ['subInput', 'maxFraction', '=', 'maxFraction']
BraceDepth: 3
Evaluating stack ['subInput', 'maxFraction', '=', 'maxFraction', ';']
BraceDepth: 3
Evaluating stack ['float32', 'value', '=', 'callback', '-', '>RayCastCallback', '(', 'subInput', ',', 'nodeId', ')']
BraceDepth: 3
Evaluating stack ['float32', 'value', '=', 'callback', '-', '>RayCastCallback', '(', 'subInput', ',', 'nodeId', ')', ';']
BraceDepth: 3
Evaluating stack ['if', '(', 'value', '=', '=', '0', '0f', ')']
BraceDepth: 4
Evaluating stack ['if', '(', 'value', '=', '=', '0', '0f', ')', '{']
BraceDepth: 4
Evaluating stack ['return']
BraceDepth: 4
Evaluating stack ['return', ';']
BraceDepth: 4
Evaluating stack []
BraceDepth: 4
Evaluating stack ['}']
BraceDepth: 4
Evaluating stack ['if', '(', 'value', '>', '0', '0f', ')']
BraceDepth: 4
Evaluating stack ['}', 'if', '(', 'value', '>', '0', '0f', ')', '{']
BraceDepth: 4
Evaluating stack ['maxFraction', '=', 'value']
BraceDepth: 4
Evaluating stack ['maxFraction', '=', 'value', ';']
BraceDepth: 4
Evaluating stack ['b2Vec2', 't', '=', 'p1', '+', 'maxFraction', '*', '(', 'p2', '-', 'p1', ')']
BraceDepth: 4
Evaluating stack ['b2Vec2', 't', '=', 'p1', '+', 'maxFraction', '*', '(', 'p2', '-', 'p1', ')', ';']
BraceDepth: 4
Evaluating stack ['segmentAABB', 'lowerBound', '=', 'b2Min', '(', 'p1', ',', 't', ')']
BraceDepth: 4
Evaluating stack ['segmentAABB', 'lowerBound', '=', 'b2Min', '(', 'p1', ',', 't', ')', ';']
BraceDepth: 4
Evaluating stack ['segmentAABB', 'upperBound', '=', 'b2Max', '(', 'p1', ',', 't', ')']
BraceDepth: 4
Evaluating stack ['segmentAABB', 'upperBound', '=', 'b2Max', '(', 'p1', ',', 't', ')', ';']
BraceDepth: 4
Evaluating stack []
BraceDepth: 4
Evaluating stack ['}']
BraceDepth: 4
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}', '}']
BraceDepth: 3
Evaluating stack ['else']
BraceDepth: 3
Evaluating stack ['}', '}', 'else', '{']
BraceDepth: 3
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child1', ')']
BraceDepth: 3
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child1', ')', ';']
BraceDepth: 3
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child2', ')']
BraceDepth: 3
Evaluating stack ['stack', 'Push', '(', 'node', '-', '>child2', ')', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}', '}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2Pair']
BraceDepth: 1
Evaluating stack ['struct', 'b2Pair', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['int32', 'proxyIdA']
BraceDepth: 1
Evaluating stack ['int32', 'proxyIdA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyIdA']
['int32', 'proxyIdA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'proxyIdB']
BraceDepth: 1
Evaluating stack ['int32', 'proxyIdB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyIdB']
['int32', 'proxyIdB', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'next']
BraceDepth: 1
Evaluating stack ['int32', 'next', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'next']
['int32', 'next', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2BroadPhase']
BraceDepth: 1
Evaluating stack ['class', 'b2BroadPhase', '{']
BraceDepth: 1
('NEWCLASS', 'class b2BroadPhase')
('stack IN', 'class b2BroadPhase')
('HEAD', ['class', 'b2BroadPhase'])
______________
('TAIL', [])
('CLASS OK', 'b2BroadPhase')
('CURACCESS-set', 'public')
Evaluating stack ['enum', '{', 'e_nullProxy', '=', '-', '1', '}']
BraceDepth: 1
Evaluating stack ['enum', '{', 'e_nullProxy', '=', '-', '1', '}', ';']
BraceDepth: 1
('WARN-enum: nameless enum', ['enum', '{', 'e_nullProxy', '=', '-', '1', '}'])
Evaluating stack ['b2BroadPhase', '(', ')']
BraceDepth: 1
Evaluating stack ['b2BroadPhase', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2BroadPhase', '(', ')', ';'])
('CLEAN ARRAYS', ['b2BroadPhase', '(', ')', ';'])
('is method namestack', True, ['b2BroadPhase', '(', ')', ';'])
________________________________________________________________________________
b2BroadPhase
Evaluating stack ['~b2BroadPhase', '(', ')']
BraceDepth: 1
Evaluating stack ['~b2BroadPhase', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['~b2BroadPhase', '(', ')', ';'])
('CLEAN ARRAYS', ['~b2BroadPhase', '(', ')', ';'])
('is method namestack', True, ['~b2BroadPhase', '(', ')', ';'])
________________________________________________________________________________
~b2BroadPhase
Evaluating stack ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')']
BraceDepth: 1
Evaluating stack ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';'])
('CLEAN ARRAYS', ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';'])
('is method namestack', True, ['int32', 'CreateProxy', '(', 'const', 'b2AABB', '&', 'aabb', ',', 'void', '*', 'userData', ')', ';'])
________________________________________________________________________________
CreateProxy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'userData']
None
________________________________________________________________________________
Evaluating stack ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';'])
('CLEAN ARRAYS', ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';'])
('is method namestack', True, ['void', 'DestroyProxy', '(', 'int32', 'proxyId', ')', ';'])
________________________________________________________________________________
DestroyProxy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['void', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb', ',', 'const', 'b2Vec2', '&', 'displacement', ')']
BraceDepth: 1
Evaluating stack ['void', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';'])
('CLEAN ARRAYS', ['void', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';'])
('is method namestack', True, ['void', 'MoveProxy', '(', 'int32', 'proxyId', ',', 'const', 'b2AABB', '&', 'aabb', ',', 'const', 'b2Vec2', '&', 'displacement', ')', ';'])
________________________________________________________________________________
MoveProxy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'displacement']
None
________________________________________________________________________________
Evaluating stack ['void', 'TouchProxy', '(', 'int32', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['void', 'TouchProxy', '(', 'int32', 'proxyId', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'TouchProxy', '(', 'int32', 'proxyId', ')', ';'])
('CLEAN ARRAYS', ['void', 'TouchProxy', '(', 'int32', 'proxyId', ')', ';'])
('is method namestack', True, ['void', 'TouchProxy', '(', 'int32', 'proxyId', ')', ';'])
________________________________________________________________________________
TouchProxy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2AABB', '&', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', ';'])
________________________________________________________________________________
GetFatAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';'])
('is method namestack', True, ['void', '*', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', ';'])
________________________________________________________________________________
GetUserData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['bool', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', ';'])
('is method namestack', True, ['bool', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', ';'])
________________________________________________________________________________
TestOverlap
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyIdA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyIdB']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetProxyCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetProxyCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetProxyCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetProxyCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetProxyCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetProxyCount
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'UpdatePairs', '(', 'T', '*', 'callback', ')']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'UpdatePairs', '(', 'T', '*', 'callback', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'UpdatePairs', '(', 'T', '*', 'callback', ')', ';'])
('CLEAN ARRAYS', ['void', 'UpdatePairs', '(', 'T', '*', 'callback', ')', ';'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'void', 'UpdatePairs', '(', 'T', '*', 'callback', ')', ';'])
________________________________________________________________________________
UpdatePairs
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '*', 'callback']
None
________________________________________________________________________________
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'void', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
________________________________________________________________________________
Query
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '*', 'callback']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'void', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['T', '*', 'callback']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetTreeHeight', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetTreeHeight', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetTreeHeight', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetTreeHeight', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetTreeHeight', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTreeHeight
Evaluating stack ['int32', 'GetTreeBalance', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetTreeBalance', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetTreeBalance', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetTreeBalance', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetTreeBalance', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTreeBalance
Evaluating stack ['float32', 'GetTreeQuality', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetTreeQuality', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetTreeQuality', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetTreeQuality', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetTreeQuality', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTreeQuality
('CURACCESS-set', 'private')
Evaluating stack ['friend', 'class', 'b2DynamicTree']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2DynamicTree', ';']
BraceDepth: 1
Evaluating stack ['void', 'BufferMove', '(', 'int32', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['void', 'BufferMove', '(', 'int32', 'proxyId', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'BufferMove', '(', 'int32', 'proxyId', ')', ';'])
('CLEAN ARRAYS', ['void', 'BufferMove', '(', 'int32', 'proxyId', ')', ';'])
('is method namestack', True, ['void', 'BufferMove', '(', 'int32', 'proxyId', ')', ';'])
________________________________________________________________________________
BufferMove
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['void', 'UnBufferMove', '(', 'int32', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['void', 'UnBufferMove', '(', 'int32', 'proxyId', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'UnBufferMove', '(', 'int32', 'proxyId', ')', ';'])
('CLEAN ARRAYS', ['void', 'UnBufferMove', '(', 'int32', 'proxyId', ')', ';'])
('is method namestack', True, ['void', 'UnBufferMove', '(', 'int32', 'proxyId', ')', ';'])
________________________________________________________________________________
UnBufferMove
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['bool', 'QueryCallback', '(', 'int32', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['bool', 'QueryCallback', '(', 'int32', 'proxyId', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'QueryCallback', '(', 'int32', 'proxyId', ')', ';'])
('CLEAN ARRAYS', ['bool', 'QueryCallback', '(', 'int32', 'proxyId', ')', ';'])
('is method namestack', True, ['bool', 'QueryCallback', '(', 'int32', 'proxyId', ')', ';'])
________________________________________________________________________________
QueryCallback
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
None
________________________________________________________________________________
Evaluating stack ['b2DynamicTree', 'm_tree']
BraceDepth: 1
Evaluating stack ['b2DynamicTree', 'm_tree', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DynamicTree', 'm_tree']
['b2DynamicTree', 'm_tree', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_proxyCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_proxyCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_proxyCount']
['int32', 'm_proxyCount', ';']
________________________________________________________________________________
Evaluating stack ['int32', '*', 'm_moveBuffer']
BraceDepth: 1
Evaluating stack ['int32', '*', 'm_moveBuffer', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', '*', 'm_moveBuffer']
['int32', '*', 'm_moveBuffer', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_moveCapacity']
BraceDepth: 1
Evaluating stack ['int32', 'm_moveCapacity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_moveCapacity']
['int32', 'm_moveCapacity', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_moveCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_moveCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_moveCount']
['int32', 'm_moveCount', ';']
________________________________________________________________________________
Evaluating stack ['b2Pair', '*', 'm_pairBuffer']
BraceDepth: 1
Evaluating stack ['b2Pair', '*', 'm_pairBuffer', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Pair', '*', 'm_pairBuffer']
['b2Pair', '*', 'm_pairBuffer', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_pairCapacity']
BraceDepth: 1
Evaluating stack ['int32', 'm_pairCapacity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_pairCapacity']
['int32', 'm_pairCapacity', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_pairCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_pairCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_pairCount']
['int32', 'm_pairCount', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_queryProxyId']
BraceDepth: 1
Evaluating stack ['int32', 'm_queryProxyId', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_queryProxyId']
['int32', 'm_queryProxyId', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'bool', 'b2PairLessThan', '(', 'const', 'b2Pair', '&', 'pair1', ',', 'const', 'b2Pair', '&', 'pair2', ')']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2PairLessThan', '(', 'const', 'b2Pair', '&', 'pair1', ',', 'const', 'b2Pair', '&', 'pair2', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2PairLessThan', '(', 'const', 'b2Pair', '&', 'pair1', ',', 'const', 'b2Pair', '&', 'pair2', ')', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2PairLessThan', '(', 'const', 'b2Pair', '&', 'pair1', ',', 'const', 'b2Pair', '&', 'pair2', ')', '{'])
('is method namestack', True, ['inline', 'bool', 'b2PairLessThan', '(', 'const', 'b2Pair', '&', 'pair1', ',', 'const', 'b2Pair', '&', 'pair2', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2PairLessThan
('free function:', ['inline', 'bool', 'b2PairLessThan', '(', 'const', 'b2Pair', '&', 'pair1', ',', 'const', 'b2Pair', '&', 'pair2', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Pair', '&', 'pair1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Pair', '&', 'pair2']
None
________________________________________________________________________________
Evaluating stack ['if', '(', 'pair1', 'proxyIdA', '<', 'pair2', 'proxyIdA', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'pair1', 'proxyIdA', '<', 'pair2', 'proxyIdA', ')', '{']
BraceDepth: 2
Evaluating stack ['return', 'true']
BraceDepth: 2
Evaluating stack ['return', 'true', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'pair1', 'proxyIdA', '=', '=', 'pair2', 'proxyIdA', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'pair1', 'proxyIdA', '=', '=', 'pair2', 'proxyIdA', ')', '{']
BraceDepth: 2
Evaluating stack ['return', 'pair1', 'proxyIdB', '<', 'pair2', 'proxyIdB']
BraceDepth: 2
Evaluating stack ['return', 'pair1', 'proxyIdB', '<', 'pair2', 'proxyIdB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['return', 'false']
BraceDepth: 1
Evaluating stack ['}', 'return', 'false', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', '*', 'b2BroadPhase', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', '*', 'b2BroadPhase', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', '*', 'b2BroadPhase', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', '*', 'b2BroadPhase', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', '*', 'b2BroadPhase', ':', ':', 'GetUserData', '(', 'int32', 'proxyId', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::GetUserData
Evaluating stack ['return', 'm_tree', 'GetUserData', '(', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_tree', 'GetUserData', '(', 'proxyId', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2BroadPhase', ':', ':', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2BroadPhase', ':', ':', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2BroadPhase', ':', ':', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2BroadPhase', ':', ':', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2BroadPhase', ':', ':', 'TestOverlap', '(', 'int32', 'proxyIdA', ',', 'int32', 'proxyIdB', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::TestOverlap
Evaluating stack ['const', 'b2AABB', '&', 'aabbA', '=', 'm_tree', 'GetFatAABB', '(', 'proxyIdA', ')']
BraceDepth: 1
Evaluating stack ['const', 'b2AABB', '&', 'aabbA', '=', 'm_tree', 'GetFatAABB', '(', 'proxyIdA', ')', ';']
BraceDepth: 1
Evaluating stack ['const', 'b2AABB', '&', 'aabbB', '=', 'm_tree', 'GetFatAABB', '(', 'proxyIdB', ')']
BraceDepth: 1
Evaluating stack ['const', 'b2AABB', '&', 'aabbB', '=', 'm_tree', 'GetFatAABB', '(', 'proxyIdB', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'b2TestOverlap', '(', 'aabbA', ',', 'aabbB', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2TestOverlap', '(', 'aabbA', ',', 'aabbB', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2AABB', '&', 'b2BroadPhase', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2AABB', '&', 'b2BroadPhase', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2AABB', '&', 'b2BroadPhase', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2AABB', '&', 'b2BroadPhase', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2AABB', '&', 'b2BroadPhase', ':', ':', 'GetFatAABB', '(', 'int32', 'proxyId', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::GetFatAABB
Evaluating stack ['return', 'm_tree', 'GetFatAABB', '(', 'proxyId', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_tree', 'GetFatAABB', '(', 'proxyId', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetProxyCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetProxyCount', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetProxyCount', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetProxyCount', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetProxyCount', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::GetProxyCount
Evaluating stack ['return', 'm_proxyCount']
BraceDepth: 1
Evaluating stack ['return', 'm_proxyCount', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeHeight', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeHeight', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeHeight', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeHeight', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeHeight', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::GetTreeHeight
Evaluating stack ['return', 'm_tree', 'GetHeight', '(', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_tree', 'GetHeight', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeBalance', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeBalance', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeBalance', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeBalance', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2BroadPhase', ':', ':', 'GetTreeBalance', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::GetTreeBalance
Evaluating stack ['return', 'm_tree', 'GetMaxBalance', '(', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_tree', 'GetMaxBalance', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2BroadPhase', ':', ':', 'GetTreeQuality', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2BroadPhase', ':', ':', 'GetTreeQuality', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2BroadPhase', ':', ':', 'GetTreeQuality', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2BroadPhase', ':', ':', 'GetTreeQuality', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2BroadPhase', ':', ':', 'GetTreeQuality', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::GetTreeQuality
Evaluating stack ['return', 'm_tree', 'GetAreaRatio', '(', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_tree', 'GetAreaRatio', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'b2BroadPhase', ':', ':', 'UpdatePairs', '(', 'T', '*', 'callback', ')']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'void', 'b2BroadPhase', ':', ':', 'UpdatePairs', '(', 'T', '*', 'callback', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'b2BroadPhase', ':', ':', 'UpdatePairs', '(', 'T', '*', 'callback', ')', '{'])
('CLEAN ARRAYS', ['void', 'b2BroadPhase', ':', ':', 'UpdatePairs', '(', 'T', '*', 'callback', ')', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'void', 'b2BroadPhase', ':', ':', 'UpdatePairs', '(', 'T', '*', 'callback', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::UpdatePairs
Evaluating stack ['m_pairCount', '=', '0']
BraceDepth: 1
Evaluating stack ['m_pairCount', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['for', '(', 'int32', 'i', '=', '0']
BraceDepth: 1
Evaluating stack ['for', '(', 'int32', 'i', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['i', '<', 'm_moveCount']
BraceDepth: 1
Evaluating stack ['i', '<', 'm_moveCount', ';']
BraceDepth: 1
Evaluating stack ['+', '+', 'i', ')']
BraceDepth: 2
Evaluating stack ['+', '+', 'i', ')', '{']
BraceDepth: 2
Evaluating stack ['m_queryProxyId', '=', 'm_moveBuffer', '[', 'i', ']']
BraceDepth: 2
Evaluating stack ['m_queryProxyId', '=', 'm_moveBuffer', '[', 'i', ']', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_queryProxyId', '=', '=', 'e_nullProxy', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'm_queryProxyId', '=', '=', 'e_nullProxy', ')', '{']
BraceDepth: 3
Evaluating stack ['continue']
BraceDepth: 3
Evaluating stack ['continue', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack ['const', 'b2AABB', '&', 'fatAABB', '=', 'm_tree', 'GetFatAABB', '(', 'm_queryProxyId', ')']
BraceDepth: 2
Evaluating stack ['}', 'const', 'b2AABB', '&', 'fatAABB', '=', 'm_tree', 'GetFatAABB', '(', 'm_queryProxyId', ')', ';']
BraceDepth: 2
Evaluating stack ['m_tree', 'Query', '(', 'this', ',', 'fatAABB', ')']
BraceDepth: 2
Evaluating stack ['m_tree', 'Query', '(', 'this', ',', 'fatAABB', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_moveCount', '=', '0']
BraceDepth: 1
Evaluating stack ['}', 'm_moveCount', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['std', ':', ':', 'sort', '(', 'm_pairBuffer', ',', 'm_pairBuffer', '+', 'm_pairCount', ',', 'b2PairLessThan', ')']
BraceDepth: 1
Evaluating stack ['std', ':', ':', 'sort', '(', 'm_pairBuffer', ',', 'm_pairBuffer', '+', 'm_pairCount', ',', 'b2PairLessThan', ')', ';']
BraceDepth: 1
Evaluating stack ['int32', 'i', '=', '0']
BraceDepth: 1
Evaluating stack ['int32', 'i', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['while', '(', 'i', '<', 'm_pairCount', ')']
BraceDepth: 2
Evaluating stack ['while', '(', 'i', '<', 'm_pairCount', ')', '{']
BraceDepth: 2
Evaluating stack ['b2Pair', '*', 'primaryPair', '=', 'm_pairBuffer', '+', 'i']
BraceDepth: 2
Evaluating stack ['b2Pair', '*', 'primaryPair', '=', 'm_pairBuffer', '+', 'i', ';']
BraceDepth: 2
Evaluating stack ['void', '*', 'userDataA', '=', 'm_tree', 'GetUserData', '(', 'primaryPair', '-', '>proxyIdA', ')']
BraceDepth: 2
Evaluating stack ['void', '*', 'userDataA', '=', 'm_tree', 'GetUserData', '(', 'primaryPair', '-', '>proxyIdA', ')', ';']
BraceDepth: 2
Evaluating stack ['void', '*', 'userDataB', '=', 'm_tree', 'GetUserData', '(', 'primaryPair', '-', '>proxyIdB', ')']
BraceDepth: 2
Evaluating stack ['void', '*', 'userDataB', '=', 'm_tree', 'GetUserData', '(', 'primaryPair', '-', '>proxyIdB', ')', ';']
BraceDepth: 2
Evaluating stack ['callback', '-', '>AddPair', '(', 'userDataA', ',', 'userDataB', ')']
BraceDepth: 2
Evaluating stack ['callback', '-', '>AddPair', '(', 'userDataA', ',', 'userDataB', ')', ';']
BraceDepth: 2
Evaluating stack ['+', '+', 'i']
BraceDepth: 2
Evaluating stack ['+', '+', 'i', ';']
BraceDepth: 2
Evaluating stack ['while', '(', 'i', '<', 'm_pairCount', ')']
BraceDepth: 3
Evaluating stack ['while', '(', 'i', '<', 'm_pairCount', ')', '{']
BraceDepth: 3
Evaluating stack ['b2Pair', '*', 'pair', '=', 'm_pairBuffer', '+', 'i']
BraceDepth: 3
Evaluating stack ['b2Pair', '*', 'pair', '=', 'm_pairBuffer', '+', 'i', ';']
BraceDepth: 3
Evaluating stack ['if', '(', 'pair', '-', '>proxyIdA', '=', 'primaryPair', '-', '>proxyIdA', 'pair', '-', '>proxyIdB', '=', 'primaryPair', '-', '>proxyIdB', ')']
BraceDepth: 4
Evaluating stack ['if', '(', 'pair', '-', '>proxyIdA', '=', 'primaryPair', '-', '>proxyIdA', 'pair', '-', '>proxyIdB', '=', 'primaryPair', '-', '>proxyIdB', ')', '{']
BraceDepth: 4
Evaluating stack ['break']
BraceDepth: 4
Evaluating stack ['break', ';']
BraceDepth: 4
Evaluating stack []
BraceDepth: 4
Evaluating stack ['}']
BraceDepth: 4
Evaluating stack ['+', '+', 'i']
BraceDepth: 3
Evaluating stack ['}', '+', '+', 'i', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}', '}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2BroadPhase', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2BroadPhase', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2BroadPhase', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2BroadPhase', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'void', 'b2BroadPhase', ':', ':', 'Query', '(', 'T', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::Query
Evaluating stack ['m_tree', 'Query', '(', 'callback', ',', 'aabb', ')']
BraceDepth: 1
Evaluating stack ['m_tree', 'Query', '(', 'callback', ',', 'aabb', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2BroadPhase', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const']
BraceDepth: 1
Evaluating stack ['template', '<typename', 'T', '>', 'inline', 'void', 'b2BroadPhase', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2BroadPhase', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2BroadPhase', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{'])
('is method namestack', True, ['template', '<typename', 'T', '>', 'inline', 'void', 'b2BroadPhase', ':', ':', 'RayCast', '(', 'T', '*', 'callback', ',', 'const', 'b2RayCastInput', '&', 'input', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2BroadPhase::RayCast
Evaluating stack ['m_tree', 'RayCast', '(', 'callback', ',', 'input', ')']
BraceDepth: 1
Evaluating stack ['m_tree', 'RayCast', '(', 'callback', ',', 'input', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2Shape']
BraceDepth: 0
Evaluating stack ['class', 'b2Shape', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2DistanceProxy']
BraceDepth: 1
Evaluating stack ['struct', 'b2DistanceProxy', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2DistanceProxy', '(', ')', ':', 'm_vertices', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_count', '(', '0', ')', ',', 'm_radius', '(', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['b2DistanceProxy', '(', ')', ':', 'm_vertices', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_count', '(', '0', ')', ',', 'm_radius', '(', '0', '0f', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2DistanceProxy', '(', ')', ':', 'm_vertices', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_count', '(', '0', ')', ',', 'm_radius', '(', '0', '0f', ')', '{'])
('CLEAN ARRAYS', ['b2DistanceProxy', '(', ')', ':', 'm_vertices', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_count', '(', '0', ')', ',', 'm_radius', '(', '0', '0f', ')', '{'])
('is method namestack', True, ['b2DistanceProxy', '(', ')', ':', 'm_vertices', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_count', '(', '0', ')', ',', 'm_radius', '(', '0', '0f', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2DistanceProxy
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2DistanceProxy', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2DistanceProxy ( ) : m_vertices ( ( ( void * ) 0 ) ) , m_count ( 0 ) , m_radius ( 0 0f ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Set', '(', 'const', 'b2Shape', '*', 'shape', ',', 'int32', 'index', ')']
BraceDepth: 1
Evaluating stack ['void', 'Set', '(', 'const', 'b2Shape', '*', 'shape', ',', 'int32', 'index', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Set', '(', 'const', 'b2Shape', '*', 'shape', ',', 'int32', 'index', ')', ';'])
('CLEAN ARRAYS', ['void', 'Set', '(', 'const', 'b2Shape', '*', 'shape', ',', 'int32', 'index', ')', ';'])
('is method namestack', True, ['void', 'Set', '(', 'const', 'b2Shape', '*', 'shape', ',', 'int32', 'index', ')', ';'])
________________________________________________________________________________
Set
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Set', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Set ( const b2Shape * shape , int32 index ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Shape', '*', 'shape']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
________________________________________________________________________________
GetSupport
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetSupport', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'int32', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'int32 GetSupport ( const b2Vec2 & d ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'd']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', ';'])
________________________________________________________________________________
GetSupportVertex
('Struct Method:', {'defined': False, 'returns_const': True, 'static': False, 'operator': False, 'returns_reference': True, 'namespace': '', 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'friend': False, 'returns_class': False, 'extern': False, 'returns_pointer': 0, 'class': None, 'name': 'GetSupportVertex', 'pure_virtual': False, 'explicit': False, 'returns_fundamental': False, 'constructor': False, 'debug': 'const b2Vec2 & GetSupportVertex ( const b2Vec2 & d ) const ;', 'inline': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'd']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetVertexCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetVertexCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetVertexCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetVertexCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetVertexCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetVertexCount
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'GetVertexCount', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'int32', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'int32 GetVertexCount ( ) const ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetVertex', '(', 'int32', 'index', ')', 'const', ';'])
________________________________________________________________________________
GetVertex
('Struct Method:', {'defined': False, 'returns_const': True, 'static': False, 'operator': False, 'returns_reference': True, 'namespace': '', 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'friend': False, 'returns_class': False, 'extern': False, 'returns_pointer': 0, 'class': None, 'name': 'GetVertex', 'pure_virtual': False, 'explicit': False, 'returns_fundamental': False, 'constructor': False, 'debug': 'const b2Vec2 & GetVertex ( int32 index ) const ;', 'inline': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'index']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_buffer', '[', '2', ']']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_buffer', '[', '2', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_buffer', '[', '2', ']']
['b2Vec2', 'm_buffer', '[', '2', ']', ';']
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '*', 'm_vertices']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '*', 'm_vertices', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '*', 'm_vertices']
['const', 'b2Vec2', '*', 'm_vertices', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_count']
BraceDepth: 1
Evaluating stack ['int32', 'm_count', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_count']
['int32', 'm_count', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_radius']
BraceDepth: 1
Evaluating stack ['float32', 'm_radius', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_radius']
['float32', 'm_radius', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2SimplexCache']
BraceDepth: 1
Evaluating stack ['struct', 'b2SimplexCache', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['float32', 'metric']
BraceDepth: 1
Evaluating stack ['float32', 'metric', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'metric']
['float32', 'metric', ';']
________________________________________________________________________________
Evaluating stack ['uint16', 'count']
BraceDepth: 1
Evaluating stack ['uint16', 'count', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint16', 'count']
['uint16', 'count', ';']
________________________________________________________________________________
Evaluating stack ['uint8', 'indexA', '[', '3', ']']
BraceDepth: 1
Evaluating stack ['uint8', 'indexA', '[', '3', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint8', 'indexA', '[', '3', ']']
['uint8', 'indexA', '[', '3', ']', ';']
________________________________________________________________________________
Evaluating stack ['uint8', 'indexB', '[', '3', ']']
BraceDepth: 1
Evaluating stack ['uint8', 'indexB', '[', '3', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint8', 'indexB', '[', '3', ']']
['uint8', 'indexB', '[', '3', ']', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2DistanceInput']
BraceDepth: 1
Evaluating stack ['struct', 'b2DistanceInput', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2DistanceProxy', 'proxyA']
BraceDepth: 1
Evaluating stack ['b2DistanceProxy', 'proxyA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DistanceProxy', 'proxyA']
['b2DistanceProxy', 'proxyA', ';']
________________________________________________________________________________
Evaluating stack ['b2DistanceProxy', 'proxyB']
BraceDepth: 1
Evaluating stack ['b2DistanceProxy', 'proxyB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DistanceProxy', 'proxyB']
['b2DistanceProxy', 'proxyB', ';']
________________________________________________________________________________
Evaluating stack ['b2Transform', 'transformA']
BraceDepth: 1
Evaluating stack ['b2Transform', 'transformA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Transform', 'transformA']
['b2Transform', 'transformA', ';']
________________________________________________________________________________
Evaluating stack ['b2Transform', 'transformB']
BraceDepth: 1
Evaluating stack ['b2Transform', 'transformB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Transform', 'transformB']
['b2Transform', 'transformB', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'useRadii']
BraceDepth: 1
Evaluating stack ['bool', 'useRadii', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'useRadii']
['bool', 'useRadii', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2DistanceOutput']
BraceDepth: 1
Evaluating stack ['struct', 'b2DistanceOutput', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'pointA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'pointA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'pointA']
['b2Vec2', 'pointA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'pointB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'pointB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'pointB']
['b2Vec2', 'pointB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'distance']
BraceDepth: 1
Evaluating stack ['float32', 'distance', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'distance']
['float32', 'distance', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'iterations']
BraceDepth: 1
Evaluating stack ['int32', 'iterations', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'iterations']
['int32', 'iterations', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['void', 'b2Distance', '(', 'b2DistanceOutput', '*', 'output', ',', 'b2SimplexCache', '*', 'cache', ',', 'const', 'b2DistanceInput', '*', 'input', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2Distance', '(', 'b2DistanceOutput', '*', 'output', ',', 'b2SimplexCache', '*', 'cache', ',', 'const', 'b2DistanceInput', '*', 'input', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2Distance', '(', 'b2DistanceOutput', '*', 'output', ',', 'b2SimplexCache', '*', 'cache', ',', 'const', 'b2DistanceInput', '*', 'input', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2Distance', '(', 'b2DistanceOutput', '*', 'output', ',', 'b2SimplexCache', '*', 'cache', ',', 'const', 'b2DistanceInput', '*', 'input', ')', ';'])
('is method namestack', True, ['void', 'b2Distance', '(', 'b2DistanceOutput', '*', 'output', ',', 'b2SimplexCache', '*', 'cache', ',', 'const', 'b2DistanceInput', '*', 'input', ')', ';'])
________________________________________________________________________________
b2Distance
('free function:', ['void', 'b2Distance', '(', 'b2DistanceOutput', '*', 'output', ',', 'b2SimplexCache', '*', 'cache', ',', 'const', 'b2DistanceInput', '*', 'input', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DistanceOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2SimplexCache', '*', 'cache']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2DistanceInput', '*', 'input']
None
________________________________________________________________________________
Evaluating stack ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetVertexCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetVertexCount', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetVertexCount', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetVertexCount', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetVertexCount', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceProxy::GetVertexCount
Evaluating stack ['return', 'm_count']
BraceDepth: 1
Evaluating stack ['return', 'm_count', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetVertex', '(', 'int32', 'index', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceProxy::GetVertex
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'm_vertices', '[', 'index', ']']
BraceDepth: 1
Evaluating stack ['return', 'm_vertices', '[', 'index', ']', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2DistanceProxy', ':', ':', 'GetSupport', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceProxy::GetSupport
Evaluating stack ['int32', 'bestIndex', '=', '0']
BraceDepth: 1
Evaluating stack ['int32', 'bestIndex', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['float32', 'bestValue', '=', 'b2Dot', '(', 'm_vertices', '[', '0', ']', ',', 'd', ')']
BraceDepth: 1
Evaluating stack ['float32', 'bestValue', '=', 'b2Dot', '(', 'm_vertices', '[', '0', ']', ',', 'd', ')', ';']
BraceDepth: 1
Evaluating stack ['for', '(', 'int32', 'i', '=', '1']
BraceDepth: 1
Evaluating stack ['for', '(', 'int32', 'i', '=', '1', ';']
BraceDepth: 1
Evaluating stack ['i', '<', 'm_count']
BraceDepth: 1
Evaluating stack ['i', '<', 'm_count', ';']
BraceDepth: 1
Evaluating stack ['+', '+', 'i', ')']
BraceDepth: 2
Evaluating stack ['+', '+', 'i', ')', '{']
BraceDepth: 2
Evaluating stack ['float32', 'value', '=', 'b2Dot', '(', 'm_vertices', '[', 'i', ']', ',', 'd', ')']
BraceDepth: 2
Evaluating stack ['float32', 'value', '=', 'b2Dot', '(', 'm_vertices', '[', 'i', ']', ',', 'd', ')', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'value', '>', 'bestValue', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'value', '>', 'bestValue', ')', '{']
BraceDepth: 3
Evaluating stack ['bestIndex', '=', 'i']
BraceDepth: 3
Evaluating stack ['bestIndex', '=', 'i', ';']
BraceDepth: 3
Evaluating stack ['bestValue', '=', 'value']
BraceDepth: 3
Evaluating stack ['bestValue', '=', 'value', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}', '}']
BraceDepth: 2
Evaluating stack ['return', 'bestIndex']
BraceDepth: 1
Evaluating stack ['}', '}', 'return', 'bestIndex', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2DistanceProxy', ':', ':', 'GetSupportVertex', '(', 'const', 'b2Vec2', '&', 'd', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceProxy::GetSupportVertex
Evaluating stack ['int32', 'bestIndex', '=', '0']
BraceDepth: 1
Evaluating stack ['int32', 'bestIndex', '=', '0', ';']
BraceDepth: 1
Evaluating stack ['float32', 'bestValue', '=', 'b2Dot', '(', 'm_vertices', '[', '0', ']', ',', 'd', ')']
BraceDepth: 1
Evaluating stack ['float32', 'bestValue', '=', 'b2Dot', '(', 'm_vertices', '[', '0', ']', ',', 'd', ')', ';']
BraceDepth: 1
Evaluating stack ['for', '(', 'int32', 'i', '=', '1']
BraceDepth: 1
Evaluating stack ['for', '(', 'int32', 'i', '=', '1', ';']
BraceDepth: 1
Evaluating stack ['i', '<', 'm_count']
BraceDepth: 1
Evaluating stack ['i', '<', 'm_count', ';']
BraceDepth: 1
Evaluating stack ['+', '+', 'i', ')']
BraceDepth: 2
Evaluating stack ['+', '+', 'i', ')', '{']
BraceDepth: 2
Evaluating stack ['float32', 'value', '=', 'b2Dot', '(', 'm_vertices', '[', 'i', ']', ',', 'd', ')']
BraceDepth: 2
Evaluating stack ['float32', 'value', '=', 'b2Dot', '(', 'm_vertices', '[', 'i', ']', ',', 'd', ')', ';']
BraceDepth: 2
Evaluating stack ['if', '(', 'value', '>', 'bestValue', ')']
BraceDepth: 3
Evaluating stack ['if', '(', 'value', '>', 'bestValue', ')', '{']
BraceDepth: 3
Evaluating stack ['bestIndex', '=', 'i']
BraceDepth: 3
Evaluating stack ['bestIndex', '=', 'i', ';']
BraceDepth: 3
Evaluating stack ['bestValue', '=', 'value']
BraceDepth: 3
Evaluating stack ['bestValue', '=', 'value', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}', '}']
BraceDepth: 2
Evaluating stack ['return', 'm_vertices', '[', 'bestIndex', ']']
BraceDepth: 1
Evaluating stack ['}', '}', 'return', 'm_vertices', '[', 'bestIndex', ']', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2TOIInput']
BraceDepth: 1
Evaluating stack ['struct', 'b2TOIInput', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2DistanceProxy', 'proxyA']
BraceDepth: 1
Evaluating stack ['b2DistanceProxy', 'proxyA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DistanceProxy', 'proxyA']
['b2DistanceProxy', 'proxyA', ';']
________________________________________________________________________________
Evaluating stack ['b2DistanceProxy', 'proxyB']
BraceDepth: 1
Evaluating stack ['b2DistanceProxy', 'proxyB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DistanceProxy', 'proxyB']
['b2DistanceProxy', 'proxyB', ';']
________________________________________________________________________________
Evaluating stack ['b2Sweep', 'sweepA']
BraceDepth: 1
Evaluating stack ['b2Sweep', 'sweepA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Sweep', 'sweepA']
['b2Sweep', 'sweepA', ';']
________________________________________________________________________________
Evaluating stack ['b2Sweep', 'sweepB']
BraceDepth: 1
Evaluating stack ['b2Sweep', 'sweepB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Sweep', 'sweepB']
['b2Sweep', 'sweepB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'tMax']
BraceDepth: 1
Evaluating stack ['float32', 'tMax', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'tMax']
['float32', 'tMax', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2TOIOutput']
BraceDepth: 1
Evaluating stack ['struct', 'b2TOIOutput', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['enum', 'State', '{', 'e_unknown', ',', 'e_failed', ',', 'e_overlapped', ',', 'e_touching', ',', 'e_separated', '}']
BraceDepth: 1
Evaluating stack ['enum', 'State', '{', 'e_unknown', ',', 'e_failed', ',', 'e_overlapped', ',', 'e_touching', ',', 'e_separated', '}', ';']
BraceDepth: 1
Evaluating stack ['State', 'state']
BraceDepth: 1
Evaluating stack ['State', 'state', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['State', 'state']
['State', 'state', ';']
________________________________________________________________________________
Evaluating stack ['float32', 't']
BraceDepth: 1
Evaluating stack ['float32', 't', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 't']
['float32', 't', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['void', 'b2TimeOfImpact', '(', 'b2TOIOutput', '*', 'output', ',', 'const', 'b2TOIInput', '*', 'input', ')']
BraceDepth: 0
Evaluating stack ['void', 'b2TimeOfImpact', '(', 'b2TOIOutput', '*', 'output', ',', 'const', 'b2TOIInput', '*', 'input', ')', ';']
BraceDepth: 0
('CLEAN TEMPLATES', ['void', 'b2TimeOfImpact', '(', 'b2TOIOutput', '*', 'output', ',', 'const', 'b2TOIInput', '*', 'input', ')', ';'])
('CLEAN ARRAYS', ['void', 'b2TimeOfImpact', '(', 'b2TOIOutput', '*', 'output', ',', 'const', 'b2TOIInput', '*', 'input', ')', ';'])
('is method namestack', True, ['void', 'b2TimeOfImpact', '(', 'b2TOIOutput', '*', 'output', ',', 'const', 'b2TOIInput', '*', 'input', ')', ';'])
________________________________________________________________________________
b2TimeOfImpact
('free function:', ['void', 'b2TimeOfImpact', '(', 'b2TOIOutput', '*', 'output', ',', 'const', 'b2TOIInput', '*', 'input', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2TOIOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2TOIInput', '*', 'input']
None
________________________________________________________________________________
Evaluating stack ['class', 'b2Fixture']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Controller']
BraceDepth: 0
Evaluating stack ['class', 'b2Controller', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2World']
BraceDepth: 0
Evaluating stack ['class', 'b2World', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2FixtureDef']
BraceDepth: 0
Evaluating stack ['struct', 'b2FixtureDef', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2JointEdge']
BraceDepth: 0
Evaluating stack ['struct', 'b2JointEdge', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2ContactEdge']
BraceDepth: 0
Evaluating stack ['struct', 'b2ContactEdge', ';']
BraceDepth: 0
Evaluating stack ['enum', 'b2BodyType', '{', 'b2_staticBody', '=', '0', ',', 'b2_kinematicBody', ',', 'b2_dynamicBody', '}']
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2BodyDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2BodyDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2BodyDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2BodyDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2BodyDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2BodyDef', '(', ')', '{'])
('is method namestack', True, ['b2BodyDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2BodyDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2BodyDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2BodyDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['userData', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['userData', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['position', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['position', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['angle', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['angle', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['linearVelocity', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['linearVelocity', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['angularVelocity', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['angularVelocity', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['linearDamping', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['linearDamping', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['angularDamping', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['angularDamping', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['allowSleep', '=', 'true']
BraceDepth: 2
Evaluating stack ['allowSleep', '=', 'true', ';']
BraceDepth: 2
Evaluating stack ['awake', '=', 'true']
BraceDepth: 2
Evaluating stack ['awake', '=', 'true', ';']
BraceDepth: 2
Evaluating stack ['fixedRotation', '=', 'false']
BraceDepth: 2
Evaluating stack ['fixedRotation', '=', 'false', ';']
BraceDepth: 2
Evaluating stack ['bullet', '=', 'false']
BraceDepth: 2
Evaluating stack ['bullet', '=', 'false', ';']
BraceDepth: 2
Evaluating stack ['type', '=', 'b2_staticBody']
BraceDepth: 2
Evaluating stack ['type', '=', 'b2_staticBody', ';']
BraceDepth: 2
Evaluating stack ['active', '=', 'true']
BraceDepth: 2
Evaluating stack ['active', '=', 'true', ';']
BraceDepth: 2
Evaluating stack ['gravityScale', '=', '1', '0f']
BraceDepth: 2
Evaluating stack ['gravityScale', '=', '1', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2BodyType', 'type']
BraceDepth: 1
Evaluating stack ['b2BodyType', 'type', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BodyType', 'type']
['b2BodyType', 'type', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'position']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'position', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'position']
['b2Vec2', 'position', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'angle']
BraceDepth: 1
Evaluating stack ['float32', 'angle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angle']
['float32', 'angle', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'linearVelocity']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'linearVelocity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'linearVelocity']
['b2Vec2', 'linearVelocity', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'angularVelocity']
BraceDepth: 1
Evaluating stack ['float32', 'angularVelocity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angularVelocity']
['float32', 'angularVelocity', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'linearDamping']
BraceDepth: 1
Evaluating stack ['float32', 'linearDamping', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'linearDamping']
['float32', 'linearDamping', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'angularDamping']
BraceDepth: 1
Evaluating stack ['float32', 'angularDamping', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angularDamping']
['float32', 'angularDamping', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'allowSleep']
BraceDepth: 1
Evaluating stack ['bool', 'allowSleep', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'allowSleep']
['bool', 'allowSleep', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'awake']
BraceDepth: 1
Evaluating stack ['bool', 'awake', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'awake']
['bool', 'awake', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'fixedRotation']
BraceDepth: 1
Evaluating stack ['bool', 'fixedRotation', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'fixedRotation']
['bool', 'fixedRotation', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'bullet']
BraceDepth: 1
Evaluating stack ['bool', 'bullet', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'bullet']
['bool', 'bullet', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'active']
BraceDepth: 1
Evaluating stack ['bool', 'active', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'active']
['bool', 'active', ';']
________________________________________________________________________________
Evaluating stack ['void', '*', 'userData']
BraceDepth: 1
Evaluating stack ['void', '*', 'userData', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'userData']
['void', '*', 'userData', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'gravityScale']
BraceDepth: 1
Evaluating stack ['float32', 'gravityScale', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'gravityScale']
['float32', 'gravityScale', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Body']
BraceDepth: 1
Evaluating stack ['class', 'b2Body', '{']
BraceDepth: 1
('NEWCLASS', 'class b2Body')
('stack IN', 'class b2Body')
('HEAD', ['class', 'b2Body'])
______________
('TAIL', [])
('CLASS OK', 'b2Body')
('CURACCESS-set', 'public')
Evaluating stack ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2FixtureDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2FixtureDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2FixtureDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2FixtureDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2FixtureDef', '*', 'def', ')', ';'])
________________________________________________________________________________
CreateFixture
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2FixtureDef', '*', 'def']
None
________________________________________________________________________________
Evaluating stack ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2Shape', '*', 'shape', ',', 'float32', 'density', ')']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2Shape', '*', 'shape', ',', 'float32', 'density', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2Shape', '*', 'shape', ',', 'float32', 'density', ')', ';'])
('CLEAN ARRAYS', ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2Shape', '*', 'shape', ',', 'float32', 'density', ')', ';'])
('is method namestack', True, ['b2Fixture', '*', 'CreateFixture', '(', 'const', 'b2Shape', '*', 'shape', ',', 'float32', 'density', ')', ';'])
________________________________________________________________________________
CreateFixture
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Shape', '*', 'shape']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
None
________________________________________________________________________________
Evaluating stack ['void', 'DestroyFixture', '(', 'b2Fixture', '*', 'fixture', ')']
BraceDepth: 1
Evaluating stack ['void', 'DestroyFixture', '(', 'b2Fixture', '*', 'fixture', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DestroyFixture', '(', 'b2Fixture', '*', 'fixture', ')', ';'])
('CLEAN ARRAYS', ['void', 'DestroyFixture', '(', 'b2Fixture', '*', 'fixture', ')', ';'])
('is method namestack', True, ['void', 'DestroyFixture', '(', 'b2Fixture', '*', 'fixture', ')', ';'])
________________________________________________________________________________
DestroyFixture
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixture']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetTransform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetTransform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetTransform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetTransform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', ';'])
('is method namestack', True, ['void', 'SetTransform', '(', 'const', 'b2Vec2', '&', 'position', ',', 'float32', 'angle', ')', ';'])
________________________________________________________________________________
SetTransform
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'position']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angle']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Transform', '&', 'GetTransform', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Transform', '&', 'GetTransform', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Transform', '&', 'GetTransform', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Transform', '&', 'GetTransform', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Transform', '&', 'GetTransform', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTransform
Evaluating stack ['const', 'b2Vec2', '&', 'GetPosition', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetPosition', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetPosition', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetPosition', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetPosition', '(', ')', 'const', ';'])
________________________________________________________________________________
GetPosition
Evaluating stack ['float32', 'GetAngle', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetAngle', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetAngle', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetAngle', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetAngle', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAngle
Evaluating stack ['const', 'b2Vec2', '&', 'GetWorldCenter', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetWorldCenter', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetWorldCenter', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetWorldCenter', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetWorldCenter', '(', ')', 'const', ';'])
________________________________________________________________________________
GetWorldCenter
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalCenter', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalCenter', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalCenter', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalCenter', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalCenter', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLocalCenter
Evaluating stack ['void', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', ';'])
('is method namestack', True, ['void', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', ';'])
________________________________________________________________________________
SetLinearVelocity
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'v']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetLinearVelocity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetLinearVelocity', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetLinearVelocity', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetLinearVelocity', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetLinearVelocity', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLinearVelocity
Evaluating stack ['void', 'SetAngularVelocity', '(', 'float32', 'omega', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetAngularVelocity', '(', 'float32', 'omega', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetAngularVelocity', '(', 'float32', 'omega', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetAngularVelocity', '(', 'float32', 'omega', ')', ';'])
('is method namestack', True, ['void', 'SetAngularVelocity', '(', 'float32', 'omega', ')', ';'])
________________________________________________________________________________
SetAngularVelocity
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'omega']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetAngularVelocity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetAngularVelocity', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetAngularVelocity', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetAngularVelocity', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetAngularVelocity', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAngularVelocity
Evaluating stack ['void', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')']
BraceDepth: 1
Evaluating stack ['void', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', ';'])
('CLEAN ARRAYS', ['void', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', ';'])
('is method namestack', True, ['void', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', ';'])
________________________________________________________________________________
ApplyForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'force']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'point']
None
________________________________________________________________________________
Evaluating stack ['void', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')']
BraceDepth: 1
Evaluating stack ['void', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', ';'])
('CLEAN ARRAYS', ['void', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', ';'])
('is method namestack', True, ['void', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', ';'])
________________________________________________________________________________
ApplyForceToCenter
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'force']
None
________________________________________________________________________________
Evaluating stack ['void', 'ApplyTorque', '(', 'float32', 'torque', ')']
BraceDepth: 1
Evaluating stack ['void', 'ApplyTorque', '(', 'float32', 'torque', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ApplyTorque', '(', 'float32', 'torque', ')', ';'])
('CLEAN ARRAYS', ['void', 'ApplyTorque', '(', 'float32', 'torque', ')', ';'])
('is method namestack', True, ['void', 'ApplyTorque', '(', 'float32', 'torque', ')', ';'])
________________________________________________________________________________
ApplyTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'torque']
None
________________________________________________________________________________
Evaluating stack ['void', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')']
BraceDepth: 1
Evaluating stack ['void', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', ';'])
('CLEAN ARRAYS', ['void', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', ';'])
('is method namestack', True, ['void', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', ';'])
________________________________________________________________________________
ApplyLinearImpulse
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'impulse']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'point']
None
________________________________________________________________________________
Evaluating stack ['void', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')']
BraceDepth: 1
Evaluating stack ['void', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', ';'])
('CLEAN ARRAYS', ['void', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', ';'])
('is method namestack', True, ['void', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', ';'])
________________________________________________________________________________
ApplyAngularImpulse
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'impulse']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMass', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMass', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMass', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMass', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMass', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMass
Evaluating stack ['float32', 'GetInertia', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetInertia', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetInertia', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetInertia', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetInertia', '(', ')', 'const', ';'])
________________________________________________________________________________
GetInertia
Evaluating stack ['void', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', ';'])
________________________________________________________________________________
GetMassData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2MassData', '*', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetMassData', '(', 'const', 'b2MassData', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMassData', '(', 'const', 'b2MassData', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMassData', '(', 'const', 'b2MassData', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMassData', '(', 'const', 'b2MassData', '*', 'data', ')', ';'])
('is method namestack', True, ['void', 'SetMassData', '(', 'const', 'b2MassData', '*', 'data', ')', ';'])
________________________________________________________________________________
SetMassData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2MassData', '*', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'ResetMassData', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'ResetMassData', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ResetMassData', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'ResetMassData', '(', ')', ';'])
('is method namestack', True, ['void', 'ResetMassData', '(', ')', ';'])
________________________________________________________________________________
ResetMassData
Evaluating stack ['b2Vec2', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';'])
________________________________________________________________________________
GetWorldPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'localPoint']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', ';'])
________________________________________________________________________________
GetWorldVector
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'localVector']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';'])
________________________________________________________________________________
GetLocalPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'worldPoint']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', ';'])
________________________________________________________________________________
GetLocalVector
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'worldVector']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', ';'])
________________________________________________________________________________
GetLinearVelocityFromWorldPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'worldPoint']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', ';'])
________________________________________________________________________________
GetLinearVelocityFromLocalPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'localPoint']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetLinearDamping', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetLinearDamping', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetLinearDamping', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetLinearDamping', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetLinearDamping', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLinearDamping
Evaluating stack ['void', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', ';'])
('is method namestack', True, ['void', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', ';'])
________________________________________________________________________________
SetLinearDamping
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'linearDamping']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetAngularDamping', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetAngularDamping', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetAngularDamping', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetAngularDamping', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetAngularDamping', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAngularDamping
Evaluating stack ['void', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', ';'])
('is method namestack', True, ['void', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', ';'])
________________________________________________________________________________
SetAngularDamping
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angularDamping']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetGravityScale', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetGravityScale', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetGravityScale', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetGravityScale', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetGravityScale', '(', ')', 'const', ';'])
________________________________________________________________________________
GetGravityScale
Evaluating stack ['void', 'SetGravityScale', '(', 'float32', 'scale', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetGravityScale', '(', 'float32', 'scale', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetGravityScale', '(', 'float32', 'scale', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetGravityScale', '(', 'float32', 'scale', ')', ';'])
('is method namestack', True, ['void', 'SetGravityScale', '(', 'float32', 'scale', ')', ';'])
________________________________________________________________________________
SetGravityScale
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'scale']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetType', '(', 'b2BodyType', 'type', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetType', '(', 'b2BodyType', 'type', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetType', '(', 'b2BodyType', 'type', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetType', '(', 'b2BodyType', 'type', ')', ';'])
('is method namestack', True, ['void', 'SetType', '(', 'b2BodyType', 'type', ')', ';'])
________________________________________________________________________________
SetType
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BodyType', 'type']
None
________________________________________________________________________________
Evaluating stack ['b2BodyType', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2BodyType', 'GetType', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2BodyType', 'GetType', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2BodyType', 'GetType', '(', ')', 'const', ';'])
('is method namestack', True, ['b2BodyType', 'GetType', '(', ')', 'const', ';'])
________________________________________________________________________________
GetType
Evaluating stack ['void', 'SetBullet', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetBullet', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetBullet', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetBullet', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetBullet', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetBullet
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsBullet', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsBullet', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsBullet', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsBullet', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsBullet', '(', ')', 'const', ';'])
________________________________________________________________________________
IsBullet
Evaluating stack ['void', 'SetSleepingAllowed', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetSleepingAllowed
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsSleepingAllowed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsSleepingAllowed', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsSleepingAllowed', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsSleepingAllowed', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsSleepingAllowed', '(', ')', 'const', ';'])
________________________________________________________________________________
IsSleepingAllowed
Evaluating stack ['void', 'SetAwake', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetAwake', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetAwake', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetAwake', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetAwake', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetAwake
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsAwake', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsAwake', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsAwake', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsAwake', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsAwake', '(', ')', 'const', ';'])
________________________________________________________________________________
IsAwake
Evaluating stack ['void', 'SetActive', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetActive', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetActive', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetActive', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetActive', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetActive
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsActive', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsActive', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsActive', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsActive', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsActive', '(', ')', 'const', ';'])
________________________________________________________________________________
IsActive
Evaluating stack ['void', 'SetFixedRotation', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetFixedRotation', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetFixedRotation', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetFixedRotation', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetFixedRotation', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetFixedRotation
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsFixedRotation', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsFixedRotation', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsFixedRotation', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsFixedRotation', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsFixedRotation', '(', ')', 'const', ';'])
________________________________________________________________________________
IsFixedRotation
Evaluating stack ['b2Fixture', '*', 'GetFixtureList', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'GetFixtureList', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Fixture', '*', 'GetFixtureList', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Fixture', '*', 'GetFixtureList', '(', ')', ';'])
('is method namestack', True, ['b2Fixture', '*', 'GetFixtureList', '(', ')', ';'])
________________________________________________________________________________
GetFixtureList
Evaluating stack ['const', 'b2Fixture', '*', 'GetFixtureList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Fixture', '*', 'GetFixtureList', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Fixture', '*', 'GetFixtureList', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Fixture', '*', 'GetFixtureList', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Fixture', '*', 'GetFixtureList', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFixtureList
Evaluating stack ['b2JointEdge', '*', 'GetJointList', '(', ')']
BraceDepth: 1
Evaluating stack ['b2JointEdge', '*', 'GetJointList', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2JointEdge', '*', 'GetJointList', '(', ')', ';'])
('CLEAN ARRAYS', ['b2JointEdge', '*', 'GetJointList', '(', ')', ';'])
('is method namestack', True, ['b2JointEdge', '*', 'GetJointList', '(', ')', ';'])
________________________________________________________________________________
GetJointList
Evaluating stack ['const', 'b2JointEdge', '*', 'GetJointList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2JointEdge', '*', 'GetJointList', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2JointEdge', '*', 'GetJointList', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2JointEdge', '*', 'GetJointList', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2JointEdge', '*', 'GetJointList', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointList
Evaluating stack ['b2ContactEdge', '*', 'GetContactList', '(', ')']
BraceDepth: 1
Evaluating stack ['b2ContactEdge', '*', 'GetContactList', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2ContactEdge', '*', 'GetContactList', '(', ')', ';'])
('CLEAN ARRAYS', ['b2ContactEdge', '*', 'GetContactList', '(', ')', ';'])
('is method namestack', True, ['b2ContactEdge', '*', 'GetContactList', '(', ')', ';'])
________________________________________________________________________________
GetContactList
Evaluating stack ['const', 'b2ContactEdge', '*', 'GetContactList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2ContactEdge', '*', 'GetContactList', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2ContactEdge', '*', 'GetContactList', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2ContactEdge', '*', 'GetContactList', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2ContactEdge', '*', 'GetContactList', '(', ')', 'const', ';'])
________________________________________________________________________________
GetContactList
Evaluating stack ['b2Body', '*', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'GetNext', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Body', '*', 'GetNext', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Body', '*', 'GetNext', '(', ')', ';'])
('is method namestack', True, ['b2Body', '*', 'GetNext', '(', ')', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['const', 'b2Body', '*', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Body', '*', 'GetNext', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Body', '*', 'GetNext', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Body', '*', 'GetNext', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Body', '*', 'GetNext', '(', ')', 'const', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['void', '*', 'GetUserData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', '*', 'GetUserData', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
('is method namestack', True, ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
________________________________________________________________________________
GetUserData
Evaluating stack ['void', 'SetUserData', '(', 'void', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
('is method namestack', True, ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
________________________________________________________________________________
SetUserData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2World', '*', 'GetWorld', '(', ')']
BraceDepth: 1
Evaluating stack ['b2World', '*', 'GetWorld', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2World', '*', 'GetWorld', '(', ')', ';'])
('CLEAN ARRAYS', ['b2World', '*', 'GetWorld', '(', ')', ';'])
('is method namestack', True, ['b2World', '*', 'GetWorld', '(', ')', ';'])
________________________________________________________________________________
GetWorld
Evaluating stack ['const', 'b2World', '*', 'GetWorld', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2World', '*', 'GetWorld', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2World', '*', 'GetWorld', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2World', '*', 'GetWorld', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2World', '*', 'GetWorld', '(', ')', 'const', ';'])
________________________________________________________________________________
GetWorld
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
('CURACCESS-set', 'private')
Evaluating stack ['friend', 'class', 'b2World']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2World', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Island']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Island', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactManager']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactManager', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactSolver']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactSolver', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Contact']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Contact', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2DistanceJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2DistanceJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2WheelJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2WheelJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2MouseJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2MouseJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2PrismaticJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2PrismaticJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2PulleyJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2PulleyJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2RevoluteJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2RevoluteJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2WeldJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2WeldJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2FrictionJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2FrictionJoint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2RopeJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2RopeJoint', ';']
BraceDepth: 1
Evaluating stack ['enum', '{', 'e_islandFlag', '=', '0x0001', ',', 'e_awakeFlag', '=', '0x0002', ',', 'e_autoSleepFlag', '=', '0x0004', ',', 'e_bulletFlag', '=', '0x0008', ',', 'e_fixedRotationFlag', '=', '0x0010', ',', 'e_activeFlag', '=', '0x0020', ',', 'e_toiFlag', '=', '0x0040', '}']
BraceDepth: 1
Evaluating stack ['enum', '{', 'e_islandFlag', '=', '0x0001', ',', 'e_awakeFlag', '=', '0x0002', ',', 'e_autoSleepFlag', '=', '0x0004', ',', 'e_bulletFlag', '=', '0x0008', ',', 'e_fixedRotationFlag', '=', '0x0010', ',', 'e_activeFlag', '=', '0x0020', ',', 'e_toiFlag', '=', '0x0040', '}', ';']
BraceDepth: 1
('WARN-enum: nameless enum', ['enum', '{', 'e_islandFlag', '=', '0x0001', ',', 'e_awakeFlag', '=', '0x0002', ',', 'e_autoSleepFlag', '=', '0x0004', ',', 'e_bulletFlag', '=', '0x0008', ',', 'e_fixedRotationFlag', '=', '0x0010', ',', 'e_activeFlag', '=', '0x0020', ',', 'e_toiFlag', '=', '0x0040', '}'])
Evaluating stack ['b2Body', '(', 'const', 'b2BodyDef', '*', 'bd', ',', 'b2World', '*', 'world', ')']
BraceDepth: 1
Evaluating stack ['b2Body', '(', 'const', 'b2BodyDef', '*', 'bd', ',', 'b2World', '*', 'world', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Body', '(', 'const', 'b2BodyDef', '*', 'bd', ',', 'b2World', '*', 'world', ')', ';'])
('CLEAN ARRAYS', ['b2Body', '(', 'const', 'b2BodyDef', '*', 'bd', ',', 'b2World', '*', 'world', ')', ';'])
('is method namestack', True, ['b2Body', '(', 'const', 'b2BodyDef', '*', 'bd', ',', 'b2World', '*', 'world', ')', ';'])
________________________________________________________________________________
b2Body
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2BodyDef', '*', 'bd']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2World', '*', 'world']
None
________________________________________________________________________________
Evaluating stack ['~b2Body', '(', ')']
BraceDepth: 1
Evaluating stack ['~b2Body', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['~b2Body', '(', ')', ';'])
('CLEAN ARRAYS', ['~b2Body', '(', ')', ';'])
('is method namestack', True, ['~b2Body', '(', ')', ';'])
________________________________________________________________________________
~b2Body
Evaluating stack ['void', 'SynchronizeFixtures', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'SynchronizeFixtures', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SynchronizeFixtures', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'SynchronizeFixtures', '(', ')', ';'])
('is method namestack', True, ['void', 'SynchronizeFixtures', '(', ')', ';'])
________________________________________________________________________________
SynchronizeFixtures
Evaluating stack ['void', 'SynchronizeTransform', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'SynchronizeTransform', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SynchronizeTransform', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'SynchronizeTransform', '(', ')', ';'])
('is method namestack', True, ['void', 'SynchronizeTransform', '(', ')', ';'])
________________________________________________________________________________
SynchronizeTransform
Evaluating stack ['bool', 'ShouldCollide', '(', 'const', 'b2Body', '*', 'other', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'ShouldCollide', '(', 'const', 'b2Body', '*', 'other', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'ShouldCollide', '(', 'const', 'b2Body', '*', 'other', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'ShouldCollide', '(', 'const', 'b2Body', '*', 'other', ')', 'const', ';'])
('is method namestack', True, ['bool', 'ShouldCollide', '(', 'const', 'b2Body', '*', 'other', ')', 'const', ';'])
________________________________________________________________________________
ShouldCollide
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Body', '*', 'other']
None
________________________________________________________________________________
Evaluating stack ['void', 'Advance', '(', 'float32', 't', ')']
BraceDepth: 1
Evaluating stack ['void', 'Advance', '(', 'float32', 't', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Advance', '(', 'float32', 't', ')', ';'])
('CLEAN ARRAYS', ['void', 'Advance', '(', 'float32', 't', ')', ';'])
('is method namestack', True, ['void', 'Advance', '(', 'float32', 't', ')', ';'])
________________________________________________________________________________
Advance
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 't']
None
________________________________________________________________________________
Evaluating stack ['b2BodyType', 'm_type']
BraceDepth: 1
Evaluating stack ['b2BodyType', 'm_type', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BodyType', 'm_type']
['b2BodyType', 'm_type', ';']
________________________________________________________________________________
Evaluating stack ['uint16', 'm_flags']
BraceDepth: 1
Evaluating stack ['uint16', 'm_flags', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint16', 'm_flags']
['uint16', 'm_flags', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_islandIndex']
BraceDepth: 1
Evaluating stack ['int32', 'm_islandIndex', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_islandIndex']
['int32', 'm_islandIndex', ';']
________________________________________________________________________________
Evaluating stack ['b2Transform', 'm_xf']
BraceDepth: 1
Evaluating stack ['b2Transform', 'm_xf', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Transform', 'm_xf']
['b2Transform', 'm_xf', ';']
________________________________________________________________________________
Evaluating stack ['b2Sweep', 'm_sweep']
BraceDepth: 1
Evaluating stack ['b2Sweep', 'm_sweep', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Sweep', 'm_sweep']
['b2Sweep', 'm_sweep', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_linearVelocity']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_linearVelocity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_linearVelocity']
['b2Vec2', 'm_linearVelocity', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_angularVelocity']
BraceDepth: 1
Evaluating stack ['float32', 'm_angularVelocity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_angularVelocity']
['float32', 'm_angularVelocity', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_force']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_force', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_force']
['b2Vec2', 'm_force', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_torque']
BraceDepth: 1
Evaluating stack ['float32', 'm_torque', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_torque']
['float32', 'm_torque', ';']
________________________________________________________________________________
Evaluating stack ['b2World', '*', 'm_world']
BraceDepth: 1
Evaluating stack ['b2World', '*', 'm_world', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2World', '*', 'm_world']
['b2World', '*', 'm_world', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_prev']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_prev', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_prev']
['b2Body', '*', 'm_prev', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_next']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_next', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_next']
['b2Body', '*', 'm_next', ';']
________________________________________________________________________________
Evaluating stack ['b2Fixture', '*', 'm_fixtureList']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'm_fixtureList', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'm_fixtureList']
['b2Fixture', '*', 'm_fixtureList', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_fixtureCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_fixtureCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_fixtureCount']
['int32', 'm_fixtureCount', ';']
________________________________________________________________________________
Evaluating stack ['b2JointEdge', '*', 'm_jointList']
BraceDepth: 1
Evaluating stack ['b2JointEdge', '*', 'm_jointList', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointEdge', '*', 'm_jointList']
['b2JointEdge', '*', 'm_jointList', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactEdge', '*', 'm_contactList']
BraceDepth: 1
Evaluating stack ['b2ContactEdge', '*', 'm_contactList', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactEdge', '*', 'm_contactList']
['b2ContactEdge', '*', 'm_contactList', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_mass', ',', 'm_invMass']
BraceDepth: 1
Evaluating stack ['float32', 'm_mass', ',', 'm_invMass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_mass', ',', 'm_invMass']
['float32', 'm_mass', ',', 'm_invMass', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_I', ',', 'm_invI']
BraceDepth: 1
Evaluating stack ['float32', 'm_I', ',', 'm_invI', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_I', ',', 'm_invI']
['float32', 'm_I', ',', 'm_invI', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_linearDamping']
BraceDepth: 1
Evaluating stack ['float32', 'm_linearDamping', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_linearDamping']
['float32', 'm_linearDamping', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_angularDamping']
BraceDepth: 1
Evaluating stack ['float32', 'm_angularDamping', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_angularDamping']
['float32', 'm_angularDamping', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_gravityScale']
BraceDepth: 1
Evaluating stack ['float32', 'm_gravityScale', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_gravityScale']
['float32', 'm_gravityScale', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_sleepTime']
BraceDepth: 1
Evaluating stack ['float32', 'm_sleepTime', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_sleepTime']
['float32', 'm_sleepTime', ';']
________________________________________________________________________________
Evaluating stack ['void', '*', 'm_userData']
BraceDepth: 1
Evaluating stack ['void', '*', 'm_userData', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'm_userData']
['void', '*', 'm_userData', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2BodyType', 'b2Body', ':', ':', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2BodyType', 'b2Body', ':', ':', 'GetType', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2BodyType', 'b2Body', ':', ':', 'GetType', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2BodyType', 'b2Body', ':', ':', 'GetType', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2BodyType', 'b2Body', ':', ':', 'GetType', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetType
Evaluating stack ['return', 'm_type']
BraceDepth: 1
Evaluating stack ['return', 'm_type', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Transform', '&', 'b2Body', ':', ':', 'GetTransform', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Transform', '&', 'b2Body', ':', ':', 'GetTransform', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Transform', '&', 'b2Body', ':', ':', 'GetTransform', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Transform', '&', 'b2Body', ':', ':', 'GetTransform', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Transform', '&', 'b2Body', ':', ':', 'GetTransform', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetTransform
Evaluating stack ['return', 'm_xf']
BraceDepth: 1
Evaluating stack ['return', 'm_xf', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetPosition', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetPosition', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetPosition', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetPosition', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetPosition', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetPosition
Evaluating stack ['return', 'm_xf', 'p']
BraceDepth: 1
Evaluating stack ['return', 'm_xf', 'p', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetAngle', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetAngle', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Body', ':', ':', 'GetAngle', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Body', ':', ':', 'GetAngle', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Body', ':', ':', 'GetAngle', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetAngle
Evaluating stack ['return', 'm_sweep', 'a']
BraceDepth: 1
Evaluating stack ['return', 'm_sweep', 'a', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetWorldCenter', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetWorldCenter', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetWorldCenter', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetWorldCenter', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetWorldCenter', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetWorldCenter
Evaluating stack ['return', 'm_sweep', 'c']
BraceDepth: 1
Evaluating stack ['return', 'm_sweep', 'c', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetLocalCenter', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetLocalCenter', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetLocalCenter', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetLocalCenter', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Vec2', '&', 'b2Body', ':', ':', 'GetLocalCenter', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetLocalCenter
Evaluating stack ['return', 'm_sweep', 'localCenter']
BraceDepth: 1
Evaluating stack ['return', 'm_sweep', 'localCenter', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetLinearVelocity', '(', 'const', 'b2Vec2', '&', 'v', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetLinearVelocity
Evaluating stack ['if', '(', 'm_type', '=', '=', 'b2_staticBody', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_type', '=', '=', 'b2_staticBody', ')', '{']
BraceDepth: 2
Evaluating stack ['return']
BraceDepth: 2
Evaluating stack ['return', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'b2Dot', '(', 'v', ',', 'v', ')', '>', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'b2Dot', '(', 'v', ',', 'v', ')', '>', '0', '0f', ')', '{']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_linearVelocity', '=', 'v']
BraceDepth: 1
Evaluating stack ['}', 'm_linearVelocity', '=', 'v', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocity', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocity', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocity', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocity', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetLinearVelocity
Evaluating stack ['return', 'm_linearVelocity']
BraceDepth: 1
Evaluating stack ['return', 'm_linearVelocity', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetAngularVelocity', '(', 'float32', 'w', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetAngularVelocity', '(', 'float32', 'w', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetAngularVelocity', '(', 'float32', 'w', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetAngularVelocity', '(', 'float32', 'w', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetAngularVelocity', '(', 'float32', 'w', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetAngularVelocity
Evaluating stack ['if', '(', 'm_type', '=', '=', 'b2_staticBody', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_type', '=', '=', 'b2_staticBody', ')', '{']
BraceDepth: 2
Evaluating stack ['return']
BraceDepth: 2
Evaluating stack ['return', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'w', '*', 'w', '>', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'w', '*', 'w', '>', '0', '0f', ')', '{']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_angularVelocity', '=', 'w']
BraceDepth: 1
Evaluating stack ['}', 'm_angularVelocity', '=', 'w', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularVelocity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularVelocity', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularVelocity', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularVelocity', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularVelocity', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetAngularVelocity
Evaluating stack ['return', 'm_angularVelocity']
BraceDepth: 1
Evaluating stack ['return', 'm_angularVelocity', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetMass', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetMass', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Body', ':', ':', 'GetMass', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Body', ':', ':', 'GetMass', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Body', ':', ':', 'GetMass', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetMass
Evaluating stack ['return', 'm_mass']
BraceDepth: 1
Evaluating stack ['return', 'm_mass', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetInertia', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetInertia', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Body', ':', ':', 'GetInertia', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Body', ':', ':', 'GetInertia', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Body', ':', ':', 'GetInertia', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetInertia
Evaluating stack ['return', 'm_I', '+', 'm_mass', '*', 'b2Dot', '(', 'm_sweep', 'localCenter', ',', 'm_sweep', 'localCenter', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_I', '+', 'm_mass', '*', 'b2Dot', '(', 'm_sweep', 'localCenter', ',', 'm_sweep', 'localCenter', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'data', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetMassData
Evaluating stack ['data', '-', '>mass', '=', 'm_mass']
BraceDepth: 1
Evaluating stack ['data', '-', '>mass', '=', 'm_mass', ';']
BraceDepth: 1
Evaluating stack ['data', '-', '>I', '=', 'm_I', '+', 'm_mass', '*', 'b2Dot', '(', 'm_sweep', 'localCenter', ',', 'm_sweep', 'localCenter', ')']
BraceDepth: 1
Evaluating stack ['data', '-', '>I', '=', 'm_I', '+', 'm_mass', '*', 'b2Dot', '(', 'm_sweep', 'localCenter', ',', 'm_sweep', 'localCenter', ')', ';']
BraceDepth: 1
Evaluating stack ['data', '-', '>center', '=', 'm_sweep', 'localCenter']
BraceDepth: 1
Evaluating stack ['data', '-', '>center', '=', 'm_sweep', 'localCenter', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetWorldPoint
Evaluating stack ['return', 'b2Mul', '(', 'm_xf', ',', 'localPoint', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Mul', '(', 'm_xf', ',', 'localPoint', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetWorldVector', '(', 'const', 'b2Vec2', '&', 'localVector', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetWorldVector
Evaluating stack ['return', 'b2Mul', '(', 'm_xf', 'q', ',', 'localVector', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2Mul', '(', 'm_xf', 'q', ',', 'localVector', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetLocalPoint
Evaluating stack ['return', 'b2MulT', '(', 'm_xf', ',', 'worldPoint', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2MulT', '(', 'm_xf', ',', 'worldPoint', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLocalVector', '(', 'const', 'b2Vec2', '&', 'worldVector', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetLocalVector
Evaluating stack ['return', 'b2MulT', '(', 'm_xf', 'q', ',', 'worldVector', ')']
BraceDepth: 1
Evaluating stack ['return', 'b2MulT', '(', 'm_xf', 'q', ',', 'worldVector', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromWorldPoint', '(', 'const', 'b2Vec2', '&', 'worldPoint', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetLinearVelocityFromWorldPoint
Evaluating stack ['return', 'm_linearVelocity', '+', 'b2Cross', '(', 'm_angularVelocity', ',', 'worldPoint', '-', 'm_sweep', 'c', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_linearVelocity', '+', 'b2Cross', '(', 'm_angularVelocity', ',', 'worldPoint', '-', 'm_sweep', 'c', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2Body', ':', ':', 'GetLinearVelocityFromLocalPoint', '(', 'const', 'b2Vec2', '&', 'localPoint', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetLinearVelocityFromLocalPoint
Evaluating stack ['return', 'GetLinearVelocityFromWorldPoint', '(', 'GetWorldPoint', '(', 'localPoint', ')', ')']
BraceDepth: 1
Evaluating stack ['return', 'GetLinearVelocityFromWorldPoint', '(', 'GetWorldPoint', '(', 'localPoint', ')', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetLinearDamping', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetLinearDamping', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Body', ':', ':', 'GetLinearDamping', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Body', ':', ':', 'GetLinearDamping', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Body', ':', ':', 'GetLinearDamping', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetLinearDamping
Evaluating stack ['return', 'm_linearDamping']
BraceDepth: 1
Evaluating stack ['return', 'm_linearDamping', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetLinearDamping', '(', 'float32', 'linearDamping', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetLinearDamping
Evaluating stack ['m_linearDamping', '=', 'linearDamping']
BraceDepth: 1
Evaluating stack ['m_linearDamping', '=', 'linearDamping', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularDamping', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularDamping', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularDamping', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularDamping', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Body', ':', ':', 'GetAngularDamping', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetAngularDamping
Evaluating stack ['return', 'm_angularDamping']
BraceDepth: 1
Evaluating stack ['return', 'm_angularDamping', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetAngularDamping', '(', 'float32', 'angularDamping', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetAngularDamping
Evaluating stack ['m_angularDamping', '=', 'angularDamping']
BraceDepth: 1
Evaluating stack ['m_angularDamping', '=', 'angularDamping', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetGravityScale', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Body', ':', ':', 'GetGravityScale', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Body', ':', ':', 'GetGravityScale', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Body', ':', ':', 'GetGravityScale', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Body', ':', ':', 'GetGravityScale', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetGravityScale
Evaluating stack ['return', 'm_gravityScale']
BraceDepth: 1
Evaluating stack ['return', 'm_gravityScale', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetGravityScale', '(', 'float32', 'scale', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetGravityScale', '(', 'float32', 'scale', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetGravityScale', '(', 'float32', 'scale', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetGravityScale', '(', 'float32', 'scale', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetGravityScale', '(', 'float32', 'scale', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetGravityScale
Evaluating stack ['m_gravityScale', '=', 'scale']
BraceDepth: 1
Evaluating stack ['m_gravityScale', '=', 'scale', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetBullet', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetBullet', '(', 'bool', 'flag', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetBullet', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetBullet', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetBullet', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetBullet
Evaluating stack ['if', '(', 'flag', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'flag', ')', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_bulletFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_bulletFlag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['else']
BraceDepth: 2
Evaluating stack ['}', 'else', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_bulletFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_bulletFlag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsBullet', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsBullet', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Body', ':', ':', 'IsBullet', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Body', ':', ':', 'IsBullet', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Body', ':', ':', 'IsBullet', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::IsBullet
Evaluating stack ['return', '(', 'm_flags', '&', 'e_bulletFlag', ')', '=', '=', 'e_bulletFlag']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_bulletFlag', ')', '=', '=', 'e_bulletFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetAwake', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetAwake', '(', 'bool', 'flag', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetAwake', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetAwake', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetAwake', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetAwake
Evaluating stack ['if', '(', 'flag', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'flag', ')', '{']
BraceDepth: 2
Evaluating stack ['if', '(', '(', 'm_flags', '&', 'e_awakeFlag', ')', '=', '=', '0', ')']
BraceDepth: 3
Evaluating stack ['if', '(', '(', 'm_flags', '&', 'e_awakeFlag', ')', '=', '=', '0', ')', '{']
BraceDepth: 3
Evaluating stack ['m_flags', '=', 'e_awakeFlag']
BraceDepth: 3
Evaluating stack ['m_flags', '=', 'e_awakeFlag', ';']
BraceDepth: 3
Evaluating stack ['m_sleepTime', '=', '0', '0f']
BraceDepth: 3
Evaluating stack ['m_sleepTime', '=', '0', '0f', ';']
BraceDepth: 3
Evaluating stack []
BraceDepth: 3
Evaluating stack ['}']
BraceDepth: 3
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}', '}']
BraceDepth: 2
Evaluating stack ['else']
BraceDepth: 2
Evaluating stack ['}', '}', 'else', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_awakeFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_awakeFlag', ';']
BraceDepth: 2
Evaluating stack ['m_sleepTime', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['m_sleepTime', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['m_linearVelocity', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['m_linearVelocity', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['m_angularVelocity', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['m_angularVelocity', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['m_force', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['m_force', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['m_torque', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['m_torque', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsAwake', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsAwake', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Body', ':', ':', 'IsAwake', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Body', ':', ':', 'IsAwake', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Body', ':', ':', 'IsAwake', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::IsAwake
Evaluating stack ['return', '(', 'm_flags', '&', 'e_awakeFlag', ')', '=', '=', 'e_awakeFlag']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_awakeFlag', ')', '=', '=', 'e_awakeFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsActive', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsActive', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Body', ':', ':', 'IsActive', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Body', ':', ':', 'IsActive', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Body', ':', ':', 'IsActive', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::IsActive
Evaluating stack ['return', '(', 'm_flags', '&', 'e_activeFlag', ')', '=', '=', 'e_activeFlag']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_activeFlag', ')', '=', '=', 'e_activeFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetFixedRotation', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetFixedRotation', '(', 'bool', 'flag', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetFixedRotation', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetFixedRotation', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetFixedRotation', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetFixedRotation
Evaluating stack ['if', '(', 'flag', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'flag', ')', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_fixedRotationFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_fixedRotationFlag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['else']
BraceDepth: 2
Evaluating stack ['}', 'else', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_fixedRotationFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_fixedRotationFlag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['ResetMassData', '(', ')']
BraceDepth: 1
Evaluating stack ['}', 'ResetMassData', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsFixedRotation', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsFixedRotation', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Body', ':', ':', 'IsFixedRotation', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Body', ':', ':', 'IsFixedRotation', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Body', ':', ':', 'IsFixedRotation', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::IsFixedRotation
Evaluating stack ['return', '(', 'm_flags', '&', 'e_fixedRotationFlag', ')', '=', '=', 'e_fixedRotationFlag']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_fixedRotationFlag', ')', '=', '=', 'e_fixedRotationFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetSleepingAllowed', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetSleepingAllowed', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetSleepingAllowed
Evaluating stack ['if', '(', 'flag', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'flag', ')', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_autoSleepFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_autoSleepFlag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['else']
BraceDepth: 2
Evaluating stack ['}', 'else', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_autoSleepFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_autoSleepFlag', ';']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsSleepingAllowed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Body', ':', ':', 'IsSleepingAllowed', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Body', ':', ':', 'IsSleepingAllowed', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Body', ':', ':', 'IsSleepingAllowed', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Body', ':', ':', 'IsSleepingAllowed', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::IsSleepingAllowed
Evaluating stack ['return', '(', 'm_flags', '&', 'e_autoSleepFlag', ')', '=', '=', 'e_autoSleepFlag']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_autoSleepFlag', ')', '=', '=', 'e_autoSleepFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetFixtureList
Evaluating stack ['return', 'm_fixtureList']
BraceDepth: 1
Evaluating stack ['return', 'm_fixtureList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Fixture', '*', 'b2Body', ':', ':', 'GetFixtureList', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetFixtureList
Evaluating stack ['return', 'm_fixtureList']
BraceDepth: 1
Evaluating stack ['return', 'm_fixtureList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetJointList
Evaluating stack ['return', 'm_jointList']
BraceDepth: 1
Evaluating stack ['return', 'm_jointList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2JointEdge', '*', 'b2Body', ':', ':', 'GetJointList', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetJointList
Evaluating stack ['return', 'm_jointList']
BraceDepth: 1
Evaluating stack ['return', 'm_jointList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetContactList
Evaluating stack ['return', 'm_contactList']
BraceDepth: 1
Evaluating stack ['return', 'm_contactList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2ContactEdge', '*', 'b2Body', ':', ':', 'GetContactList', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetContactList
Evaluating stack ['return', 'm_contactList']
BraceDepth: 1
Evaluating stack ['return', 'm_contactList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Body', '*', 'b2Body', ':', ':', 'GetNext', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SetUserData
Evaluating stack ['m_userData', '=', 'data']
BraceDepth: 1
Evaluating stack ['m_userData', '=', 'data', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', '*', 'b2Body', ':', ':', 'GetUserData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', '*', 'b2Body', ':', ':', 'GetUserData', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', '*', 'b2Body', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', '*', 'b2Body', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', '*', 'b2Body', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetUserData
Evaluating stack ['return', 'm_userData']
BraceDepth: 1
Evaluating stack ['return', 'm_userData', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'ApplyForce', '(', 'const', 'b2Vec2', '&', 'force', ',', 'const', 'b2Vec2', '&', 'point', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::ApplyForce
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')', '{']
BraceDepth: 2
Evaluating stack ['return']
BraceDepth: 2
Evaluating stack ['return', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')', '{']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_force', '+', '=', 'force']
BraceDepth: 1
Evaluating stack ['}', 'm_force', '+', '=', 'force', ';']
BraceDepth: 1
Evaluating stack ['m_torque', '+', '=', 'b2Cross', '(', 'point', '-', 'm_sweep', 'c', ',', 'force', ')']
BraceDepth: 1
Evaluating stack ['m_torque', '+', '=', 'b2Cross', '(', 'point', '-', 'm_sweep', 'c', ',', 'force', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'ApplyForceToCenter', '(', 'const', 'b2Vec2', '&', 'force', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::ApplyForceToCenter
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')', '{']
BraceDepth: 2
Evaluating stack ['return']
BraceDepth: 2
Evaluating stack ['return', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')', '{']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_force', '+', '=', 'force']
BraceDepth: 1
Evaluating stack ['}', 'm_force', '+', '=', 'force', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyTorque', '(', 'float32', 'torque', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyTorque', '(', 'float32', 'torque', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'ApplyTorque', '(', 'float32', 'torque', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'ApplyTorque', '(', 'float32', 'torque', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'ApplyTorque', '(', 'float32', 'torque', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::ApplyTorque
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')', '{']
BraceDepth: 2
Evaluating stack ['return']
BraceDepth: 2
Evaluating stack ['return', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')', '{']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_torque', '+', '=', 'torque']
BraceDepth: 1
Evaluating stack ['}', 'm_torque', '+', '=', 'torque', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'ApplyLinearImpulse', '(', 'const', 'b2Vec2', '&', 'impulse', ',', 'const', 'b2Vec2', '&', 'point', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::ApplyLinearImpulse
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')', '{']
BraceDepth: 2
Evaluating stack ['return']
BraceDepth: 2
Evaluating stack ['return', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')', '{']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_linearVelocity', '+', '=', 'm_invMass', '*', 'impulse']
BraceDepth: 1
Evaluating stack ['}', 'm_linearVelocity', '+', '=', 'm_invMass', '*', 'impulse', ';']
BraceDepth: 1
Evaluating stack ['m_angularVelocity', '+', '=', 'm_invI', '*', 'b2Cross', '(', 'point', '-', 'm_sweep', 'c', ',', 'impulse', ')']
BraceDepth: 1
Evaluating stack ['m_angularVelocity', '+', '=', 'm_invI', '*', 'b2Cross', '(', 'point', '-', 'm_sweep', 'c', ',', 'impulse', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'ApplyAngularImpulse', '(', 'float32', 'impulse', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::ApplyAngularImpulse
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'm_type', '=', 'b2_dynamicBody', ')', '{']
BraceDepth: 2
Evaluating stack ['return']
BraceDepth: 2
Evaluating stack ['return', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')']
BraceDepth: 2
Evaluating stack ['}', 'if', '(', 'IsAwake', '(', ')', '=', '=', 'false', ')', '{']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')']
BraceDepth: 2
Evaluating stack ['SetAwake', '(', 'true', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['m_angularVelocity', '+', '=', 'm_invI', '*', 'impulse']
BraceDepth: 1
Evaluating stack ['}', 'm_angularVelocity', '+', '=', 'm_invI', '*', 'impulse', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SynchronizeTransform', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'SynchronizeTransform', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'SynchronizeTransform', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'SynchronizeTransform', '(', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'SynchronizeTransform', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::SynchronizeTransform
Evaluating stack ['m_xf', 'q', 'Set', '(', 'm_sweep', 'a', ')']
BraceDepth: 1
Evaluating stack ['m_xf', 'q', 'Set', '(', 'm_sweep', 'a', ')', ';']
BraceDepth: 1
Evaluating stack ['m_xf', 'p', '=', 'm_sweep', 'c', '-', 'b2Mul', '(', 'm_xf', 'q', ',', 'm_sweep', 'localCenter', ')']
BraceDepth: 1
Evaluating stack ['m_xf', 'p', '=', 'm_sweep', 'c', '-', 'b2Mul', '(', 'm_xf', 'q', ',', 'm_sweep', 'localCenter', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'Advance', '(', 'float32', 'alpha', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Body', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Body', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Body', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Body', ':', ':', 'Advance', '(', 'float32', 'alpha', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::Advance
Evaluating stack ['m_sweep', 'Advance', '(', 'alpha', ')']
BraceDepth: 1
Evaluating stack ['m_sweep', 'Advance', '(', 'alpha', ')', ';']
BraceDepth: 1
Evaluating stack ['m_sweep', 'c', '=', 'm_sweep', 'c0']
BraceDepth: 1
Evaluating stack ['m_sweep', 'c', '=', 'm_sweep', 'c0', ';']
BraceDepth: 1
Evaluating stack ['m_sweep', 'a', '=', 'm_sweep', 'a0']
BraceDepth: 1
Evaluating stack ['m_sweep', 'a', '=', 'm_sweep', 'a0', ';']
BraceDepth: 1
Evaluating stack ['m_xf', 'q', 'Set', '(', 'm_sweep', 'a', ')']
BraceDepth: 1
Evaluating stack ['m_xf', 'q', 'Set', '(', 'm_sweep', 'a', ')', ';']
BraceDepth: 1
Evaluating stack ['m_xf', 'p', '=', 'm_sweep', 'c', '-', 'b2Mul', '(', 'm_xf', 'q', ',', 'm_sweep', 'localCenter', ')']
BraceDepth: 1
Evaluating stack ['m_xf', 'p', '=', 'm_sweep', 'c', '-', 'b2Mul', '(', 'm_xf', 'q', ',', 'm_sweep', 'localCenter', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetWorld
Evaluating stack ['return', 'm_world']
BraceDepth: 1
Evaluating stack ['return', 'm_world', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2World', '*', 'b2Body', ':', ':', 'GetWorld', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Body::GetWorld
Evaluating stack ['return', 'm_world']
BraceDepth: 1
Evaluating stack ['return', 'm_world', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2BlockAllocator']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Body']
BraceDepth: 0
Evaluating stack ['class', 'b2Body', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2BroadPhase']
BraceDepth: 0
Evaluating stack ['class', 'b2BroadPhase', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Filter']
BraceDepth: 1
Evaluating stack ['struct', 'b2Filter', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Filter', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Filter', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Filter', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Filter', '(', ')', '{'])
('is method namestack', True, ['b2Filter', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Filter
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2Filter', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2Filter ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['categoryBits', '=', '0x0001']
BraceDepth: 2
Evaluating stack ['categoryBits', '=', '0x0001', ';']
BraceDepth: 2
Evaluating stack ['maskBits', '=', '0xFFFF']
BraceDepth: 2
Evaluating stack ['maskBits', '=', '0xFFFF', ';']
BraceDepth: 2
Evaluating stack ['groupIndex', '=', '0']
BraceDepth: 2
Evaluating stack ['groupIndex', '=', '0', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['uint16', 'categoryBits']
BraceDepth: 1
Evaluating stack ['uint16', 'categoryBits', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint16', 'categoryBits']
['uint16', 'categoryBits', ';']
________________________________________________________________________________
Evaluating stack ['uint16', 'maskBits']
BraceDepth: 1
Evaluating stack ['uint16', 'maskBits', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint16', 'maskBits']
['uint16', 'maskBits', ';']
________________________________________________________________________________
Evaluating stack ['int16', 'groupIndex']
BraceDepth: 1
Evaluating stack ['int16', 'groupIndex', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int16', 'groupIndex']
['int16', 'groupIndex', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2FixtureDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2FixtureDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2FixtureDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2FixtureDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2FixtureDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2FixtureDef', '(', ')', '{'])
('is method namestack', True, ['b2FixtureDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2FixtureDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2FixtureDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2FixtureDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['shape', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['shape', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['userData', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['userData', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['friction', '=', '0', '2f']
BraceDepth: 2
Evaluating stack ['friction', '=', '0', '2f', ';']
BraceDepth: 2
Evaluating stack ['restitution', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['restitution', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['density', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['density', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['isSensor', '=', 'false']
BraceDepth: 2
Evaluating stack ['isSensor', '=', 'false', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Shape', '*', 'shape']
BraceDepth: 1
Evaluating stack ['const', 'b2Shape', '*', 'shape', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Shape', '*', 'shape']
['const', 'b2Shape', '*', 'shape', ';']
________________________________________________________________________________
Evaluating stack ['void', '*', 'userData']
BraceDepth: 1
Evaluating stack ['void', '*', 'userData', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'userData']
['void', '*', 'userData', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'friction']
BraceDepth: 1
Evaluating stack ['float32', 'friction', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'friction']
['float32', 'friction', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'restitution']
BraceDepth: 1
Evaluating stack ['float32', 'restitution', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'restitution']
['float32', 'restitution', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'density']
BraceDepth: 1
Evaluating stack ['float32', 'density', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
['float32', 'density', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'isSensor']
BraceDepth: 1
Evaluating stack ['bool', 'isSensor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'isSensor']
['bool', 'isSensor', ';']
________________________________________________________________________________
Evaluating stack ['b2Filter', 'filter']
BraceDepth: 1
Evaluating stack ['b2Filter', 'filter', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Filter', 'filter']
['b2Filter', 'filter', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2FixtureProxy']
BraceDepth: 1
Evaluating stack ['struct', 'b2FixtureProxy', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2AABB', 'aabb']
BraceDepth: 1
Evaluating stack ['b2AABB', 'aabb', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2AABB', 'aabb']
['b2AABB', 'aabb', ';']
________________________________________________________________________________
Evaluating stack ['b2Fixture', '*', 'fixture']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'fixture', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixture']
['b2Fixture', '*', 'fixture', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'childIndex']
BraceDepth: 1
Evaluating stack ['int32', 'childIndex', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
['int32', 'childIndex', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'proxyId']
BraceDepth: 1
Evaluating stack ['int32', 'proxyId', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'proxyId']
['int32', 'proxyId', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture']
BraceDepth: 1
Evaluating stack ['class', 'b2Fixture', '{']
BraceDepth: 1
('NEWCLASS', 'class b2Fixture')
('stack IN', 'class b2Fixture')
('HEAD', ['class', 'b2Fixture'])
______________
('TAIL', [])
('CLASS OK', 'b2Fixture')
('CURACCESS-set', 'public')
Evaluating stack ['b2Shape', ':', ':', 'Type', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Shape', ':', ':', 'Type', 'GetType', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Shape', ':', ':', 'Type', 'GetType', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Shape', ':', ':', 'Type', 'GetType', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Shape', ':', ':', 'Type', 'GetType', '(', ')', 'const', ';'])
________________________________________________________________________________
GetType
Evaluating stack ['b2Shape', '*', 'GetShape', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Shape', '*', 'GetShape', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Shape', '*', 'GetShape', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Shape', '*', 'GetShape', '(', ')', ';'])
('is method namestack', True, ['b2Shape', '*', 'GetShape', '(', ')', ';'])
________________________________________________________________________________
GetShape
Evaluating stack ['const', 'b2Shape', '*', 'GetShape', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Shape', '*', 'GetShape', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Shape', '*', 'GetShape', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Shape', '*', 'GetShape', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Shape', '*', 'GetShape', '(', ')', 'const', ';'])
________________________________________________________________________________
GetShape
Evaluating stack ['void', 'SetSensor', '(', 'bool', 'sensor', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetSensor', '(', 'bool', 'sensor', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetSensor', '(', 'bool', 'sensor', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetSensor', '(', 'bool', 'sensor', ')', ';'])
('is method namestack', True, ['void', 'SetSensor', '(', 'bool', 'sensor', ')', ';'])
________________________________________________________________________________
SetSensor
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'sensor']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsSensor', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsSensor', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsSensor', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsSensor', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsSensor', '(', ')', 'const', ';'])
________________________________________________________________________________
IsSensor
Evaluating stack ['void', 'SetFilterData', '(', 'const', 'b2Filter', '&', 'filter', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetFilterData', '(', 'const', 'b2Filter', '&', 'filter', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetFilterData', '(', 'const', 'b2Filter', '&', 'filter', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetFilterData', '(', 'const', 'b2Filter', '&', 'filter', ')', ';'])
('is method namestack', True, ['void', 'SetFilterData', '(', 'const', 'b2Filter', '&', 'filter', ')', ';'])
________________________________________________________________________________
SetFilterData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Filter', '&', 'filter']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Filter', '&', 'GetFilterData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Filter', '&', 'GetFilterData', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Filter', '&', 'GetFilterData', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Filter', '&', 'GetFilterData', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Filter', '&', 'GetFilterData', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFilterData
Evaluating stack ['void', 'Refilter', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Refilter', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Refilter', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Refilter', '(', ')', ';'])
('is method namestack', True, ['void', 'Refilter', '(', ')', ';'])
________________________________________________________________________________
Refilter
Evaluating stack ['b2Body', '*', 'GetBody', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'GetBody', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Body', '*', 'GetBody', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Body', '*', 'GetBody', '(', ')', ';'])
('is method namestack', True, ['b2Body', '*', 'GetBody', '(', ')', ';'])
________________________________________________________________________________
GetBody
Evaluating stack ['const', 'b2Body', '*', 'GetBody', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Body', '*', 'GetBody', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Body', '*', 'GetBody', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Body', '*', 'GetBody', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Body', '*', 'GetBody', '(', ')', 'const', ';'])
________________________________________________________________________________
GetBody
Evaluating stack ['b2Fixture', '*', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'GetNext', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Fixture', '*', 'GetNext', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Fixture', '*', 'GetNext', '(', ')', ';'])
('is method namestack', True, ['b2Fixture', '*', 'GetNext', '(', ')', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['const', 'b2Fixture', '*', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Fixture', '*', 'GetNext', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Fixture', '*', 'GetNext', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Fixture', '*', 'GetNext', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Fixture', '*', 'GetNext', '(', ')', 'const', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['void', '*', 'GetUserData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', '*', 'GetUserData', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
('is method namestack', True, ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
________________________________________________________________________________
GetUserData
Evaluating stack ['void', 'SetUserData', '(', 'void', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
('is method namestack', True, ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
________________________________________________________________________________
SetUserData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
('is method namestack', True, ['bool', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', ';'])
________________________________________________________________________________
TestPoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'p']
None
________________________________________________________________________________
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['bool', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastOutput', '*', 'output']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RayCastInput', '&', 'input']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', ';'])
________________________________________________________________________________
GetMassData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2MassData', '*', 'massData']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetDensity', '(', 'float32', 'density', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetDensity', '(', 'float32', 'density', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetDensity', '(', 'float32', 'density', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetDensity', '(', 'float32', 'density', ')', ';'])
('is method namestack', True, ['void', 'SetDensity', '(', 'float32', 'density', ')', ';'])
________________________________________________________________________________
SetDensity
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'density']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetDensity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetDensity', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetDensity', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetDensity', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetDensity', '(', ')', 'const', ';'])
________________________________________________________________________________
GetDensity
Evaluating stack ['float32', 'GetFriction', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetFriction', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetFriction', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetFriction', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetFriction', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFriction
Evaluating stack ['void', 'SetFriction', '(', 'float32', 'friction', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';'])
('is method namestack', True, ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';'])
________________________________________________________________________________
SetFriction
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'friction']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetRestitution', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetRestitution', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetRestitution', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetRestitution', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetRestitution', '(', ')', 'const', ';'])
________________________________________________________________________________
GetRestitution
Evaluating stack ['void', 'SetRestitution', '(', 'float32', 'restitution', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';'])
('is method namestack', True, ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';'])
________________________________________________________________________________
SetRestitution
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'restitution']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2AABB', '&', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2AABB', '&', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2AABB', '&', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2AABB', '&', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2AABB', '&', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', ';'])
________________________________________________________________________________
GetAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'childIndex']
None
________________________________________________________________________________
Evaluating stack ['void', 'Dump', '(', 'int32', 'bodyIndex', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', 'int32', 'bodyIndex', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', 'int32', 'bodyIndex', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', 'int32', 'bodyIndex', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', 'int32', 'bodyIndex', ')', ';'])
________________________________________________________________________________
Dump
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'bodyIndex']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Body']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Body', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2World']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2World', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Contact']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Contact', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactManager']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactManager', ';']
BraceDepth: 1
('CURACCESS-set', 'public')
Evaluating stack ['b2Fixture', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Fixture', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Fixture', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Fixture', '(', ')', ';'])
('is method namestack', True, ['b2Fixture', '(', ')', ';'])
________________________________________________________________________________
b2Fixture
('CURACCESS-set', 'protected')
Evaluating stack ['void', 'Create', '(', 'b2BlockAllocator', '*', 'allocator', ',', 'b2Body', '*', 'body', ',', 'const', 'b2FixtureDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['void', 'Create', '(', 'b2BlockAllocator', '*', 'allocator', ',', 'b2Body', '*', 'body', ',', 'const', 'b2FixtureDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Create', '(', 'b2BlockAllocator', '*', 'allocator', ',', 'b2Body', '*', 'body', ',', 'const', 'b2FixtureDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['void', 'Create', '(', 'b2BlockAllocator', '*', 'allocator', ',', 'b2Body', '*', 'body', ',', 'const', 'b2FixtureDef', '*', 'def', ')', ';'])
('is method namestack', True, ['void', 'Create', '(', 'b2BlockAllocator', '*', 'allocator', ',', 'b2Body', '*', 'body', ',', 'const', 'b2FixtureDef', '*', 'def', ')', ';'])
________________________________________________________________________________
Create
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'body']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2FixtureDef', '*', 'def']
None
________________________________________________________________________________
Evaluating stack ['void', 'Destroy', '(', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 1
Evaluating stack ['void', 'Destroy', '(', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Destroy', '(', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('CLEAN ARRAYS', ['void', 'Destroy', '(', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('is method namestack', True, ['void', 'Destroy', '(', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
________________________________________________________________________________
Destroy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['void', 'CreateProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf', ')']
BraceDepth: 1
Evaluating stack ['void', 'CreateProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'CreateProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf', ')', ';'])
('CLEAN ARRAYS', ['void', 'CreateProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf', ')', ';'])
('is method namestack', True, ['void', 'CreateProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf', ')', ';'])
________________________________________________________________________________
CreateProxies
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BroadPhase', '*', 'broadPhase']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xf']
None
________________________________________________________________________________
Evaluating stack ['void', 'DestroyProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ')']
BraceDepth: 1
Evaluating stack ['void', 'DestroyProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DestroyProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ')', ';'])
('CLEAN ARRAYS', ['void', 'DestroyProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ')', ';'])
('is method namestack', True, ['void', 'DestroyProxies', '(', 'b2BroadPhase', '*', 'broadPhase', ')', ';'])
________________________________________________________________________________
DestroyProxies
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BroadPhase', '*', 'broadPhase']
None
________________________________________________________________________________
Evaluating stack ['void', 'Synchronize', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf1', ',', 'const', 'b2Transform', '&', 'xf2', ')']
BraceDepth: 1
Evaluating stack ['void', 'Synchronize', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf1', ',', 'const', 'b2Transform', '&', 'xf2', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Synchronize', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf1', ',', 'const', 'b2Transform', '&', 'xf2', ')', ';'])
('CLEAN ARRAYS', ['void', 'Synchronize', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf1', ',', 'const', 'b2Transform', '&', 'xf2', ')', ';'])
('is method namestack', True, ['void', 'Synchronize', '(', 'b2BroadPhase', '*', 'broadPhase', ',', 'const', 'b2Transform', '&', 'xf1', ',', 'const', 'b2Transform', '&', 'xf2', ')', ';'])
________________________________________________________________________________
Synchronize
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BroadPhase', '*', 'broadPhase']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xf1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xf2']
None
________________________________________________________________________________
Evaluating stack ['float32', 'm_density']
BraceDepth: 1
Evaluating stack ['float32', 'm_density', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_density']
['float32', 'm_density', ';']
________________________________________________________________________________
Evaluating stack ['b2Fixture', '*', 'm_next']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'm_next', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'm_next']
['b2Fixture', '*', 'm_next', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_body']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_body', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_body']
['b2Body', '*', 'm_body', ';']
________________________________________________________________________________
Evaluating stack ['b2Shape', '*', 'm_shape']
BraceDepth: 1
Evaluating stack ['b2Shape', '*', 'm_shape', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Shape', '*', 'm_shape']
['b2Shape', '*', 'm_shape', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_friction']
BraceDepth: 1
Evaluating stack ['float32', 'm_friction', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_friction']
['float32', 'm_friction', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_restitution']
BraceDepth: 1
Evaluating stack ['float32', 'm_restitution', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_restitution']
['float32', 'm_restitution', ';']
________________________________________________________________________________
Evaluating stack ['b2FixtureProxy', '*', 'm_proxies']
BraceDepth: 1
Evaluating stack ['b2FixtureProxy', '*', 'm_proxies', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2FixtureProxy', '*', 'm_proxies']
['b2FixtureProxy', '*', 'm_proxies', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_proxyCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_proxyCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_proxyCount']
['int32', 'm_proxyCount', ';']
________________________________________________________________________________
Evaluating stack ['b2Filter', 'm_filter']
BraceDepth: 1
Evaluating stack ['b2Filter', 'm_filter', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Filter', 'm_filter']
['b2Filter', 'm_filter', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_isSensor']
BraceDepth: 1
Evaluating stack ['bool', 'm_isSensor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_isSensor']
['bool', 'm_isSensor', ';']
________________________________________________________________________________
Evaluating stack ['void', '*', 'm_userData']
BraceDepth: 1
Evaluating stack ['void', '*', 'm_userData', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'm_userData']
['void', '*', 'm_userData', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2Shape', ':', ':', 'Type', 'b2Fixture', ':', ':', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Shape', ':', ':', 'Type', 'b2Fixture', ':', ':', 'GetType', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Shape', ':', ':', 'Type', 'b2Fixture', ':', ':', 'GetType', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Shape', ':', ':', 'Type', 'b2Fixture', ':', ':', 'GetType', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Shape', ':', ':', 'Type', 'b2Fixture', ':', ':', 'GetType', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetType
Evaluating stack ['return', 'm_shape', '-', '>GetType', '(', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_shape', '-', '>GetType', '(', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetShape
Evaluating stack ['return', 'm_shape']
BraceDepth: 1
Evaluating stack ['return', 'm_shape', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Shape', '*', 'b2Fixture', ':', ':', 'GetShape', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetShape
Evaluating stack ['return', 'm_shape']
BraceDepth: 1
Evaluating stack ['return', 'm_shape', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Fixture', ':', ':', 'IsSensor', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Fixture', ':', ':', 'IsSensor', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Fixture', ':', ':', 'IsSensor', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Fixture', ':', ':', 'IsSensor', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Fixture', ':', ':', 'IsSensor', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::IsSensor
Evaluating stack ['return', 'm_isSensor']
BraceDepth: 1
Evaluating stack ['return', 'm_isSensor', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Filter', '&', 'b2Fixture', ':', ':', 'GetFilterData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Filter', '&', 'b2Fixture', ':', ':', 'GetFilterData', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Filter', '&', 'b2Fixture', ':', ':', 'GetFilterData', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Filter', '&', 'b2Fixture', ':', ':', 'GetFilterData', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Filter', '&', 'b2Fixture', ':', ':', 'GetFilterData', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetFilterData
Evaluating stack ['return', 'm_filter']
BraceDepth: 1
Evaluating stack ['return', 'm_filter', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', '*', 'b2Fixture', ':', ':', 'GetUserData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', '*', 'b2Fixture', ':', ':', 'GetUserData', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', '*', 'b2Fixture', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', '*', 'b2Fixture', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', '*', 'b2Fixture', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetUserData
Evaluating stack ['return', 'm_userData']
BraceDepth: 1
Evaluating stack ['return', 'm_userData', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Fixture', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Fixture', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Fixture', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::SetUserData
Evaluating stack ['m_userData', '=', 'data']
BraceDepth: 1
Evaluating stack ['m_userData', '=', 'data', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetBody
Evaluating stack ['return', 'm_body']
BraceDepth: 1
Evaluating stack ['return', 'm_body', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Body', '*', 'b2Fixture', ':', ':', 'GetBody', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetBody
Evaluating stack ['return', 'm_body']
BraceDepth: 1
Evaluating stack ['return', 'm_body', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Fixture', '*', 'b2Fixture', ':', ':', 'GetNext', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetDensity', '(', 'float32', 'density', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetDensity', '(', 'float32', 'density', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Fixture', ':', ':', 'SetDensity', '(', 'float32', 'density', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Fixture', ':', ':', 'SetDensity', '(', 'float32', 'density', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Fixture', ':', ':', 'SetDensity', '(', 'float32', 'density', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::SetDensity
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['m_density', '=', 'density']
BraceDepth: 1
Evaluating stack ['m_density', '=', 'density', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Fixture', ':', ':', 'GetDensity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Fixture', ':', ':', 'GetDensity', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Fixture', ':', ':', 'GetDensity', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Fixture', ':', ':', 'GetDensity', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Fixture', ':', ':', 'GetDensity', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetDensity
Evaluating stack ['return', 'm_density']
BraceDepth: 1
Evaluating stack ['return', 'm_density', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Fixture', ':', ':', 'GetFriction', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Fixture', ':', ':', 'GetFriction', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Fixture', ':', ':', 'GetFriction', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Fixture', ':', ':', 'GetFriction', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Fixture', ':', ':', 'GetFriction', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetFriction
Evaluating stack ['return', 'm_friction']
BraceDepth: 1
Evaluating stack ['return', 'm_friction', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Fixture', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Fixture', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Fixture', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::SetFriction
Evaluating stack ['m_friction', '=', 'friction']
BraceDepth: 1
Evaluating stack ['m_friction', '=', 'friction', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Fixture', ':', ':', 'GetRestitution', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Fixture', ':', ':', 'GetRestitution', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Fixture', ':', ':', 'GetRestitution', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Fixture', ':', ':', 'GetRestitution', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Fixture', ':', ':', 'GetRestitution', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetRestitution
Evaluating stack ['return', 'm_restitution']
BraceDepth: 1
Evaluating stack ['return', 'm_restitution', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Fixture', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Fixture', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Fixture', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::SetRestitution
Evaluating stack ['m_restitution', '=', 'restitution']
BraceDepth: 1
Evaluating stack ['m_restitution', '=', 'restitution', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Fixture', ':', ':', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Fixture', ':', ':', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Fixture', ':', ':', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Fixture', ':', ':', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Fixture', ':', ':', 'TestPoint', '(', 'const', 'b2Vec2', '&', 'p', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::TestPoint
Evaluating stack ['return', 'm_shape', '-', '>TestPoint', '(', 'm_body', '-', '>GetTransform', '(', ')', ',', 'p', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_shape', '-', '>TestPoint', '(', 'm_body', '-', '>GetTransform', '(', ')', ',', 'p', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Fixture', ':', ':', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Fixture', ':', ':', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Fixture', ':', ':', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Fixture', ':', ':', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Fixture', ':', ':', 'RayCast', '(', 'b2RayCastOutput', '*', 'output', ',', 'const', 'b2RayCastInput', '&', 'input', ',', 'int32', 'childIndex', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::RayCast
Evaluating stack ['return', 'm_shape', '-', '>RayCast', '(', 'output', ',', 'input', ',', 'm_body', '-', '>GetTransform', '(', ')', ',', 'childIndex', ')']
BraceDepth: 1
Evaluating stack ['return', 'm_shape', '-', '>RayCast', '(', 'output', ',', 'input', ',', 'm_body', '-', '>GetTransform', '(', ')', ',', 'childIndex', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Fixture', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Fixture', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Fixture', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', 'b2Fixture', ':', ':', 'GetMassData', '(', 'b2MassData', '*', 'massData', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetMassData
Evaluating stack ['m_shape', '-', '>ComputeMass', '(', 'massData', ',', 'm_density', ')']
BraceDepth: 1
Evaluating stack ['m_shape', '-', '>ComputeMass', '(', 'massData', ',', 'm_density', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2AABB', '&', 'b2Fixture', ':', ':', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2AABB', '&', 'b2Fixture', ':', ':', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2AABB', '&', 'b2Fixture', ':', ':', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2AABB', '&', 'b2Fixture', ':', ':', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2AABB', '&', 'b2Fixture', ':', ':', 'GetAABB', '(', 'int32', 'childIndex', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Fixture::GetAABB
Evaluating stack ['(', '(', 'void', ')', '0', ')']
BraceDepth: 1
Evaluating stack ['(', '(', 'void', ')', '0', ')', ';']
BraceDepth: 1
Evaluating stack ['return', 'm_proxies', '[', 'childIndex', ']', 'aabb']
BraceDepth: 1
Evaluating stack ['return', 'm_proxies', '[', 'childIndex', ']', 'aabb', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2Vec2']
BraceDepth: 0
Evaluating stack ['struct', 'b2Vec2', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Transform']
BraceDepth: 0
Evaluating stack ['struct', 'b2Transform', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Body']
BraceDepth: 0
Evaluating stack ['class', 'b2Body', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2ContactResult']
BraceDepth: 0
Evaluating stack ['struct', 'b2ContactResult', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Manifold']
BraceDepth: 0
Evaluating stack ['struct', 'b2Manifold', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2DestructionListener']
BraceDepth: 1
Evaluating stack ['class', 'b2DestructionListener', '{']
BraceDepth: 1
('NEWCLASS', 'class b2DestructionListener')
('stack IN', 'class b2DestructionListener')
('HEAD', ['class', 'b2DestructionListener'])
______________
('TAIL', [])
('CLASS OK', 'b2DestructionListener')
('CURACCESS-set', 'public')
Evaluating stack ['b2DestructionListener', '(', ')']
BraceDepth: 2
Evaluating stack ['b2DestructionListener', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2DestructionListener', '(', ')', '{'])
('CLEAN ARRAYS', ['b2DestructionListener', '(', ')', '{'])
('is method namestack', True, ['b2DestructionListener', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2DestructionListener
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', '~b2DestructionListener', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2DestructionListener', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2DestructionListener', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2DestructionListener', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2DestructionListener', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2DestructionListener
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'SayGoodbye', '(', 'b2Joint', '*', 'joint', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'SayGoodbye', '(', 'b2Joint', '*', 'joint', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'SayGoodbye', '(', 'b2Joint', '*', 'joint', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'SayGoodbye', '(', 'b2Joint', '*', 'joint', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'SayGoodbye', '(', 'b2Joint', '*', 'joint', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SayGoodbye
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'joint']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'SayGoodbye', '(', 'b2Fixture', '*', 'fixture', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'SayGoodbye', '(', 'b2Fixture', '*', 'fixture', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'SayGoodbye', '(', 'b2Fixture', '*', 'fixture', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'SayGoodbye', '(', 'b2Fixture', '*', 'fixture', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'SayGoodbye', '(', 'b2Fixture', '*', 'fixture', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SayGoodbye
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixture']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactFilter']
BraceDepth: 1
Evaluating stack ['class', 'b2ContactFilter', '{']
BraceDepth: 1
('NEWCLASS', 'class b2ContactFilter')
('stack IN', 'class b2ContactFilter')
('HEAD', ['class', 'b2ContactFilter'])
______________
('TAIL', [])
('CLASS OK', 'b2ContactFilter')
('CURACCESS-set', 'public')
Evaluating stack ['virtual', '~b2ContactFilter', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2ContactFilter', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2ContactFilter', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2ContactFilter', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2ContactFilter', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2ContactFilter
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'bool', 'ShouldCollide', '(', 'b2Fixture', '*', 'fixtureA', ',', 'b2Fixture', '*', 'fixtureB', ')']
BraceDepth: 1
Evaluating stack ['virtual', 'bool', 'ShouldCollide', '(', 'b2Fixture', '*', 'fixtureA', ',', 'b2Fixture', '*', 'fixtureB', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'bool', 'ShouldCollide', '(', 'b2Fixture', '*', 'fixtureA', ',', 'b2Fixture', '*', 'fixtureB', ')', ';'])
('CLEAN ARRAYS', ['virtual', 'bool', 'ShouldCollide', '(', 'b2Fixture', '*', 'fixtureA', ',', 'b2Fixture', '*', 'fixtureB', ')', ';'])
('is method namestack', True, ['virtual', 'bool', 'ShouldCollide', '(', 'b2Fixture', '*', 'fixtureA', ',', 'b2Fixture', '*', 'fixtureB', ')', ';'])
________________________________________________________________________________
ShouldCollide
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixtureA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixtureB']
None
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2ContactImpulse']
BraceDepth: 1
Evaluating stack ['struct', 'b2ContactImpulse', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['float32', 'normalImpulses', '[', '2', ']']
BraceDepth: 1
Evaluating stack ['float32', 'normalImpulses', '[', '2', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'normalImpulses', '[', '2', ']']
['float32', 'normalImpulses', '[', '2', ']', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'tangentImpulses', '[', '2', ']']
BraceDepth: 1
Evaluating stack ['float32', 'tangentImpulses', '[', '2', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'tangentImpulses', '[', '2', ']']
['float32', 'tangentImpulses', '[', '2', ']', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'count']
BraceDepth: 1
Evaluating stack ['int32', 'count', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'count']
['int32', 'count', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactListener']
BraceDepth: 1
Evaluating stack ['class', 'b2ContactListener', '{']
BraceDepth: 1
('NEWCLASS', 'class b2ContactListener')
('stack IN', 'class b2ContactListener')
('HEAD', ['class', 'b2ContactListener'])
______________
('TAIL', [])
('CLASS OK', 'b2ContactListener')
('CURACCESS-set', 'public')
Evaluating stack ['b2ContactListener', '(', ')']
BraceDepth: 2
Evaluating stack ['b2ContactListener', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2ContactListener', '(', ')', '{'])
('CLEAN ARRAYS', ['b2ContactListener', '(', ')', '{'])
('is method namestack', True, ['b2ContactListener', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2ContactListener
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', '~b2ContactListener', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2ContactListener', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2ContactListener', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2ContactListener', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2ContactListener', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2ContactListener
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'BeginContact', '(', 'b2Contact', '*', 'contact', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'BeginContact', '(', 'b2Contact', '*', 'contact', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'BeginContact', '(', 'b2Contact', '*', 'contact', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'BeginContact', '(', 'b2Contact', '*', 'contact', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'BeginContact', '(', 'b2Contact', '*', 'contact', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
BeginContact
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'contact']
None
________________________________________________________________________________
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'EndContact', '(', 'b2Contact', '*', 'contact', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'EndContact', '(', 'b2Contact', '*', 'contact', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'EndContact', '(', 'b2Contact', '*', 'contact', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'EndContact', '(', 'b2Contact', '*', 'contact', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'EndContact', '(', 'b2Contact', '*', 'contact', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
EndContact
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'contact']
None
________________________________________________________________________________
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'PreSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2Manifold', '*', 'oldManifold', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'PreSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2Manifold', '*', 'oldManifold', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'PreSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2Manifold', '*', 'oldManifold', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'PreSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2Manifold', '*', 'oldManifold', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'PreSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2Manifold', '*', 'oldManifold', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
PreSolve
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'contact']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Manifold', '*', 'oldManifold']
None
________________________________________________________________________________
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')', ';']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'oldManifold', ')', ')']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'oldManifold', ')', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'PostSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2ContactImpulse', '*', 'impulse', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'PostSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2ContactImpulse', '*', 'impulse', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'PostSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2ContactImpulse', '*', 'impulse', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'PostSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2ContactImpulse', '*', 'impulse', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'PostSolve', '(', 'b2Contact', '*', 'contact', ',', 'const', 'b2ContactImpulse', '*', 'impulse', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
PostSolve
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'contact']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2ContactImpulse', '*', 'impulse']
None
________________________________________________________________________________
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'contact', ')', ')', ';']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'impulse', ')', ')']
BraceDepth: 2
Evaluating stack ['(', '(', 'void', ')', '(', 'impulse', ')', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2QueryCallback']
BraceDepth: 1
Evaluating stack ['class', 'b2QueryCallback', '{']
BraceDepth: 1
('NEWCLASS', 'class b2QueryCallback')
('stack IN', 'class b2QueryCallback')
('HEAD', ['class', 'b2QueryCallback'])
______________
('TAIL', [])
('CLASS OK', 'b2QueryCallback')
('CURACCESS-set', 'public')
Evaluating stack ['b2QueryCallback', '(', ')']
BraceDepth: 2
Evaluating stack ['b2QueryCallback', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2QueryCallback', '(', ')', '{'])
('CLEAN ARRAYS', ['b2QueryCallback', '(', ')', '{'])
('is method namestack', True, ['b2QueryCallback', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2QueryCallback
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', '~b2QueryCallback', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2QueryCallback', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2QueryCallback', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2QueryCallback', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2QueryCallback', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2QueryCallback
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'bool', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'bool', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'bool', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'bool', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ')', '{'])
('is method namestack', True, ['virtual', 'bool', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
ReportFixture
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixture']
None
________________________________________________________________________________
Evaluating stack ['return', 'false']
BraceDepth: 2
Evaluating stack ['return', 'false', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2RayCastCallback']
BraceDepth: 1
Evaluating stack ['class', 'b2RayCastCallback', '{']
BraceDepth: 1
('NEWCLASS', 'class b2RayCastCallback')
('stack IN', 'class b2RayCastCallback')
('HEAD', ['class', 'b2RayCastCallback'])
______________
('TAIL', [])
('CLASS OK', 'b2RayCastCallback')
('CURACCESS-set', 'public')
Evaluating stack ['b2RayCastCallback', '(', ')']
BraceDepth: 2
Evaluating stack ['b2RayCastCallback', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2RayCastCallback', '(', ')', '{'])
('CLEAN ARRAYS', ['b2RayCastCallback', '(', ')', '{'])
('is method namestack', True, ['b2RayCastCallback', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2RayCastCallback
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', '~b2RayCastCallback', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2RayCastCallback', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2RayCastCallback', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2RayCastCallback', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2RayCastCallback', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2RayCastCallback
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'float32', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ',', 'const', 'b2Vec2', '&', 'point', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'fraction', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'float32', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ',', 'const', 'b2Vec2', '&', 'point', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'fraction', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'float32', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ',', 'const', 'b2Vec2', '&', 'point', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'fraction', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'float32', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ',', 'const', 'b2Vec2', '&', 'point', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'fraction', ')', '{'])
('is method namestack', True, ['virtual', 'float32', 'ReportFixture', '(', 'b2Fixture', '*', 'fixture', ',', 'const', 'b2Vec2', '&', 'point', ',', 'const', 'b2Vec2', '&', 'normal', ',', 'float32', 'fraction', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
ReportFixture
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixture']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'point']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'normal']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'fraction']
None
________________________________________________________________________________
Evaluating stack ['return', '0']
BraceDepth: 2
Evaluating stack ['return', '0', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Profile']
BraceDepth: 1
Evaluating stack ['struct', 'b2Profile', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['float32', 'step']
BraceDepth: 1
Evaluating stack ['float32', 'step', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'step']
['float32', 'step', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'collide']
BraceDepth: 1
Evaluating stack ['float32', 'collide', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'collide']
['float32', 'collide', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'solve']
BraceDepth: 1
Evaluating stack ['float32', 'solve', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'solve']
['float32', 'solve', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'solveInit']
BraceDepth: 1
Evaluating stack ['float32', 'solveInit', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'solveInit']
['float32', 'solveInit', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'solveVelocity']
BraceDepth: 1
Evaluating stack ['float32', 'solveVelocity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'solveVelocity']
['float32', 'solveVelocity', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'solvePosition']
BraceDepth: 1
Evaluating stack ['float32', 'solvePosition', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'solvePosition']
['float32', 'solvePosition', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'broadphase']
BraceDepth: 1
Evaluating stack ['float32', 'broadphase', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'broadphase']
['float32', 'broadphase', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'solveTOI']
BraceDepth: 1
Evaluating stack ['float32', 'solveTOI', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'solveTOI']
['float32', 'solveTOI', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2TimeStep']
BraceDepth: 1
Evaluating stack ['struct', 'b2TimeStep', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['float32', 'dt']
BraceDepth: 1
Evaluating stack ['float32', 'dt', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'dt']
['float32', 'dt', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'inv_dt']
BraceDepth: 1
Evaluating stack ['float32', 'inv_dt', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
['float32', 'inv_dt', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'dtRatio']
BraceDepth: 1
Evaluating stack ['float32', 'dtRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'dtRatio']
['float32', 'dtRatio', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'velocityIterations']
BraceDepth: 1
Evaluating stack ['int32', 'velocityIterations', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'velocityIterations']
['int32', 'velocityIterations', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'positionIterations']
BraceDepth: 1
Evaluating stack ['int32', 'positionIterations', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'positionIterations']
['int32', 'positionIterations', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'warmStarting']
BraceDepth: 1
Evaluating stack ['bool', 'warmStarting', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'warmStarting']
['bool', 'warmStarting', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Position']
BraceDepth: 1
Evaluating stack ['struct', 'b2Position', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'c']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'c', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'c']
['b2Vec2', 'c', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'a']
BraceDepth: 1
Evaluating stack ['float32', 'a', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'a']
['float32', 'a', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Velocity']
BraceDepth: 1
Evaluating stack ['struct', 'b2Velocity', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'v']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'v', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'v']
['b2Vec2', 'v', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'w']
BraceDepth: 1
Evaluating stack ['float32', 'w', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'w']
['float32', 'w', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2SolverData']
BraceDepth: 1
Evaluating stack ['struct', 'b2SolverData', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2TimeStep', 'step']
BraceDepth: 1
Evaluating stack ['b2TimeStep', 'step', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2TimeStep', 'step']
['b2TimeStep', 'step', ';']
________________________________________________________________________________
Evaluating stack ['b2Position', '*', 'positions']
BraceDepth: 1
Evaluating stack ['b2Position', '*', 'positions', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Position', '*', 'positions']
['b2Position', '*', 'positions', ';']
________________________________________________________________________________
Evaluating stack ['b2Velocity', '*', 'velocities']
BraceDepth: 1
Evaluating stack ['b2Velocity', '*', 'velocities', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Velocity', '*', 'velocities']
['b2Velocity', '*', 'velocities', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_stackSize', '=', '100', '*', '1024']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_stackSize', '=', '100', '*', '1024', ';']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_maxStackEntries', '=', '32']
BraceDepth: 0
Evaluating stack ['const', 'int32', 'b2_maxStackEntries', '=', '32', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2StackEntry']
BraceDepth: 1
Evaluating stack ['struct', 'b2StackEntry', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['char', '*', 'data']
BraceDepth: 1
Evaluating stack ['char', '*', 'data', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['char', '*', 'data']
['char', '*', 'data', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'size']
BraceDepth: 1
Evaluating stack ['int32', 'size', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'size']
['int32', 'size', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'usedMalloc']
BraceDepth: 1
Evaluating stack ['bool', 'usedMalloc', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'usedMalloc']
['bool', 'usedMalloc', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2StackAllocator']
BraceDepth: 1
Evaluating stack ['class', 'b2StackAllocator', '{']
BraceDepth: 1
('NEWCLASS', 'class b2StackAllocator')
('stack IN', 'class b2StackAllocator')
('HEAD', ['class', 'b2StackAllocator'])
______________
('TAIL', [])
('CLASS OK', 'b2StackAllocator')
('CURACCESS-set', 'public')
Evaluating stack ['b2StackAllocator', '(', ')']
BraceDepth: 1
Evaluating stack ['b2StackAllocator', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2StackAllocator', '(', ')', ';'])
('CLEAN ARRAYS', ['b2StackAllocator', '(', ')', ';'])
('is method namestack', True, ['b2StackAllocator', '(', ')', ';'])
________________________________________________________________________________
b2StackAllocator
Evaluating stack ['~b2StackAllocator', '(', ')']
BraceDepth: 1
Evaluating stack ['~b2StackAllocator', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['~b2StackAllocator', '(', ')', ';'])
('CLEAN ARRAYS', ['~b2StackAllocator', '(', ')', ';'])
('is method namestack', True, ['~b2StackAllocator', '(', ')', ';'])
________________________________________________________________________________
~b2StackAllocator
Evaluating stack ['void', '*', 'Allocate', '(', 'int32', 'size', ')']
BraceDepth: 1
Evaluating stack ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';'])
('CLEAN ARRAYS', ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';'])
('is method namestack', True, ['void', '*', 'Allocate', '(', 'int32', 'size', ')', ';'])
________________________________________________________________________________
Allocate
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'size']
None
________________________________________________________________________________
Evaluating stack ['void', 'Free', '(', 'void', '*', 'p', ')']
BraceDepth: 1
Evaluating stack ['void', 'Free', '(', 'void', '*', 'p', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Free', '(', 'void', '*', 'p', ')', ';'])
('CLEAN ARRAYS', ['void', 'Free', '(', 'void', '*', 'p', ')', ';'])
('is method namestack', True, ['void', 'Free', '(', 'void', '*', 'p', ')', ';'])
________________________________________________________________________________
Free
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'p']
None
________________________________________________________________________________
Evaluating stack ['int32', 'GetMaxAllocation', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetMaxAllocation', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetMaxAllocation', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetMaxAllocation', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetMaxAllocation', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMaxAllocation
('CURACCESS-set', 'private')
Evaluating stack ['char', 'm_data', '[', 'b2_stackSize', ']']
BraceDepth: 1
Evaluating stack ['char', 'm_data', '[', 'b2_stackSize', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['char', 'm_data', '[', 'b2_stackSize', ']']
['char', 'm_data', '[', 'b2_stackSize', ']', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_index']
BraceDepth: 1
Evaluating stack ['int32', 'm_index', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_index']
['int32', 'm_index', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_allocation']
BraceDepth: 1
Evaluating stack ['int32', 'm_allocation', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_allocation']
['int32', 'm_allocation', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_maxAllocation']
BraceDepth: 1
Evaluating stack ['int32', 'm_maxAllocation', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_maxAllocation']
['int32', 'm_maxAllocation', ';']
________________________________________________________________________________
Evaluating stack ['b2StackEntry', 'm_entries', '[', 'b2_maxStackEntries', ']']
BraceDepth: 1
Evaluating stack ['b2StackEntry', 'm_entries', '[', 'b2_maxStackEntries', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2StackEntry', 'm_entries', '[', 'b2_maxStackEntries', ']']
['b2StackEntry', 'm_entries', '[', 'b2_maxStackEntries', ']', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_entryCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_entryCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_entryCount']
['int32', 'm_entryCount', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactFilter']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactFilter', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactListener']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactListener', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactManager']
BraceDepth: 1
Evaluating stack ['class', 'b2ContactManager', '{']
BraceDepth: 1
('NEWCLASS', 'class b2ContactManager')
('stack IN', 'class b2ContactManager')
('HEAD', ['class', 'b2ContactManager'])
______________
('TAIL', [])
('CLASS OK', 'b2ContactManager')
('CURACCESS-set', 'public')
Evaluating stack ['b2ContactManager', '(', ')']
BraceDepth: 1
Evaluating stack ['b2ContactManager', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2ContactManager', '(', ')', ';'])
('CLEAN ARRAYS', ['b2ContactManager', '(', ')', ';'])
('is method namestack', True, ['b2ContactManager', '(', ')', ';'])
________________________________________________________________________________
b2ContactManager
Evaluating stack ['void', 'AddPair', '(', 'void', '*', 'proxyUserDataA', ',', 'void', '*', 'proxyUserDataB', ')']
BraceDepth: 1
Evaluating stack ['void', 'AddPair', '(', 'void', '*', 'proxyUserDataA', ',', 'void', '*', 'proxyUserDataB', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'AddPair', '(', 'void', '*', 'proxyUserDataA', ',', 'void', '*', 'proxyUserDataB', ')', ';'])
('CLEAN ARRAYS', ['void', 'AddPair', '(', 'void', '*', 'proxyUserDataA', ',', 'void', '*', 'proxyUserDataB', ')', ';'])
('is method namestack', True, ['void', 'AddPair', '(', 'void', '*', 'proxyUserDataA', ',', 'void', '*', 'proxyUserDataB', ')', ';'])
________________________________________________________________________________
AddPair
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'proxyUserDataA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'proxyUserDataB']
None
________________________________________________________________________________
Evaluating stack ['void', 'FindNewContacts', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'FindNewContacts', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'FindNewContacts', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'FindNewContacts', '(', ')', ';'])
('is method namestack', True, ['void', 'FindNewContacts', '(', ')', ';'])
________________________________________________________________________________
FindNewContacts
Evaluating stack ['void', 'Destroy', '(', 'b2Contact', '*', 'c', ')']
BraceDepth: 1
Evaluating stack ['void', 'Destroy', '(', 'b2Contact', '*', 'c', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Destroy', '(', 'b2Contact', '*', 'c', ')', ';'])
('CLEAN ARRAYS', ['void', 'Destroy', '(', 'b2Contact', '*', 'c', ')', ';'])
('is method namestack', True, ['void', 'Destroy', '(', 'b2Contact', '*', 'c', ')', ';'])
________________________________________________________________________________
Destroy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'c']
None
________________________________________________________________________________
Evaluating stack ['void', 'Collide', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Collide', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Collide', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Collide', '(', ')', ';'])
('is method namestack', True, ['void', 'Collide', '(', ')', ';'])
________________________________________________________________________________
Collide
Evaluating stack ['b2BroadPhase', 'm_broadPhase']
BraceDepth: 1
Evaluating stack ['b2BroadPhase', 'm_broadPhase', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BroadPhase', 'm_broadPhase']
['b2BroadPhase', 'm_broadPhase', ';']
________________________________________________________________________________
Evaluating stack ['b2Contact', '*', 'm_contactList']
BraceDepth: 1
Evaluating stack ['b2Contact', '*', 'm_contactList', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'm_contactList']
['b2Contact', '*', 'm_contactList', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_contactCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_contactCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_contactCount']
['int32', 'm_contactCount', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactFilter', '*', 'm_contactFilter']
BraceDepth: 1
Evaluating stack ['b2ContactFilter', '*', 'm_contactFilter', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactFilter', '*', 'm_contactFilter']
['b2ContactFilter', '*', 'm_contactFilter', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactListener', '*', 'm_contactListener']
BraceDepth: 1
Evaluating stack ['b2ContactListener', '*', 'm_contactListener', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactListener', '*', 'm_contactListener']
['b2ContactListener', '*', 'm_contactListener', ';']
________________________________________________________________________________
Evaluating stack ['b2BlockAllocator', '*', 'm_allocator']
BraceDepth: 1
Evaluating stack ['b2BlockAllocator', '*', 'm_allocator', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'm_allocator']
['b2BlockAllocator', '*', 'm_allocator', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2AABB']
BraceDepth: 0
Evaluating stack ['struct', 'b2AABB', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2BodyDef']
BraceDepth: 0
Evaluating stack ['struct', 'b2BodyDef', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Color']
BraceDepth: 0
Evaluating stack ['struct', 'b2Color', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2JointDef']
BraceDepth: 0
Evaluating stack ['struct', 'b2JointDef', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Body']
BraceDepth: 0
Evaluating stack ['class', 'b2Body', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Draw']
BraceDepth: 0
Evaluating stack ['class', 'b2Draw', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2World']
BraceDepth: 1
Evaluating stack ['class', 'b2World', '{']
BraceDepth: 1
('NEWCLASS', 'class b2World')
('stack IN', 'class b2World')
('HEAD', ['class', 'b2World'])
______________
('TAIL', [])
('CLASS OK', 'b2World')
('CURACCESS-set', 'public')
Evaluating stack ['b2World', '(', 'const', 'b2Vec2', '&', 'gravity', ')']
BraceDepth: 1
Evaluating stack ['b2World', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2World', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';'])
('CLEAN ARRAYS', ['b2World', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';'])
('is method namestack', True, ['b2World', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';'])
________________________________________________________________________________
b2World
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'gravity']
None
________________________________________________________________________________
Evaluating stack ['~b2World', '(', ')']
BraceDepth: 1
Evaluating stack ['~b2World', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['~b2World', '(', ')', ';'])
('CLEAN ARRAYS', ['~b2World', '(', ')', ';'])
('is method namestack', True, ['~b2World', '(', ')', ';'])
________________________________________________________________________________
~b2World
Evaluating stack ['void', 'SetDestructionListener', '(', 'b2DestructionListener', '*', 'listener', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetDestructionListener', '(', 'b2DestructionListener', '*', 'listener', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetDestructionListener', '(', 'b2DestructionListener', '*', 'listener', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetDestructionListener', '(', 'b2DestructionListener', '*', 'listener', ')', ';'])
('is method namestack', True, ['void', 'SetDestructionListener', '(', 'b2DestructionListener', '*', 'listener', ')', ';'])
________________________________________________________________________________
SetDestructionListener
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DestructionListener', '*', 'listener']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetContactFilter', '(', 'b2ContactFilter', '*', 'filter', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetContactFilter', '(', 'b2ContactFilter', '*', 'filter', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetContactFilter', '(', 'b2ContactFilter', '*', 'filter', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetContactFilter', '(', 'b2ContactFilter', '*', 'filter', ')', ';'])
('is method namestack', True, ['void', 'SetContactFilter', '(', 'b2ContactFilter', '*', 'filter', ')', ';'])
________________________________________________________________________________
SetContactFilter
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactFilter', '*', 'filter']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetContactListener', '(', 'b2ContactListener', '*', 'listener', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetContactListener', '(', 'b2ContactListener', '*', 'listener', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetContactListener', '(', 'b2ContactListener', '*', 'listener', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetContactListener', '(', 'b2ContactListener', '*', 'listener', ')', ';'])
('is method namestack', True, ['void', 'SetContactListener', '(', 'b2ContactListener', '*', 'listener', ')', ';'])
________________________________________________________________________________
SetContactListener
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactListener', '*', 'listener']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetDebugDraw', '(', 'b2Draw', '*', 'debugDraw', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetDebugDraw', '(', 'b2Draw', '*', 'debugDraw', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetDebugDraw', '(', 'b2Draw', '*', 'debugDraw', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetDebugDraw', '(', 'b2Draw', '*', 'debugDraw', ')', ';'])
('is method namestack', True, ['void', 'SetDebugDraw', '(', 'b2Draw', '*', 'debugDraw', ')', ';'])
________________________________________________________________________________
SetDebugDraw
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Draw', '*', 'debugDraw']
None
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'CreateBody', '(', 'const', 'b2BodyDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'CreateBody', '(', 'const', 'b2BodyDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Body', '*', 'CreateBody', '(', 'const', 'b2BodyDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2Body', '*', 'CreateBody', '(', 'const', 'b2BodyDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2Body', '*', 'CreateBody', '(', 'const', 'b2BodyDef', '*', 'def', ')', ';'])
________________________________________________________________________________
CreateBody
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2BodyDef', '*', 'def']
None
________________________________________________________________________________
Evaluating stack ['void', 'DestroyBody', '(', 'b2Body', '*', 'body', ')']
BraceDepth: 1
Evaluating stack ['void', 'DestroyBody', '(', 'b2Body', '*', 'body', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DestroyBody', '(', 'b2Body', '*', 'body', ')', ';'])
('CLEAN ARRAYS', ['void', 'DestroyBody', '(', 'b2Body', '*', 'body', ')', ';'])
('is method namestack', True, ['void', 'DestroyBody', '(', 'b2Body', '*', 'body', ')', ';'])
________________________________________________________________________________
DestroyBody
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'body']
None
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'CreateJoint', '(', 'const', 'b2JointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'CreateJoint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Joint', '*', 'CreateJoint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2Joint', '*', 'CreateJoint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2Joint', '*', 'CreateJoint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
CreateJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2JointDef', '*', 'def']
None
________________________________________________________________________________
Evaluating stack ['void', 'DestroyJoint', '(', 'b2Joint', '*', 'joint', ')']
BraceDepth: 1
Evaluating stack ['void', 'DestroyJoint', '(', 'b2Joint', '*', 'joint', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DestroyJoint', '(', 'b2Joint', '*', 'joint', ')', ';'])
('CLEAN ARRAYS', ['void', 'DestroyJoint', '(', 'b2Joint', '*', 'joint', ')', ';'])
('is method namestack', True, ['void', 'DestroyJoint', '(', 'b2Joint', '*', 'joint', ')', ';'])
________________________________________________________________________________
DestroyJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'joint']
None
________________________________________________________________________________
Evaluating stack ['void', 'Step', '(', 'float32', 'timeStep', ',', 'int32', 'velocityIterations', ',', 'int32', 'positionIterations', ')']
BraceDepth: 1
Evaluating stack ['void', 'Step', '(', 'float32', 'timeStep', ',', 'int32', 'velocityIterations', ',', 'int32', 'positionIterations', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Step', '(', 'float32', 'timeStep', ',', 'int32', 'velocityIterations', ',', 'int32', 'positionIterations', ')', ';'])
('CLEAN ARRAYS', ['void', 'Step', '(', 'float32', 'timeStep', ',', 'int32', 'velocityIterations', ',', 'int32', 'positionIterations', ')', ';'])
('is method namestack', True, ['void', 'Step', '(', 'float32', 'timeStep', ',', 'int32', 'velocityIterations', ',', 'int32', 'positionIterations', ')', ';'])
________________________________________________________________________________
Step
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'timeStep']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'velocityIterations']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'positionIterations']
None
________________________________________________________________________________
Evaluating stack ['void', 'ClearForces', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'ClearForces', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ClearForces', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'ClearForces', '(', ')', ';'])
('is method namestack', True, ['void', 'ClearForces', '(', ')', ';'])
________________________________________________________________________________
ClearForces
Evaluating stack ['void', 'DrawDebugData', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'DrawDebugData', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DrawDebugData', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'DrawDebugData', '(', ')', ';'])
('is method namestack', True, ['void', 'DrawDebugData', '(', ')', ';'])
________________________________________________________________________________
DrawDebugData
Evaluating stack ['void', 'QueryAABB', '(', 'b2QueryCallback', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'QueryAABB', '(', 'b2QueryCallback', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'QueryAABB', '(', 'b2QueryCallback', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'QueryAABB', '(', 'b2QueryCallback', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
('is method namestack', True, ['void', 'QueryAABB', '(', 'b2QueryCallback', '*', 'callback', ',', 'const', 'b2AABB', '&', 'aabb', ')', 'const', ';'])
________________________________________________________________________________
QueryAABB
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2QueryCallback', '*', 'callback']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2AABB', '&', 'aabb']
None
________________________________________________________________________________
Evaluating stack ['void', 'RayCast', '(', 'b2RayCastCallback', '*', 'callback', ',', 'const', 'b2Vec2', '&', 'point1', ',', 'const', 'b2Vec2', '&', 'point2', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'RayCast', '(', 'b2RayCastCallback', '*', 'callback', ',', 'const', 'b2Vec2', '&', 'point1', ',', 'const', 'b2Vec2', '&', 'point2', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'RayCast', '(', 'b2RayCastCallback', '*', 'callback', ',', 'const', 'b2Vec2', '&', 'point1', ',', 'const', 'b2Vec2', '&', 'point2', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'RayCast', '(', 'b2RayCastCallback', '*', 'callback', ',', 'const', 'b2Vec2', '&', 'point1', ',', 'const', 'b2Vec2', '&', 'point2', ')', 'const', ';'])
('is method namestack', True, ['void', 'RayCast', '(', 'b2RayCastCallback', '*', 'callback', ',', 'const', 'b2Vec2', '&', 'point1', ',', 'const', 'b2Vec2', '&', 'point2', ')', 'const', ';'])
________________________________________________________________________________
RayCast
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2RayCastCallback', '*', 'callback']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'point1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'point2']
None
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'GetBodyList', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'GetBodyList', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Body', '*', 'GetBodyList', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Body', '*', 'GetBodyList', '(', ')', ';'])
('is method namestack', True, ['b2Body', '*', 'GetBodyList', '(', ')', ';'])
________________________________________________________________________________
GetBodyList
Evaluating stack ['const', 'b2Body', '*', 'GetBodyList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Body', '*', 'GetBodyList', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Body', '*', 'GetBodyList', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Body', '*', 'GetBodyList', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Body', '*', 'GetBodyList', '(', ')', 'const', ';'])
________________________________________________________________________________
GetBodyList
Evaluating stack ['b2Joint', '*', 'GetJointList', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'GetJointList', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Joint', '*', 'GetJointList', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Joint', '*', 'GetJointList', '(', ')', ';'])
('is method namestack', True, ['b2Joint', '*', 'GetJointList', '(', ')', ';'])
________________________________________________________________________________
GetJointList
Evaluating stack ['const', 'b2Joint', '*', 'GetJointList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Joint', '*', 'GetJointList', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Joint', '*', 'GetJointList', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Joint', '*', 'GetJointList', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Joint', '*', 'GetJointList', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointList
Evaluating stack ['b2Contact', '*', 'GetContactList', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Contact', '*', 'GetContactList', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Contact', '*', 'GetContactList', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Contact', '*', 'GetContactList', '(', ')', ';'])
('is method namestack', True, ['b2Contact', '*', 'GetContactList', '(', ')', ';'])
________________________________________________________________________________
GetContactList
Evaluating stack ['const', 'b2Contact', '*', 'GetContactList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Contact', '*', 'GetContactList', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Contact', '*', 'GetContactList', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Contact', '*', 'GetContactList', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Contact', '*', 'GetContactList', '(', ')', 'const', ';'])
________________________________________________________________________________
GetContactList
Evaluating stack ['void', 'SetAllowSleeping', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetAllowSleeping', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetAllowSleeping', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetAllowSleeping', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetAllowSleeping', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetAllowSleeping
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'GetAllowSleeping', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['bool', 'GetAllowSleeping', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'GetAllowSleeping', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['bool', 'GetAllowSleeping', '(', ')', 'const', '{'])
('is method namestack', True, ['bool', 'GetAllowSleeping', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetAllowSleeping
Evaluating stack ['return', 'm_allowSleep']
BraceDepth: 2
Evaluating stack ['return', 'm_allowSleep', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetWarmStarting', '(', 'bool', 'flag', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetWarmStarting', '(', 'bool', 'flag', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetWarmStarting', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetWarmStarting', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['void', 'SetWarmStarting', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetWarmStarting
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['m_warmStarting', '=', 'flag']
BraceDepth: 2
Evaluating stack ['m_warmStarting', '=', 'flag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'GetWarmStarting', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['bool', 'GetWarmStarting', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'GetWarmStarting', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['bool', 'GetWarmStarting', '(', ')', 'const', '{'])
('is method namestack', True, ['bool', 'GetWarmStarting', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetWarmStarting
Evaluating stack ['return', 'm_warmStarting']
BraceDepth: 2
Evaluating stack ['return', 'm_warmStarting', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetContinuousPhysics', '(', 'bool', 'flag', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetContinuousPhysics', '(', 'bool', 'flag', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetContinuousPhysics', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetContinuousPhysics', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['void', 'SetContinuousPhysics', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetContinuousPhysics
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['m_continuousPhysics', '=', 'flag']
BraceDepth: 2
Evaluating stack ['m_continuousPhysics', '=', 'flag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'GetContinuousPhysics', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['bool', 'GetContinuousPhysics', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'GetContinuousPhysics', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['bool', 'GetContinuousPhysics', '(', ')', 'const', '{'])
('is method namestack', True, ['bool', 'GetContinuousPhysics', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetContinuousPhysics
Evaluating stack ['return', 'm_continuousPhysics']
BraceDepth: 2
Evaluating stack ['return', 'm_continuousPhysics', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetSubStepping', '(', 'bool', 'flag', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetSubStepping', '(', 'bool', 'flag', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetSubStepping', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetSubStepping', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['void', 'SetSubStepping', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetSubStepping
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['m_subStepping', '=', 'flag']
BraceDepth: 2
Evaluating stack ['m_subStepping', '=', 'flag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'GetSubStepping', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['bool', 'GetSubStepping', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'GetSubStepping', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['bool', 'GetSubStepping', '(', ')', 'const', '{'])
('is method namestack', True, ['bool', 'GetSubStepping', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetSubStepping
Evaluating stack ['return', 'm_subStepping']
BraceDepth: 2
Evaluating stack ['return', 'm_subStepping', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['int32', 'GetProxyCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetProxyCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetProxyCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetProxyCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetProxyCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetProxyCount
Evaluating stack ['int32', 'GetBodyCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetBodyCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetBodyCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetBodyCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetBodyCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetBodyCount
Evaluating stack ['int32', 'GetJointCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetJointCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetJointCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetJointCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetJointCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointCount
Evaluating stack ['int32', 'GetContactCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetContactCount', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetContactCount', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetContactCount', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetContactCount', '(', ')', 'const', ';'])
________________________________________________________________________________
GetContactCount
Evaluating stack ['int32', 'GetTreeHeight', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetTreeHeight', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetTreeHeight', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetTreeHeight', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetTreeHeight', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTreeHeight
Evaluating stack ['int32', 'GetTreeBalance', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetTreeBalance', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetTreeBalance', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetTreeBalance', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetTreeBalance', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTreeBalance
Evaluating stack ['float32', 'GetTreeQuality', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetTreeQuality', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetTreeQuality', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetTreeQuality', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetTreeQuality', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTreeQuality
Evaluating stack ['void', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';'])
('is method namestack', True, ['void', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', ';'])
________________________________________________________________________________
SetGravity
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'gravity']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetGravity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetGravity', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetGravity', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetGravity', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetGravity', '(', ')', 'const', ';'])
________________________________________________________________________________
GetGravity
Evaluating stack ['bool', 'IsLocked', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsLocked', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsLocked', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsLocked', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsLocked', '(', ')', 'const', ';'])
________________________________________________________________________________
IsLocked
Evaluating stack ['void', 'SetAutoClearForces', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetAutoClearForces', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetAutoClearForces', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetAutoClearForces', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetAutoClearForces', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetAutoClearForces
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'GetAutoClearForces', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'GetAutoClearForces', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'GetAutoClearForces', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'GetAutoClearForces', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'GetAutoClearForces', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAutoClearForces
Evaluating stack ['const', 'b2ContactManager', '&', 'GetContactManager', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2ContactManager', '&', 'GetContactManager', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2ContactManager', '&', 'GetContactManager', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2ContactManager', '&', 'GetContactManager', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2ContactManager', '&', 'GetContactManager', '(', ')', 'const', ';'])
________________________________________________________________________________
GetContactManager
Evaluating stack ['const', 'b2Profile', '&', 'GetProfile', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Profile', '&', 'GetProfile', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Profile', '&', 'GetProfile', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Profile', '&', 'GetProfile', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Profile', '&', 'GetProfile', '(', ')', 'const', ';'])
________________________________________________________________________________
GetProfile
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
('CURACCESS-set', 'private')
Evaluating stack ['enum', '{', 'e_newFixture', '=', '0x0001', ',', 'e_locked', '=', '0x0002', ',', 'e_clearForces', '=', '0x0004', '}']
BraceDepth: 1
Evaluating stack ['enum', '{', 'e_newFixture', '=', '0x0001', ',', 'e_locked', '=', '0x0002', ',', 'e_clearForces', '=', '0x0004', '}', ';']
BraceDepth: 1
('WARN-enum: nameless enum', ['enum', '{', 'e_newFixture', '=', '0x0001', ',', 'e_locked', '=', '0x0002', ',', 'e_clearForces', '=', '0x0004', '}'])
Evaluating stack ['friend', 'class', 'b2Body']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Body', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Fixture']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Fixture', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactManager']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactManager', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Controller']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Controller', ';']
BraceDepth: 1
Evaluating stack ['void', 'Solve', '(', 'const', 'b2TimeStep', '&', 'step', ')']
BraceDepth: 1
Evaluating stack ['void', 'Solve', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Solve', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';'])
('CLEAN ARRAYS', ['void', 'Solve', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';'])
('is method namestack', True, ['void', 'Solve', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';'])
________________________________________________________________________________
Solve
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2TimeStep', '&', 'step']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveTOI', '(', 'const', 'b2TimeStep', '&', 'step', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveTOI', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveTOI', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveTOI', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';'])
('is method namestack', True, ['void', 'SolveTOI', '(', 'const', 'b2TimeStep', '&', 'step', ')', ';'])
________________________________________________________________________________
SolveTOI
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2TimeStep', '&', 'step']
None
________________________________________________________________________________
Evaluating stack ['void', 'DrawJoint', '(', 'b2Joint', '*', 'joint', ')']
BraceDepth: 1
Evaluating stack ['void', 'DrawJoint', '(', 'b2Joint', '*', 'joint', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DrawJoint', '(', 'b2Joint', '*', 'joint', ')', ';'])
('CLEAN ARRAYS', ['void', 'DrawJoint', '(', 'b2Joint', '*', 'joint', ')', ';'])
('is method namestack', True, ['void', 'DrawJoint', '(', 'b2Joint', '*', 'joint', ')', ';'])
________________________________________________________________________________
DrawJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'joint']
None
________________________________________________________________________________
Evaluating stack ['void', 'DrawShape', '(', 'b2Fixture', '*', 'shape', ',', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Color', '&', 'color', ')']
BraceDepth: 1
Evaluating stack ['void', 'DrawShape', '(', 'b2Fixture', '*', 'shape', ',', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Color', '&', 'color', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'DrawShape', '(', 'b2Fixture', '*', 'shape', ',', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Color', '&', 'color', ')', ';'])
('CLEAN ARRAYS', ['void', 'DrawShape', '(', 'b2Fixture', '*', 'shape', ',', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Color', '&', 'color', ')', ';'])
('is method namestack', True, ['void', 'DrawShape', '(', 'b2Fixture', '*', 'shape', ',', 'const', 'b2Transform', '&', 'xf', ',', 'const', 'b2Color', '&', 'color', ')', ';'])
________________________________________________________________________________
DrawShape
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'shape']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xf']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Color', '&', 'color']
None
________________________________________________________________________________
Evaluating stack ['b2BlockAllocator', 'm_blockAllocator']
BraceDepth: 1
Evaluating stack ['b2BlockAllocator', 'm_blockAllocator', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', 'm_blockAllocator']
['b2BlockAllocator', 'm_blockAllocator', ';']
________________________________________________________________________________
Evaluating stack ['b2StackAllocator', 'm_stackAllocator']
BraceDepth: 1
Evaluating stack ['b2StackAllocator', 'm_stackAllocator', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2StackAllocator', 'm_stackAllocator']
['b2StackAllocator', 'm_stackAllocator', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_flags']
BraceDepth: 1
Evaluating stack ['int32', 'm_flags', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_flags']
['int32', 'm_flags', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactManager', 'm_contactManager']
BraceDepth: 1
Evaluating stack ['b2ContactManager', 'm_contactManager', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactManager', 'm_contactManager']
['b2ContactManager', 'm_contactManager', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_bodyList']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_bodyList', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_bodyList']
['b2Body', '*', 'm_bodyList', ';']
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'm_jointList']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'm_jointList', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'm_jointList']
['b2Joint', '*', 'm_jointList', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_bodyCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_bodyCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_bodyCount']
['int32', 'm_bodyCount', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_jointCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_jointCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_jointCount']
['int32', 'm_jointCount', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_gravity']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_gravity', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_gravity']
['b2Vec2', 'm_gravity', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_allowSleep']
BraceDepth: 1
Evaluating stack ['bool', 'm_allowSleep', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_allowSleep']
['bool', 'm_allowSleep', ';']
________________________________________________________________________________
Evaluating stack ['b2DestructionListener', '*', 'm_destructionListener']
BraceDepth: 1
Evaluating stack ['b2DestructionListener', '*', 'm_destructionListener', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2DestructionListener', '*', 'm_destructionListener']
['b2DestructionListener', '*', 'm_destructionListener', ';']
________________________________________________________________________________
Evaluating stack ['b2Draw', '*', 'm_debugDraw']
BraceDepth: 1
Evaluating stack ['b2Draw', '*', 'm_debugDraw', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Draw', '*', 'm_debugDraw']
['b2Draw', '*', 'm_debugDraw', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_inv_dt0']
BraceDepth: 1
Evaluating stack ['float32', 'm_inv_dt0', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_inv_dt0']
['float32', 'm_inv_dt0', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_warmStarting']
BraceDepth: 1
Evaluating stack ['bool', 'm_warmStarting', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_warmStarting']
['bool', 'm_warmStarting', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_continuousPhysics']
BraceDepth: 1
Evaluating stack ['bool', 'm_continuousPhysics', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_continuousPhysics']
['bool', 'm_continuousPhysics', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_subStepping']
BraceDepth: 1
Evaluating stack ['bool', 'm_subStepping', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_subStepping']
['bool', 'm_subStepping', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_stepComplete']
BraceDepth: 1
Evaluating stack ['bool', 'm_stepComplete', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_stepComplete']
['bool', 'm_stepComplete', ';']
________________________________________________________________________________
Evaluating stack ['b2Profile', 'm_profile']
BraceDepth: 1
Evaluating stack ['b2Profile', 'm_profile', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Profile', 'm_profile']
['b2Profile', 'm_profile', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetBodyList
Evaluating stack ['return', 'm_bodyList']
BraceDepth: 1
Evaluating stack ['return', 'm_bodyList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Body', '*', 'b2World', ':', ':', 'GetBodyList', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetBodyList
Evaluating stack ['return', 'm_bodyList']
BraceDepth: 1
Evaluating stack ['return', 'm_bodyList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetJointList
Evaluating stack ['return', 'm_jointList']
BraceDepth: 1
Evaluating stack ['return', 'm_jointList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Joint', '*', 'b2World', ':', ':', 'GetJointList', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetJointList
Evaluating stack ['return', 'm_jointList']
BraceDepth: 1
Evaluating stack ['return', 'm_jointList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetContactList
Evaluating stack ['return', 'm_contactManager', 'm_contactList']
BraceDepth: 1
Evaluating stack ['return', 'm_contactManager', 'm_contactList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Contact', '*', 'b2World', ':', ':', 'GetContactList', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetContactList
Evaluating stack ['return', 'm_contactManager', 'm_contactList']
BraceDepth: 1
Evaluating stack ['return', 'm_contactManager', 'm_contactList', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2World', ':', ':', 'GetBodyCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2World', ':', ':', 'GetBodyCount', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2World', ':', ':', 'GetBodyCount', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2World', ':', ':', 'GetBodyCount', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2World', ':', ':', 'GetBodyCount', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetBodyCount
Evaluating stack ['return', 'm_bodyCount']
BraceDepth: 1
Evaluating stack ['return', 'm_bodyCount', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2World', ':', ':', 'GetJointCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2World', ':', ':', 'GetJointCount', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2World', ':', ':', 'GetJointCount', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2World', ':', ':', 'GetJointCount', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2World', ':', ':', 'GetJointCount', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetJointCount
Evaluating stack ['return', 'm_jointCount']
BraceDepth: 1
Evaluating stack ['return', 'm_jointCount', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2World', ':', ':', 'GetContactCount', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2World', ':', ':', 'GetContactCount', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2World', ':', ':', 'GetContactCount', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2World', ':', ':', 'GetContactCount', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2World', ':', ':', 'GetContactCount', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetContactCount
Evaluating stack ['return', 'm_contactManager', 'm_contactCount']
BraceDepth: 1
Evaluating stack ['return', 'm_contactManager', 'm_contactCount', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2World', ':', ':', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2World', ':', ':', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2World', ':', ':', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2World', ':', ':', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2World', ':', ':', 'SetGravity', '(', 'const', 'b2Vec2', '&', 'gravity', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::SetGravity
Evaluating stack ['m_gravity', '=', 'gravity']
BraceDepth: 1
Evaluating stack ['m_gravity', '=', 'gravity', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Vec2', 'b2World', ':', ':', 'GetGravity', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2Vec2', 'b2World', ':', ':', 'GetGravity', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Vec2', 'b2World', ':', ':', 'GetGravity', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2Vec2', 'b2World', ':', ':', 'GetGravity', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2Vec2', 'b2World', ':', ':', 'GetGravity', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetGravity
Evaluating stack ['return', 'm_gravity']
BraceDepth: 1
Evaluating stack ['return', 'm_gravity', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2World', ':', ':', 'IsLocked', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2World', ':', ':', 'IsLocked', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2World', ':', ':', 'IsLocked', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2World', ':', ':', 'IsLocked', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2World', ':', ':', 'IsLocked', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::IsLocked
Evaluating stack ['return', '(', 'm_flags', '&', 'e_locked', ')', '=', '=', 'e_locked']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_locked', ')', '=', '=', 'e_locked', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2World', ':', ':', 'SetAutoClearForces', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2World', ':', ':', 'SetAutoClearForces', '(', 'bool', 'flag', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2World', ':', ':', 'SetAutoClearForces', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2World', ':', ':', 'SetAutoClearForces', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2World', ':', ':', 'SetAutoClearForces', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::SetAutoClearForces
Evaluating stack ['if', '(', 'flag', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'flag', ')', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_clearForces']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_clearForces', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['else']
BraceDepth: 2
Evaluating stack ['}', 'else', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_clearForces']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_clearForces', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2World', ':', ':', 'GetAutoClearForces', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2World', ':', ':', 'GetAutoClearForces', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2World', ':', ':', 'GetAutoClearForces', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2World', ':', ':', 'GetAutoClearForces', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2World', ':', ':', 'GetAutoClearForces', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetAutoClearForces
Evaluating stack ['return', '(', 'm_flags', '&', 'e_clearForces', ')', '=', '=', 'e_clearForces']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_clearForces', ')', '=', '=', 'e_clearForces', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2ContactManager', '&', 'b2World', ':', ':', 'GetContactManager', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2ContactManager', '&', 'b2World', ':', ':', 'GetContactManager', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2ContactManager', '&', 'b2World', ':', ':', 'GetContactManager', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2ContactManager', '&', 'b2World', ':', ':', 'GetContactManager', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2ContactManager', '&', 'b2World', ':', ':', 'GetContactManager', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetContactManager
Evaluating stack ['return', 'm_contactManager']
BraceDepth: 1
Evaluating stack ['return', 'm_contactManager', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Profile', '&', 'b2World', ':', ':', 'GetProfile', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Profile', '&', 'b2World', ':', ':', 'GetProfile', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Profile', '&', 'b2World', ':', ':', 'GetProfile', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Profile', '&', 'b2World', ':', ':', 'GetProfile', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Profile', '&', 'b2World', ':', ':', 'GetProfile', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2World::GetProfile
Evaluating stack ['return', 'm_profile']
BraceDepth: 1
Evaluating stack ['return', 'm_profile', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2Body']
BraceDepth: 0
Evaluating stack ['class', 'b2Body', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture']
BraceDepth: 0
Evaluating stack ['class', 'b2Fixture', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2World']
BraceDepth: 0
Evaluating stack ['class', 'b2World', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2StackAllocator']
BraceDepth: 0
Evaluating stack ['class', 'b2StackAllocator', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactListener']
BraceDepth: 0
Evaluating stack ['class', 'b2ContactListener', ';']
BraceDepth: 0
Evaluating stack ['inline', 'float32', 'b2MixFriction', '(', 'float32', 'friction1', ',', 'float32', 'friction2', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2MixFriction', '(', 'float32', 'friction1', ',', 'float32', 'friction2', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2MixFriction', '(', 'float32', 'friction1', ',', 'float32', 'friction2', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2MixFriction', '(', 'float32', 'friction1', ',', 'float32', 'friction2', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2MixFriction', '(', 'float32', 'friction1', ',', 'float32', 'friction2', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MixFriction
('free function:', ['inline', 'float32', 'b2MixFriction', '(', 'float32', 'friction1', ',', 'float32', 'friction2', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'friction1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'friction2']
None
________________________________________________________________________________
Evaluating stack ['return', 'std', ':', ':', 'sqrt', '(', 'friction1', '*', 'friction2', ')']
BraceDepth: 1
Evaluating stack ['return', 'std', ':', ':', 'sqrt', '(', 'friction1', '*', 'friction2', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2MixRestitution', '(', 'float32', 'restitution1', ',', 'float32', 'restitution2', ')']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2MixRestitution', '(', 'float32', 'restitution1', ',', 'float32', 'restitution2', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2MixRestitution', '(', 'float32', 'restitution1', ',', 'float32', 'restitution2', ')', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2MixRestitution', '(', 'float32', 'restitution1', ',', 'float32', 'restitution2', ')', '{'])
('is method namestack', True, ['inline', 'float32', 'b2MixRestitution', '(', 'float32', 'restitution1', ',', 'float32', 'restitution2', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2MixRestitution
('free function:', ['inline', 'float32', 'b2MixRestitution', '(', 'float32', 'restitution1', ',', 'float32', 'restitution2', ')'])
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'restitution1']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'restitution2']
None
________________________________________________________________________________
Evaluating stack ['return', 'restitution1', '>', 'restitution2', 'restitution1', ':', 'restitution2']
BraceDepth: 1
Evaluating stack ['return', 'restitution1', '>', 'restitution2', 'restitution1', ':', 'restitution2', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['typedef', 'b2Contact', '*', 'b2ContactCreateFcn', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 0
Evaluating stack ['typedef', 'b2Contact', '*', 'b2ContactCreateFcn', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'b2Contact', '*', 'b2ContactCreateFcn', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
Evaluating stack ['typedef', 'void', 'b2ContactDestroyFcn', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 0
Evaluating stack ['typedef', 'void', 'b2ContactDestroyFcn', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 0
('HIT TYPEDEF', ['typedef', 'void', 'b2ContactDestroyFcn', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
Evaluating stack ['struct', 'b2ContactRegister']
BraceDepth: 1
Evaluating stack ['struct', 'b2ContactRegister', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2ContactCreateFcn', '*', 'createFcn']
BraceDepth: 1
Evaluating stack ['b2ContactCreateFcn', '*', 'createFcn', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactCreateFcn', '*', 'createFcn']
['b2ContactCreateFcn', '*', 'createFcn', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactDestroyFcn', '*', 'destroyFcn']
BraceDepth: 1
Evaluating stack ['b2ContactDestroyFcn', '*', 'destroyFcn', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactDestroyFcn', '*', 'destroyFcn']
['b2ContactDestroyFcn', '*', 'destroyFcn', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'primary']
BraceDepth: 1
Evaluating stack ['bool', 'primary', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'primary']
['bool', 'primary', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2ContactEdge']
BraceDepth: 1
Evaluating stack ['struct', 'b2ContactEdge', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Body', '*', 'other']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'other', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'other']
['b2Body', '*', 'other', ';']
________________________________________________________________________________
Evaluating stack ['b2Contact', '*', 'contact']
BraceDepth: 1
Evaluating stack ['b2Contact', '*', 'contact', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'contact']
['b2Contact', '*', 'contact', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactEdge', '*', 'prev']
BraceDepth: 1
Evaluating stack ['b2ContactEdge', '*', 'prev', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactEdge', '*', 'prev']
['b2ContactEdge', '*', 'prev', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactEdge', '*', 'next']
BraceDepth: 1
Evaluating stack ['b2ContactEdge', '*', 'next', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactEdge', '*', 'next']
['b2ContactEdge', '*', 'next', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactEdge', '(', ')']
BraceDepth: 2
Evaluating stack ['b2ContactEdge', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2ContactEdge', '(', ')', '{'])
('CLEAN ARRAYS', ['b2ContactEdge', '(', ')', '{'])
('is method namestack', True, ['b2ContactEdge', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2ContactEdge
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2ContactEdge', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2ContactEdge ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Contact']
BraceDepth: 1
Evaluating stack ['class', 'b2Contact', '{']
BraceDepth: 1
('NEWCLASS', 'class b2Contact')
('stack IN', 'class b2Contact')
('HEAD', ['class', 'b2Contact'])
______________
('TAIL', [])
('CLASS OK', 'b2Contact')
('CURACCESS-set', 'public')
Evaluating stack ['b2Manifold', '*', 'GetManifold', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Manifold', '*', 'GetManifold', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Manifold', '*', 'GetManifold', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Manifold', '*', 'GetManifold', '(', ')', ';'])
('is method namestack', True, ['b2Manifold', '*', 'GetManifold', '(', ')', ';'])
________________________________________________________________________________
GetManifold
Evaluating stack ['const', 'b2Manifold', '*', 'GetManifold', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Manifold', '*', 'GetManifold', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Manifold', '*', 'GetManifold', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Manifold', '*', 'GetManifold', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Manifold', '*', 'GetManifold', '(', ')', 'const', ';'])
________________________________________________________________________________
GetManifold
Evaluating stack ['void', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', ';'])
________________________________________________________________________________
GetWorldManifold
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2WorldManifold', '*', 'worldManifold']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsTouching', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsTouching', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsTouching', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsTouching', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsTouching', '(', ')', 'const', ';'])
________________________________________________________________________________
IsTouching
Evaluating stack ['void', 'SetEnabled', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetEnabled', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetEnabled', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetEnabled', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'SetEnabled', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
SetEnabled
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsEnabled', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsEnabled', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsEnabled', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsEnabled', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsEnabled', '(', ')', 'const', ';'])
________________________________________________________________________________
IsEnabled
Evaluating stack ['b2Contact', '*', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Contact', '*', 'GetNext', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Contact', '*', 'GetNext', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Contact', '*', 'GetNext', '(', ')', ';'])
('is method namestack', True, ['b2Contact', '*', 'GetNext', '(', ')', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['const', 'b2Contact', '*', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Contact', '*', 'GetNext', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Contact', '*', 'GetNext', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Contact', '*', 'GetNext', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Contact', '*', 'GetNext', '(', ')', 'const', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['b2Fixture', '*', 'GetFixtureA', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'GetFixtureA', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Fixture', '*', 'GetFixtureA', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Fixture', '*', 'GetFixtureA', '(', ')', ';'])
('is method namestack', True, ['b2Fixture', '*', 'GetFixtureA', '(', ')', ';'])
________________________________________________________________________________
GetFixtureA
Evaluating stack ['const', 'b2Fixture', '*', 'GetFixtureA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Fixture', '*', 'GetFixtureA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Fixture', '*', 'GetFixtureA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Fixture', '*', 'GetFixtureA', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Fixture', '*', 'GetFixtureA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFixtureA
Evaluating stack ['int32', 'GetChildIndexA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetChildIndexA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetChildIndexA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetChildIndexA', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetChildIndexA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetChildIndexA
Evaluating stack ['b2Fixture', '*', 'GetFixtureB', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'GetFixtureB', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Fixture', '*', 'GetFixtureB', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Fixture', '*', 'GetFixtureB', '(', ')', ';'])
('is method namestack', True, ['b2Fixture', '*', 'GetFixtureB', '(', ')', ';'])
________________________________________________________________________________
GetFixtureB
Evaluating stack ['const', 'b2Fixture', '*', 'GetFixtureB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Fixture', '*', 'GetFixtureB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Fixture', '*', 'GetFixtureB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Fixture', '*', 'GetFixtureB', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Fixture', '*', 'GetFixtureB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFixtureB
Evaluating stack ['int32', 'GetChildIndexB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['int32', 'GetChildIndexB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['int32', 'GetChildIndexB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['int32', 'GetChildIndexB', '(', ')', 'const', ';'])
('is method namestack', True, ['int32', 'GetChildIndexB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetChildIndexB
Evaluating stack ['void', 'SetFriction', '(', 'float32', 'friction', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';'])
('is method namestack', True, ['void', 'SetFriction', '(', 'float32', 'friction', ')', ';'])
________________________________________________________________________________
SetFriction
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'friction']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetFriction', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetFriction', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetFriction', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetFriction', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetFriction', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFriction
Evaluating stack ['void', 'ResetFriction', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'ResetFriction', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ResetFriction', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'ResetFriction', '(', ')', ';'])
('is method namestack', True, ['void', 'ResetFriction', '(', ')', ';'])
________________________________________________________________________________
ResetFriction
Evaluating stack ['void', 'SetRestitution', '(', 'float32', 'restitution', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';'])
('is method namestack', True, ['void', 'SetRestitution', '(', 'float32', 'restitution', ')', ';'])
________________________________________________________________________________
SetRestitution
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'restitution']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetRestitution', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetRestitution', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetRestitution', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetRestitution', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetRestitution', '(', ')', 'const', ';'])
________________________________________________________________________________
GetRestitution
Evaluating stack ['void', 'ResetRestitution', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'ResetRestitution', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'ResetRestitution', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'ResetRestitution', '(', ')', ';'])
('is method namestack', True, ['void', 'ResetRestitution', '(', ')', ';'])
________________________________________________________________________________
ResetRestitution
Evaluating stack ['virtual', 'void', 'Evaluate', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'void', 'Evaluate', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'void', 'Evaluate', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'void', 'Evaluate', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', '=', '0', ';'])
('is method namestack', True, ['virtual', 'void', 'Evaluate', '(', 'b2Manifold', '*', 'manifold', ',', 'const', 'b2Transform', '&', 'xfA', ',', 'const', 'b2Transform', '&', 'xfB', ')', '=', '0', ';'])
________________________________________________________________________________
Evaluate
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Manifold', '*', 'manifold']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Transform', '&', 'xfB']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2ContactManager']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactManager', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2World']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2World', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactSolver']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2ContactSolver', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Body']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Body', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Fixture']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Fixture', ';']
BraceDepth: 1
Evaluating stack ['enum', '{', 'e_islandFlag', '=', '0x0001', ',', 'e_touchingFlag', '=', '0x0002', ',', 'e_enabledFlag', '=', '0x0004', ',', 'e_filterFlag', '=', '0x0008', ',', 'e_bulletHitFlag', '=', '0x0010', ',', 'e_toiFlag', '=', '0x0020', '}']
BraceDepth: 1
Evaluating stack ['enum', '{', 'e_islandFlag', '=', '0x0001', ',', 'e_touchingFlag', '=', '0x0002', ',', 'e_enabledFlag', '=', '0x0004', ',', 'e_filterFlag', '=', '0x0008', ',', 'e_bulletHitFlag', '=', '0x0010', ',', 'e_toiFlag', '=', '0x0020', '}', ';']
BraceDepth: 1
('WARN-enum: nameless enum', ['enum', '{', 'e_islandFlag', '=', '0x0001', ',', 'e_touchingFlag', '=', '0x0002', ',', 'e_enabledFlag', '=', '0x0004', ',', 'e_filterFlag', '=', '0x0008', ',', 'e_bulletHitFlag', '=', '0x0010', ',', 'e_toiFlag', '=', '0x0020', '}'])
Evaluating stack ['void', 'FlagForFiltering', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'FlagForFiltering', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'FlagForFiltering', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'FlagForFiltering', '(', ')', ';'])
('is method namestack', True, ['void', 'FlagForFiltering', '(', ')', ';'])
________________________________________________________________________________
FlagForFiltering
Evaluating stack ['static', 'void', 'AddType', '(', 'b2ContactCreateFcn', '*', 'createFcn', ',', 'b2ContactDestroyFcn', '*', 'destroyFcn', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ')']
BraceDepth: 1
Evaluating stack ['static', 'void', 'AddType', '(', 'b2ContactCreateFcn', '*', 'createFcn', ',', 'b2ContactDestroyFcn', '*', 'destroyFcn', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', 'void', 'AddType', '(', 'b2ContactCreateFcn', '*', 'createFcn', ',', 'b2ContactDestroyFcn', '*', 'destroyFcn', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ')', ';'])
('CLEAN ARRAYS', ['static', 'void', 'AddType', '(', 'b2ContactCreateFcn', '*', 'createFcn', ',', 'b2ContactDestroyFcn', '*', 'destroyFcn', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ')', ';'])
('is method namestack', True, ['static', 'void', 'AddType', '(', 'b2ContactCreateFcn', '*', 'createFcn', ',', 'b2ContactDestroyFcn', '*', 'destroyFcn', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ')', ';'])
________________________________________________________________________________
AddType
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactCreateFcn', '*', 'createFcn']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactDestroyFcn', '*', 'destroyFcn']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Shape', ':', ':', 'Type', 'typeA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Shape', ':', ':', 'Type', 'typeB']
None
________________________________________________________________________________
Evaluating stack ['static', 'void', 'InitializeRegisters', '(', ')']
BraceDepth: 1
Evaluating stack ['static', 'void', 'InitializeRegisters', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', 'void', 'InitializeRegisters', '(', ')', ';'])
('CLEAN ARRAYS', ['static', 'void', 'InitializeRegisters', '(', ')', ';'])
('is method namestack', True, ['static', 'void', 'InitializeRegisters', '(', ')', ';'])
________________________________________________________________________________
InitializeRegisters
Evaluating stack ['static', 'b2Contact', '*', 'Create', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 1
Evaluating stack ['static', 'b2Contact', '*', 'Create', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', 'b2Contact', '*', 'Create', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('CLEAN ARRAYS', ['static', 'b2Contact', '*', 'Create', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('is method namestack', True, ['static', 'b2Contact', '*', 'Create', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
________________________________________________________________________________
Create
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixtureA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'indexA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixtureB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'indexB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ',', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 1
Evaluating stack ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('CLEAN ARRAYS', ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('is method namestack', True, ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2Shape', ':', ':', 'Type', 'typeA', ',', 'b2Shape', ':', ':', 'Type', 'typeB', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
________________________________________________________________________________
Destroy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'contact']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Shape', ':', ':', 'Type', 'typeA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Shape', ':', ':', 'Type', 'typeB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 1
Evaluating stack ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('CLEAN ARRAYS', ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('is method namestack', True, ['static', 'void', 'Destroy', '(', 'b2Contact', '*', 'contact', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
________________________________________________________________________________
Destroy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'contact']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['b2Contact', '(', ')', ':', 'm_fixtureA', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_fixtureB', '(', '(', '(', 'void', '*', ')', '0', ')', ')']
BraceDepth: 2
Evaluating stack ['b2Contact', '(', ')', ':', 'm_fixtureA', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_fixtureB', '(', '(', '(', 'void', '*', ')', '0', ')', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Contact', '(', ')', ':', 'm_fixtureA', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_fixtureB', '(', '(', '(', 'void', '*', ')', '0', ')', ')', '{'])
('CLEAN ARRAYS', ['b2Contact', '(', ')', ':', 'm_fixtureA', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_fixtureB', '(', '(', '(', 'void', '*', ')', '0', ')', ')', '{'])
('is method namestack', True, ['b2Contact', '(', ')', ':', 'm_fixtureA', '(', '(', '(', 'void', '*', ')', '0', ')', ')', ',', 'm_fixtureB', '(', '(', '(', 'void', '*', ')', '0', ')', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2Contact
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Contact', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ')']
BraceDepth: 1
Evaluating stack ['b2Contact', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Contact', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ')', ';'])
('CLEAN ARRAYS', ['b2Contact', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ')', ';'])
('is method namestack', True, ['b2Contact', '(', 'b2Fixture', '*', 'fixtureA', ',', 'int32', 'indexA', ',', 'b2Fixture', '*', 'fixtureB', ',', 'int32', 'indexB', ')', ';'])
________________________________________________________________________________
b2Contact
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixtureA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'indexA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'fixtureB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'indexB']
None
________________________________________________________________________________
Evaluating stack ['virtual', '~b2Contact', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2Contact', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2Contact', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2Contact', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2Contact', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2Contact
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Update', '(', 'b2ContactListener', '*', 'listener', ')']
BraceDepth: 1
Evaluating stack ['void', 'Update', '(', 'b2ContactListener', '*', 'listener', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Update', '(', 'b2ContactListener', '*', 'listener', ')', ';'])
('CLEAN ARRAYS', ['void', 'Update', '(', 'b2ContactListener', '*', 'listener', ')', ';'])
('is method namestack', True, ['void', 'Update', '(', 'b2ContactListener', '*', 'listener', ')', ';'])
________________________________________________________________________________
Update
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactListener', '*', 'listener']
None
________________________________________________________________________________
Evaluating stack ['static', 'b2ContactRegister', 's_registers', '[', 'b2Shape', ':', ':', 'e_typeCount', ']', '[', 'b2Shape', ':', ':', 'e_typeCount', ']']
BraceDepth: 1
Evaluating stack ['static', 'b2ContactRegister', 's_registers', '[', 'b2Shape', ':', ':', 'e_typeCount', ']', '[', 'b2Shape', ':', ':', 'e_typeCount', ']', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['static', 'b2ContactRegister', 's_registers', '[', 'b2Shape', ':', ':', 'e_typeCount', ']', '[', 'b2Shape', ':', ':', 'e_typeCount', ']']
['static', 'b2ContactRegister', 's_registers', '[', 'b2Shape', ':', ':', 'e_typeCount', ']', '[', 'b2Shape', ':', ':', 'e_typeCount', ']', ';']
________________________________________________________________________________
Evaluating stack ['static', 'bool', 's_initialized']
BraceDepth: 1
Evaluating stack ['static', 'bool', 's_initialized', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['static', 'bool', 's_initialized']
['static', 'bool', 's_initialized', ';']
________________________________________________________________________________
Evaluating stack ['uint32', 'm_flags']
BraceDepth: 1
Evaluating stack ['uint32', 'm_flags', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['uint32', 'm_flags']
['uint32', 'm_flags', ';']
________________________________________________________________________________
Evaluating stack ['b2Contact', '*', 'm_prev']
BraceDepth: 1
Evaluating stack ['b2Contact', '*', 'm_prev', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'm_prev']
['b2Contact', '*', 'm_prev', ';']
________________________________________________________________________________
Evaluating stack ['b2Contact', '*', 'm_next']
BraceDepth: 1
Evaluating stack ['b2Contact', '*', 'm_next', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Contact', '*', 'm_next']
['b2Contact', '*', 'm_next', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactEdge', 'm_nodeA']
BraceDepth: 1
Evaluating stack ['b2ContactEdge', 'm_nodeA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactEdge', 'm_nodeA']
['b2ContactEdge', 'm_nodeA', ';']
________________________________________________________________________________
Evaluating stack ['b2ContactEdge', 'm_nodeB']
BraceDepth: 1
Evaluating stack ['b2ContactEdge', 'm_nodeB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2ContactEdge', 'm_nodeB']
['b2ContactEdge', 'm_nodeB', ';']
________________________________________________________________________________
Evaluating stack ['b2Fixture', '*', 'm_fixtureA']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'm_fixtureA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'm_fixtureA']
['b2Fixture', '*', 'm_fixtureA', ';']
________________________________________________________________________________
Evaluating stack ['b2Fixture', '*', 'm_fixtureB']
BraceDepth: 1
Evaluating stack ['b2Fixture', '*', 'm_fixtureB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Fixture', '*', 'm_fixtureB']
['b2Fixture', '*', 'm_fixtureB', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Manifold', 'm_manifold']
BraceDepth: 1
Evaluating stack ['b2Manifold', 'm_manifold', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Manifold', 'm_manifold']
['b2Manifold', 'm_manifold', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_toiCount']
BraceDepth: 1
Evaluating stack ['int32', 'm_toiCount', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_toiCount']
['int32', 'm_toiCount', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_toi']
BraceDepth: 1
Evaluating stack ['float32', 'm_toi', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_toi']
['float32', 'm_toi', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_friction']
BraceDepth: 1
Evaluating stack ['float32', 'm_friction', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_friction']
['float32', 'm_friction', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_restitution']
BraceDepth: 1
Evaluating stack ['float32', 'm_restitution', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_restitution']
['float32', 'm_restitution', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetManifold
Evaluating stack ['return', '&', 'm_manifold']
BraceDepth: 1
Evaluating stack ['return', '&', 'm_manifold', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Manifold', '*', 'b2Contact', ':', ':', 'GetManifold', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetManifold
Evaluating stack ['return', '&', 'm_manifold']
BraceDepth: 1
Evaluating stack ['return', '&', 'm_manifold', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Contact', ':', ':', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Contact', ':', ':', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', 'b2Contact', ':', ':', 'GetWorldManifold', '(', 'b2WorldManifold', '*', 'worldManifold', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetWorldManifold
Evaluating stack ['const', 'b2Body', '*', 'bodyA', '=', 'm_fixtureA', '-', '>GetBody', '(', ')']
BraceDepth: 1
Evaluating stack ['const', 'b2Body', '*', 'bodyA', '=', 'm_fixtureA', '-', '>GetBody', '(', ')', ';']
BraceDepth: 1
Evaluating stack ['const', 'b2Body', '*', 'bodyB', '=', 'm_fixtureB', '-', '>GetBody', '(', ')']
BraceDepth: 1
Evaluating stack ['const', 'b2Body', '*', 'bodyB', '=', 'm_fixtureB', '-', '>GetBody', '(', ')', ';']
BraceDepth: 1
Evaluating stack ['const', 'b2Shape', '*', 'shapeA', '=', 'm_fixtureA', '-', '>GetShape', '(', ')']
BraceDepth: 1
Evaluating stack ['const', 'b2Shape', '*', 'shapeA', '=', 'm_fixtureA', '-', '>GetShape', '(', ')', ';']
BraceDepth: 1
Evaluating stack ['const', 'b2Shape', '*', 'shapeB', '=', 'm_fixtureB', '-', '>GetShape', '(', ')']
BraceDepth: 1
Evaluating stack ['const', 'b2Shape', '*', 'shapeB', '=', 'm_fixtureB', '-', '>GetShape', '(', ')', ';']
BraceDepth: 1
Evaluating stack ['worldManifold', '-', '>Initialize', '(', '&', 'm_manifold', ',', 'bodyA', '-', '>GetTransform', '(', ')', ',', 'shapeA', '-', '>m_radius', ',', 'bodyB', '-', '>GetTransform', '(', ')', ',', 'shapeB', '-', '>m_radius', ')']
BraceDepth: 1
Evaluating stack ['worldManifold', '-', '>Initialize', '(', '&', 'm_manifold', ',', 'bodyA', '-', '>GetTransform', '(', ')', ',', 'shapeA', '-', '>m_radius', ',', 'bodyB', '-', '>GetTransform', '(', ')', ',', 'shapeB', '-', '>m_radius', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'SetEnabled', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'SetEnabled', '(', 'bool', 'flag', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Contact', ':', ':', 'SetEnabled', '(', 'bool', 'flag', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Contact', ':', ':', 'SetEnabled', '(', 'bool', 'flag', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Contact', ':', ':', 'SetEnabled', '(', 'bool', 'flag', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::SetEnabled
Evaluating stack ['if', '(', 'flag', ')']
BraceDepth: 2
Evaluating stack ['if', '(', 'flag', ')', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_enabledFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '=', 'e_enabledFlag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack ['else']
BraceDepth: 2
Evaluating stack ['}', 'else', '{']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_enabledFlag']
BraceDepth: 2
Evaluating stack ['m_flags', '&', '=', '~e_enabledFlag', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}', '}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Contact', ':', ':', 'IsEnabled', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Contact', ':', ':', 'IsEnabled', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Contact', ':', ':', 'IsEnabled', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Contact', ':', ':', 'IsEnabled', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Contact', ':', ':', 'IsEnabled', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::IsEnabled
Evaluating stack ['return', '(', 'm_flags', '&', 'e_enabledFlag', ')', '=', '=', 'e_enabledFlag']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_enabledFlag', ')', '=', '=', 'e_enabledFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Contact', ':', ':', 'IsTouching', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Contact', ':', ':', 'IsTouching', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Contact', ':', ':', 'IsTouching', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Contact', ':', ':', 'IsTouching', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Contact', ':', ':', 'IsTouching', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::IsTouching
Evaluating stack ['return', '(', 'm_flags', '&', 'e_touchingFlag', ')', '=', '=', 'e_touchingFlag']
BraceDepth: 1
Evaluating stack ['return', '(', 'm_flags', '&', 'e_touchingFlag', ')', '=', '=', 'e_touchingFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Contact', '*', 'b2Contact', ':', ':', 'GetNext', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetFixtureA
Evaluating stack ['return', 'm_fixtureA']
BraceDepth: 1
Evaluating stack ['return', 'm_fixtureA', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetFixtureA
Evaluating stack ['return', 'm_fixtureA']
BraceDepth: 1
Evaluating stack ['return', 'm_fixtureA', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetFixtureB
Evaluating stack ['return', 'm_fixtureB']
BraceDepth: 1
Evaluating stack ['return', 'm_fixtureB', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexA', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexA', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetChildIndexA
Evaluating stack ['return', 'm_indexA']
BraceDepth: 1
Evaluating stack ['return', 'm_indexA', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Fixture', '*', 'b2Contact', ':', ':', 'GetFixtureB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetFixtureB
Evaluating stack ['return', 'm_fixtureB']
BraceDepth: 1
Evaluating stack ['return', 'm_fixtureB', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexB', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexB', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'int32', 'b2Contact', ':', ':', 'GetChildIndexB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetChildIndexB
Evaluating stack ['return', 'm_indexB']
BraceDepth: 1
Evaluating stack ['return', 'm_indexB', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'FlagForFiltering', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'FlagForFiltering', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Contact', ':', ':', 'FlagForFiltering', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Contact', ':', ':', 'FlagForFiltering', '(', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Contact', ':', ':', 'FlagForFiltering', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::FlagForFiltering
Evaluating stack ['m_flags', '=', 'e_filterFlag']
BraceDepth: 1
Evaluating stack ['m_flags', '=', 'e_filterFlag', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Contact', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Contact', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Contact', ':', ':', 'SetFriction', '(', 'float32', 'friction', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::SetFriction
Evaluating stack ['m_friction', '=', 'friction']
BraceDepth: 1
Evaluating stack ['m_friction', '=', 'friction', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Contact', ':', ':', 'GetFriction', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Contact', ':', ':', 'GetFriction', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Contact', ':', ':', 'GetFriction', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Contact', ':', ':', 'GetFriction', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Contact', ':', ':', 'GetFriction', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetFriction
Evaluating stack ['return', 'm_friction']
BraceDepth: 1
Evaluating stack ['return', 'm_friction', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'ResetFriction', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'ResetFriction', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Contact', ':', ':', 'ResetFriction', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Contact', ':', ':', 'ResetFriction', '(', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Contact', ':', ':', 'ResetFriction', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::ResetFriction
Evaluating stack ['m_friction', '=', 'b2MixFriction', '(', 'm_fixtureA', '-', '>m_friction', ',', 'm_fixtureB', '-', '>m_friction', ')']
BraceDepth: 1
Evaluating stack ['m_friction', '=', 'b2MixFriction', '(', 'm_fixtureA', '-', '>m_friction', ',', 'm_fixtureB', '-', '>m_friction', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Contact', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Contact', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Contact', ':', ':', 'SetRestitution', '(', 'float32', 'restitution', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::SetRestitution
Evaluating stack ['m_restitution', '=', 'restitution']
BraceDepth: 1
Evaluating stack ['m_restitution', '=', 'restitution', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2Contact', ':', ':', 'GetRestitution', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2Contact', ':', ':', 'GetRestitution', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2Contact', ':', ':', 'GetRestitution', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2Contact', ':', ':', 'GetRestitution', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2Contact', ':', ':', 'GetRestitution', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::GetRestitution
Evaluating stack ['return', 'm_restitution']
BraceDepth: 1
Evaluating stack ['return', 'm_restitution', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'ResetRestitution', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Contact', ':', ':', 'ResetRestitution', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Contact', ':', ':', 'ResetRestitution', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Contact', ':', ':', 'ResetRestitution', '(', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Contact', ':', ':', 'ResetRestitution', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Contact::ResetRestitution
Evaluating stack ['m_restitution', '=', 'b2MixRestitution', '(', 'm_fixtureA', '-', '>m_restitution', ',', 'm_fixtureB', '-', '>m_restitution', ')']
BraceDepth: 1
Evaluating stack ['m_restitution', '=', 'b2MixRestitution', '(', 'm_fixtureA', '-', '>m_restitution', ',', 'm_fixtureB', '-', '>m_restitution', ')', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['class', 'b2Body']
BraceDepth: 0
Evaluating stack ['class', 'b2Body', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2SolverData']
BraceDepth: 0
Evaluating stack ['struct', 'b2SolverData', ';']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator']
BraceDepth: 0
Evaluating stack ['class', 'b2BlockAllocator', ';']
BraceDepth: 0
Evaluating stack ['enum', 'b2JointType', '{', 'e_unknownJoint', ',', 'e_revoluteJoint', ',', 'e_prismaticJoint', ',', 'e_distanceJoint', ',', 'e_pulleyJoint', ',', 'e_mouseJoint', ',', 'e_gearJoint', ',', 'e_wheelJoint', ',', 'e_weldJoint', ',', 'e_frictionJoint', ',', 'e_ropeJoint', '}']
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['enum', 'b2LimitState', '{', 'e_inactiveLimit', ',', 'e_atLowerLimit', ',', 'e_atUpperLimit', ',', 'e_equalLimits', '}']
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2Jacobian']
BraceDepth: 1
Evaluating stack ['struct', 'b2Jacobian', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Vec2', 'linear']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'linear', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'linear']
['b2Vec2', 'linear', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'angularA']
BraceDepth: 1
Evaluating stack ['float32', 'angularA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angularA']
['float32', 'angularA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'angularB']
BraceDepth: 1
Evaluating stack ['float32', 'angularB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'angularB']
['float32', 'angularB', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2JointEdge']
BraceDepth: 1
Evaluating stack ['struct', 'b2JointEdge', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2Body', '*', 'other']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'other', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'other']
['b2Body', '*', 'other', ';']
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'joint']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'joint', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'joint']
['b2Joint', '*', 'joint', ';']
________________________________________________________________________________
Evaluating stack ['b2JointEdge', '*', 'prev']
BraceDepth: 1
Evaluating stack ['b2JointEdge', '*', 'prev', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointEdge', '*', 'prev']
['b2JointEdge', '*', 'prev', ';']
________________________________________________________________________________
Evaluating stack ['b2JointEdge', '*', 'next']
BraceDepth: 1
Evaluating stack ['b2JointEdge', '*', 'next', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointEdge', '*', 'next']
['b2JointEdge', '*', 'next', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2JointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2JointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2JointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2JointDef', '(', ')', '{'])
('is method namestack', True, ['b2JointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2JointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2JointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2JointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_unknownJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_unknownJoint', ';']
BraceDepth: 2
Evaluating stack ['userData', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['userData', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['bodyA', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['bodyA', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['bodyB', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['bodyB', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'false']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'false', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2JointType', 'type']
BraceDepth: 1
Evaluating stack ['b2JointType', 'type', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointType', 'type']
['b2JointType', 'type', ';']
________________________________________________________________________________
Evaluating stack ['void', '*', 'userData']
BraceDepth: 1
Evaluating stack ['void', '*', 'userData', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'userData']
['void', '*', 'userData', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'bodyA']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'bodyA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
['b2Body', '*', 'bodyA', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'bodyB']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'bodyB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
['b2Body', '*', 'bodyB', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'collideConnected']
BraceDepth: 1
Evaluating stack ['bool', 'collideConnected', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'collideConnected']
['bool', 'collideConnected', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2Joint')
('stack IN', 'class b2Joint')
('HEAD', ['class', 'b2Joint'])
______________
('TAIL', [])
('CLASS OK', 'b2Joint')
('CURACCESS-set', 'public')
Evaluating stack ['b2JointType', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2JointType', 'GetType', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2JointType', 'GetType', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2JointType', 'GetType', '(', ')', 'const', ';'])
('is method namestack', True, ['b2JointType', 'GetType', '(', ')', 'const', ';'])
________________________________________________________________________________
GetType
Evaluating stack ['b2Body', '*', 'GetBodyA', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'GetBodyA', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Body', '*', 'GetBodyA', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Body', '*', 'GetBodyA', '(', ')', ';'])
('is method namestack', True, ['b2Body', '*', 'GetBodyA', '(', ')', ';'])
________________________________________________________________________________
GetBodyA
Evaluating stack ['b2Body', '*', 'GetBodyB', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'GetBodyB', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Body', '*', 'GetBodyB', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Body', '*', 'GetBodyB', '(', ')', ';'])
('is method namestack', True, ['b2Body', '*', 'GetBodyB', '(', ')', ';'])
________________________________________________________________________________
GetBodyB
Evaluating stack ['virtual', 'b2Vec2', 'GetAnchorA', '(', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'b2Vec2', 'GetAnchorA', '(', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'b2Vec2', 'GetAnchorA', '(', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'b2Vec2', 'GetAnchorA', '(', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'b2Vec2', 'GetAnchorA', '(', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['virtual', 'b2Vec2', 'GetAnchorB', '(', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'b2Vec2', 'GetAnchorB', '(', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'b2Vec2', 'GetAnchorB', '(', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'b2Vec2', 'GetAnchorB', '(', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'b2Vec2', 'GetAnchorB', '(', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['virtual', 'b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['virtual', 'float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';'])
('is method namestack', True, ['virtual', 'float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', '=', '0', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'GetNext', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Joint', '*', 'GetNext', '(', ')', ';'])
('CLEAN ARRAYS', ['b2Joint', '*', 'GetNext', '(', ')', ';'])
('is method namestack', True, ['b2Joint', '*', 'GetNext', '(', ')', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['const', 'b2Joint', '*', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Joint', '*', 'GetNext', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Joint', '*', 'GetNext', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Joint', '*', 'GetNext', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Joint', '*', 'GetNext', '(', ')', 'const', ';'])
________________________________________________________________________________
GetNext
Evaluating stack ['void', '*', 'GetUserData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', '*', 'GetUserData', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
('is method namestack', True, ['void', '*', 'GetUserData', '(', ')', 'const', ';'])
________________________________________________________________________________
GetUserData
Evaluating stack ['void', 'SetUserData', '(', 'void', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
('is method namestack', True, ['void', 'SetUserData', '(', 'void', '*', 'data', ')', ';'])
________________________________________________________________________________
SetUserData
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsActive', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsActive', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsActive', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsActive', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsActive', '(', ')', 'const', ';'])
________________________________________________________________________________
IsActive
Evaluating stack ['bool', 'GetCollideConnected', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'GetCollideConnected', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'GetCollideConnected', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'GetCollideConnected', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'GetCollideConnected', '(', ')', 'const', ';'])
________________________________________________________________________________
GetCollideConnected
Evaluating stack ['virtual', 'void', 'Dump', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', 'void', 'Dump', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', 'void', 'Dump', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', 'void', 'Dump', '(', ')', '{'])
('is method namestack', True, ['virtual', 'void', 'Dump', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Dump
Evaluating stack ['b2Log', '(', '"// Dump is not supported for this joint type.\\n"', ')']
BraceDepth: 2
Evaluating stack ['b2Log', '(', '"// Dump is not supported for this joint type.\\n"', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2World']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2World', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Body']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Body', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Island']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Island', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint', ';']
BraceDepth: 1
Evaluating stack ['static', 'b2Joint', '*', 'Create', '(', 'const', 'b2JointDef', '*', 'def', ',', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 1
Evaluating stack ['static', 'b2Joint', '*', 'Create', '(', 'const', 'b2JointDef', '*', 'def', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', 'b2Joint', '*', 'Create', '(', 'const', 'b2JointDef', '*', 'def', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('CLEAN ARRAYS', ['static', 'b2Joint', '*', 'Create', '(', 'const', 'b2JointDef', '*', 'def', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('is method namestack', True, ['static', 'b2Joint', '*', 'Create', '(', 'const', 'b2JointDef', '*', 'def', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
________________________________________________________________________________
Create
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2JointDef', '*', 'def']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['static', 'void', 'Destroy', '(', 'b2Joint', '*', 'joint', ',', 'b2BlockAllocator', '*', 'allocator', ')']
BraceDepth: 1
Evaluating stack ['static', 'void', 'Destroy', '(', 'b2Joint', '*', 'joint', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['static', 'void', 'Destroy', '(', 'b2Joint', '*', 'joint', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('CLEAN ARRAYS', ['static', 'void', 'Destroy', '(', 'b2Joint', '*', 'joint', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
('is method namestack', True, ['static', 'void', 'Destroy', '(', 'b2Joint', '*', 'joint', ',', 'b2BlockAllocator', '*', 'allocator', ')', ';'])
________________________________________________________________________________
Destroy
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'joint']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2BlockAllocator', '*', 'allocator']
None
________________________________________________________________________________
Evaluating stack ['b2Joint', '(', 'const', 'b2JointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2Joint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Joint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2Joint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2Joint', '(', 'const', 'b2JointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
b2Joint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2JointDef', '*', 'def']
None
________________________________________________________________________________
Evaluating stack ['virtual', '~b2Joint', '(', ')']
BraceDepth: 2
Evaluating stack ['virtual', '~b2Joint', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['virtual', '~b2Joint', '(', ')', '{'])
('CLEAN ARRAYS', ['virtual', '~b2Joint', '(', ')', '{'])
('is method namestack', True, ['virtual', '~b2Joint', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
~b2Joint
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['virtual', 'void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
('is method namestack', True, ['virtual', 'void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['virtual', 'void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
('is method namestack', True, ['virtual', 'void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['virtual', 'bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0']
BraceDepth: 1
Evaluating stack ['virtual', 'bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['virtual', 'bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
('CLEAN ARRAYS', ['virtual', 'bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
('is method namestack', True, ['virtual', 'bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', '=', '0', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2JointType', 'm_type']
BraceDepth: 1
Evaluating stack ['b2JointType', 'm_type', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointType', 'm_type']
['b2JointType', 'm_type', ';']
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'm_prev']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'm_prev', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'm_prev']
['b2Joint', '*', 'm_prev', ';']
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'm_next']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'm_next', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'm_next']
['b2Joint', '*', 'm_next', ';']
________________________________________________________________________________
Evaluating stack ['b2JointEdge', 'm_edgeA']
BraceDepth: 1
Evaluating stack ['b2JointEdge', 'm_edgeA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointEdge', 'm_edgeA']
['b2JointEdge', 'm_edgeA', ';']
________________________________________________________________________________
Evaluating stack ['b2JointEdge', 'm_edgeB']
BraceDepth: 1
Evaluating stack ['b2JointEdge', 'm_edgeB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointEdge', 'm_edgeB']
['b2JointEdge', 'm_edgeB', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_bodyA']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_bodyA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_bodyA']
['b2Body', '*', 'm_bodyA', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_bodyB']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_bodyB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_bodyB']
['b2Body', '*', 'm_bodyB', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_index']
BraceDepth: 1
Evaluating stack ['int32', 'm_index', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_index']
['int32', 'm_index', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_islandFlag']
BraceDepth: 1
Evaluating stack ['bool', 'm_islandFlag', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_islandFlag']
['bool', 'm_islandFlag', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_collideConnected']
BraceDepth: 1
Evaluating stack ['bool', 'm_collideConnected', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_collideConnected']
['bool', 'm_collideConnected', ';']
________________________________________________________________________________
Evaluating stack ['void', '*', 'm_userData']
BraceDepth: 1
Evaluating stack ['void', '*', 'm_userData', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['void', '*', 'm_userData']
['void', '*', 'm_userData', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'b2JointType', 'b2Joint', ':', ':', 'GetType', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'b2JointType', 'b2Joint', ':', ':', 'GetType', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2JointType', 'b2Joint', ':', ':', 'GetType', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'b2JointType', 'b2Joint', ':', ':', 'GetType', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'b2JointType', 'b2Joint', ':', ':', 'GetType', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::GetType
Evaluating stack ['return', 'm_type']
BraceDepth: 1
Evaluating stack ['return', 'm_type', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyA', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyA', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyA', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyA', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyA', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::GetBodyA
Evaluating stack ['return', 'm_bodyA']
BraceDepth: 1
Evaluating stack ['return', 'm_bodyA', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyB', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyB', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyB', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyB', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Body', '*', 'b2Joint', ':', ':', 'GetBodyB', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::GetBodyB
Evaluating stack ['return', 'm_bodyB']
BraceDepth: 1
Evaluating stack ['return', 'm_bodyB', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')']
BraceDepth: 1
Evaluating stack ['inline', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', '{'])
('CLEAN ARRAYS', ['inline', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', '{'])
('is method namestack', True, ['inline', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'const', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'const', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'const', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'const', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'const', 'b2Joint', '*', 'b2Joint', ':', ':', 'GetNext', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::GetNext
Evaluating stack ['return', 'm_next']
BraceDepth: 1
Evaluating stack ['return', 'm_next', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', '*', 'b2Joint', ':', ':', 'GetUserData', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'void', '*', 'b2Joint', ':', ':', 'GetUserData', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', '*', 'b2Joint', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'void', '*', 'b2Joint', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'void', '*', 'b2Joint', ':', ':', 'GetUserData', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::GetUserData
Evaluating stack ['return', 'm_userData']
BraceDepth: 1
Evaluating stack ['return', 'm_userData', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2Joint', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2Joint', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2Joint', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2Joint', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2Joint', ':', ':', 'SetUserData', '(', 'void', '*', 'data', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::SetUserData
Evaluating stack ['m_userData', '=', 'data']
BraceDepth: 1
Evaluating stack ['m_userData', '=', 'data', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'bool', 'b2Joint', ':', ':', 'GetCollideConnected', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'bool', 'b2Joint', ':', ':', 'GetCollideConnected', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'bool', 'b2Joint', ':', ':', 'GetCollideConnected', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'bool', 'b2Joint', ':', ':', 'GetCollideConnected', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'bool', 'b2Joint', ':', ':', 'GetCollideConnected', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2Joint::GetCollideConnected
Evaluating stack ['return', 'm_collideConnected']
BraceDepth: 1
Evaluating stack ['return', 'm_collideConnected', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2DistanceJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2DistanceJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2DistanceJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2DistanceJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2DistanceJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2DistanceJointDef', '(', ')', '{'])
('is method namestack', True, ['b2DistanceJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2DistanceJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2DistanceJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2DistanceJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_distanceJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_distanceJoint', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['length', '=', '1', '0f']
BraceDepth: 2
Evaluating stack ['length', '=', '1', '0f', ';']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchorA , const b2Vec2 & anchorB ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchorA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchorB']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'length']
BraceDepth: 1
Evaluating stack ['float32', 'length', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'length']
['float32', 'length', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'frequencyHz']
['float32', 'frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'dampingRatio']
['float32', 'dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2DistanceJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2DistanceJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2DistanceJoint : public b2Joint')
('stack IN', 'class b2DistanceJoint : public b2Joint')
('HEAD', ['class', 'b2DistanceJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2DistanceJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorA
Evaluating stack ['return', 'm_localAnchorA']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorB
Evaluating stack ['return', 'm_localAnchorB']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetLength', '(', 'float32', 'length', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetLength', '(', 'float32', 'length', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetLength', '(', 'float32', 'length', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetLength', '(', 'float32', 'length', ')', ';'])
('is method namestack', True, ['void', 'SetLength', '(', 'float32', 'length', ')', ';'])
________________________________________________________________________________
SetLength
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'length']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetLength', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetLength', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetLength', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetLength', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetLength', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLength
Evaluating stack ['void', 'SetFrequency', '(', 'float32', 'hz', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';'])
('is method namestack', True, ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';'])
________________________________________________________________________________
SetFrequency
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hz']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetFrequency', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetFrequency', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetFrequency', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetFrequency', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetFrequency', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFrequency
Evaluating stack ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';'])
('is method namestack', True, ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';'])
________________________________________________________________________________
SetDampingRatio
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetDampingRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetDampingRatio', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetDampingRatio', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetDampingRatio', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetDampingRatio', '(', ')', 'const', ';'])
________________________________________________________________________________
GetDampingRatio
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2DistanceJoint', '(', 'const', 'b2DistanceJointDef', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['b2DistanceJoint', '(', 'const', 'b2DistanceJointDef', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2DistanceJoint', '(', 'const', 'b2DistanceJointDef', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['b2DistanceJoint', '(', 'const', 'b2DistanceJointDef', '*', 'data', ')', ';'])
('is method namestack', True, ['b2DistanceJoint', '(', 'const', 'b2DistanceJointDef', '*', 'data', ')', ';'])
________________________________________________________________________________
b2DistanceJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2DistanceJointDef', '*', 'data']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['float32', 'm_frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'm_frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_frequencyHz']
['float32', 'm_frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'm_dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_dampingRatio']
['float32', 'm_dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_bias']
BraceDepth: 1
Evaluating stack ['float32', 'm_bias', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_bias']
['float32', 'm_bias', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_gamma']
BraceDepth: 1
Evaluating stack ['float32', 'm_gamma', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_gamma']
['float32', 'm_gamma', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_impulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_impulse']
['float32', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_length']
BraceDepth: 1
Evaluating stack ['float32', 'm_length', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_length']
['float32', 'm_length', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_u']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_u', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_u']
['b2Vec2', 'm_u', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rA']
['b2Vec2', 'm_rA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rB']
['b2Vec2', 'm_rB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_mass']
BraceDepth: 1
Evaluating stack ['float32', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_mass']
['float32', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetLength', '(', 'float32', 'length', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetLength', '(', 'float32', 'length', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetLength', '(', 'float32', 'length', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetLength', '(', 'float32', 'length', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetLength', '(', 'float32', 'length', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceJoint::SetLength
Evaluating stack ['m_length', '=', 'length']
BraceDepth: 1
Evaluating stack ['m_length', '=', 'length', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetLength', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetLength', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetLength', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetLength', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetLength', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceJoint::GetLength
Evaluating stack ['return', 'm_length']
BraceDepth: 1
Evaluating stack ['return', 'm_length', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetFrequency', '(', 'float32', 'hz', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetFrequency', '(', 'float32', 'hz', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetFrequency', '(', 'float32', 'hz', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetFrequency', '(', 'float32', 'hz', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetFrequency', '(', 'float32', 'hz', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceJoint::SetFrequency
Evaluating stack ['m_frequencyHz', '=', 'hz']
BraceDepth: 1
Evaluating stack ['m_frequencyHz', '=', 'hz', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetFrequency', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetFrequency', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetFrequency', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetFrequency', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetFrequency', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceJoint::GetFrequency
Evaluating stack ['return', 'm_frequencyHz']
BraceDepth: 1
Evaluating stack ['return', 'm_frequencyHz', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetDampingRatio', '(', 'float32', 'ratio', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2DistanceJoint', ':', ':', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceJoint::SetDampingRatio
Evaluating stack ['m_dampingRatio', '=', 'ratio']
BraceDepth: 1
Evaluating stack ['m_dampingRatio', '=', 'ratio', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetDampingRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetDampingRatio', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetDampingRatio', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetDampingRatio', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2DistanceJoint', ':', ':', 'GetDampingRatio', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2DistanceJoint::GetDampingRatio
Evaluating stack ['return', 'm_dampingRatio']
BraceDepth: 1
Evaluating stack ['return', 'm_dampingRatio', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2FrictionJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2FrictionJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2FrictionJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2FrictionJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2FrictionJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2FrictionJointDef', '(', ')', '{'])
('is method namestack', True, ['b2FrictionJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2FrictionJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2FrictionJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2FrictionJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_frictionJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_frictionJoint', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['maxForce', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['maxForce', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['maxTorque', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['maxTorque', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchor']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxForce']
BraceDepth: 1
Evaluating stack ['float32', 'maxForce', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxForce']
['float32', 'maxForce', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxTorque']
BraceDepth: 1
Evaluating stack ['float32', 'maxTorque', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxTorque']
['float32', 'maxTorque', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2FrictionJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2FrictionJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2FrictionJoint : public b2Joint')
('stack IN', 'class b2FrictionJoint : public b2Joint')
('HEAD', ['class', 'b2FrictionJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2FrictionJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorA
Evaluating stack ['return', 'm_localAnchorA']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorB
Evaluating stack ['return', 'm_localAnchorB']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetMaxForce', '(', 'float32', 'force', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';'])
('is method namestack', True, ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';'])
________________________________________________________________________________
SetMaxForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'force']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMaxForce', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMaxForce', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMaxForce', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMaxForce', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMaxForce', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMaxForce
Evaluating stack ['void', 'SetMaxTorque', '(', 'float32', 'torque', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMaxTorque', '(', 'float32', 'torque', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMaxTorque', '(', 'float32', 'torque', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMaxTorque', '(', 'float32', 'torque', ')', ';'])
('is method namestack', True, ['void', 'SetMaxTorque', '(', 'float32', 'torque', ')', ';'])
________________________________________________________________________________
SetMaxTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'torque']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMaxTorque', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMaxTorque', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMaxTorque', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMaxTorque', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMaxTorque', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMaxTorque
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2FrictionJoint', '(', 'const', 'b2FrictionJointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2FrictionJoint', '(', 'const', 'b2FrictionJointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2FrictionJoint', '(', 'const', 'b2FrictionJointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2FrictionJoint', '(', 'const', 'b2FrictionJointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2FrictionJoint', '(', 'const', 'b2FrictionJointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
b2FrictionJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2FrictionJointDef', '*', 'def']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_linearImpulse']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_linearImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_linearImpulse']
['b2Vec2', 'm_linearImpulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_angularImpulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_angularImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_angularImpulse']
['float32', 'm_angularImpulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_maxForce']
BraceDepth: 1
Evaluating stack ['float32', 'm_maxForce', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_maxForce']
['float32', 'm_maxForce', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_maxTorque']
BraceDepth: 1
Evaluating stack ['float32', 'm_maxTorque', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_maxTorque']
['float32', 'm_maxTorque', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rA']
['b2Vec2', 'm_rA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rB']
['b2Vec2', 'm_rB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['b2Mat22', 'm_linearMass']
BraceDepth: 1
Evaluating stack ['b2Mat22', 'm_linearMass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Mat22', 'm_linearMass']
['b2Mat22', 'm_linearMass', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_angularMass']
BraceDepth: 1
Evaluating stack ['float32', 'm_angularMass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_angularMass']
['float32', 'm_angularMass', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2GearJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2GearJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2GearJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2GearJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2GearJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2GearJointDef', '(', ')', '{'])
('is method namestack', True, ['b2GearJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2GearJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2GearJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2GearJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_gearJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_gearJoint', ';']
BraceDepth: 2
Evaluating stack ['joint1', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['joint1', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['joint2', '=', '(', '(', 'void', '*', ')', '0', ')']
BraceDepth: 2
Evaluating stack ['joint2', '=', '(', '(', 'void', '*', ')', '0', ')', ';']
BraceDepth: 2
Evaluating stack ['ratio', '=', '1', '0f']
BraceDepth: 2
Evaluating stack ['ratio', '=', '1', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Joint', '*', 'joint1']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'joint1', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'joint1']
['b2Joint', '*', 'joint1', ';']
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'joint2']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'joint2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'joint2']
['b2Joint', '*', 'joint2', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'ratio']
BraceDepth: 1
Evaluating stack ['float32', 'ratio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
['float32', 'ratio', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2GearJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2GearJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2GearJoint : public b2Joint')
('stack IN', 'class b2GearJoint : public b2Joint')
('HEAD', ['class', 'b2GearJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2GearJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'GetJoint1', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Joint', '*', 'GetJoint1', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Joint', '*', 'GetJoint1', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Joint', '*', 'GetJoint1', '(', ')', '{'])
('is method namestack', True, ['b2Joint', '*', 'GetJoint1', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetJoint1
Evaluating stack ['return', 'm_joint1']
BraceDepth: 2
Evaluating stack ['return', 'm_joint1', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Joint', '*', 'GetJoint2', '(', ')']
BraceDepth: 2
Evaluating stack ['b2Joint', '*', 'GetJoint2', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Joint', '*', 'GetJoint2', '(', ')', '{'])
('CLEAN ARRAYS', ['b2Joint', '*', 'GetJoint2', '(', ')', '{'])
('is method namestack', True, ['b2Joint', '*', 'GetJoint2', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetJoint2
Evaluating stack ['return', 'm_joint2']
BraceDepth: 2
Evaluating stack ['return', 'm_joint2', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetRatio', '(', 'float32', 'ratio', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetRatio', '(', 'float32', 'ratio', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetRatio', '(', 'float32', 'ratio', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetRatio', '(', 'float32', 'ratio', ')', ';'])
('is method namestack', True, ['void', 'SetRatio', '(', 'float32', 'ratio', ')', ';'])
________________________________________________________________________________
SetRatio
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetRatio', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetRatio', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetRatio', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetRatio', '(', ')', 'const', ';'])
________________________________________________________________________________
GetRatio
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2GearJoint', '(', 'const', 'b2GearJointDef', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['b2GearJoint', '(', 'const', 'b2GearJointDef', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2GearJoint', '(', 'const', 'b2GearJointDef', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['b2GearJoint', '(', 'const', 'b2GearJointDef', '*', 'data', ')', ';'])
('is method namestack', True, ['b2GearJoint', '(', 'const', 'b2GearJointDef', '*', 'data', ')', ';'])
________________________________________________________________________________
b2GearJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2GearJointDef', '*', 'data']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'm_joint1']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'm_joint1', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'm_joint1']
['b2Joint', '*', 'm_joint1', ';']
________________________________________________________________________________
Evaluating stack ['b2Joint', '*', 'm_joint2']
BraceDepth: 1
Evaluating stack ['b2Joint', '*', 'm_joint2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Joint', '*', 'm_joint2']
['b2Joint', '*', 'm_joint2', ';']
________________________________________________________________________________
Evaluating stack ['b2JointType', 'm_typeA']
BraceDepth: 1
Evaluating stack ['b2JointType', 'm_typeA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointType', 'm_typeA']
['b2JointType', 'm_typeA', ';']
________________________________________________________________________________
Evaluating stack ['b2JointType', 'm_typeB']
BraceDepth: 1
Evaluating stack ['b2JointType', 'm_typeB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2JointType', 'm_typeB']
['b2JointType', 'm_typeB', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_bodyC']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_bodyC', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_bodyC']
['b2Body', '*', 'm_bodyC', ';']
________________________________________________________________________________
Evaluating stack ['b2Body', '*', 'm_bodyD']
BraceDepth: 1
Evaluating stack ['b2Body', '*', 'm_bodyD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'm_bodyD']
['b2Body', '*', 'm_bodyD', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorC']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorC', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorC']
['b2Vec2', 'm_localAnchorC', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorD']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorD']
['b2Vec2', 'm_localAnchorD', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAxisC']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAxisC', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAxisC']
['b2Vec2', 'm_localAxisC', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAxisD']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAxisD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAxisD']
['b2Vec2', 'm_localAxisD', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_referenceAngleA']
BraceDepth: 1
Evaluating stack ['float32', 'm_referenceAngleA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_referenceAngleA']
['float32', 'm_referenceAngleA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_referenceAngleB']
BraceDepth: 1
Evaluating stack ['float32', 'm_referenceAngleB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_referenceAngleB']
['float32', 'm_referenceAngleB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_constant']
BraceDepth: 1
Evaluating stack ['float32', 'm_constant', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_constant']
['float32', 'm_constant', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_ratio']
BraceDepth: 1
Evaluating stack ['float32', 'm_ratio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_ratio']
['float32', 'm_ratio', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_impulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_impulse']
['float32', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA', ',', 'm_indexB', ',', 'm_indexC', ',', 'm_indexD']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ',', 'm_indexB', ',', 'm_indexC', ',', 'm_indexD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA', ',', 'm_indexB', ',', 'm_indexC', ',', 'm_indexD']
['int32', 'm_indexA', ',', 'm_indexB', ',', 'm_indexC', ',', 'm_indexD', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_lcA', ',', 'm_lcB', ',', 'm_lcC', ',', 'm_lcD']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_lcA', ',', 'm_lcB', ',', 'm_lcC', ',', 'm_lcD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_lcA', ',', 'm_lcB', ',', 'm_lcC', ',', 'm_lcD']
['b2Vec2', 'm_lcA', ',', 'm_lcB', ',', 'm_lcC', ',', 'm_lcD', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_mA', ',', 'm_mB', ',', 'm_mC', ',', 'm_mD']
BraceDepth: 1
Evaluating stack ['float32', 'm_mA', ',', 'm_mB', ',', 'm_mC', ',', 'm_mD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_mA', ',', 'm_mB', ',', 'm_mC', ',', 'm_mD']
['float32', 'm_mA', ',', 'm_mB', ',', 'm_mC', ',', 'm_mD', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_iA', ',', 'm_iB', ',', 'm_iC', ',', 'm_iD']
BraceDepth: 1
Evaluating stack ['float32', 'm_iA', ',', 'm_iB', ',', 'm_iC', ',', 'm_iD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_iA', ',', 'm_iB', ',', 'm_iC', ',', 'm_iD']
['float32', 'm_iA', ',', 'm_iB', ',', 'm_iC', ',', 'm_iD', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_JvAC', ',', 'm_JvBD']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_JvAC', ',', 'm_JvBD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_JvAC', ',', 'm_JvBD']
['b2Vec2', 'm_JvAC', ',', 'm_JvBD', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_JwA', ',', 'm_JwB', ',', 'm_JwC', ',', 'm_JwD']
BraceDepth: 1
Evaluating stack ['float32', 'm_JwA', ',', 'm_JwB', ',', 'm_JwC', ',', 'm_JwD', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_JwA', ',', 'm_JwB', ',', 'm_JwC', ',', 'm_JwD']
['float32', 'm_JwA', ',', 'm_JwB', ',', 'm_JwC', ',', 'm_JwD', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_mass']
BraceDepth: 1
Evaluating stack ['float32', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_mass']
['float32', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2WheelJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2WheelJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2WheelJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2WheelJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2WheelJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2WheelJointDef', '(', ')', '{'])
('is method namestack', True, ['b2WheelJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2WheelJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2WheelJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2WheelJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_wheelJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_wheelJoint', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['localAxisA', 'Set', '(', '1', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAxisA', 'Set', '(', '1', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['enableMotor', '=', 'false']
BraceDepth: 2
Evaluating stack ['enableMotor', '=', 'false', ';']
BraceDepth: 2
Evaluating stack ['maxMotorTorque', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['maxMotorTorque', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['motorSpeed', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['motorSpeed', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '2', '0f']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '2', '0f', ';']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '7f']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '7f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor , const b2Vec2 & axis ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchor']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'axis']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAxisA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAxisA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAxisA']
['b2Vec2', 'localAxisA', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'enableMotor']
BraceDepth: 1
Evaluating stack ['bool', 'enableMotor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'enableMotor']
['bool', 'enableMotor', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxMotorTorque']
BraceDepth: 1
Evaluating stack ['float32', 'maxMotorTorque', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxMotorTorque']
['float32', 'maxMotorTorque', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'motorSpeed']
BraceDepth: 1
Evaluating stack ['float32', 'motorSpeed', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'motorSpeed']
['float32', 'motorSpeed', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'frequencyHz']
['float32', 'frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'dampingRatio']
['float32', 'dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2WheelJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2WheelJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2WheelJoint : public b2Joint')
('stack IN', 'class b2WheelJoint : public b2Joint')
('HEAD', ['class', 'b2WheelJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2WheelJoint')
('CURACCESS-set', 'public')
Evaluating stack ['void', 'GetDefinition', '(', 'b2WheelJointDef', '*', 'def', ')', 'const']
BraceDepth: 1
Evaluating stack ['void', 'GetDefinition', '(', 'b2WheelJointDef', '*', 'def', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'GetDefinition', '(', 'b2WheelJointDef', '*', 'def', ')', 'const', ';'])
('CLEAN ARRAYS', ['void', 'GetDefinition', '(', 'b2WheelJointDef', '*', 'def', ')', 'const', ';'])
('is method namestack', True, ['void', 'GetDefinition', '(', 'b2WheelJointDef', '*', 'def', ')', 'const', ';'])
________________________________________________________________________________
GetDefinition
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2WheelJointDef', '*', 'def']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorA
Evaluating stack ['return', 'm_localAnchorA']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorB
Evaluating stack ['return', 'm_localAnchorB']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAxisA
Evaluating stack ['return', 'm_localXAxisA']
BraceDepth: 2
Evaluating stack ['return', 'm_localXAxisA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetJointTranslation', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetJointTranslation', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetJointTranslation', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetJointTranslation', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetJointTranslation', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointTranslation
Evaluating stack ['float32', 'GetJointSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetJointSpeed', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointSpeed
Evaluating stack ['bool', 'IsMotorEnabled', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsMotorEnabled', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
________________________________________________________________________________
IsMotorEnabled
Evaluating stack ['void', 'EnableMotor', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
EnableMotor
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
('is method namestack', True, ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
________________________________________________________________________________
SetMotorSpeed
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'speed']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMotorSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMotorSpeed', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMotorSpeed
Evaluating stack ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';'])
('is method namestack', True, ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';'])
________________________________________________________________________________
SetMaxMotorTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'torque']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMaxMotorTorque', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMaxMotorTorque', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMaxMotorTorque', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMaxMotorTorque', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMaxMotorTorque', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMaxMotorTorque
Evaluating stack ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetMotorTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', ';'])
('is method namestack', True, ['void', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', ';'])
________________________________________________________________________________
SetSpringFrequencyHz
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hz']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetSpringFrequencyHz', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetSpringFrequencyHz', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetSpringFrequencyHz', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetSpringFrequencyHz', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetSpringFrequencyHz', '(', ')', 'const', ';'])
________________________________________________________________________________
GetSpringFrequencyHz
Evaluating stack ['void', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', ';'])
('is method namestack', True, ['void', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', ';'])
________________________________________________________________________________
SetSpringDampingRatio
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetSpringDampingRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetSpringDampingRatio', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetSpringDampingRatio', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetSpringDampingRatio', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetSpringDampingRatio', '(', ')', 'const', ';'])
________________________________________________________________________________
GetSpringDampingRatio
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2WheelJoint', '(', 'const', 'b2WheelJointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2WheelJoint', '(', 'const', 'b2WheelJointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2WheelJoint', '(', 'const', 'b2WheelJointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2WheelJoint', '(', 'const', 'b2WheelJointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2WheelJoint', '(', 'const', 'b2WheelJointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
b2WheelJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2WheelJointDef', '*', 'def']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['float32', 'm_frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'm_frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_frequencyHz']
['float32', 'm_frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'm_dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_dampingRatio']
['float32', 'm_dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localXAxisA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localXAxisA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localXAxisA']
['b2Vec2', 'm_localXAxisA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localYAxisA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localYAxisA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localYAxisA']
['b2Vec2', 'm_localYAxisA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_impulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_impulse']
['float32', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorImpulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorImpulse']
['float32', 'm_motorImpulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_springImpulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_springImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_springImpulse']
['float32', 'm_springImpulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_maxMotorTorque']
BraceDepth: 1
Evaluating stack ['float32', 'm_maxMotorTorque', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_maxMotorTorque']
['float32', 'm_maxMotorTorque', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorSpeed']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorSpeed', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorSpeed']
['float32', 'm_motorSpeed', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_enableMotor']
BraceDepth: 1
Evaluating stack ['bool', 'm_enableMotor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_enableMotor']
['bool', 'm_enableMotor', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_ax', ',', 'm_ay']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_ax', ',', 'm_ay', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_ax', ',', 'm_ay']
['b2Vec2', 'm_ax', ',', 'm_ay', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_sAx', ',', 'm_sBx']
BraceDepth: 1
Evaluating stack ['float32', 'm_sAx', ',', 'm_sBx', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_sAx', ',', 'm_sBx']
['float32', 'm_sAx', ',', 'm_sBx', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_sAy', ',', 'm_sBy']
BraceDepth: 1
Evaluating stack ['float32', 'm_sAy', ',', 'm_sBy', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_sAy', ',', 'm_sBy']
['float32', 'm_sAy', ',', 'm_sBy', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_mass']
BraceDepth: 1
Evaluating stack ['float32', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_mass']
['float32', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorMass']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorMass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorMass']
['float32', 'm_motorMass', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_springMass']
BraceDepth: 1
Evaluating stack ['float32', 'm_springMass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_springMass']
['float32', 'm_springMass', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_bias']
BraceDepth: 1
Evaluating stack ['float32', 'm_bias', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_bias']
['float32', 'm_bias', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_gamma']
BraceDepth: 1
Evaluating stack ['float32', 'm_gamma', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_gamma']
['float32', 'm_gamma', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2WheelJoint::GetMotorSpeed
Evaluating stack ['return', 'm_motorSpeed']
BraceDepth: 1
Evaluating stack ['return', 'm_motorSpeed', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMaxMotorTorque', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMaxMotorTorque', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMaxMotorTorque', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMaxMotorTorque', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetMaxMotorTorque', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2WheelJoint::GetMaxMotorTorque
Evaluating stack ['return', 'm_maxMotorTorque']
BraceDepth: 1
Evaluating stack ['return', 'm_maxMotorTorque', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringFrequencyHz', '(', 'float32', 'hz', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2WheelJoint::SetSpringFrequencyHz
Evaluating stack ['m_frequencyHz', '=', 'hz']
BraceDepth: 1
Evaluating stack ['m_frequencyHz', '=', 'hz', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringFrequencyHz', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringFrequencyHz', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringFrequencyHz', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringFrequencyHz', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringFrequencyHz', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2WheelJoint::GetSpringFrequencyHz
Evaluating stack ['return', 'm_frequencyHz']
BraceDepth: 1
Evaluating stack ['return', 'm_frequencyHz', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')']
BraceDepth: 1
Evaluating stack ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', '{'])
('CLEAN ARRAYS', ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', '{'])
('is method namestack', True, ['inline', 'void', 'b2WheelJoint', ':', ':', 'SetSpringDampingRatio', '(', 'float32', 'ratio', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2WheelJoint::SetSpringDampingRatio
Evaluating stack ['m_dampingRatio', '=', 'ratio']
BraceDepth: 1
Evaluating stack ['m_dampingRatio', '=', 'ratio', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringDampingRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringDampingRatio', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringDampingRatio', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringDampingRatio', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2WheelJoint', ':', ':', 'GetSpringDampingRatio', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2WheelJoint::GetSpringDampingRatio
Evaluating stack ['return', 'm_dampingRatio']
BraceDepth: 1
Evaluating stack ['return', 'm_dampingRatio', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2MouseJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2MouseJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2MouseJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2MouseJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2MouseJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2MouseJointDef', '(', ')', '{'])
('is method namestack', True, ['b2MouseJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2MouseJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2MouseJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2MouseJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_mouseJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_mouseJoint', ';']
BraceDepth: 2
Evaluating stack ['target', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['target', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['maxForce', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['maxForce', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '5', '0f']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '5', '0f', ';']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '7f']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '7f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'target']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'target', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'target']
['b2Vec2', 'target', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxForce']
BraceDepth: 1
Evaluating stack ['float32', 'maxForce', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxForce']
['float32', 'maxForce', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'frequencyHz']
['float32', 'frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'dampingRatio']
['float32', 'dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2MouseJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2MouseJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2MouseJoint : public b2Joint')
('stack IN', 'class b2MouseJoint : public b2Joint')
('HEAD', ['class', 'b2MouseJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2MouseJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetTarget', '(', 'const', 'b2Vec2', '&', 'target', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetTarget', '(', 'const', 'b2Vec2', '&', 'target', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetTarget', '(', 'const', 'b2Vec2', '&', 'target', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetTarget', '(', 'const', 'b2Vec2', '&', 'target', ')', ';'])
('is method namestack', True, ['void', 'SetTarget', '(', 'const', 'b2Vec2', '&', 'target', ')', ';'])
________________________________________________________________________________
SetTarget
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'target']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetTarget', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['const', 'b2Vec2', '&', 'GetTarget', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetTarget', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetTarget', '(', ')', 'const', ';'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetTarget', '(', ')', 'const', ';'])
________________________________________________________________________________
GetTarget
Evaluating stack ['void', 'SetMaxForce', '(', 'float32', 'force', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';'])
('is method namestack', True, ['void', 'SetMaxForce', '(', 'float32', 'force', ')', ';'])
________________________________________________________________________________
SetMaxForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'force']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMaxForce', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMaxForce', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMaxForce', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMaxForce', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMaxForce', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMaxForce
Evaluating stack ['void', 'SetFrequency', '(', 'float32', 'hz', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';'])
('is method namestack', True, ['void', 'SetFrequency', '(', 'float32', 'hz', ')', ';'])
________________________________________________________________________________
SetFrequency
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hz']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetFrequency', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetFrequency', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetFrequency', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetFrequency', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetFrequency', '(', ')', 'const', ';'])
________________________________________________________________________________
GetFrequency
Evaluating stack ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';'])
('is method namestack', True, ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', ';'])
________________________________________________________________________________
SetDampingRatio
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetDampingRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetDampingRatio', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetDampingRatio', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetDampingRatio', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetDampingRatio', '(', ')', 'const', ';'])
________________________________________________________________________________
GetDampingRatio
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 2
Evaluating stack ['void', 'Dump', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', '{'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', '{'])
('is method namestack', True, ['void', 'Dump', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
Dump
Evaluating stack ['b2Log', '(', '"Mouse joint dumping is not supported.\\n"', ')']
BraceDepth: 2
Evaluating stack ['b2Log', '(', '"Mouse joint dumping is not supported.\\n"', ')', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2MouseJoint', '(', 'const', 'b2MouseJointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2MouseJoint', '(', 'const', 'b2MouseJointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2MouseJoint', '(', 'const', 'b2MouseJointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2MouseJoint', '(', 'const', 'b2MouseJointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2MouseJoint', '(', 'const', 'b2MouseJointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
b2MouseJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2MouseJointDef', '*', 'def']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_targetA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_targetA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_targetA']
['b2Vec2', 'm_targetA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'm_frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_frequencyHz']
['float32', 'm_frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'm_dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_dampingRatio']
['float32', 'm_dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_beta']
BraceDepth: 1
Evaluating stack ['float32', 'm_beta', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_beta']
['float32', 'm_beta', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_impulse']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_impulse']
['b2Vec2', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_maxForce']
BraceDepth: 1
Evaluating stack ['float32', 'm_maxForce', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_maxForce']
['float32', 'm_maxForce', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_gamma']
BraceDepth: 1
Evaluating stack ['float32', 'm_gamma', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_gamma']
['float32', 'm_gamma', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rB']
['b2Vec2', 'm_rB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['b2Mat22', 'm_mass']
BraceDepth: 1
Evaluating stack ['b2Mat22', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Mat22', 'm_mass']
['b2Mat22', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_C']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_C', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_C']
['b2Vec2', 'm_C', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2PrismaticJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2PrismaticJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2PrismaticJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2PrismaticJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2PrismaticJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2PrismaticJointDef', '(', ')', '{'])
('is method namestack', True, ['b2PrismaticJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2PrismaticJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2PrismaticJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2PrismaticJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_prismaticJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_prismaticJoint', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'SetZero', '(', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'SetZero', '(', ')', ';']
BraceDepth: 2
Evaluating stack ['localAxisA', 'Set', '(', '1', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAxisA', 'Set', '(', '1', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['referenceAngle', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['referenceAngle', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['enableLimit', '=', 'false']
BraceDepth: 2
Evaluating stack ['enableLimit', '=', 'false', ';']
BraceDepth: 2
Evaluating stack ['lowerTranslation', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['lowerTranslation', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['upperTranslation', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['upperTranslation', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['enableMotor', '=', 'false']
BraceDepth: 2
Evaluating stack ['enableMotor', '=', 'false', ';']
BraceDepth: 2
Evaluating stack ['maxMotorForce', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['maxMotorForce', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['motorSpeed', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['motorSpeed', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ',', 'const', 'b2Vec2', '&', 'axis', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor , const b2Vec2 & axis ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchor']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'axis']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAxisA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAxisA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAxisA']
['b2Vec2', 'localAxisA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'referenceAngle']
BraceDepth: 1
Evaluating stack ['float32', 'referenceAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'referenceAngle']
['float32', 'referenceAngle', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'enableLimit']
BraceDepth: 1
Evaluating stack ['bool', 'enableLimit', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'enableLimit']
['bool', 'enableLimit', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'lowerTranslation']
BraceDepth: 1
Evaluating stack ['float32', 'lowerTranslation', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'lowerTranslation']
['float32', 'lowerTranslation', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'upperTranslation']
BraceDepth: 1
Evaluating stack ['float32', 'upperTranslation', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'upperTranslation']
['float32', 'upperTranslation', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'enableMotor']
BraceDepth: 1
Evaluating stack ['bool', 'enableMotor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'enableMotor']
['bool', 'enableMotor', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxMotorForce']
BraceDepth: 1
Evaluating stack ['float32', 'maxMotorForce', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxMotorForce']
['float32', 'maxMotorForce', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'motorSpeed']
BraceDepth: 1
Evaluating stack ['float32', 'motorSpeed', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'motorSpeed']
['float32', 'motorSpeed', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2PrismaticJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2PrismaticJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2PrismaticJoint : public b2Joint')
('stack IN', 'class b2PrismaticJoint : public b2Joint')
('HEAD', ['class', 'b2PrismaticJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2PrismaticJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorA
Evaluating stack ['return', 'm_localAnchorA']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorB
Evaluating stack ['return', 'm_localAnchorB']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAxisA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAxisA
Evaluating stack ['return', 'm_localXAxisA']
BraceDepth: 2
Evaluating stack ['return', 'm_localXAxisA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetReferenceAngle', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetReferenceAngle', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetReferenceAngle
Evaluating stack ['return', 'm_referenceAngle']
BraceDepth: 2
Evaluating stack ['return', 'm_referenceAngle', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetJointTranslation', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetJointTranslation', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetJointTranslation', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetJointTranslation', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetJointTranslation', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointTranslation
Evaluating stack ['float32', 'GetJointSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetJointSpeed', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointSpeed
Evaluating stack ['bool', 'IsLimitEnabled', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsLimitEnabled', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsLimitEnabled', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsLimitEnabled', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsLimitEnabled', '(', ')', 'const', ';'])
________________________________________________________________________________
IsLimitEnabled
Evaluating stack ['void', 'EnableLimit', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
EnableLimit
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetLowerLimit', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetLowerLimit', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetLowerLimit', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetLowerLimit', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetLowerLimit', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLowerLimit
Evaluating stack ['float32', 'GetUpperLimit', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetUpperLimit', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetUpperLimit', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetUpperLimit', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetUpperLimit', '(', ')', 'const', ';'])
________________________________________________________________________________
GetUpperLimit
Evaluating stack ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';'])
('is method namestack', True, ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';'])
________________________________________________________________________________
SetLimits
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'lower']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'upper']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsMotorEnabled', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsMotorEnabled', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
________________________________________________________________________________
IsMotorEnabled
Evaluating stack ['void', 'EnableMotor', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
EnableMotor
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
('is method namestack', True, ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
________________________________________________________________________________
SetMotorSpeed
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'speed']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMotorSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMotorSpeed', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMotorSpeed
Evaluating stack ['void', 'SetMaxMotorForce', '(', 'float32', 'force', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMaxMotorForce', '(', 'float32', 'force', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMaxMotorForce', '(', 'float32', 'force', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMaxMotorForce', '(', 'float32', 'force', ')', ';'])
('is method namestack', True, ['void', 'SetMaxMotorForce', '(', 'float32', 'force', ')', ';'])
________________________________________________________________________________
SetMaxMotorForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'force']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMaxMotorForce', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetMaxMotorForce', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetMaxMotorForce', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetMaxMotorForce', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetMaxMotorForce', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetMaxMotorForce
Evaluating stack ['return', 'm_maxMotorForce']
BraceDepth: 2
Evaluating stack ['return', 'm_maxMotorForce', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetMotorForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMotorForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMotorForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMotorForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMotorForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetMotorForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2PrismaticJoint', '(', 'const', 'b2PrismaticJointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2PrismaticJoint', '(', 'const', 'b2PrismaticJointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2PrismaticJoint', '(', 'const', 'b2PrismaticJointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2PrismaticJoint', '(', 'const', 'b2PrismaticJointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2PrismaticJoint', '(', 'const', 'b2PrismaticJointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
b2PrismaticJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2PrismaticJointDef', '*', 'def']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localXAxisA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localXAxisA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localXAxisA']
['b2Vec2', 'm_localXAxisA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localYAxisA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localYAxisA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localYAxisA']
['b2Vec2', 'm_localYAxisA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_referenceAngle']
BraceDepth: 1
Evaluating stack ['float32', 'm_referenceAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_referenceAngle']
['float32', 'm_referenceAngle', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec3', 'm_impulse']
BraceDepth: 1
Evaluating stack ['b2Vec3', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec3', 'm_impulse']
['b2Vec3', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorImpulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorImpulse']
['float32', 'm_motorImpulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_lowerTranslation']
BraceDepth: 1
Evaluating stack ['float32', 'm_lowerTranslation', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_lowerTranslation']
['float32', 'm_lowerTranslation', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_upperTranslation']
BraceDepth: 1
Evaluating stack ['float32', 'm_upperTranslation', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_upperTranslation']
['float32', 'm_upperTranslation', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_maxMotorForce']
BraceDepth: 1
Evaluating stack ['float32', 'm_maxMotorForce', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_maxMotorForce']
['float32', 'm_maxMotorForce', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorSpeed']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorSpeed', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorSpeed']
['float32', 'm_motorSpeed', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_enableLimit']
BraceDepth: 1
Evaluating stack ['bool', 'm_enableLimit', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_enableLimit']
['bool', 'm_enableLimit', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_enableMotor']
BraceDepth: 1
Evaluating stack ['bool', 'm_enableMotor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_enableMotor']
['bool', 'm_enableMotor', ';']
________________________________________________________________________________
Evaluating stack ['b2LimitState', 'm_limitState']
BraceDepth: 1
Evaluating stack ['b2LimitState', 'm_limitState', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2LimitState', 'm_limitState']
['b2LimitState', 'm_limitState', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_axis', ',', 'm_perp']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_axis', ',', 'm_perp', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_axis', ',', 'm_perp']
['b2Vec2', 'm_axis', ',', 'm_perp', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_s1', ',', 'm_s2']
BraceDepth: 1
Evaluating stack ['float32', 'm_s1', ',', 'm_s2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_s1', ',', 'm_s2']
['float32', 'm_s1', ',', 'm_s2', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_a1', ',', 'm_a2']
BraceDepth: 1
Evaluating stack ['float32', 'm_a1', ',', 'm_a2', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_a1', ',', 'm_a2']
['float32', 'm_a1', ',', 'm_a2', ';']
________________________________________________________________________________
Evaluating stack ['b2Mat33', 'm_K']
BraceDepth: 1
Evaluating stack ['b2Mat33', 'm_K', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Mat33', 'm_K']
['b2Mat33', 'm_K', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorMass']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorMass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorMass']
['float32', 'm_motorMass', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'float32', 'b2PrismaticJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2PrismaticJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2PrismaticJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2PrismaticJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2PrismaticJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2PrismaticJoint::GetMotorSpeed
Evaluating stack ['return', 'm_motorSpeed']
BraceDepth: 1
Evaluating stack ['return', 'm_motorSpeed', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['const', 'float32', 'b2_minPulleyLength', '=', '2', '0f']
BraceDepth: 0
Evaluating stack ['const', 'float32', 'b2_minPulleyLength', '=', '2', '0f', ';']
BraceDepth: 0
Evaluating stack ['struct', 'b2PulleyJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2PulleyJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2PulleyJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2PulleyJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2PulleyJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2PulleyJointDef', '(', ')', '{'])
('is method namestack', True, ['b2PulleyJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2PulleyJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2PulleyJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2PulleyJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_pulleyJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_pulleyJoint', ';']
BraceDepth: 2
Evaluating stack ['groundAnchorA', 'Set', '(', '-', '1', '0f', ',', '1', '0f', ')']
BraceDepth: 2
Evaluating stack ['groundAnchorA', 'Set', '(', '-', '1', '0f', ',', '1', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['groundAnchorB', 'Set', '(', '1', '0f', ',', '1', '0f', ')']
BraceDepth: 2
Evaluating stack ['groundAnchorB', 'Set', '(', '1', '0f', ',', '1', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '-', '1', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '-', '1', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '1', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '1', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['lengthA', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['lengthA', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['lengthB', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['lengthB', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['ratio', '=', '1', '0f']
BraceDepth: 2
Evaluating stack ['ratio', '=', '1', '0f', ';']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'true']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'true', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'groundAnchorA', ',', 'const', 'b2Vec2', '&', 'groundAnchorB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ',', 'float32', 'ratio', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'groundAnchorA', ',', 'const', 'b2Vec2', '&', 'groundAnchorB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ',', 'float32', 'ratio', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'groundAnchorA', ',', 'const', 'b2Vec2', '&', 'groundAnchorB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ',', 'float32', 'ratio', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'groundAnchorA', ',', 'const', 'b2Vec2', '&', 'groundAnchorB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ',', 'float32', 'ratio', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'groundAnchorA', ',', 'const', 'b2Vec2', '&', 'groundAnchorB', ',', 'const', 'b2Vec2', '&', 'anchorA', ',', 'const', 'b2Vec2', '&', 'anchorB', ',', 'float32', 'ratio', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & groundAnchorA , const b2Vec2 & groundAnchorB , const b2Vec2 & anchorA , const b2Vec2 & anchorB , float32 ratio ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'groundAnchorA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'groundAnchorB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchorA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchorB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'groundAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'groundAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'groundAnchorA']
['b2Vec2', 'groundAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'groundAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'groundAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'groundAnchorB']
['b2Vec2', 'groundAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'lengthA']
BraceDepth: 1
Evaluating stack ['float32', 'lengthA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'lengthA']
['float32', 'lengthA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'lengthB']
BraceDepth: 1
Evaluating stack ['float32', 'lengthB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'lengthB']
['float32', 'lengthB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'ratio']
BraceDepth: 1
Evaluating stack ['float32', 'ratio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
['float32', 'ratio', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2PulleyJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2PulleyJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2PulleyJoint : public b2Joint')
('stack IN', 'class b2PulleyJoint : public b2Joint')
('HEAD', ['class', 'b2PulleyJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2PulleyJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'GetGroundAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetGroundAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetGroundAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetGroundAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetGroundAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetGroundAnchorA
Evaluating stack ['b2Vec2', 'GetGroundAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetGroundAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetGroundAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetGroundAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetGroundAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetGroundAnchorB
Evaluating stack ['float32', 'GetLengthA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetLengthA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetLengthA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetLengthA', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetLengthA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLengthA
Evaluating stack ['float32', 'GetLengthB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetLengthB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetLengthB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetLengthB', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetLengthB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLengthB
Evaluating stack ['float32', 'GetRatio', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetRatio', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetRatio', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetRatio', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetRatio', '(', ')', 'const', ';'])
________________________________________________________________________________
GetRatio
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2PulleyJoint', '(', 'const', 'b2PulleyJointDef', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['b2PulleyJoint', '(', 'const', 'b2PulleyJointDef', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2PulleyJoint', '(', 'const', 'b2PulleyJointDef', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['b2PulleyJoint', '(', 'const', 'b2PulleyJointDef', '*', 'data', ')', ';'])
('is method namestack', True, ['b2PulleyJoint', '(', 'const', 'b2PulleyJointDef', '*', 'data', ')', ';'])
________________________________________________________________________________
b2PulleyJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2PulleyJointDef', '*', 'data']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_groundAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_groundAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_groundAnchorA']
['b2Vec2', 'm_groundAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_groundAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_groundAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_groundAnchorB']
['b2Vec2', 'm_groundAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_lengthA']
BraceDepth: 1
Evaluating stack ['float32', 'm_lengthA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_lengthA']
['float32', 'm_lengthA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_lengthB']
BraceDepth: 1
Evaluating stack ['float32', 'm_lengthB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_lengthB']
['float32', 'm_lengthB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_constant']
BraceDepth: 1
Evaluating stack ['float32', 'm_constant', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_constant']
['float32', 'm_constant', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_ratio']
BraceDepth: 1
Evaluating stack ['float32', 'm_ratio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_ratio']
['float32', 'm_ratio', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_impulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_impulse']
['float32', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_uA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_uA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_uA']
['b2Vec2', 'm_uA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_uB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_uB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_uB']
['b2Vec2', 'm_uB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rA']
['b2Vec2', 'm_rA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rB']
['b2Vec2', 'm_rB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_mass']
BraceDepth: 1
Evaluating stack ['float32', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_mass']
['float32', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2RevoluteJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2RevoluteJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2RevoluteJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2RevoluteJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2RevoluteJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2RevoluteJointDef', '(', ')', '{'])
('is method namestack', True, ['b2RevoluteJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2RevoluteJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2RevoluteJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2RevoluteJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_revoluteJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_revoluteJoint', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['referenceAngle', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['referenceAngle', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['lowerAngle', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['lowerAngle', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['upperAngle', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['upperAngle', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['maxMotorTorque', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['maxMotorTorque', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['motorSpeed', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['motorSpeed', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['enableLimit', '=', 'false']
BraceDepth: 2
Evaluating stack ['enableLimit', '=', 'false', ';']
BraceDepth: 2
Evaluating stack ['enableMotor', '=', 'false']
BraceDepth: 2
Evaluating stack ['enableMotor', '=', 'false', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchor']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'referenceAngle']
BraceDepth: 1
Evaluating stack ['float32', 'referenceAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'referenceAngle']
['float32', 'referenceAngle', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'enableLimit']
BraceDepth: 1
Evaluating stack ['bool', 'enableLimit', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'enableLimit']
['bool', 'enableLimit', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'lowerAngle']
BraceDepth: 1
Evaluating stack ['float32', 'lowerAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'lowerAngle']
['float32', 'lowerAngle', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'upperAngle']
BraceDepth: 1
Evaluating stack ['float32', 'upperAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'upperAngle']
['float32', 'upperAngle', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'enableMotor']
BraceDepth: 1
Evaluating stack ['bool', 'enableMotor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'enableMotor']
['bool', 'enableMotor', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'motorSpeed']
BraceDepth: 1
Evaluating stack ['float32', 'motorSpeed', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'motorSpeed']
['float32', 'motorSpeed', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxMotorTorque']
BraceDepth: 1
Evaluating stack ['float32', 'maxMotorTorque', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxMotorTorque']
['float32', 'maxMotorTorque', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2RevoluteJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2RevoluteJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2RevoluteJoint : public b2Joint')
('stack IN', 'class b2RevoluteJoint : public b2Joint')
('HEAD', ['class', 'b2RevoluteJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2RevoluteJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorA
Evaluating stack ['return', 'm_localAnchorA']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorB
Evaluating stack ['return', 'm_localAnchorB']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetReferenceAngle', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetReferenceAngle', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetReferenceAngle
Evaluating stack ['return', 'm_referenceAngle']
BraceDepth: 2
Evaluating stack ['return', 'm_referenceAngle', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetJointAngle', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetJointAngle', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetJointAngle', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetJointAngle', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetJointAngle', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointAngle
Evaluating stack ['float32', 'GetJointSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetJointSpeed', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetJointSpeed', '(', ')', 'const', ';'])
________________________________________________________________________________
GetJointSpeed
Evaluating stack ['bool', 'IsLimitEnabled', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsLimitEnabled', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsLimitEnabled', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsLimitEnabled', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsLimitEnabled', '(', ')', 'const', ';'])
________________________________________________________________________________
IsLimitEnabled
Evaluating stack ['void', 'EnableLimit', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'EnableLimit', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
EnableLimit
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetLowerLimit', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetLowerLimit', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetLowerLimit', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetLowerLimit', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetLowerLimit', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLowerLimit
Evaluating stack ['float32', 'GetUpperLimit', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetUpperLimit', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetUpperLimit', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetUpperLimit', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetUpperLimit', '(', ')', 'const', ';'])
________________________________________________________________________________
GetUpperLimit
Evaluating stack ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';'])
('is method namestack', True, ['void', 'SetLimits', '(', 'float32', 'lower', ',', 'float32', 'upper', ')', ';'])
________________________________________________________________________________
SetLimits
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'lower']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'upper']
None
________________________________________________________________________________
Evaluating stack ['bool', 'IsMotorEnabled', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['bool', 'IsMotorEnabled', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
('is method namestack', True, ['bool', 'IsMotorEnabled', '(', ')', 'const', ';'])
________________________________________________________________________________
IsMotorEnabled
Evaluating stack ['void', 'EnableMotor', '(', 'bool', 'flag', ')']
BraceDepth: 1
Evaluating stack ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
('CLEAN ARRAYS', ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
('is method namestack', True, ['void', 'EnableMotor', '(', 'bool', 'flag', ')', ';'])
________________________________________________________________________________
EnableMotor
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'flag']
None
________________________________________________________________________________
Evaluating stack ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
('is method namestack', True, ['void', 'SetMotorSpeed', '(', 'float32', 'speed', ')', ';'])
________________________________________________________________________________
SetMotorSpeed
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'speed']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMotorSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMotorSpeed', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMotorSpeed', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMotorSpeed
Evaluating stack ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')']
BraceDepth: 1
Evaluating stack ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';'])
('CLEAN ARRAYS', ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';'])
('is method namestack', True, ['void', 'SetMaxMotorTorque', '(', 'float32', 'torque', ')', ';'])
________________________________________________________________________________
SetMaxMotorTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'torque']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMaxMotorTorque', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetMaxMotorTorque', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetMaxMotorTorque', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetMaxMotorTorque', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetMaxMotorTorque', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetMaxMotorTorque
Evaluating stack ['return', 'm_maxMotorTorque']
BraceDepth: 2
Evaluating stack ['return', 'm_maxMotorTorque', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMotorTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetMotorTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2RevoluteJoint', '(', 'const', 'b2RevoluteJointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2RevoluteJoint', '(', 'const', 'b2RevoluteJointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2RevoluteJoint', '(', 'const', 'b2RevoluteJointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2RevoluteJoint', '(', 'const', 'b2RevoluteJointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2RevoluteJoint', '(', 'const', 'b2RevoluteJointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
b2RevoluteJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RevoluteJointDef', '*', 'def']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2GearJoint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec3', 'm_impulse']
BraceDepth: 1
Evaluating stack ['b2Vec3', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec3', 'm_impulse']
['b2Vec3', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorImpulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorImpulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorImpulse']
['float32', 'm_motorImpulse', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_enableMotor']
BraceDepth: 1
Evaluating stack ['bool', 'm_enableMotor', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_enableMotor']
['bool', 'm_enableMotor', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_maxMotorTorque']
BraceDepth: 1
Evaluating stack ['float32', 'm_maxMotorTorque', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_maxMotorTorque']
['float32', 'm_maxMotorTorque', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorSpeed']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorSpeed', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorSpeed']
['float32', 'm_motorSpeed', ';']
________________________________________________________________________________
Evaluating stack ['bool', 'm_enableLimit']
BraceDepth: 1
Evaluating stack ['bool', 'm_enableLimit', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'm_enableLimit']
['bool', 'm_enableLimit', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_referenceAngle']
BraceDepth: 1
Evaluating stack ['float32', 'm_referenceAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_referenceAngle']
['float32', 'm_referenceAngle', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_lowerAngle']
BraceDepth: 1
Evaluating stack ['float32', 'm_lowerAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_lowerAngle']
['float32', 'm_lowerAngle', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_upperAngle']
BraceDepth: 1
Evaluating stack ['float32', 'm_upperAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_upperAngle']
['float32', 'm_upperAngle', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rA']
['b2Vec2', 'm_rA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rB']
['b2Vec2', 'm_rB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['b2Mat33', 'm_mass']
BraceDepth: 1
Evaluating stack ['b2Mat33', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Mat33', 'm_mass']
['b2Mat33', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_motorMass']
BraceDepth: 1
Evaluating stack ['float32', 'm_motorMass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_motorMass']
['float32', 'm_motorMass', ';']
________________________________________________________________________________
Evaluating stack ['b2LimitState', 'm_limitState']
BraceDepth: 1
Evaluating stack ['b2LimitState', 'm_limitState', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2LimitState', 'm_limitState']
['b2LimitState', 'm_limitState', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['inline', 'float32', 'b2RevoluteJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['inline', 'float32', 'b2RevoluteJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{']
BraceDepth: 1
('CLEAN TEMPLATES', ['inline', 'float32', 'b2RevoluteJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['inline', 'float32', 'b2RevoluteJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
('is method namestack', True, ['inline', 'float32', 'b2RevoluteJoint', ':', ':', 'GetMotorSpeed', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 1)
b2RevoluteJoint::GetMotorSpeed
Evaluating stack ['return', 'm_motorSpeed']
BraceDepth: 1
Evaluating stack ['return', 'm_motorSpeed', ';']
BraceDepth: 1
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
FORCE CLEAR METHBODY
Evaluating stack ['struct', 'b2RopeJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2RopeJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2RopeJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2RopeJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2RopeJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2RopeJointDef', '(', ')', '{'])
('is method namestack', True, ['b2RopeJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2RopeJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2RopeJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2RopeJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_ropeJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_ropeJoint', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '-', '1', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '-', '1', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '1', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '1', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['maxLength', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['maxLength', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'maxLength']
BraceDepth: 1
Evaluating stack ['float32', 'maxLength', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'maxLength']
['float32', 'maxLength', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2RopeJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2RopeJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2RopeJoint : public b2Joint')
('stack IN', 'class b2RopeJoint : public b2Joint')
('HEAD', ['class', 'b2RopeJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2RopeJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorA
Evaluating stack ['return', 'm_localAnchorA']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorB
Evaluating stack ['return', 'm_localAnchorB']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetMaxLength', '(', 'float32', 'length', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetMaxLength', '(', 'float32', 'length', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetMaxLength', '(', 'float32', 'length', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetMaxLength', '(', 'float32', 'length', ')', '{'])
('is method namestack', True, ['void', 'SetMaxLength', '(', 'float32', 'length', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetMaxLength
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'length']
None
________________________________________________________________________________
Evaluating stack ['m_maxLength', '=', 'length']
BraceDepth: 2
Evaluating stack ['m_maxLength', '=', 'length', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetMaxLength', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetMaxLength', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetMaxLength', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetMaxLength', '(', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetMaxLength', '(', ')', 'const', ';'])
________________________________________________________________________________
GetMaxLength
Evaluating stack ['b2LimitState', 'GetLimitState', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2LimitState', 'GetLimitState', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2LimitState', 'GetLimitState', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2LimitState', 'GetLimitState', '(', ')', 'const', ';'])
('is method namestack', True, ['b2LimitState', 'GetLimitState', '(', ')', 'const', ';'])
________________________________________________________________________________
GetLimitState
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2RopeJoint', '(', 'const', 'b2RopeJointDef', '*', 'data', ')']
BraceDepth: 1
Evaluating stack ['b2RopeJoint', '(', 'const', 'b2RopeJointDef', '*', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2RopeJoint', '(', 'const', 'b2RopeJointDef', '*', 'data', ')', ';'])
('CLEAN ARRAYS', ['b2RopeJoint', '(', 'const', 'b2RopeJointDef', '*', 'data', ')', ';'])
('is method namestack', True, ['b2RopeJoint', '(', 'const', 'b2RopeJointDef', '*', 'data', ')', ';'])
________________________________________________________________________________
b2RopeJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2RopeJointDef', '*', 'data']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_maxLength']
BraceDepth: 1
Evaluating stack ['float32', 'm_maxLength', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_maxLength']
['float32', 'm_maxLength', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_length']
BraceDepth: 1
Evaluating stack ['float32', 'm_length', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_length']
['float32', 'm_length', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_impulse']
BraceDepth: 1
Evaluating stack ['float32', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_impulse']
['float32', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_u']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_u', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_u']
['b2Vec2', 'm_u', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rA']
['b2Vec2', 'm_rA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rB']
['b2Vec2', 'm_rB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_mass']
BraceDepth: 1
Evaluating stack ['float32', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_mass']
['float32', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack ['b2LimitState', 'm_state']
BraceDepth: 1
Evaluating stack ['b2LimitState', 'm_state', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2LimitState', 'm_state']
['b2LimitState', 'm_state', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['struct', 'b2WeldJointDef', ':', 'public', 'b2JointDef']
BraceDepth: 1
Evaluating stack ['struct', 'b2WeldJointDef', ':', 'public', 'b2JointDef', '{']
BraceDepth: 1
------------new struct-----------
Evaluating stack ['b2WeldJointDef', '(', ')']
BraceDepth: 2
Evaluating stack ['b2WeldJointDef', '(', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2WeldJointDef', '(', ')', '{'])
('CLEAN ARRAYS', ['b2WeldJointDef', '(', ')', '{'])
('is method namestack', True, ['b2WeldJointDef', '(', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
b2WeldJointDef
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'b2WeldJointDef', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': '', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': True, 'debug': 'b2WeldJointDef ( ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
Evaluating stack ['type', '=', 'e_weldJoint']
BraceDepth: 2
Evaluating stack ['type', '=', 'e_weldJoint', ';']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorA', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '0', '0f', ',', '0', '0f', ')']
BraceDepth: 2
Evaluating stack ['localAnchorB', 'Set', '(', '0', '0f', ',', '0', '0f', ')', ';']
BraceDepth: 2
Evaluating stack ['referenceAngle', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['referenceAngle', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['frequencyHz', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '0f']
BraceDepth: 2
Evaluating stack ['dampingRatio', '=', '0', '0f', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')']
BraceDepth: 1
Evaluating stack ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
('CLEAN ARRAYS', ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
('is method namestack', True, ['void', 'Initialize', '(', 'b2Body', '*', 'bodyA', ',', 'b2Body', '*', 'bodyB', ',', 'const', 'b2Vec2', '&', 'anchor', ')', ';'])
________________________________________________________________________________
Initialize
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'Initialize', 'pure_virtual': False, 'defined': False, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor ) ;', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyA']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'bodyB']
None
________________________________________________________________________________
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2Vec2', '&', 'anchor']
None
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorA']
['b2Vec2', 'localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'localAnchorB']
['b2Vec2', 'localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'referenceAngle']
BraceDepth: 1
Evaluating stack ['float32', 'referenceAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'referenceAngle']
['float32', 'referenceAngle', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'frequencyHz']
['float32', 'frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'dampingRatio']
['float32', 'dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyA', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyA', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['bodyB', '=', 'b']
BraceDepth: 2
Evaluating stack ['bodyB', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['void', 'set_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
set_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'void', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['collideConnected', '=', 'b']
BraceDepth: 2
Evaluating stack ['collideConnected', '=', 'b', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyA', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyA
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyA', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyA']
BraceDepth: 2
Evaluating stack ['return', 'bodyA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')']
BraceDepth: 2
Evaluating stack ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('CLEAN ARRAYS', ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
('is method namestack', True, ['b2Body', '*', 'get_bodyB', '(', 'b2Body', '*', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_bodyB
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_bodyB', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'b2Body', 'static': False, 'returns_fundamental': False, 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'returns_pointer': 1, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Body', '*', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'bodyB']
BraceDepth: 2
Evaluating stack ['return', 'bodyB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')']
BraceDepth: 2
Evaluating stack ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('CLEAN ARRAYS', ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
('is method namestack', True, ['bool', 'get_collideConnected', '(', 'bool', 'b', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
get_collideConnected
('Struct Method:', {'returns_reference': False, 'extern': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'defined': True, 'explicit': False, 'namespace': '', 'virtual': False, 'destructor': False, 'operator': False, 'returns': 'bool', 'static': False, 'returns_fundamental': True, 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'returns_pointer': 0, 'class': None, 'friend': False, 'returns_class': False})
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['bool', 'b']
None
________________________________________________________________________________
Evaluating stack ['return', 'collideConnected']
BraceDepth: 2
Evaluating stack ['return', 'collideConnected', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
---------END OF STRUCT DEF-------------
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
Evaluating stack ['class', 'b2WeldJoint', ':', 'public', 'b2Joint']
BraceDepth: 1
Evaluating stack ['class', 'b2WeldJoint', ':', 'public', 'b2Joint', '{']
BraceDepth: 1
('NEWCLASS', 'class b2WeldJoint : public b2Joint')
('stack IN', 'class b2WeldJoint : public b2Joint')
('HEAD', ['class', 'b2WeldJoint'])
______________
('TAIL', ['public', 'b2Joint'])
('CLASS OK', 'b2WeldJoint')
('CURACCESS-set', 'public')
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorA', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorA
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetAnchorB', '(', ')', 'const', ';'])
________________________________________________________________________________
GetAnchorB
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['b2Vec2', 'GetReactionForce', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionForce
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const']
BraceDepth: 1
Evaluating stack ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('CLEAN ARRAYS', ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
('is method namestack', True, ['float32', 'GetReactionTorque', '(', 'float32', 'inv_dt', ')', 'const', ';'])
________________________________________________________________________________
GetReactionTorque
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'inv_dt']
None
________________________________________________________________________________
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorA', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorA
Evaluating stack ['return', 'm_localAnchorA']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorA', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
('is method namestack', True, ['const', 'b2Vec2', '&', 'GetLocalAnchorB', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetLocalAnchorB
Evaluating stack ['return', 'm_localAnchorB']
BraceDepth: 2
Evaluating stack ['return', 'm_localAnchorB', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetReferenceAngle', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetReferenceAngle', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetReferenceAngle', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetReferenceAngle
Evaluating stack ['return', 'm_referenceAngle']
BraceDepth: 2
Evaluating stack ['return', 'm_referenceAngle', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetFrequency', '(', 'float32', 'hz', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetFrequency', '(', 'float32', 'hz', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetFrequency', '(', 'float32', 'hz', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetFrequency', '(', 'float32', 'hz', ')', '{'])
('is method namestack', True, ['void', 'SetFrequency', '(', 'float32', 'hz', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetFrequency
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'hz']
None
________________________________________________________________________________
Evaluating stack ['m_frequencyHz', '=', 'hz']
BraceDepth: 2
Evaluating stack ['m_frequencyHz', '=', 'hz', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetFrequency', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetFrequency', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetFrequency', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetFrequency', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetFrequency', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetFrequency
Evaluating stack ['return', 'm_frequencyHz']
BraceDepth: 2
Evaluating stack ['return', 'm_frequencyHz', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')']
BraceDepth: 2
Evaluating stack ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{'])
('CLEAN ARRAYS', ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{'])
('is method namestack', True, ['void', 'SetDampingRatio', '(', 'float32', 'ratio', ')', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
SetDampingRatio
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'ratio']
None
________________________________________________________________________________
Evaluating stack ['m_dampingRatio', '=', 'ratio']
BraceDepth: 2
Evaluating stack ['m_dampingRatio', '=', 'ratio', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['float32', 'GetDampingRatio', '(', ')', 'const']
BraceDepth: 2
Evaluating stack ['float32', 'GetDampingRatio', '(', ')', 'const', '{']
BraceDepth: 2
('CLEAN TEMPLATES', ['float32', 'GetDampingRatio', '(', ')', 'const', '{'])
('CLEAN ARRAYS', ['float32', 'GetDampingRatio', '(', ')', 'const', '{'])
('is method namestack', True, ['float32', 'GetDampingRatio', '(', ')', 'const', '{'])
________________________________________________________________________________
('----------NEW METHOD WITH BODY---------', 2)
GetDampingRatio
Evaluating stack ['return', 'm_dampingRatio']
BraceDepth: 2
Evaluating stack ['return', 'm_dampingRatio', ';']
BraceDepth: 2
Evaluating stack []
BraceDepth: 2
Evaluating stack ['}']
BraceDepth: 2
FORCE CLEAR METHBODY
Evaluating stack ['void', 'Dump', '(', ')']
BraceDepth: 1
Evaluating stack ['void', 'Dump', '(', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'Dump', '(', ')', ';'])
('CLEAN ARRAYS', ['void', 'Dump', '(', ')', ';'])
('is method namestack', True, ['void', 'Dump', '(', ')', ';'])
________________________________________________________________________________
Dump
Evaluating stack ['b2WeldJoint', '(', 'const', 'b2WeldJointDef', '*', 'def', ')']
BraceDepth: 1
Evaluating stack ['b2WeldJoint', '(', 'const', 'b2WeldJointDef', '*', 'def', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['b2WeldJoint', '(', 'const', 'b2WeldJointDef', '*', 'def', ')', ';'])
('CLEAN ARRAYS', ['b2WeldJoint', '(', 'const', 'b2WeldJointDef', '*', 'def', ')', ';'])
('is method namestack', True, ['b2WeldJoint', '(', 'const', 'b2WeldJointDef', '*', 'def', ')', ';'])
________________________________________________________________________________
b2WeldJoint
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2WeldJointDef', '*', 'def']
None
________________________________________________________________________________
('CURACCESS-set', 'protected')
Evaluating stack ['friend', 'class', 'b2Joint']
BraceDepth: 1
Evaluating stack ['friend', 'class', 'b2Joint', ';']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'InitVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
InitVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['void', 'SolveVelocityConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolveVelocityConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')']
BraceDepth: 1
Evaluating stack ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';']
BraceDepth: 1
('CLEAN TEMPLATES', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('CLEAN ARRAYS', ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
('is method namestack', True, ['bool', 'SolvePositionConstraints', '(', 'const', 'b2SolverData', '&', 'data', ')', ';'])
________________________________________________________________________________
SolvePositionConstraints
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['const', 'b2SolverData', '&', 'data']
None
________________________________________________________________________________
Evaluating stack ['float32', 'm_frequencyHz']
BraceDepth: 1
Evaluating stack ['float32', 'm_frequencyHz', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_frequencyHz']
['float32', 'm_frequencyHz', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_dampingRatio']
BraceDepth: 1
Evaluating stack ['float32', 'm_dampingRatio', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_dampingRatio']
['float32', 'm_dampingRatio', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_bias']
BraceDepth: 1
Evaluating stack ['float32', 'm_bias', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_bias']
['float32', 'm_bias', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorA']
['b2Vec2', 'm_localAnchorA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localAnchorB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localAnchorB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localAnchorB']
['b2Vec2', 'm_localAnchorB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_referenceAngle']
BraceDepth: 1
Evaluating stack ['float32', 'm_referenceAngle', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_referenceAngle']
['float32', 'm_referenceAngle', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_gamma']
BraceDepth: 1
Evaluating stack ['float32', 'm_gamma', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_gamma']
['float32', 'm_gamma', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec3', 'm_impulse']
BraceDepth: 1
Evaluating stack ['b2Vec3', 'm_impulse', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec3', 'm_impulse']
['b2Vec3', 'm_impulse', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexA']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexA']
['int32', 'm_indexA', ';']
________________________________________________________________________________
Evaluating stack ['int32', 'm_indexB']
BraceDepth: 1
Evaluating stack ['int32', 'm_indexB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['int32', 'm_indexB']
['int32', 'm_indexB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rA']
['b2Vec2', 'm_rA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_rB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_rB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_rB']
['b2Vec2', 'm_rB', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterA']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterA']
['b2Vec2', 'm_localCenterA', ';']
________________________________________________________________________________
Evaluating stack ['b2Vec2', 'm_localCenterB']
BraceDepth: 1
Evaluating stack ['b2Vec2', 'm_localCenterB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Vec2', 'm_localCenterB']
['b2Vec2', 'm_localCenterB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassA']
['float32', 'm_invMassA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invMassB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invMassB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invMassB']
['float32', 'm_invMassB', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIA']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIA', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIA']
['float32', 'm_invIA', ';']
________________________________________________________________________________
Evaluating stack ['float32', 'm_invIB']
BraceDepth: 1
Evaluating stack ['float32', 'm_invIB', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['float32', 'm_invIB']
['float32', 'm_invIB', ';']
________________________________________________________________________________
Evaluating stack ['b2Mat33', 'm_mass']
BraceDepth: 1
Evaluating stack ['b2Mat33', 'm_mass', ';']
BraceDepth: 1
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
['b2Mat33', 'm_mass']
['b2Mat33', 'm_mass', ';']
________________________________________________________________________________
Evaluating stack []
BraceDepth: 1
Evaluating stack ['}']
BraceDepth: 1
('------------END OF CLASS DEF-------------', 'braceDepth:', 0)
Evaluating stack []
BraceDepth: 0
Evaluating stack [';']
BraceDepth: 0
('TODO - fixme', '', 'noreturn')
('TODO - fixme', '', 'noreturn')
('WARN unresolved', 'x')
('WARN unresolved', '_locale_t')
('TODO - fixme', 'cabs(struct_complex_X', 'deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name:""_cabs"". See online help for details.")) double __cdecl')
('TODO - fixme', 'j0(double_X', 'deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name:""_j0"". See online help for details.")) double __cdecl')
('TODO - fixme', 'j1(double_X', 'deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name:""_j1"". See online help for details.")) double __cdecl')
('TODO - fixme', 'jn(int_X,double_Y', 'deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name:""_jn"". See online help for details.")) double __cdecl')
('TODO - fixme', 'y0(double_X', 'deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name:""_y0"". See online help for details.")) double __cdecl')
('TODO - fixme', 'y1(double_X', 'deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name:""_y1"". See online help for details.")) double __cdecl')
('TODO - fixme', 'yn(int_X,double_Y', 'deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name:""_yn"". See online help for details.")) double __cdecl')
('TODO - fixme', '_controlfp(unsignedint_NewValue,unsignedint_Mask', 'deprecated("This function or variable may be unsafe. Consider using ""_controlfp_s"" instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) unsigned int __cdecl')
('WARN unresolved', 'b2ContactID')
('WARN unresolved', 'b2ContactID')
('TODO - fixme', 'm_hasVertex3', 'bool m_hasVertex0 ,')
('TODO - fixme', 'm_hasNextVertex', 'bool m_hasPrevVertex ,')
('WARN unresolved', 'b2ContactCreateFcn')
('WARN unresolved', 'b2ContactDestroyFcn')
('TODO - fixme', 'createFcn', 'b2ContactCreateFcn *')
('TODO - fixme', 'destroyFcn', 'b2ContactDestroyFcn *')
['pthreadmbcinfo', '__time64_t', 'intptr_t', 'wint_t', 'size_t', 'time_t', 'errno_t', ')', 'pthreadlocinfo', 'rsize_t', 'uint16', 'uint32', 'float32', 'int32', 'uintptr_t', 'int16', 'uint8', ']', 'int8', 'float64', '__time32_t', 'wctype_t', 'va_list', 'wchar_t', 'ptrdiff_t']
-------------
zz dir:  ['namespaces', 'structs_order', '_classes_brace_level', 'nameStack', 'typedefs_order', 'functions', 'curAccessSpecifier', '_current_access', '_forward_decls', 'typedefs_info', 'structs', 'mainClass', 'curStruct', '_template_typenames', 'global_enums', '_method_body', 'curClass', 'typedefs', 'headerFileName', 'enums', 'stack', 'template_classes', 'classes_order', 'braceDepth', '_structs_brace_level', 'classes', 'template_typedefs', 'nameSpaces']
zz see b2ContactManager b2ContactManager <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2DistanceJoint b2DistanceJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2Fixture b2Fixture <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2MouseJoint b2MouseJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2PulleyJoint b2PulleyJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2BroadPhase b2BroadPhase <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2World b2World <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2PrismaticJoint b2PrismaticJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2CircleShape b2CircleShape <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2WheelJoint b2WheelJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2Draw b2Draw <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2Joint b2Joint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2GearJoint b2GearJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2RayCastCallback b2RayCastCallback <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2DynamicTree b2DynamicTree <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2WeldJoint b2WeldJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2RevoluteJoint b2RevoluteJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2Timer b2Timer <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2ContactListener b2ContactListener <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2ChainShape b2ChainShape <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2QueryCallback b2QueryCallback <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2BlockAllocator b2BlockAllocator <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2RopeJoint b2RopeJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2PolygonShape b2PolygonShape <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2EdgeShape b2EdgeShape <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2Contact b2Contact <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2Shape b2Shape <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2Body b2Body <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2GrowableStack b2GrowableStack <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2FrictionJoint b2FrictionJoint <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2StackAllocator b2StackAllocator <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2DestructionListener b2DestructionListener <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see b2ContactFilter b2ContactFilter <class 'CppHeaderParser.CppHeaderParser.CppClass'>
zz see _exception {'fields': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': '_exception', 'reference': 0, 'type': 'int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'int', 'name': 'type', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': '_exception', 'reference': 0, 'type': 'char *', 'ctypes_type': 'ctypes.POINTER(ctypes.c_char)', 'namespace': '', 'raw_type': 'char', 'name': 'name', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': '_exception', 'reference': 0, 'type': 'double', 'ctypes_type': 'ctypes.c_double', 'namespace': '', 'raw_type': 'double', 'name': 'arg1', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': '_exception', 'reference': 0, 'type': 'double', 'ctypes_type': 'ctypes.c_double', 'namespace': '', 'raw_type': 'double', 'name': 'arg2', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': '_exception', 'reference': 0, 'type': 'double', 'ctypes_type': 'ctypes.c_double', 'namespace': '', 'raw_type': 'double', 'name': 'retval', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'namespace': '', 'type': '_exception', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2TreeNode {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2TreeNode', 'reference': 0, 'type': 'b2AABB', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2AABB', 'raw_type': '::b2AABB', 'name': 'aabb', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2AABB']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2TreeNode', 'reference': 0, 'type': 'void *', 'ctypes_type': 'ctypes.POINTER(ctypes.c_void_p)', 'namespace': '', 'raw_type': 'void', 'name': 'userData', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': []}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2TreeNode', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'parent', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2TreeNode', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'next', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2TreeNode', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'child1', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2TreeNode', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'child2', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2TreeNode', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'height', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'namespace': '', 'type': 'b2TreeNode', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'IsLeaf', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool IsLeaf ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Mat33 {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Mat33', 'reference': 0, 'type': 'b2Vec3 ex , ey ,', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'ez', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}], 'namespace': '', 'type': 'b2Mat33', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Mat33', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Mat33 ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec3 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'c1', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec3 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'c2', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec3 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'c3', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}], 'class': None, 'returns_reference': False, 'name': 'b2Mat33', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Mat33 ( const b2Vec3 & c1 , const b2Vec3 & c2 , const b2Vec3 & c3 ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'SetZero', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec3 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}], 'class': None, 'returns_reference': False, 'name': 'Solve33', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec3', 'template': False, 'constructor': False, 'debug': 'b2Vec3 Solve33 ( const b2Vec3 & b ) const ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Solve22', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 Solve22 ( const b2Vec2 & b ) const ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Mat33 *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Mat33', 'raw_type': '::b2Mat33', 'name': 'M', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2Mat33']}], 'class': None, 'returns_reference': False, 'name': 'GetInverse22', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void GetInverse22 ( b2Mat33 * M ) const ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Mat33 *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Mat33', 'raw_type': '::b2Mat33', 'name': 'M', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2Mat33']}], 'class': None, 'returns_reference': False, 'name': 'GetSymInverse33', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void GetSymInverse33 ( b2Mat33 * M ) const ;', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Position {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Position', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'c', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Position', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'a', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Position', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2TOIOutput {'fields': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2TOIOutput', 'reference': 0, 'type': 'State', 'ctypes_type': 'ctypes.c_int', 'enum': 'State', 'namespace': '', 'raw_type': 'int', 'name': 'state', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['State']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2TOIOutput', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 't', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2TOIOutput', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Filter {'fields': [{'typedef': 'uint16', 'unresolved': False, 'constant': False, 'parent': 'b2Filter', 'reference': 0, 'concrete_type': 'uint16', 'type': 'unsigned short', 'ctypes_type': 'ctypes.c_ushort', 'namespace': '', 'raw_type': 'unsigned short', 'name': 'categoryBits', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['uint16']}, {'typedef': 'uint16', 'unresolved': False, 'constant': False, 'parent': 'b2Filter', 'reference': 0, 'concrete_type': 'uint16', 'type': 'unsigned short', 'ctypes_type': 'ctypes.c_ushort', 'namespace': '', 'raw_type': 'unsigned short', 'name': 'maskBits', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['uint16']}, {'typedef': 'int16', 'unresolved': False, 'constant': False, 'parent': 'b2Filter', 'reference': 0, 'concrete_type': 'int16', 'type': 'signed short', 'ctypes_type': 'ctypes.c_short', 'namespace': '', 'raw_type': 'signed short', 'name': 'groupIndex', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int16']}], 'namespace': '', 'type': 'b2Filter', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Filter', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Filter ( ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2StackEntry {'fields': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2StackEntry', 'reference': 0, 'type': 'char *', 'ctypes_type': 'ctypes.POINTER(ctypes.c_char)', 'namespace': '', 'raw_type': 'char', 'name': 'data', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': []}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2StackEntry', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'size', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2StackEntry', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'usedMalloc', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'namespace': '', 'type': 'b2StackEntry', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2RopeJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2RopeJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2RopeJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RopeJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxLength', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2RopeJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2RopeJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2RopeJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2DistanceInput {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceInput', 'reference': 0, 'type': 'b2DistanceProxy', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2DistanceProxy', 'raw_type': '::b2DistanceProxy', 'name': 'proxyA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2DistanceProxy']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceInput', 'reference': 0, 'type': 'b2DistanceProxy', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2DistanceProxy', 'raw_type': '::b2DistanceProxy', 'name': 'proxyB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2DistanceProxy']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceInput', 'reference': 0, 'type': 'b2Transform', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Transform', 'raw_type': '::b2Transform', 'name': 'transformA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Transform']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceInput', 'reference': 0, 'type': 'b2Transform', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Transform', 'raw_type': '::b2Transform', 'name': 'transformB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Transform']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2DistanceInput', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'useRadii', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'namespace': '', 'type': 'b2DistanceInput', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2FrictionJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2FrictionJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2FrictionJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2FrictionJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxForce', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2FrictionJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxTorque', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2FrictionJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2FrictionJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2FrictionJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchor', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Profile {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'step', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'collide', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'solve', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'solveInit', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'solveVelocity', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'solvePosition', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'broadphase', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Profile', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'solveTOI', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Profile', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2BodyDef {'fields': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'b2BodyType', 'ctypes_type': 'ctypes.c_int', 'enum': 'b2BodyType', 'namespace': '', 'raw_type': 'int', 'name': 'type', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2BodyType']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'position', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angle', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'linearVelocity', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angularVelocity', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'linearDamping', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angularDamping', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'allowSleep', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'awake', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'fixedRotation', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'bullet', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'active', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'type': 'void *', 'ctypes_type': 'ctypes.POINTER(ctypes.c_void_p)', 'namespace': '', 'raw_type': 'void', 'name': 'userData', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': []}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2BodyDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'gravityScale', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2BodyDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2BodyDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2BodyDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Vec2 {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Vec2', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'x', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Vec2', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'y', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Vec2', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Vec2', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Vec2 ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'x', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'y', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'b2Vec2', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Vec2 ( float32 x , float32 y ) : x ( x ) , y ( y ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'SetZero', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'x_', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'y_', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Set', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Set ( float32 x_ , float32 y_ ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': '-', 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': '__operator____sub__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 operator - ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': '+=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'v', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': '__operator____iadd__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator + = ( const b2Vec2 & v ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': '-=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'v', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': '__operator____isub__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator - = ( const b2Vec2 & v ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': '*=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'a', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': '__operator____imult__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator * = ( float32 a ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'Length', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'float32', 'template': False, 'constructor': False, 'debug': 'float32 Length ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'LengthSquared', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'float32', 'template': False, 'constructor': False, 'debug': 'float32 LengthSquared ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'Normalize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'float32', 'template': False, 'constructor': False, 'debug': 'float32 Normalize ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'IsValid', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool IsValid ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'Skew', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 Skew ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Vec3 {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Vec3', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'z', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Vec3', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Vec3', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Vec3 ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'x', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'y', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'z', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'b2Vec3', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Vec3 ( float32 x , float32 y , float32 z ) : x ( x ) , y ( y ) , z ( z ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'SetZero', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'x_', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'y_', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'z_', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Set', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Set ( float32 x_ , float32 y_ , float32 z_ ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': '-', 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': '__operator____sub__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec3', 'template': False, 'constructor': False, 'debug': 'b2Vec3 operator - ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': '+=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec3 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'v', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}], 'class': None, 'returns_reference': False, 'name': '__operator____iadd__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator + = ( const b2Vec3 & v ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': '-=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec3 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'v', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}], 'class': None, 'returns_reference': False, 'name': '__operator____isub__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator - = ( const b2Vec3 & v ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': '*=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 's', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': '__operator____imult__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator * = ( float32 s ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2AABB {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2AABB', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'lowerBound', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2AABB', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'upperBound', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'namespace': '', 'type': 'b2AABB', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2AABB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2AABB ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'IsValid', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool IsValid ( ) const ;', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetCenter', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetCenter ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetExtents', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetExtents ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetPerimeter', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'float32', 'template': False, 'constructor': False, 'debug': 'float32 GetPerimeter ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2AABB &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2AABB', 'raw_type': '::b2AABB', 'name': 'aabb', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2AABB']}], 'class': None, 'returns_reference': False, 'name': 'Combine', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Combine ( const b2AABB & aabb ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2AABB &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2AABB', 'raw_type': '::b2AABB', 'name': 'aabb1', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2AABB']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2AABB &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2AABB', 'raw_type': '::b2AABB', 'name': 'aabb2', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2AABB']}], 'class': None, 'returns_reference': False, 'name': 'Combine', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Combine ( const b2AABB & aabb1 , const b2AABB & aabb2 ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2AABB &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2AABB', 'raw_type': '::b2AABB', 'name': 'aabb', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2AABB']}], 'class': None, 'returns_reference': False, 'name': 'Contains', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool Contains ( const b2AABB & aabb ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2RayCastOutput *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2RayCastOutput', 'raw_type': '::b2RayCastOutput', 'name': 'output', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2RayCastOutput']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2RayCastInput &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2RayCastInput', 'raw_type': '::b2RayCastInput', 'name': 'input', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2RayCastInput']}], 'class': None, 'returns_reference': False, 'name': 'RayCast', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool RayCast ( b2RayCastOutput * output , const b2RayCastInput & input ) const ;', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Pair {'fields': [{'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2Pair', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'proxyIdA', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2Pair', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'proxyIdB', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2Pair', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'next', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'namespace': '', 'type': 'b2Pair', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2TimeStep {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2TimeStep', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'dt', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2TimeStep', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'inv_dt', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2TimeStep', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'dtRatio', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2TimeStep', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'velocityIterations', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2TimeStep', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'positionIterations', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2TimeStep', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'warmStarting', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'namespace': '', 'type': 'b2TimeStep', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2FixtureDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': 'b2FixtureDef', 'reference': 0, 'type': 'const b2Shape *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Shape', 'name': 'shape', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Shape, 'aliases': ['b2Shape']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2FixtureDef', 'reference': 0, 'type': 'void *', 'ctypes_type': 'ctypes.POINTER(ctypes.c_void_p)', 'namespace': '', 'raw_type': 'void', 'name': 'userData', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': []}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2FixtureDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'friction', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2FixtureDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'restitution', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2FixtureDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'density', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2FixtureDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'isSensor', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2FixtureDef', 'reference': 0, 'type': 'b2Filter', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Filter', 'raw_type': '::b2Filter', 'name': 'filter', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Filter']}], 'namespace': '', 'type': 'b2FixtureDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2FixtureDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2FixtureDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Version {'fields': [{'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2Version', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'major', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2Version', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'minor', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2Version', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'revision', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'namespace': '', 'type': 'b2Version', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Manifold {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Manifold', 'reference': 0, 'type': 'b2ManifoldPoint', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2ManifoldPoint', 'raw_type': '::b2ManifoldPoint', 'name': 'points', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'array': 2, 'pointer': 0, 'class': 0, 'array_dimensions': [2], 'aliases': ['b2ManifoldPoint']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Manifold', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localNormal', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Manifold', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localPoint', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2Manifold', 'reference': 0, 'type': 'Type', 'ctypes_type': 'ctypes.c_int', 'enum': 'Type', 'namespace': '', 'raw_type': 'int', 'name': 'type', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['Type']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2Manifold', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'pointCount', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'namespace': '', 'type': 'b2Manifold', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2WorldManifold {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2WorldManifold', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'normal', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2WorldManifold', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'points', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'array': 2, 'pointer': 0, 'class': 0, 'array_dimensions': [2], 'aliases': ['b2Vec2']}], 'namespace': '', 'type': 'b2WorldManifold', 'methods': [{'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 0, 'type': 'const b2Manifold *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Manifold', 'raw_type': '::b2Manifold', 'name': 'manifold', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2Manifold']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Transform &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Transform', 'raw_type': '::b2Transform', 'name': 'xfA', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Transform']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'radiusA', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Transform &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Transform', 'raw_type': '::b2Transform', 'name': 'xfB', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Transform']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'radiusB', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( const b2Manifold * manifold , const b2Transform & xfA , float32 radiusA , const b2Transform & xfB , float32 radiusB ) ;', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2PrismaticJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAxisA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'referenceAngle', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'enableLimit', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'lowerTranslation', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'upperTranslation', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'enableMotor', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxMotorForce', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PrismaticJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'motorSpeed', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2PrismaticJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2PrismaticJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2PrismaticJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchor', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'axis', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor , const b2Vec2 & axis ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2RayCastOutput {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2RayCastOutput', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'normal', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RayCastOutput', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'fraction', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2RayCastOutput', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2SimplexCache {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2SimplexCache', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'metric', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'uint16', 'unresolved': False, 'constant': False, 'parent': 'b2SimplexCache', 'reference': 0, 'concrete_type': 'uint16', 'type': 'unsigned short', 'ctypes_type': 'ctypes.c_ushort', 'namespace': '', 'raw_type': 'unsigned short', 'name': 'count', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['uint16']}, {'typedef': 'uint8', 'unresolved': False, 'constant': False, 'parent': 'b2SimplexCache', 'reference': 0, 'concrete_type': 'uint8', 'type': 'unsigned char', 'ctypes_type': 'ctypes.c_ubyte', 'namespace': '', 'raw_type': 'unsigned char', 'name': 'indexA', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'array': 3, 'pointer': 0, 'class': 0, 'array_dimensions': [3], 'aliases': ['uint8']}, {'typedef': 'uint8', 'unresolved': False, 'constant': False, 'parent': 'b2SimplexCache', 'reference': 0, 'concrete_type': 'uint8', 'type': 'unsigned char', 'ctypes_type': 'ctypes.c_ubyte', 'namespace': '', 'raw_type': 'unsigned char', 'name': 'indexB', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'array': 3, 'pointer': 0, 'class': 0, 'array_dimensions': [3], 'aliases': ['uint8']}], 'namespace': '', 'type': 'b2SimplexCache', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2ContactFeature {'fields': [{'typedef': 'uint8', 'unresolved': False, 'constant': False, 'parent': 'b2ContactFeature', 'reference': 0, 'concrete_type': 'uint8', 'type': 'unsigned char', 'ctypes_type': 'ctypes.c_ubyte', 'namespace': '', 'raw_type': 'unsigned char', 'name': 'indexA', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['uint8']}, {'typedef': 'uint8', 'unresolved': False, 'constant': False, 'parent': 'b2ContactFeature', 'reference': 0, 'concrete_type': 'uint8', 'type': 'unsigned char', 'ctypes_type': 'ctypes.c_ubyte', 'namespace': '', 'raw_type': 'unsigned char', 'name': 'indexB', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['uint8']}, {'typedef': 'uint8', 'unresolved': False, 'constant': False, 'parent': 'b2ContactFeature', 'reference': 0, 'concrete_type': 'uint8', 'type': 'unsigned char', 'ctypes_type': 'ctypes.c_ubyte', 'namespace': '', 'raw_type': 'unsigned char', 'name': 'typeA', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['uint8']}, {'typedef': 'uint8', 'unresolved': False, 'constant': False, 'parent': 'b2ContactFeature', 'reference': 0, 'concrete_type': 'uint8', 'type': 'unsigned char', 'ctypes_type': 'ctypes.c_ubyte', 'namespace': '', 'raw_type': 'unsigned char', 'name': 'typeB', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['uint8']}], 'namespace': '', 'type': 'b2ContactFeature', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2WheelJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAxisA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'enableMotor', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxMotorTorque', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'motorSpeed', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'frequencyHz', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2WheelJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'dampingRatio', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2WheelJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2WheelJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2WheelJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchor', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'axis', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor , const b2Vec2 & axis ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2MassData {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2MassData', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'mass', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2MassData', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'center', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2MassData', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'I', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2MassData', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2RevoluteJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'referenceAngle', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'enableLimit', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'lowerAngle', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'upperAngle', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'enableMotor', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'motorSpeed', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RevoluteJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxMotorTorque', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2RevoluteJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2RevoluteJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2RevoluteJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchor', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2ContactImpulse {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2ContactImpulse', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'normalImpulses', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'array': 2, 'pointer': 0, 'class': 0, 'array_dimensions': [2], 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2ContactImpulse', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'tangentImpulses', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'array': 2, 'pointer': 0, 'class': 0, 'array_dimensions': [2], 'aliases': ['float32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2ContactImpulse', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'count', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'namespace': '', 'type': 'b2ContactImpulse', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2JointEdge {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2JointEdge', 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'other', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2JointEdge', 'reference': 0, 'type': 'b2Joint *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Joint', 'name': 'joint', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Joint, 'aliases': ['b2Joint']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2JointEdge', 'reference': 0, 'type': 'b2JointEdge *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2JointEdge', 'raw_type': '::b2JointEdge', 'name': 'prev', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2JointEdge']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2JointEdge', 'reference': 0, 'type': 'b2JointEdge *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2JointEdge', 'raw_type': '::b2JointEdge', 'name': 'next', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2JointEdge']}], 'namespace': '', 'type': 'b2JointEdge', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2PulleyJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2PulleyJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'groundAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2PulleyJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'groundAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2PulleyJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2PulleyJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PulleyJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'lengthA', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PulleyJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'lengthB', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2PulleyJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'ratio', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2PulleyJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2PulleyJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2PulleyJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'groundAnchorA', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'groundAnchorB', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchorA', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchorB', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'ratio', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & groundAnchorA , const b2Vec2 & groundAnchorB , const b2Vec2 & anchorA , const b2Vec2 & anchorB , float32 ratio ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Mat22 {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Mat22', 'reference': 0, 'type': 'b2Vec2 ex ,', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'ey', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'namespace': '', 'type': 'b2Mat22', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Mat22', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Mat22 ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'c1', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'c2', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'b2Mat22', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Mat22 ( const b2Vec2 & c1 , const b2Vec2 & c2 ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'a11', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'a12', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'a21', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'a22', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'b2Mat22', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Mat22 ( float32 a11 , float32 a12 , float32 a21 , float32 a22 ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'c1', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'c2', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Set', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Set ( const b2Vec2 & c1 , const b2Vec2 & c2 ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'SetIdentity', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void SetIdentity ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'SetZero', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void SetZero ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetInverse', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Mat22', 'template': False, 'constructor': False, 'debug': 'b2Mat22 GetInverse ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Solve', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 Solve ( const b2Vec2 & b ) const {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2ManifoldPoint {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ManifoldPoint', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localPoint', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2ManifoldPoint', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'normalImpulse', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2ManifoldPoint', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'tangentImpulse', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ManifoldPoint', 'reference': 0, 'type': 'b2ContactID', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': 'b2ContactID', 'name': 'id', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2ContactID']}], 'namespace': '', 'type': 'b2ManifoldPoint', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2JointDef {'fields': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2JointDef', 'reference': 0, 'type': 'b2JointType', 'ctypes_type': 'ctypes.c_int', 'enum': 'b2JointType', 'namespace': '', 'raw_type': 'int', 'name': 'type', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2JointType']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2JointDef', 'reference': 0, 'type': 'void *', 'ctypes_type': 'ctypes.POINTER(ctypes.c_void_p)', 'namespace': '', 'raw_type': 'void', 'name': 'userData', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': []}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2JointDef', 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2JointDef', 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2JointDef', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'collideConnected', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'namespace': '', 'type': 'b2JointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2JointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2JointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2SolverData {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2SolverData', 'reference': 0, 'type': 'b2TimeStep', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2TimeStep', 'raw_type': '::b2TimeStep', 'name': 'step', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2TimeStep']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2SolverData', 'reference': 0, 'type': 'b2Position *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Position', 'raw_type': '::b2Position', 'name': 'positions', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2Position']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2SolverData', 'reference': 0, 'type': 'b2Velocity *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Velocity', 'raw_type': '::b2Velocity', 'name': 'velocities', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2Velocity']}], 'namespace': '', 'type': 'b2SolverData', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Transform {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Transform', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'p', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Transform', 'reference': 0, 'type': 'b2Rot', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Rot', 'raw_type': '::b2Rot', 'name': 'q', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Rot']}], 'namespace': '', 'type': 'b2Transform', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Transform', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Transform ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'position', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Rot &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Rot', 'raw_type': '::b2Rot', 'name': 'rotation', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Rot']}], 'class': None, 'returns_reference': False, 'name': 'b2Transform', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Transform ( const b2Vec2 & position , const b2Rot & rotation ) : p ( position ) , q ( rotation ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'SetIdentity', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void SetIdentity ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'position', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angle', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Set', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Set ( const b2Vec2 & position , float32 angle ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Color {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Color', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'r', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Color', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'g', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Color', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'b', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Color', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Color', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Color ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'r', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'g', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'b2Color', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Color ( float32 r , float32 g , float32 b ) : r ( r ) , g ( g ) , b ( b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'ri', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'gi', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'bi', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Set', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Set ( float32 ri , float32 gi , float32 bi ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Velocity {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Velocity', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'v', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Velocity', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'w', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Velocity', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2RayCastInput {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2RayCastInput', 'reference': 0, 'type': 'b2Vec2 p1 ,', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'p2', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2RayCastInput', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxFraction', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2RayCastInput', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Rot {'fields': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Rot', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'c', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Rot', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2Rot', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2Rot ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angle', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'b2Rot', 'pure_virtual': False, 'explicit': True, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': False, 'debug': 'explicit b2Rot ( float32 angle ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angle', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Set', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Set ( float32 angle ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'SetIdentity', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void SetIdentity ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetAngle', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'float32', 'template': False, 'constructor': False, 'debug': 'float32 GetAngle ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetXAxis', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetXAxis ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetYAxis', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'constructor': False, 'debug': 'b2Vec2 GetYAxis ( ) const {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2TOIInput {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2TOIInput', 'reference': 0, 'type': 'b2DistanceProxy', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2DistanceProxy', 'raw_type': '::b2DistanceProxy', 'name': 'proxyA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2DistanceProxy']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2TOIInput', 'reference': 0, 'type': 'b2DistanceProxy', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2DistanceProxy', 'raw_type': '::b2DistanceProxy', 'name': 'proxyB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2DistanceProxy']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2TOIInput', 'reference': 0, 'type': 'b2Sweep', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Sweep', 'raw_type': '::b2Sweep', 'name': 'sweepA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Sweep']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2TOIInput', 'reference': 0, 'type': 'b2Sweep', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Sweep', 'raw_type': '::b2Sweep', 'name': 'sweepB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Sweep']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2TOIInput', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'tMax', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2TOIInput', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2WeldJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2WeldJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2WeldJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2WeldJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'referenceAngle', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2WeldJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'frequencyHz', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2WeldJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'dampingRatio', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2WeldJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2WeldJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2WeldJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchor', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchor ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2ClipVertex {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ClipVertex', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'v', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ClipVertex', 'reference': 0, 'type': 'b2ContactID', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': 'b2ContactID', 'name': 'id', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2ContactID']}], 'namespace': '', 'type': 'b2ClipVertex', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2FixtureProxy {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2FixtureProxy', 'reference': 0, 'type': 'b2AABB', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2AABB', 'raw_type': '::b2AABB', 'name': 'aabb', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2AABB']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2FixtureProxy', 'reference': 0, 'type': 'b2Fixture *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Fixture', 'name': 'fixture', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Fixture, 'aliases': ['b2Fixture']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2FixtureProxy', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'childIndex', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2FixtureProxy', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'proxyId', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'namespace': '', 'type': 'b2FixtureProxy', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2MouseJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2MouseJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'target', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2MouseJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'maxForce', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2MouseJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'frequencyHz', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2MouseJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'dampingRatio', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2MouseJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2MouseJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2MouseJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see _complex {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': '_complex', 'reference': 0, 'type': 'double x ,', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': 'double x ,', 'name': 'y', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['x']}], 'namespace': '', 'type': '_complex', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2DistanceOutput {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceOutput', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'pointA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceOutput', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'pointB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2DistanceOutput', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'distance', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2DistanceOutput', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'iterations', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'namespace': '', 'type': 'b2DistanceOutput', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2DistanceProxy {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceProxy', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'm_buffer', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'array': 2, 'pointer': 0, 'class': 0, 'array_dimensions': [2], 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': 'b2DistanceProxy', 'reference': 0, 'type': 'const b2Vec2 *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'm_vertices', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': 'b2DistanceProxy', 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'm_count', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2DistanceProxy', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'm_radius', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2DistanceProxy', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2DistanceProxy', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2DistanceProxy ( ) : m_vertices ( ( ( void * ) 0 ) ) , m_count ( 0 ) , m_radius ( 0 0f ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 0, 'type': 'const b2Shape *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Shape', 'name': 'shape', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Shape, 'aliases': ['b2Shape']}, {'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'index', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'class': None, 'returns_reference': False, 'name': 'Set', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Set ( const b2Shape * shape , int32 index ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'd', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'GetSupport', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'int32', 'template': False, 'constructor': False, 'debug': 'int32 GetSupport ( const b2Vec2 & d ) const ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'constructor': False, 'extern': False, 'static': False, 'returns_class': False, 'inline': False, 'operator': False, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'd', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': True, 'name': 'GetSupportVertex', 'pure_virtual': False, 'returns_const': True, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'returns_fundamental': False, 'debug': 'const b2Vec2 & GetSupportVertex ( const b2Vec2 & d ) const ;', 'returns_pointer': 0, 'explicit': False, 'friend': False}, {'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'GetVertexCount', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'int32', 'template': False, 'constructor': False, 'debug': 'int32 GetVertexCount ( ) const ;', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': False, 'namespace': '', 'constructor': False, 'extern': False, 'static': False, 'returns_class': False, 'inline': False, 'operator': False, 'parameters': [{'typedef': 'int32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'int32', 'type': 'signed int', 'ctypes_type': 'ctypes.c_int', 'namespace': '', 'raw_type': 'signed int', 'name': 'index', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['int32']}], 'class': None, 'returns_reference': True, 'name': 'GetVertex', 'pure_virtual': False, 'returns_const': True, 'virtual': False, 'destructor': False, 'returns': 'b2Vec2', 'template': False, 'returns_fundamental': False, 'debug': 'const b2Vec2 & GetVertex ( int32 index ) const ;', 'returns_pointer': 0, 'explicit': False, 'friend': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2ContactRegister {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ContactRegister', 'reference': 0, 'type': 'b2ContactCreateFcn *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': 'b2ContactCreateFcn', 'name': 'createFcn', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2ContactCreateFcn']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ContactRegister', 'reference': 0, 'type': 'b2ContactDestroyFcn *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': 'b2ContactDestroyFcn', 'name': 'destroyFcn', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2ContactDestroyFcn']}, {'typedef': None, 'unresolved': False, 'constant': False, 'parent': 'b2ContactRegister', 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'primary', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'namespace': '', 'type': 'b2ContactRegister', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2DistanceJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorA', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2DistanceJointDef', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localAnchorB', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2DistanceJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'length', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2DistanceJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'frequencyHz', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2DistanceJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'dampingRatio', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2DistanceJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2DistanceJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2DistanceJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyA', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'bodyB', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchorA', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'anchorB', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}], 'class': None, 'returns_reference': False, 'name': 'Initialize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Initialize ( b2Body * bodyA , b2Body * bodyB , const b2Vec2 & anchorA , const b2Vec2 & anchorB ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2GearJointDef {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2GearJointDef', 'reference': 0, 'type': 'b2Joint *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Joint', 'name': 'joint1', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Joint, 'aliases': ['b2Joint']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2GearJointDef', 'reference': 0, 'type': 'b2Joint *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Joint', 'name': 'joint2', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Joint, 'aliases': ['b2Joint']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2GearJointDef', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'ratio', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2GearJointDef', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2GearJointDef', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2GearJointDef ( ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'set_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'set_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void set_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyA', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyA ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': False, 'extern': False, 'returns_pointer': 1, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}], 'class': None, 'returns_reference': False, 'name': 'get_bodyB', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'b2Body', 'template': False, 'constructor': False, 'debug': 'b2Body * get_bodyB ( b2Body * b ) {', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'type': 'bool', 'ctypes_type': 'ctypes.c_bool', 'namespace': '', 'raw_type': 'bool', 'name': 'b', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': []}], 'class': None, 'returns_reference': False, 'name': 'get_collideConnected', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'bool', 'template': False, 'constructor': False, 'debug': 'bool get_collideConnected ( bool b ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Jacobian {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Jacobian', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'linear', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Jacobian', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angularA', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Jacobian', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'angularB', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Jacobian', 'methods': [], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2ContactEdge {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ContactEdge', 'reference': 0, 'type': 'b2Body *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Body', 'name': 'other', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Body, 'aliases': ['b2Body']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ContactEdge', 'reference': 0, 'type': 'b2Contact *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'raw_type': '::b2Contact', 'name': 'contact', 'property_of_struct': {...}, 'static': False, 'fundamental': False, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': b2Contact, 'aliases': ['b2Contact']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ContactEdge', 'reference': 0, 'type': 'b2ContactEdge *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2ContactEdge', 'raw_type': '::b2ContactEdge', 'name': 'prev', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2ContactEdge']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2ContactEdge', 'reference': 0, 'type': 'b2ContactEdge *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2ContactEdge', 'raw_type': '::b2ContactEdge', 'name': 'next', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2ContactEdge']}], 'namespace': '', 'type': 'b2ContactEdge', 'methods': [{'defined': True, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'b2ContactEdge', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': '', 'template': False, 'constructor': True, 'debug': 'b2ContactEdge ( ) {', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz see b2Sweep {'fields': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Sweep', 'reference': 0, 'type': 'b2Vec2', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'localCenter', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': None, 'unresolved': True, 'constant': False, 'parent': 'b2Sweep', 'reference': 0, 'type': 'b2Vec2 c0 ,', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'c', 'property_of_struct': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Sweep', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'a', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': 'b2Sweep', 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'alpha0', 'property_of_struct': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'namespace': '', 'type': 'b2Sweep', 'methods': [{'unresolved_parameters': True, 'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': None, 'unresolved': True, 'constant': False, 'parent': None, 'reference': 0, 'type': 'b2Transform *', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Transform', 'raw_type': '::b2Transform', 'name': 'xfb', 'method': {...}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 1, 'class': 0, 'aliases': ['b2Transform']}, {'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'beta', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'GetTransform', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void GetTransform ( b2Transform * xfb , float32 beta ) const ;', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [{'typedef': 'float32', 'unresolved': False, 'constant': False, 'parent': None, 'reference': 0, 'concrete_type': 'float32', 'type': 'float', 'ctypes_type': 'ctypes.c_float', 'namespace': '', 'raw_type': 'float', 'name': 'alpha', 'method': {...}, 'static': False, 'fundamental': True, 'mutable': False, 'typedefs': 1, 'pointer': 0, 'class': 0, 'aliases': ['float32']}], 'class': None, 'returns_reference': False, 'name': 'Advance', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Advance ( float32 alpha ) ;', 'inline': False, 'friend': False, 'returns_class': False}, {'defined': False, 'namespace': '', 'operator': False, 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [], 'class': None, 'returns_reference': False, 'name': 'Normalize', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void Normalize ( ) ;', 'inline': False, 'friend': False, 'returns_class': False}], 'parent': None} <class 'CppHeaderParser.CppHeaderParser.CppStruct'>
zz add properties!
zz parents:  {}
zz precalc b2ContactManager
z constructorhmm? b2ContactManager True
zz  b2ContactManager has parameters in range [0]
z constructorhmm? AddPair False
zz  b2ContactManager has parameters in range [2]
z constructorhmm? FindNewContacts False
zz  b2ContactManager has parameters in range [0]
z constructorhmm? Destroy False
zz  b2ContactManager has parameters in range [1]
z constructorhmm? Collide False
zz  b2ContactManager has parameters in range [0]
zz is effectively abstract? b2ContactManager b2ContactManager 0
zz precalc b2DistanceJoint
z constructorhmm? GetAnchorA False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2DistanceJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2DistanceJoint has parameters in range [1]
z constructorhmm? GetLocalAnchorA False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorB False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? SetLength False
zz  b2DistanceJoint has parameters in range [1]
z constructorhmm? GetLength False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? SetFrequency False
zz  b2DistanceJoint has parameters in range [1]
z constructorhmm? GetFrequency False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? SetDampingRatio False
zz  b2DistanceJoint has parameters in range [1]
z constructorhmm? GetDampingRatio False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2DistanceJoint has parameters in range [0]
z constructorhmm? b2DistanceJoint True
zz  b2DistanceJoint has parameters in range [1]
zz is effectively abstract? b2DistanceJoint b2DistanceJoint 0
zz precalc b2Fixture
z constructorhmm? GetType False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetShape False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetShape False
zz  b2Fixture has parameters in range [0]
z constructorhmm? SetSensor False
zz  b2Fixture has parameters in range [1]
z constructorhmm? IsSensor False
zz  b2Fixture has parameters in range [0]
z constructorhmm? SetFilterData False
zz  b2Fixture has parameters in range [1]
z constructorhmm? GetFilterData False
zz  b2Fixture has parameters in range [0]
z constructorhmm? Refilter False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetBody False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetBody False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetNext False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetNext False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetUserData False
zz  b2Fixture has parameters in range [0]
z constructorhmm? SetUserData False
zz  b2Fixture has parameters in range [1]
z constructorhmm? TestPoint False
zz  b2Fixture has parameters in range [1]
z constructorhmm? RayCast False
zz  b2Fixture has parameters in range [3]
z constructorhmm? GetMassData False
zz  b2Fixture has parameters in range [1]
z constructorhmm? SetDensity False
zz  b2Fixture has parameters in range [1]
z constructorhmm? GetDensity False
zz  b2Fixture has parameters in range [0]
z constructorhmm? GetFriction False
zz  b2Fixture has parameters in range [0]
z constructorhmm? SetFriction False
zz  b2Fixture has parameters in range [1]
z constructorhmm? GetRestitution False
zz  b2Fixture has parameters in range [0]
z constructorhmm? SetRestitution False
zz  b2Fixture has parameters in range [1]
z constructorhmm? GetAABB False
zz  b2Fixture has parameters in range [1]
z constructorhmm? Dump False
zz  b2Fixture has parameters in range [1]
z constructorhmm? b2Fixture True
zz  b2Fixture has parameters in range [0]
zz is effectively abstract? b2Fixture b2Fixture 0
zz precalc b2MouseJoint
z constructorhmm? GetAnchorA False
zz  b2MouseJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2MouseJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2MouseJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2MouseJoint has parameters in range [1]
z constructorhmm? SetTarget False
zz  b2MouseJoint has parameters in range [1]
z constructorhmm? GetTarget False
zz  b2MouseJoint has parameters in range [0]
z constructorhmm? SetMaxForce False
zz  b2MouseJoint has parameters in range [1]
z constructorhmm? GetMaxForce False
zz  b2MouseJoint has parameters in range [0]
z constructorhmm? SetFrequency False
zz  b2MouseJoint has parameters in range [1]
z constructorhmm? GetFrequency False
zz  b2MouseJoint has parameters in range [0]
z constructorhmm? SetDampingRatio False
zz  b2MouseJoint has parameters in range [1]
z constructorhmm? GetDampingRatio False
zz  b2MouseJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2MouseJoint has parameters in range [0]
z constructorhmm? b2MouseJoint True
zz  b2MouseJoint has parameters in range [1]
zz is effectively abstract? b2MouseJoint b2MouseJoint 0
zz precalc b2PulleyJoint
z constructorhmm? GetAnchorA False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2PulleyJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2PulleyJoint has parameters in range [1]
z constructorhmm? GetGroundAnchorA False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? GetGroundAnchorB False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? GetLengthA False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? GetLengthB False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? GetRatio False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2PulleyJoint has parameters in range [0]
z constructorhmm? b2PulleyJoint True
zz  b2PulleyJoint has parameters in range [1]
zz is effectively abstract? b2PulleyJoint b2PulleyJoint 0
zz precalc b2BroadPhase
z constructorhmm? b2BroadPhase True
zz  b2BroadPhase has parameters in range [0]
z constructorhmm? b2BroadPhase True
zz  b2BroadPhase has parameters in range [0]
z constructorhmm? CreateProxy False
zz  b2BroadPhase has parameters in range [2]
z constructorhmm? DestroyProxy False
zz  b2BroadPhase has parameters in range [1]
z constructorhmm? MoveProxy False
zz  b2BroadPhase has parameters in range [3]
z constructorhmm? TouchProxy False
zz  b2BroadPhase has parameters in range [1]
z constructorhmm? GetFatAABB False
zz  b2BroadPhase has parameters in range [1]
z constructorhmm? GetUserData False
zz  b2BroadPhase has parameters in range [1]
z constructorhmm? TestOverlap False
zz  b2BroadPhase has parameters in range [2]
z constructorhmm? GetProxyCount False
zz  b2BroadPhase has parameters in range [0]
z constructorhmm? UpdatePairs False
zz  b2BroadPhase has parameters in range [1]
z constructorhmm? Query False
zz  b2BroadPhase has parameters in range [2]
z constructorhmm? RayCast False
zz  b2BroadPhase has parameters in range [2]
z constructorhmm? GetTreeHeight False
zz  b2BroadPhase has parameters in range [0]
z constructorhmm? GetTreeBalance False
zz  b2BroadPhase has parameters in range [0]
z constructorhmm? GetTreeQuality False
zz  b2BroadPhase has parameters in range [0]
zz is effectively abstract? b2BroadPhase b2BroadPhase 0
zz precalc b2World
z constructorhmm? b2World True
zz  b2World has parameters in range [1]
z constructorhmm? b2World True
zz  b2World has parameters in range [0]
z constructorhmm? SetDestructionListener False
zz  b2World has parameters in range [1]
z constructorhmm? SetContactFilter False
zz  b2World has parameters in range [1]
z constructorhmm? SetContactListener False
zz  b2World has parameters in range [1]
z constructorhmm? SetDebugDraw False
zz  b2World has parameters in range [1]
z constructorhmm? CreateBody False
zz  b2World has parameters in range [1]
z constructorhmm? DestroyBody False
zz  b2World has parameters in range [1]
z constructorhmm? CreateJoint False
zz  b2World has parameters in range [1]
z constructorhmm? DestroyJoint False
zz  b2World has parameters in range [1]
z constructorhmm? Step False
zz  b2World has parameters in range [3]
z constructorhmm? ClearForces False
zz  b2World has parameters in range [0]
z constructorhmm? DrawDebugData False
zz  b2World has parameters in range [0]
z constructorhmm? QueryAABB False
zz  b2World has parameters in range [2]
z constructorhmm? RayCast False
zz  b2World has parameters in range [3]
z constructorhmm? GetBodyList False
zz  b2World has parameters in range [0]
z constructorhmm? GetBodyList False
zz  b2World has parameters in range [0]
z constructorhmm? GetJointList False
zz  b2World has parameters in range [0]
z constructorhmm? GetJointList False
zz  b2World has parameters in range [0]
z constructorhmm? GetContactList False
zz  b2World has parameters in range [0]
z constructorhmm? GetContactList False
zz  b2World has parameters in range [0]
z constructorhmm? SetAllowSleeping False
zz  b2World has parameters in range [1]
z constructorhmm? GetAllowSleeping False
zz  b2World has parameters in range [0]
z constructorhmm? SetWarmStarting False
zz  b2World has parameters in range [1]
z constructorhmm? GetWarmStarting False
zz  b2World has parameters in range [0]
z constructorhmm? SetContinuousPhysics False
zz  b2World has parameters in range [1]
z constructorhmm? GetContinuousPhysics False
zz  b2World has parameters in range [0]
z constructorhmm? SetSubStepping False
zz  b2World has parameters in range [1]
z constructorhmm? GetSubStepping False
zz  b2World has parameters in range [0]
z constructorhmm? GetProxyCount False
zz  b2World has parameters in range [0]
z constructorhmm? GetBodyCount False
zz  b2World has parameters in range [0]
z constructorhmm? GetJointCount False
zz  b2World has parameters in range [0]
z constructorhmm? GetContactCount False
zz  b2World has parameters in range [0]
z constructorhmm? GetTreeHeight False
zz  b2World has parameters in range [0]
z constructorhmm? GetTreeBalance False
zz  b2World has parameters in range [0]
z constructorhmm? GetTreeQuality False
zz  b2World has parameters in range [0]
z constructorhmm? SetGravity False
zz  b2World has parameters in range [1]
z constructorhmm? GetGravity False
zz  b2World has parameters in range [0]
z constructorhmm? IsLocked False
zz  b2World has parameters in range [0]
z constructorhmm? SetAutoClearForces False
zz  b2World has parameters in range [1]
z constructorhmm? GetAutoClearForces False
zz  b2World has parameters in range [0]
z constructorhmm? GetContactManager False
zz  b2World has parameters in range [0]
z constructorhmm? GetProfile False
zz  b2World has parameters in range [0]
z constructorhmm? Dump False
zz  b2World has parameters in range [0]
zz is effectively abstract? b2World b2World 0
zz precalc b2PrismaticJoint
z constructorhmm? GetAnchorA False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2PrismaticJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2PrismaticJoint has parameters in range [1]
z constructorhmm? GetLocalAnchorA False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorB False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetLocalAxisA False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetReferenceAngle False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetJointTranslation False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetJointSpeed False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? IsLimitEnabled False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? EnableLimit False
zz  b2PrismaticJoint has parameters in range [1]
z constructorhmm? GetLowerLimit False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetUpperLimit False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? SetLimits False
zz  b2PrismaticJoint has parameters in range [2]
z constructorhmm? IsMotorEnabled False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? EnableMotor False
zz  b2PrismaticJoint has parameters in range [1]
z constructorhmm? SetMotorSpeed False
zz  b2PrismaticJoint has parameters in range [1]
z constructorhmm? GetMotorSpeed False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? SetMaxMotorForce False
zz  b2PrismaticJoint has parameters in range [1]
z constructorhmm? GetMaxMotorForce False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? GetMotorForce False
zz  b2PrismaticJoint has parameters in range [1]
z constructorhmm? Dump False
zz  b2PrismaticJoint has parameters in range [0]
z constructorhmm? b2PrismaticJoint True
zz  b2PrismaticJoint has parameters in range [1]
zz is effectively abstract? b2PrismaticJoint b2PrismaticJoint 0
zz precalc b2CircleShape
z constructorhmm? b2CircleShape True
zz  b2CircleShape has parameters in range [0]
z constructorhmm? Clone False
zz  b2CircleShape has parameters in range [1]
z constructorhmm? GetChildCount False
zz  b2CircleShape has parameters in range [0]
z constructorhmm? TestPoint False
zz  b2CircleShape has parameters in range [2]
z constructorhmm? RayCast False
zz  b2CircleShape has parameters in range [4]
z constructorhmm? ComputeAABB False
zz  b2CircleShape has parameters in range [3]
z constructorhmm? ComputeMass False
zz  b2CircleShape has parameters in range [2]
z constructorhmm? GetSupport False
zz  b2CircleShape has parameters in range [1]
z constructorhmm? GetSupportVertex False
zz  b2CircleShape has parameters in range [1]
z constructorhmm? GetVertexCount False
zz  b2CircleShape has parameters in range [0]
z constructorhmm? GetVertex False
zz  b2CircleShape has parameters in range [1]
zz is effectively abstract? b2CircleShape b2CircleShape 0
zz precalc b2WheelJoint
z constructorhmm? GetDefinition False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? GetAnchorA False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? GetLocalAnchorA False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorB False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? GetLocalAxisA False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? GetJointTranslation False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? GetJointSpeed False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? IsMotorEnabled False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? EnableMotor False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? SetMotorSpeed False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? GetMotorSpeed False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? SetMaxMotorTorque False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? GetMaxMotorTorque False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? GetMotorTorque False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? SetSpringFrequencyHz False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? GetSpringFrequencyHz False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? SetSpringDampingRatio False
zz  b2WheelJoint has parameters in range [1]
z constructorhmm? GetSpringDampingRatio False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2WheelJoint has parameters in range [0]
z constructorhmm? b2WheelJoint True
zz  b2WheelJoint has parameters in range [1]
zz is effectively abstract? b2WheelJoint b2WheelJoint 0
zz precalc b2Draw
z constructorhmm? b2Draw True
zz  b2Draw has parameters in range [0]
z constructorhmm? b2Draw True
zz  b2Draw has parameters in range [0]
z constructorhmm? SetFlags False
zz  b2Draw has parameters in range [1]
z constructorhmm? GetFlags False
zz  b2Draw has parameters in range [0]
z constructorhmm? AppendFlags False
zz  b2Draw has parameters in range [1]
z constructorhmm? ClearFlags False
zz  b2Draw has parameters in range [1]
z constructorhmm? DrawPolygon False
zz  b2Draw has parameters in range [3]
z constructorhmm? DrawSolidPolygon False
zz  b2Draw has parameters in range [3]
z constructorhmm? DrawCircle False
zz  b2Draw has parameters in range [3]
z constructorhmm? DrawSolidCircle False
zz  b2Draw has parameters in range [4]
z constructorhmm? DrawSegment False
zz  b2Draw has parameters in range [3]
z constructorhmm? DrawTransform False
zz  b2Draw has parameters in range [1]
zz is effectively abstract? b2Draw b2Draw 0
zz precalc b2Joint
z constructorhmm? GetType False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetBodyA False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetBodyB False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetAnchorA False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2Joint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2Joint has parameters in range [1]
z constructorhmm? GetNext False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetNext False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetUserData False
zz  b2Joint has parameters in range [0]
z constructorhmm? SetUserData False
zz  b2Joint has parameters in range [1]
z constructorhmm? IsActive False
zz  b2Joint has parameters in range [0]
z constructorhmm? GetCollideConnected False
zz  b2Joint has parameters in range [0]
z constructorhmm? Dump False
zz  b2Joint has parameters in range [0]
zz is effectively abstract? b2Joint b2Joint 0
zz is effectively abstract? b2Joint 1
zz precalc b2GearJoint
z constructorhmm? GetAnchorA False
zz  b2GearJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2GearJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2GearJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2GearJoint has parameters in range [1]
z constructorhmm? GetJoint1 False
zz  b2GearJoint has parameters in range [0]
z constructorhmm? GetJoint2 False
zz  b2GearJoint has parameters in range [0]
z constructorhmm? SetRatio False
zz  b2GearJoint has parameters in range [1]
z constructorhmm? GetRatio False
zz  b2GearJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2GearJoint has parameters in range [0]
z constructorhmm? b2GearJoint True
zz  b2GearJoint has parameters in range [1]
zz is effectively abstract? b2GearJoint b2GearJoint 0
zz precalc b2RayCastCallback
z constructorhmm? b2RayCastCallback True
zz  b2RayCastCallback has parameters in range [0]
z constructorhmm? b2RayCastCallback True
zz  b2RayCastCallback has parameters in range [0]
z constructorhmm? ReportFixture False
zz  b2RayCastCallback has parameters in range [4]
zz is effectively abstract? b2RayCastCallback b2RayCastCallback 0
zz precalc b2DynamicTree
z constructorhmm? b2DynamicTree True
zz  b2DynamicTree has parameters in range [0]
z constructorhmm? b2DynamicTree True
zz  b2DynamicTree has parameters in range [0]
z constructorhmm? CreateProxy False
zz  b2DynamicTree has parameters in range [2]
z constructorhmm? DestroyProxy False
zz  b2DynamicTree has parameters in range [1]
z constructorhmm? MoveProxy False
zz  b2DynamicTree has parameters in range [3]
z constructorhmm? GetUserData False
zz  b2DynamicTree has parameters in range [1]
z constructorhmm? GetFatAABB False
zz  b2DynamicTree has parameters in range [1]
z constructorhmm? Query False
zz  b2DynamicTree has parameters in range [2]
z constructorhmm? RayCast False
zz  b2DynamicTree has parameters in range [2]
z constructorhmm? Validate False
zz  b2DynamicTree has parameters in range [0]
z constructorhmm? GetHeight False
zz  b2DynamicTree has parameters in range [0]
z constructorhmm? GetMaxBalance False
zz  b2DynamicTree has parameters in range [0]
z constructorhmm? GetAreaRatio False
zz  b2DynamicTree has parameters in range [0]
z constructorhmm? RebuildBottomUp False
zz  b2DynamicTree has parameters in range [0]
zz is effectively abstract? b2DynamicTree b2DynamicTree 0
zz precalc b2WeldJoint
z constructorhmm? GetAnchorA False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2WeldJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2WeldJoint has parameters in range [1]
z constructorhmm? GetLocalAnchorA False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorB False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? GetReferenceAngle False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? SetFrequency False
zz  b2WeldJoint has parameters in range [1]
z constructorhmm? GetFrequency False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? SetDampingRatio False
zz  b2WeldJoint has parameters in range [1]
z constructorhmm? GetDampingRatio False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2WeldJoint has parameters in range [0]
z constructorhmm? b2WeldJoint True
zz  b2WeldJoint has parameters in range [1]
zz is effectively abstract? b2WeldJoint b2WeldJoint 0
zz precalc b2RevoluteJoint
z constructorhmm? GetAnchorA False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorA False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorB False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetReferenceAngle False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetJointAngle False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetJointSpeed False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? IsLimitEnabled False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? EnableLimit False
zz  b2RevoluteJoint has parameters in range [1]
z constructorhmm? GetLowerLimit False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetUpperLimit False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? SetLimits False
zz  b2RevoluteJoint has parameters in range [2]
z constructorhmm? IsMotorEnabled False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? EnableMotor False
zz  b2RevoluteJoint has parameters in range [1]
z constructorhmm? SetMotorSpeed False
zz  b2RevoluteJoint has parameters in range [1]
z constructorhmm? GetMotorSpeed False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? SetMaxMotorTorque False
zz  b2RevoluteJoint has parameters in range [1]
z constructorhmm? GetMaxMotorTorque False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2RevoluteJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2RevoluteJoint has parameters in range [1]
z constructorhmm? GetMotorTorque False
zz  b2RevoluteJoint has parameters in range [1]
z constructorhmm? Dump False
zz  b2RevoluteJoint has parameters in range [0]
z constructorhmm? b2RevoluteJoint True
zz  b2RevoluteJoint has parameters in range [1]
zz is effectively abstract? b2RevoluteJoint b2RevoluteJoint 0
zz precalc b2Timer
z constructorhmm? b2Timer True
zz  b2Timer has parameters in range [0]
z constructorhmm? Reset False
zz  b2Timer has parameters in range [0]
z constructorhmm? GetMilliseconds False
zz  b2Timer has parameters in range [0]
zz is effectively abstract? b2Timer b2Timer 0
zz precalc b2ContactListener
z constructorhmm? b2ContactListener True
zz  b2ContactListener has parameters in range [0]
z constructorhmm? b2ContactListener True
zz  b2ContactListener has parameters in range [0]
z constructorhmm? BeginContact False
zz  b2ContactListener has parameters in range [1]
z constructorhmm? EndContact False
zz  b2ContactListener has parameters in range [1]
z constructorhmm? PreSolve False
zz  b2ContactListener has parameters in range [2]
z constructorhmm? PostSolve False
zz  b2ContactListener has parameters in range [2]
zz is effectively abstract? b2ContactListener b2ContactListener 0
zz precalc b2ChainShape
z constructorhmm? b2ChainShape True
zz  b2ChainShape has parameters in range [0]
z constructorhmm? b2ChainShape True
zz  b2ChainShape has parameters in range [0]
z constructorhmm? CreateLoop False
zz  b2ChainShape has parameters in range [2]
z constructorhmm? CreateChain False
zz  b2ChainShape has parameters in range [2]
z constructorhmm? SetPrevVertex False
zz  b2ChainShape has parameters in range [1]
z constructorhmm? SetNextVertex False
zz  b2ChainShape has parameters in range [1]
z constructorhmm? Clone False
zz  b2ChainShape has parameters in range [1]
z constructorhmm? GetChildCount False
zz  b2ChainShape has parameters in range [0]
z constructorhmm? GetChildEdge False
zz  b2ChainShape has parameters in range [2]
z constructorhmm? TestPoint False
zz  b2ChainShape has parameters in range [2]
z constructorhmm? RayCast False
zz  b2ChainShape has parameters in range [4]
z constructorhmm? ComputeAABB False
zz  b2ChainShape has parameters in range [3]
z constructorhmm? ComputeMass False
zz  b2ChainShape has parameters in range [2]
zz is effectively abstract? b2ChainShape b2ChainShape 0
zz precalc b2QueryCallback
z constructorhmm? b2QueryCallback True
zz  b2QueryCallback has parameters in range [0]
z constructorhmm? b2QueryCallback True
zz  b2QueryCallback has parameters in range [0]
z constructorhmm? ReportFixture False
zz  b2QueryCallback has parameters in range [1]
zz is effectively abstract? b2QueryCallback b2QueryCallback 0
zz precalc b2BlockAllocator
z constructorhmm? b2BlockAllocator True
zz  b2BlockAllocator has parameters in range [0]
z constructorhmm? b2BlockAllocator True
zz  b2BlockAllocator has parameters in range [0]
z constructorhmm? Allocate False
zz  b2BlockAllocator has parameters in range [1]
z constructorhmm? Free False
zz  b2BlockAllocator has parameters in range [2]
z constructorhmm? Clear False
zz  b2BlockAllocator has parameters in range [0]
zz is effectively abstract? b2BlockAllocator b2BlockAllocator 0
zz precalc b2RopeJoint
z constructorhmm? GetAnchorA False
zz  b2RopeJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2RopeJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2RopeJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2RopeJoint has parameters in range [1]
z constructorhmm? GetLocalAnchorA False
zz  b2RopeJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorB False
zz  b2RopeJoint has parameters in range [0]
z constructorhmm? SetMaxLength False
zz  b2RopeJoint has parameters in range [1]
z constructorhmm? GetMaxLength False
zz  b2RopeJoint has parameters in range [0]
z constructorhmm? GetLimitState False
zz  b2RopeJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2RopeJoint has parameters in range [0]
z constructorhmm? b2RopeJoint True
zz  b2RopeJoint has parameters in range [1]
zz is effectively abstract? b2RopeJoint b2RopeJoint 0
zz precalc b2PolygonShape
z constructorhmm? b2PolygonShape True
zz  b2PolygonShape has parameters in range [0]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? Clone False
zz  b2PolygonShape has parameters in range [1]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? GetChildCount False
zz  b2PolygonShape has parameters in range [0]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? Set False
zz  b2PolygonShape has parameters in range [2]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? SetAsBox False
zz  b2PolygonShape has parameters in range [2]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? SetAsBox False
zz  b2PolygonShape has parameters in range [4]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? TestPoint False
zz  b2PolygonShape has parameters in range [2]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? RayCast False
zz  b2PolygonShape has parameters in range [4]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? ComputeAABB False
zz  b2PolygonShape has parameters in range [3]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? ComputeMass False
zz  b2PolygonShape has parameters in range [2]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? GetVertexCount False
zz  b2PolygonShape has parameters in range [0]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
z constructorhmm? GetVertex False
zz  b2PolygonShape has parameters in range [1]
zz warning: ignoring getter/setter for array b2PolygonShape::m_vertices
zz warning: ignoring getter/setter for array b2PolygonShape::m_normals
zz is effectively abstract? b2PolygonShape b2PolygonShape 0
zz precalc b2EdgeShape
z constructorhmm? b2EdgeShape True
zz  b2EdgeShape has parameters in range [0]
z constructorhmm? Set False
zz  b2EdgeShape has parameters in range [2]
z constructorhmm? Clone False
zz  b2EdgeShape has parameters in range [1]
z constructorhmm? GetChildCount False
zz  b2EdgeShape has parameters in range [0]
z constructorhmm? TestPoint False
zz  b2EdgeShape has parameters in range [2]
z constructorhmm? RayCast False
zz  b2EdgeShape has parameters in range [4]
z constructorhmm? ComputeAABB False
zz  b2EdgeShape has parameters in range [3]
z constructorhmm? ComputeMass False
zz  b2EdgeShape has parameters in range [2]
zz is effectively abstract? b2EdgeShape b2EdgeShape 0
zz precalc b2Contact
z constructorhmm? GetManifold False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetManifold False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetWorldManifold False
zz  b2Contact has parameters in range [1]
z constructorhmm? IsTouching False
zz  b2Contact has parameters in range [0]
z constructorhmm? SetEnabled False
zz  b2Contact has parameters in range [1]
z constructorhmm? IsEnabled False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetNext False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetNext False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetFixtureA False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetFixtureA False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetChildIndexA False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetFixtureB False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetFixtureB False
zz  b2Contact has parameters in range [0]
z constructorhmm? GetChildIndexB False
zz  b2Contact has parameters in range [0]
z constructorhmm? SetFriction False
zz  b2Contact has parameters in range [1]
z constructorhmm? GetFriction False
zz  b2Contact has parameters in range [0]
z constructorhmm? ResetFriction False
zz  b2Contact has parameters in range [0]
z constructorhmm? SetRestitution False
zz  b2Contact has parameters in range [1]
z constructorhmm? GetRestitution False
zz  b2Contact has parameters in range [0]
z constructorhmm? ResetRestitution False
zz  b2Contact has parameters in range [0]
z constructorhmm? Evaluate False
zz  b2Contact has parameters in range [3]
zz is effectively abstract? b2Contact b2Contact 0
zz is effectively abstract? b2Contact 1
zz precalc b2Shape
z constructorhmm? b2Shape True
zz  b2Shape has parameters in range [0]
z constructorhmm? Clone False
zz  b2Shape has parameters in range [1]
z constructorhmm? GetType False
zz  b2Shape has parameters in range [0]
z constructorhmm? GetChildCount False
zz  b2Shape has parameters in range [0]
z constructorhmm? TestPoint False
zz  b2Shape has parameters in range [2]
z constructorhmm? RayCast False
zz  b2Shape has parameters in range [4]
z constructorhmm? ComputeAABB False
zz  b2Shape has parameters in range [3]
z constructorhmm? ComputeMass False
zz  b2Shape has parameters in range [2]
zz is effectively abstract? b2Shape b2Shape 0
zz is effectively abstract? b2Shape 1
zz precalc b2Body
z constructorhmm? CreateFixture False
zz  b2Body has parameters in range [1]
z constructorhmm? CreateFixture False
zz  b2Body has parameters in range [2]
z constructorhmm? DestroyFixture False
zz  b2Body has parameters in range [1]
z constructorhmm? SetTransform False
zz  b2Body has parameters in range [2]
z constructorhmm? GetTransform False
zz  b2Body has parameters in range [0]
z constructorhmm? GetPosition False
zz  b2Body has parameters in range [0]
z constructorhmm? GetAngle False
zz  b2Body has parameters in range [0]
z constructorhmm? GetWorldCenter False
zz  b2Body has parameters in range [0]
z constructorhmm? GetLocalCenter False
zz  b2Body has parameters in range [0]
z constructorhmm? SetLinearVelocity False
zz  b2Body has parameters in range [1]
z constructorhmm? GetLinearVelocity False
zz  b2Body has parameters in range [0]
z constructorhmm? SetAngularVelocity False
zz  b2Body has parameters in range [1]
z constructorhmm? GetAngularVelocity False
zz  b2Body has parameters in range [0]
z constructorhmm? ApplyForce False
zz  b2Body has parameters in range [2]
z constructorhmm? ApplyForceToCenter False
zz  b2Body has parameters in range [1]
z constructorhmm? ApplyTorque False
zz  b2Body has parameters in range [1]
z constructorhmm? ApplyLinearImpulse False
zz  b2Body has parameters in range [2]
z constructorhmm? ApplyAngularImpulse False
zz  b2Body has parameters in range [1]
z constructorhmm? GetMass False
zz  b2Body has parameters in range [0]
z constructorhmm? GetInertia False
zz  b2Body has parameters in range [0]
z constructorhmm? GetMassData False
zz  b2Body has parameters in range [1]
z constructorhmm? SetMassData False
zz  b2Body has parameters in range [1]
z constructorhmm? ResetMassData False
zz  b2Body has parameters in range [0]
z constructorhmm? GetWorldPoint False
zz  b2Body has parameters in range [1]
z constructorhmm? GetWorldVector False
zz  b2Body has parameters in range [1]
z constructorhmm? GetLocalPoint False
zz  b2Body has parameters in range [1]
z constructorhmm? GetLocalVector False
zz  b2Body has parameters in range [1]
z constructorhmm? GetLinearVelocityFromWorldPoint False
zz  b2Body has parameters in range [1]
z constructorhmm? GetLinearVelocityFromLocalPoint False
zz  b2Body has parameters in range [1]
z constructorhmm? GetLinearDamping False
zz  b2Body has parameters in range [0]
z constructorhmm? SetLinearDamping False
zz  b2Body has parameters in range [1]
z constructorhmm? GetAngularDamping False
zz  b2Body has parameters in range [0]
z constructorhmm? SetAngularDamping False
zz  b2Body has parameters in range [1]
z constructorhmm? GetGravityScale False
zz  b2Body has parameters in range [0]
z constructorhmm? SetGravityScale False
zz  b2Body has parameters in range [1]
z constructorhmm? SetType False
zz  b2Body has parameters in range [1]
z constructorhmm? GetType False
zz  b2Body has parameters in range [0]
z constructorhmm? SetBullet False
zz  b2Body has parameters in range [1]
z constructorhmm? IsBullet False
zz  b2Body has parameters in range [0]
z constructorhmm? SetSleepingAllowed False
zz  b2Body has parameters in range [1]
z constructorhmm? IsSleepingAllowed False
zz  b2Body has parameters in range [0]
z constructorhmm? SetAwake False
zz  b2Body has parameters in range [1]
z constructorhmm? IsAwake False
zz  b2Body has parameters in range [0]
z constructorhmm? SetActive False
zz  b2Body has parameters in range [1]
z constructorhmm? IsActive False
zz  b2Body has parameters in range [0]
z constructorhmm? SetFixedRotation False
zz  b2Body has parameters in range [1]
z constructorhmm? IsFixedRotation False
zz  b2Body has parameters in range [0]
z constructorhmm? GetFixtureList False
zz  b2Body has parameters in range [0]
z constructorhmm? GetFixtureList False
zz  b2Body has parameters in range [0]
z constructorhmm? GetJointList False
zz  b2Body has parameters in range [0]
z constructorhmm? GetJointList False
zz  b2Body has parameters in range [0]
z constructorhmm? GetContactList False
zz  b2Body has parameters in range [0]
z constructorhmm? GetContactList False
zz  b2Body has parameters in range [0]
z constructorhmm? GetNext False
zz  b2Body has parameters in range [0]
z constructorhmm? GetNext False
zz  b2Body has parameters in range [0]
z constructorhmm? GetUserData False
zz  b2Body has parameters in range [0]
z constructorhmm? SetUserData False
zz  b2Body has parameters in range [1]
z constructorhmm? GetWorld False
zz  b2Body has parameters in range [0]
z constructorhmm? GetWorld False
zz  b2Body has parameters in range [0]
z constructorhmm? Dump False
zz  b2Body has parameters in range [0]
zz is effectively abstract? b2Body b2Body 0
zz is effectively abstract? b2Body 1
zz is effectively abstract? b2Body 2
zz is effectively abstract? b2Body 3
zz is effectively abstract? b2Body 2
zz is effectively abstract? b2Body 2
zz is effectively abstract? b2Body 2
zz is effectively abstract? b2Body 2
zz is effectively abstract? b2Body 2
zz precalc b2GrowableStack
z constructorhmm? b2GrowableStack True
zz  b2GrowableStack has parameters in range [0]
z constructorhmm? b2GrowableStack True
zz  b2GrowableStack has parameters in range [0]
z constructorhmm? Push False
zz  b2GrowableStack has parameters in range [1]
z constructorhmm? Pop False
zz  b2GrowableStack has parameters in range [0]
z constructorhmm? GetCount False
zz  b2GrowableStack has parameters in range [0]
zz is effectively abstract? b2GrowableStack b2GrowableStack 0
zz precalc b2FrictionJoint
z constructorhmm? GetAnchorA False
zz  b2FrictionJoint has parameters in range [0]
z constructorhmm? GetAnchorB False
zz  b2FrictionJoint has parameters in range [0]
z constructorhmm? GetReactionForce False
zz  b2FrictionJoint has parameters in range [1]
z constructorhmm? GetReactionTorque False
zz  b2FrictionJoint has parameters in range [1]
z constructorhmm? GetLocalAnchorA False
zz  b2FrictionJoint has parameters in range [0]
z constructorhmm? GetLocalAnchorB False
zz  b2FrictionJoint has parameters in range [0]
z constructorhmm? SetMaxForce False
zz  b2FrictionJoint has parameters in range [1]
z constructorhmm? GetMaxForce False
zz  b2FrictionJoint has parameters in range [0]
z constructorhmm? SetMaxTorque False
zz  b2FrictionJoint has parameters in range [1]
z constructorhmm? GetMaxTorque False
zz  b2FrictionJoint has parameters in range [0]
z constructorhmm? Dump False
zz  b2FrictionJoint has parameters in range [0]
z constructorhmm? b2FrictionJoint True
zz  b2FrictionJoint has parameters in range [1]
zz is effectively abstract? b2FrictionJoint b2FrictionJoint 0
zz precalc b2StackAllocator
z constructorhmm? b2StackAllocator True
zz  b2StackAllocator has parameters in range [0]
z constructorhmm? b2StackAllocator True
zz  b2StackAllocator has parameters in range [0]
z constructorhmm? Allocate False
zz  b2StackAllocator has parameters in range [1]
z constructorhmm? Free False
zz  b2StackAllocator has parameters in range [1]
z constructorhmm? GetMaxAllocation False
zz  b2StackAllocator has parameters in range [0]
zz is effectively abstract? b2StackAllocator b2StackAllocator 0
zz precalc b2DestructionListener
z constructorhmm? b2DestructionListener True
zz  b2DestructionListener has parameters in range [0]
z constructorhmm? b2DestructionListener True
zz  b2DestructionListener has parameters in range [0]
z constructorhmm? SayGoodbye False
zz  b2DestructionListener has parameters in range [1]
z constructorhmm? SayGoodbye False
zz  b2DestructionListener has parameters in range [1]
zz is effectively abstract? b2DestructionListener b2DestructionListener 0
zz precalc b2ContactFilter
z constructorhmm? b2ContactFilter True
zz  b2ContactFilter has parameters in range [0]
z constructorhmm? ShouldCollide False
zz  b2ContactFilter has parameters in range [2]
zz is effectively abstract? b2ContactFilter b2ContactFilter 0
zz is effectively abstract? b2ContactFilter 1
zz precalc _exception
zz is effectively abstract? _exception _exception 0
zz precalc b2TreeNode
z constructorhmm? IsLeaf False
zz  b2TreeNode has parameters in range [0]
zz is effectively abstract? b2TreeNode b2TreeNode 0
zz precalc b2Mat33
z constructorhmm? b2Mat33 True
zz  b2Mat33 has parameters in range [0]
z constructorhmm? b2Mat33 True
zz  b2Mat33 has parameters in range [3]
z constructorhmm? SetZero False
zz  b2Mat33 has parameters in range [0]
z constructorhmm? Solve33 False
zz  b2Mat33 has parameters in range [1]
z constructorhmm? Solve22 False
zz  b2Mat33 has parameters in range [1]
z constructorhmm? GetInverse22 False
zz  b2Mat33 has parameters in range [1]
z constructorhmm? GetSymInverse33 False
zz  b2Mat33 has parameters in range [1]
zz is effectively abstract? b2Mat33 b2Mat33 0
zz precalc b2Position
zz is effectively abstract? b2Position b2Position 0
zz precalc b2TOIOutput
zz is effectively abstract? b2TOIOutput b2TOIOutput 0
zz precalc b2Filter
z constructorhmm? b2Filter True
zz  b2Filter has parameters in range [0]
zz is effectively abstract? b2Filter b2Filter 0
zz precalc b2StackEntry
zz is effectively abstract? b2StackEntry b2StackEntry 0
zz precalc b2RopeJointDef
z constructorhmm? b2RopeJointDef True
zz  b2RopeJointDef has parameters in range [0]
z constructorhmm? set_bodyA False
zz  b2RopeJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2RopeJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2RopeJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2RopeJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2RopeJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2RopeJointDef has parameters in range [1]
zz is effectively abstract? b2RopeJointDef b2RopeJointDef 0
zz precalc b2DistanceInput
zz is effectively abstract? b2DistanceInput b2DistanceInput 0
zz precalc b2FrictionJointDef
z constructorhmm? b2FrictionJointDef True
zz  b2FrictionJointDef has parameters in range [0]
z constructorhmm? Initialize False
zz  b2FrictionJointDef has parameters in range [3]
z constructorhmm? set_bodyA False
zz  b2FrictionJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2FrictionJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2FrictionJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2FrictionJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2FrictionJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2FrictionJointDef has parameters in range [1]
zz is effectively abstract? b2FrictionJointDef b2FrictionJointDef 0
zz precalc b2Profile
zz is effectively abstract? b2Profile b2Profile 0
zz precalc b2BodyDef
z constructorhmm? b2BodyDef True
zz  b2BodyDef has parameters in range [0]
zz is effectively abstract? b2BodyDef b2BodyDef 0
zz precalc b2Vec2
z constructorhmm? b2Vec2 True
zz  b2Vec2 has parameters in range [0]
z constructorhmm? b2Vec2 True
zz  b2Vec2 has parameters in range [2]
z constructorhmm? SetZero False
zz  b2Vec2 has parameters in range [0]
z constructorhmm? Set False
zz  b2Vec2 has parameters in range [2]
z constructorhmm? __operator____sub__ False
zz  b2Vec2 has parameters in range [0]
zz subsubsub  b2Vec2 __operator____sub__ []
z constructorhmm? __operator____iadd__ False
zz  b2Vec2 has parameters in range [1]
z constructorhmm? __operator____isub__ False
zz  b2Vec2 has parameters in range [1]
zz subsubsub  b2Vec2 __operator____isub__ [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec2 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec2', 'raw_type': '::b2Vec2', 'name': 'v', 'method': {'returns_text': 'void', 'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': '-=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [[...]], 'class': None, 'returns_reference': False, 'name': '__operator____isub__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator - = ( const b2Vec2 & v ) {', 'inline': False, 'friend': False, 'returns_class': False}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec2']}]
z constructorhmm? __operator____imult__ False
zz  b2Vec2 has parameters in range [1]
z constructorhmm? Length False
zz  b2Vec2 has parameters in range [0]
z constructorhmm? LengthSquared False
zz  b2Vec2 has parameters in range [0]
z constructorhmm? Normalize False
zz  b2Vec2 has parameters in range [0]
z constructorhmm? IsValid False
zz  b2Vec2 has parameters in range [0]
z constructorhmm? Skew False
zz  b2Vec2 has parameters in range [0]
zz is effectively abstract? b2Vec2 b2Vec2 0
zz precalc b2Vec3
z constructorhmm? b2Vec3 True
zz  b2Vec3 has parameters in range [0]
z constructorhmm? b2Vec3 True
zz  b2Vec3 has parameters in range [3]
z constructorhmm? SetZero False
zz  b2Vec3 has parameters in range [0]
z constructorhmm? Set False
zz  b2Vec3 has parameters in range [3]
z constructorhmm? __operator____sub__ False
zz  b2Vec3 has parameters in range [0]
zz subsubsub  b2Vec3 __operator____sub__ []
z constructorhmm? __operator____iadd__ False
zz  b2Vec3 has parameters in range [1]
z constructorhmm? __operator____isub__ False
zz  b2Vec3 has parameters in range [1]
zz subsubsub  b2Vec3 __operator____isub__ [{'typedef': None, 'unresolved': True, 'constant': True, 'parent': None, 'reference': 1, 'type': 'const b2Vec3 &', 'ctypes_type': 'ctypes.c_void_p', 'namespace': '', 'struct': 'b2Vec3', 'raw_type': '::b2Vec3', 'name': 'v', 'method': {'returns_text': 'void', 'unresolved_parameters': True, 'defined': True, 'namespace': '', 'operator': '-=', 'static': False, 'returns_fundamental': True, 'extern': False, 'returns_pointer': 0, 'parameters': [[...]], 'class': None, 'returns_reference': False, 'name': '__operator____isub__', 'pure_virtual': False, 'explicit': False, 'virtual': False, 'destructor': False, 'returns': 'void', 'template': False, 'constructor': False, 'debug': 'void operator - = ( const b2Vec3 & v ) {', 'inline': False, 'friend': False, 'returns_class': False}, 'static': False, 'fundamental': 0, 'mutable': False, 'typedefs': 0, 'pointer': 0, 'class': 0, 'aliases': ['b2Vec3']}]
z constructorhmm? __operator____imult__ False
zz  b2Vec3 has parameters in range [1]
zz is effectively abstract? b2Vec3 b2Vec3 0
zz precalc b2AABB
z constructorhmm? b2AABB True
zz  b2AABB has parameters in range [0]
z constructorhmm? IsValid False
zz  b2AABB has parameters in range [0]
z constructorhmm? GetCenter False
zz  b2AABB has parameters in range [0]
z constructorhmm? GetExtents False
zz  b2AABB has parameters in range [0]
z constructorhmm? GetPerimeter False
zz  b2AABB has parameters in range [0]
z constructorhmm? Combine False
zz  b2AABB has parameters in range [1]
z constructorhmm? Combine False
zz  b2AABB has parameters in range [2]
z constructorhmm? Contains False
zz  b2AABB has parameters in range [1]
z constructorhmm? RayCast False
zz  b2AABB has parameters in range [2]
zz is effectively abstract? b2AABB b2AABB 0
zz precalc b2Pair
zz is effectively abstract? b2Pair b2Pair 0
zz precalc b2TimeStep
zz is effectively abstract? b2TimeStep b2TimeStep 0
zz precalc b2FixtureDef
z constructorhmm? b2FixtureDef True
zz  b2FixtureDef has parameters in range [0]
zz is effectively abstract? b2FixtureDef b2FixtureDef 0
zz precalc b2Version
zz is effectively abstract? b2Version b2Version 0
zz precalc b2Manifold
zz is effectively abstract? b2Manifold b2Manifold 0
zz precalc b2WorldManifold
z constructorhmm? Initialize False
zz  b2WorldManifold has parameters in range [5]
zz warning: ignoring getter/setter for array b2WorldManifold::points
zz is effectively abstract? b2WorldManifold b2WorldManifold 0
zz precalc b2PrismaticJointDef
z constructorhmm? b2PrismaticJointDef True
zz  b2PrismaticJointDef has parameters in range [0]
z constructorhmm? Initialize False
zz  b2PrismaticJointDef has parameters in range [4]
z constructorhmm? set_bodyA False
zz  b2PrismaticJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2PrismaticJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2PrismaticJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2PrismaticJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2PrismaticJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2PrismaticJointDef has parameters in range [1]
zz is effectively abstract? b2PrismaticJointDef b2PrismaticJointDef 0
zz precalc b2RayCastOutput
zz is effectively abstract? b2RayCastOutput b2RayCastOutput 0
zz precalc b2SimplexCache
zz is effectively abstract? b2SimplexCache b2SimplexCache 0
zz precalc b2ContactFeature
zz is effectively abstract? b2ContactFeature b2ContactFeature 0
zz precalc b2WheelJointDef
z constructorhmm? b2WheelJointDef True
zz  b2WheelJointDef has parameters in range [0]
z constructorhmm? Initialize False
zz  b2WheelJointDef has parameters in range [4]
z constructorhmm? set_bodyA False
zz  b2WheelJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2WheelJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2WheelJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2WheelJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2WheelJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2WheelJointDef has parameters in range [1]
zz is effectively abstract? b2WheelJointDef b2WheelJointDef 0
zz precalc b2MassData
zz is effectively abstract? b2MassData b2MassData 0
zz precalc b2RevoluteJointDef
z constructorhmm? b2RevoluteJointDef True
zz  b2RevoluteJointDef has parameters in range [0]
z constructorhmm? Initialize False
zz  b2RevoluteJointDef has parameters in range [3]
z constructorhmm? set_bodyA False
zz  b2RevoluteJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2RevoluteJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2RevoluteJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2RevoluteJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2RevoluteJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2RevoluteJointDef has parameters in range [1]
zz is effectively abstract? b2RevoluteJointDef b2RevoluteJointDef 0
zz precalc b2ContactImpulse
zz is effectively abstract? b2ContactImpulse b2ContactImpulse 0
zz precalc b2JointEdge
zz is effectively abstract? b2JointEdge b2JointEdge 0
zz precalc b2PulleyJointDef
z constructorhmm? b2PulleyJointDef True
zz  b2PulleyJointDef has parameters in range [0]
z constructorhmm? Initialize False
zz  b2PulleyJointDef has parameters in range [7]
z constructorhmm? set_bodyA False
zz  b2PulleyJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2PulleyJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2PulleyJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2PulleyJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2PulleyJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2PulleyJointDef has parameters in range [1]
zz is effectively abstract? b2PulleyJointDef b2PulleyJointDef 0
zz precalc b2Mat22
z constructorhmm? b2Mat22 True
zz  b2Mat22 has parameters in range [0]
z constructorhmm? b2Mat22 True
zz  b2Mat22 has parameters in range [2]
z constructorhmm? b2Mat22 True
zz  b2Mat22 has parameters in range [4]
z constructorhmm? Set False
zz  b2Mat22 has parameters in range [2]
z constructorhmm? SetIdentity False
zz  b2Mat22 has parameters in range [0]
z constructorhmm? SetZero False
zz  b2Mat22 has parameters in range [0]
z constructorhmm? GetInverse False
zz  b2Mat22 has parameters in range [0]
z constructorhmm? Solve False
zz  b2Mat22 has parameters in range [1]
zz is effectively abstract? b2Mat22 b2Mat22 0
zz precalc b2ManifoldPoint
zz is effectively abstract? b2ManifoldPoint b2ManifoldPoint 0
zz precalc b2JointDef
z constructorhmm? b2JointDef True
zz  b2JointDef has parameters in range [0]
zz is effectively abstract? b2JointDef b2JointDef 0
zz precalc b2SolverData
zz is effectively abstract? b2SolverData b2SolverData 0
zz precalc b2Transform
z constructorhmm? b2Transform True
zz  b2Transform has parameters in range [0]
z constructorhmm? b2Transform True
zz  b2Transform has parameters in range [2]
z constructorhmm? SetIdentity False
zz  b2Transform has parameters in range [0]
z constructorhmm? Set False
zz  b2Transform has parameters in range [2]
zz is effectively abstract? b2Transform b2Transform 0
zz precalc b2Color
z constructorhmm? b2Color True
zz  b2Color has parameters in range [0]
z constructorhmm? b2Color True
zz  b2Color has parameters in range [3]
z constructorhmm? Set False
zz  b2Color has parameters in range [3]
zz is effectively abstract? b2Color b2Color 0
zz precalc b2Velocity
zz is effectively abstract? b2Velocity b2Velocity 0
zz precalc b2RayCastInput
zz is effectively abstract? b2RayCastInput b2RayCastInput 0
zz precalc b2Rot
z constructorhmm? b2Rot True
zz  b2Rot has parameters in range [0]
z constructorhmm? b2Rot True
zz  b2Rot has parameters in range [1]
z constructorhmm? Set False
zz  b2Rot has parameters in range [1]
z constructorhmm? SetIdentity False
zz  b2Rot has parameters in range [0]
z constructorhmm? GetAngle False
zz  b2Rot has parameters in range [0]
z constructorhmm? GetXAxis False
zz  b2Rot has parameters in range [0]
z constructorhmm? GetYAxis False
zz  b2Rot has parameters in range [0]
zz is effectively abstract? b2Rot b2Rot 0
zz precalc b2TOIInput
zz is effectively abstract? b2TOIInput b2TOIInput 0
zz precalc b2WeldJointDef
z constructorhmm? b2WeldJointDef True
zz  b2WeldJointDef has parameters in range [0]
z constructorhmm? Initialize False
zz  b2WeldJointDef has parameters in range [3]
z constructorhmm? set_bodyA False
zz  b2WeldJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2WeldJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2WeldJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2WeldJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2WeldJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2WeldJointDef has parameters in range [1]
zz is effectively abstract? b2WeldJointDef b2WeldJointDef 0
zz precalc b2ClipVertex
zz is effectively abstract? b2ClipVertex b2ClipVertex 0
zz precalc b2FixtureProxy
zz is effectively abstract? b2FixtureProxy b2FixtureProxy 0
zz precalc b2MouseJointDef
z constructorhmm? b2MouseJointDef True
zz  b2MouseJointDef has parameters in range [0]
z constructorhmm? set_bodyA False
zz  b2MouseJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2MouseJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2MouseJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2MouseJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2MouseJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2MouseJointDef has parameters in range [1]
zz is effectively abstract? b2MouseJointDef b2MouseJointDef 0
zz precalc _complex
zz is effectively abstract? _complex _complex 0
zz precalc b2DistanceOutput
zz is effectively abstract? b2DistanceOutput b2DistanceOutput 0
zz precalc b2DistanceProxy
z constructorhmm? b2DistanceProxy True
zz  b2DistanceProxy has parameters in range [0]
zz warning: ignoring getter/setter for array b2DistanceProxy::m_buffer
z constructorhmm? Set False
zz  b2DistanceProxy has parameters in range [2]
zz warning: ignoring getter/setter for array b2DistanceProxy::m_buffer
z constructorhmm? GetSupport False
zz  b2DistanceProxy has parameters in range [1]
zz warning: ignoring getter/setter for array b2DistanceProxy::m_buffer
z constructorhmm? GetSupportVertex False
zz  b2DistanceProxy has parameters in range [1]
zz warning: ignoring getter/setter for array b2DistanceProxy::m_buffer
z constructorhmm? GetVertexCount False
zz  b2DistanceProxy has parameters in range [0]
zz warning: ignoring getter/setter for array b2DistanceProxy::m_buffer
z constructorhmm? GetVertex False
zz  b2DistanceProxy has parameters in range [1]
zz warning: ignoring getter/setter for array b2DistanceProxy::m_buffer
zz is effectively abstract? b2DistanceProxy b2DistanceProxy 0
zz precalc b2ContactRegister
zz is effectively abstract? b2ContactRegister b2ContactRegister 0
zz precalc b2DistanceJointDef
z constructorhmm? b2DistanceJointDef True
zz  b2DistanceJointDef has parameters in range [0]
z constructorhmm? Initialize False
zz  b2DistanceJointDef has parameters in range [4]
z constructorhmm? set_bodyA False
zz  b2DistanceJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2DistanceJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2DistanceJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2DistanceJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2DistanceJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2DistanceJointDef has parameters in range [1]
zz is effectively abstract? b2DistanceJointDef b2DistanceJointDef 0
zz precalc b2GearJointDef
z constructorhmm? b2GearJointDef True
zz  b2GearJointDef has parameters in range [0]
z constructorhmm? set_bodyA False
zz  b2GearJointDef has parameters in range [1]
z constructorhmm? set_bodyB False
zz  b2GearJointDef has parameters in range [1]
z constructorhmm? set_collideConnected False
zz  b2GearJointDef has parameters in range [1]
z constructorhmm? get_bodyA False
zz  b2GearJointDef has parameters in range [1]
z constructorhmm? get_bodyB False
zz  b2GearJointDef has parameters in range [1]
z constructorhmm? get_collideConnected False
zz  b2GearJointDef has parameters in range [1]
zz is effectively abstract? b2GearJointDef b2GearJointDef 0
zz precalc b2Jacobian
zz is effectively abstract? b2Jacobian b2Jacobian 0
zz precalc b2ContactEdge
z constructorhmm? b2ContactEdge True
zz  b2ContactEdge has parameters in range [0]
zz is effectively abstract? b2ContactEdge b2ContactEdge 0
zz precalc b2Sweep
z constructorhmm? GetTransform False
zz  b2Sweep has parameters in range [2]
z constructorhmm? Advance False
zz  b2Sweep has parameters in range [1]
z constructorhmm? Normalize False
zz  b2Sweep has parameters in range [0]
zz is effectively abstract? b2Sweep b2Sweep 0
b2ContactManager exploring b2ContactManager :: b2ContactManager
b2ContactManager exploring b2ContactManager :: AddPair
b2ContactManager exploring b2ContactManager :: FindNewContacts
b2ContactManager exploring b2ContactManager :: Destroy
b2ContactManager exploring b2ContactManager :: Collide
b2ContactManager exploring b2ContactManager :: get_m_broadPhase
b2ContactManager exploring b2ContactManager :: set_m_broadPhase
b2ContactManager exploring b2ContactManager :: get_m_contactList
b2ContactManager exploring b2ContactManager :: set_m_contactList
b2ContactManager exploring b2ContactManager :: get_m_contactCount
b2ContactManager exploring b2ContactManager :: set_m_contactCount
b2ContactManager exploring b2ContactManager :: get_m_contactFilter
b2ContactManager exploring b2ContactManager :: set_m_contactFilter
b2ContactManager exploring b2ContactManager :: get_m_contactListener
b2ContactManager exploring b2ContactManager :: set_m_contactListener
b2ContactManager exploring b2ContactManager :: get_m_allocator
b2ContactManager exploring b2ContactManager :: set_m_allocator
b2ContactManager exploring b2ContactManager :: get_m_broadPhase
Warning: Cannot mix in overloaded functions get_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_broadPhase
Warning: Cannot mix in overloaded functions set_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactList
Warning: Cannot mix in overloaded functions get_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactList
Warning: Cannot mix in overloaded functions set_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactCount
Warning: Cannot mix in overloaded functions get_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactCount
Warning: Cannot mix in overloaded functions set_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactFilter
Warning: Cannot mix in overloaded functions get_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactFilter
Warning: Cannot mix in overloaded functions set_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactListener
Warning: Cannot mix in overloaded functions get_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactListener
Warning: Cannot mix in overloaded functions set_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_allocator
Warning: Cannot mix in overloaded functions get_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_allocator
Warning: Cannot mix in overloaded functions set_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_broadPhase
Warning: Cannot mix in overloaded functions get_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_broadPhase
Warning: Cannot mix in overloaded functions set_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactList
Warning: Cannot mix in overloaded functions get_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactList
Warning: Cannot mix in overloaded functions set_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactCount
Warning: Cannot mix in overloaded functions get_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactCount
Warning: Cannot mix in overloaded functions set_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactFilter
Warning: Cannot mix in overloaded functions get_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactFilter
Warning: Cannot mix in overloaded functions set_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactListener
Warning: Cannot mix in overloaded functions get_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactListener
Warning: Cannot mix in overloaded functions set_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_allocator
Warning: Cannot mix in overloaded functions get_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_allocator
Warning: Cannot mix in overloaded functions set_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_broadPhase
Warning: Cannot mix in overloaded functions get_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_broadPhase
Warning: Cannot mix in overloaded functions set_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactList
Warning: Cannot mix in overloaded functions get_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactList
Warning: Cannot mix in overloaded functions set_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactCount
Warning: Cannot mix in overloaded functions get_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactCount
Warning: Cannot mix in overloaded functions set_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactFilter
Warning: Cannot mix in overloaded functions get_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactFilter
Warning: Cannot mix in overloaded functions set_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactListener
Warning: Cannot mix in overloaded functions get_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactListener
Warning: Cannot mix in overloaded functions set_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_allocator
Warning: Cannot mix in overloaded functions get_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_allocator
Warning: Cannot mix in overloaded functions set_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_broadPhase
Warning: Cannot mix in overloaded functions get_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_broadPhase
Warning: Cannot mix in overloaded functions set_m_broadPhase in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactList
Warning: Cannot mix in overloaded functions get_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactList
Warning: Cannot mix in overloaded functions set_m_contactList in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactCount
Warning: Cannot mix in overloaded functions get_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactCount
Warning: Cannot mix in overloaded functions set_m_contactCount in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactFilter
Warning: Cannot mix in overloaded functions get_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactFilter
Warning: Cannot mix in overloaded functions set_m_contactFilter in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_contactListener
Warning: Cannot mix in overloaded functions get_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_contactListener
Warning: Cannot mix in overloaded functions set_m_contactListener in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: get_m_allocator
Warning: Cannot mix in overloaded functions get_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: set_m_allocator
Warning: Cannot mix in overloaded functions set_m_allocator in class b2ContactManager , skipping
b2ContactManager exploring b2ContactManager :: __destroy__
b2DistanceJoint exploring b2DistanceJoint :: GetAnchorA
b2DistanceJoint exploring b2DistanceJoint :: GetAnchorB
b2DistanceJoint exploring b2DistanceJoint :: GetReactionForce
b2DistanceJoint exploring b2DistanceJoint :: GetReactionTorque
b2DistanceJoint exploring b2DistanceJoint :: GetLocalAnchorA
b2DistanceJoint exploring b2DistanceJoint :: GetLocalAnchorB
b2DistanceJoint exploring b2DistanceJoint :: SetLength
b2DistanceJoint exploring b2DistanceJoint :: GetLength
b2DistanceJoint exploring b2DistanceJoint :: SetFrequency
b2DistanceJoint exploring b2DistanceJoint :: GetFrequency
b2DistanceJoint exploring b2DistanceJoint :: SetDampingRatio
b2DistanceJoint exploring b2DistanceJoint :: GetDampingRatio
b2DistanceJoint exploring b2DistanceJoint :: Dump
b2DistanceJoint exploring b2DistanceJoint :: b2DistanceJoint
b2DistanceJoint exploring b2DistanceJoint :: __destroy__
b2DistanceJoint exploring b2Joint :: GetType
b2DistanceJoint exploring b2Joint :: GetBodyA
b2DistanceJoint exploring b2Joint :: GetBodyB
b2DistanceJoint exploring b2Joint :: GetAnchorA
b2DistanceJoint exploring b2Joint :: GetAnchorB
b2DistanceJoint exploring b2Joint :: GetReactionForce
b2DistanceJoint exploring b2Joint :: GetReactionTorque
b2DistanceJoint exploring b2Joint :: GetNext
b2DistanceJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2DistanceJoint , skipping
b2DistanceJoint exploring b2Joint :: GetUserData
b2DistanceJoint exploring b2Joint :: SetUserData
b2DistanceJoint exploring b2Joint :: IsActive
b2DistanceJoint exploring b2Joint :: GetCollideConnected
b2DistanceJoint exploring b2Joint :: Dump
b2Fixture exploring b2Fixture :: GetType
b2Fixture exploring b2Fixture :: GetShape
b2Fixture exploring b2Fixture :: GetShape
Warning: Cannot mix in overloaded functions GetShape in class b2Fixture , skipping
b2Fixture exploring b2Fixture :: SetSensor
b2Fixture exploring b2Fixture :: IsSensor
b2Fixture exploring b2Fixture :: SetFilterData
b2Fixture exploring b2Fixture :: GetFilterData
b2Fixture exploring b2Fixture :: Refilter
b2Fixture exploring b2Fixture :: GetBody
b2Fixture exploring b2Fixture :: GetBody
Warning: Cannot mix in overloaded functions GetBody in class b2Fixture , skipping
b2Fixture exploring b2Fixture :: GetNext
b2Fixture exploring b2Fixture :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2Fixture , skipping
b2Fixture exploring b2Fixture :: GetUserData
b2Fixture exploring b2Fixture :: SetUserData
b2Fixture exploring b2Fixture :: TestPoint
b2Fixture exploring b2Fixture :: RayCast
b2Fixture exploring b2Fixture :: GetMassData
b2Fixture exploring b2Fixture :: SetDensity
b2Fixture exploring b2Fixture :: GetDensity
b2Fixture exploring b2Fixture :: GetFriction
b2Fixture exploring b2Fixture :: SetFriction
b2Fixture exploring b2Fixture :: GetRestitution
b2Fixture exploring b2Fixture :: SetRestitution
b2Fixture exploring b2Fixture :: GetAABB
b2Fixture exploring b2Fixture :: Dump
b2Fixture exploring b2Fixture :: b2Fixture
b2Fixture exploring b2Fixture :: __destroy__
b2MouseJoint exploring b2MouseJoint :: GetAnchorA
b2MouseJoint exploring b2MouseJoint :: GetAnchorB
b2MouseJoint exploring b2MouseJoint :: GetReactionForce
b2MouseJoint exploring b2MouseJoint :: GetReactionTorque
b2MouseJoint exploring b2MouseJoint :: SetTarget
b2MouseJoint exploring b2MouseJoint :: GetTarget
b2MouseJoint exploring b2MouseJoint :: SetMaxForce
b2MouseJoint exploring b2MouseJoint :: GetMaxForce
b2MouseJoint exploring b2MouseJoint :: SetFrequency
b2MouseJoint exploring b2MouseJoint :: GetFrequency
b2MouseJoint exploring b2MouseJoint :: SetDampingRatio
b2MouseJoint exploring b2MouseJoint :: GetDampingRatio
b2MouseJoint exploring b2MouseJoint :: Dump
b2MouseJoint exploring b2MouseJoint :: b2MouseJoint
b2MouseJoint exploring b2MouseJoint :: __destroy__
b2MouseJoint exploring b2Joint :: GetType
b2MouseJoint exploring b2Joint :: GetBodyA
b2MouseJoint exploring b2Joint :: GetBodyB
b2MouseJoint exploring b2Joint :: GetAnchorA
b2MouseJoint exploring b2Joint :: GetAnchorB
b2MouseJoint exploring b2Joint :: GetReactionForce
b2MouseJoint exploring b2Joint :: GetReactionTorque
b2MouseJoint exploring b2Joint :: GetNext
b2MouseJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2MouseJoint , skipping
b2MouseJoint exploring b2Joint :: GetUserData
b2MouseJoint exploring b2Joint :: SetUserData
b2MouseJoint exploring b2Joint :: IsActive
b2MouseJoint exploring b2Joint :: GetCollideConnected
b2MouseJoint exploring b2Joint :: Dump
b2PulleyJoint exploring b2PulleyJoint :: GetAnchorA
b2PulleyJoint exploring b2PulleyJoint :: GetAnchorB
b2PulleyJoint exploring b2PulleyJoint :: GetReactionForce
b2PulleyJoint exploring b2PulleyJoint :: GetReactionTorque
b2PulleyJoint exploring b2PulleyJoint :: GetGroundAnchorA
b2PulleyJoint exploring b2PulleyJoint :: GetGroundAnchorB
b2PulleyJoint exploring b2PulleyJoint :: GetLengthA
b2PulleyJoint exploring b2PulleyJoint :: GetLengthB
b2PulleyJoint exploring b2PulleyJoint :: GetRatio
b2PulleyJoint exploring b2PulleyJoint :: Dump
b2PulleyJoint exploring b2PulleyJoint :: b2PulleyJoint
b2PulleyJoint exploring b2PulleyJoint :: __destroy__
b2PulleyJoint exploring b2Joint :: GetType
b2PulleyJoint exploring b2Joint :: GetBodyA
b2PulleyJoint exploring b2Joint :: GetBodyB
b2PulleyJoint exploring b2Joint :: GetAnchorA
b2PulleyJoint exploring b2Joint :: GetAnchorB
b2PulleyJoint exploring b2Joint :: GetReactionForce
b2PulleyJoint exploring b2Joint :: GetReactionTorque
b2PulleyJoint exploring b2Joint :: GetNext
b2PulleyJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2PulleyJoint , skipping
b2PulleyJoint exploring b2Joint :: GetUserData
b2PulleyJoint exploring b2Joint :: SetUserData
b2PulleyJoint exploring b2Joint :: IsActive
b2PulleyJoint exploring b2Joint :: GetCollideConnected
b2PulleyJoint exploring b2Joint :: Dump
b2BroadPhase exploring b2BroadPhase :: b2BroadPhase
b2BroadPhase exploring b2BroadPhase :: b2BroadPhase
zz Nothing to do there
b2BroadPhase exploring b2BroadPhase :: CreateProxy
b2BroadPhase exploring b2BroadPhase :: DestroyProxy
b2BroadPhase exploring b2BroadPhase :: MoveProxy
b2BroadPhase exploring b2BroadPhase :: TouchProxy
b2BroadPhase exploring b2BroadPhase :: GetFatAABB
b2BroadPhase exploring b2BroadPhase :: GetUserData
b2BroadPhase exploring b2BroadPhase :: TestOverlap
b2BroadPhase exploring b2BroadPhase :: GetProxyCount
b2BroadPhase exploring b2BroadPhase :: UpdatePairs
b2BroadPhase exploring b2BroadPhase :: Query
b2BroadPhase exploring b2BroadPhase :: RayCast
b2BroadPhase exploring b2BroadPhase :: GetTreeHeight
b2BroadPhase exploring b2BroadPhase :: GetTreeBalance
b2BroadPhase exploring b2BroadPhase :: GetTreeQuality
b2BroadPhase exploring b2BroadPhase :: __destroy__
b2World exploring b2World :: b2World
b2World exploring b2World :: b2World
zz Nothing to do there
b2World exploring b2World :: SetDestructionListener
b2World exploring b2World :: SetContactFilter
b2World exploring b2World :: SetContactListener
b2World exploring b2World :: SetDebugDraw
b2World exploring b2World :: CreateBody
b2World exploring b2World :: DestroyBody
b2World exploring b2World :: CreateJoint
b2World exploring b2World :: DestroyJoint
b2World exploring b2World :: Step
b2World exploring b2World :: ClearForces
b2World exploring b2World :: DrawDebugData
b2World exploring b2World :: QueryAABB
b2World exploring b2World :: RayCast
b2World exploring b2World :: GetBodyList
b2World exploring b2World :: GetBodyList
Warning: Cannot mix in overloaded functions GetBodyList in class b2World , skipping
b2World exploring b2World :: GetJointList
b2World exploring b2World :: GetJointList
Warning: Cannot mix in overloaded functions GetJointList in class b2World , skipping
b2World exploring b2World :: GetContactList
b2World exploring b2World :: GetContactList
Warning: Cannot mix in overloaded functions GetContactList in class b2World , skipping
b2World exploring b2World :: SetAllowSleeping
b2World exploring b2World :: GetAllowSleeping
b2World exploring b2World :: SetWarmStarting
b2World exploring b2World :: GetWarmStarting
b2World exploring b2World :: SetContinuousPhysics
b2World exploring b2World :: GetContinuousPhysics
b2World exploring b2World :: SetSubStepping
b2World exploring b2World :: GetSubStepping
b2World exploring b2World :: GetProxyCount
b2World exploring b2World :: GetBodyCount
b2World exploring b2World :: GetJointCount
b2World exploring b2World :: GetContactCount
b2World exploring b2World :: GetTreeHeight
b2World exploring b2World :: GetTreeBalance
b2World exploring b2World :: GetTreeQuality
b2World exploring b2World :: SetGravity
b2World exploring b2World :: GetGravity
b2World exploring b2World :: IsLocked
b2World exploring b2World :: SetAutoClearForces
b2World exploring b2World :: GetAutoClearForces
b2World exploring b2World :: GetContactManager
b2World exploring b2World :: GetProfile
b2World exploring b2World :: Dump
b2World exploring b2World :: __destroy__
b2PrismaticJoint exploring b2PrismaticJoint :: GetAnchorA
b2PrismaticJoint exploring b2PrismaticJoint :: GetAnchorB
b2PrismaticJoint exploring b2PrismaticJoint :: GetReactionForce
b2PrismaticJoint exploring b2PrismaticJoint :: GetReactionTorque
b2PrismaticJoint exploring b2PrismaticJoint :: GetLocalAnchorA
b2PrismaticJoint exploring b2PrismaticJoint :: GetLocalAnchorB
b2PrismaticJoint exploring b2PrismaticJoint :: GetLocalAxisA
b2PrismaticJoint exploring b2PrismaticJoint :: GetReferenceAngle
b2PrismaticJoint exploring b2PrismaticJoint :: GetJointTranslation
b2PrismaticJoint exploring b2PrismaticJoint :: GetJointSpeed
b2PrismaticJoint exploring b2PrismaticJoint :: IsLimitEnabled
b2PrismaticJoint exploring b2PrismaticJoint :: EnableLimit
b2PrismaticJoint exploring b2PrismaticJoint :: GetLowerLimit
b2PrismaticJoint exploring b2PrismaticJoint :: GetUpperLimit
b2PrismaticJoint exploring b2PrismaticJoint :: SetLimits
b2PrismaticJoint exploring b2PrismaticJoint :: IsMotorEnabled
b2PrismaticJoint exploring b2PrismaticJoint :: EnableMotor
b2PrismaticJoint exploring b2PrismaticJoint :: SetMotorSpeed
b2PrismaticJoint exploring b2PrismaticJoint :: GetMotorSpeed
b2PrismaticJoint exploring b2PrismaticJoint :: SetMaxMotorForce
b2PrismaticJoint exploring b2PrismaticJoint :: GetMaxMotorForce
b2PrismaticJoint exploring b2PrismaticJoint :: GetMotorForce
b2PrismaticJoint exploring b2PrismaticJoint :: Dump
b2PrismaticJoint exploring b2PrismaticJoint :: b2PrismaticJoint
b2PrismaticJoint exploring b2PrismaticJoint :: __destroy__
b2PrismaticJoint exploring b2Joint :: GetType
b2PrismaticJoint exploring b2Joint :: GetBodyA
b2PrismaticJoint exploring b2Joint :: GetBodyB
b2PrismaticJoint exploring b2Joint :: GetAnchorA
b2PrismaticJoint exploring b2Joint :: GetAnchorB
b2PrismaticJoint exploring b2Joint :: GetReactionForce
b2PrismaticJoint exploring b2Joint :: GetReactionTorque
b2PrismaticJoint exploring b2Joint :: GetNext
b2PrismaticJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2PrismaticJoint , skipping
b2PrismaticJoint exploring b2Joint :: GetUserData
b2PrismaticJoint exploring b2Joint :: SetUserData
b2PrismaticJoint exploring b2Joint :: IsActive
b2PrismaticJoint exploring b2Joint :: GetCollideConnected
b2PrismaticJoint exploring b2Joint :: Dump
b2CircleShape exploring b2CircleShape :: b2CircleShape
b2CircleShape exploring b2CircleShape :: Clone
b2CircleShape exploring b2CircleShape :: GetChildCount
b2CircleShape exploring b2CircleShape :: TestPoint
b2CircleShape exploring b2CircleShape :: RayCast
b2CircleShape exploring b2CircleShape :: ComputeAABB
b2CircleShape exploring b2CircleShape :: ComputeMass
b2CircleShape exploring b2CircleShape :: GetSupport
b2CircleShape exploring b2CircleShape :: GetSupportVertex
b2CircleShape exploring b2CircleShape :: GetVertexCount
b2CircleShape exploring b2CircleShape :: GetVertex
b2CircleShape exploring b2CircleShape :: get_m_p
b2CircleShape exploring b2CircleShape :: set_m_p
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: get_m_p
Warning: Cannot mix in overloaded functions get_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: set_m_p
Warning: Cannot mix in overloaded functions set_m_p in class b2CircleShape , skipping
b2CircleShape exploring b2CircleShape :: __destroy__
b2CircleShape exploring b2Shape :: b2Shape
zz Subclasses cannot directly use their parent's constructors
b2CircleShape exploring b2Shape :: Clone
b2CircleShape exploring b2Shape :: GetType
b2CircleShape exploring b2Shape :: GetChildCount
b2CircleShape exploring b2Shape :: TestPoint
b2CircleShape exploring b2Shape :: RayCast
b2CircleShape exploring b2Shape :: ComputeAABB
b2CircleShape exploring b2Shape :: ComputeMass
b2CircleShape exploring b2Shape :: get_m_radius
b2CircleShape exploring b2Shape :: set_m_radius
b2CircleShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2CircleShape , skipping
b2CircleShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2CircleShape , skipping
b2WheelJoint exploring b2WheelJoint :: GetDefinition
b2WheelJoint exploring b2WheelJoint :: GetAnchorA
b2WheelJoint exploring b2WheelJoint :: GetAnchorB
b2WheelJoint exploring b2WheelJoint :: GetReactionForce
b2WheelJoint exploring b2WheelJoint :: GetReactionTorque
b2WheelJoint exploring b2WheelJoint :: GetLocalAnchorA
b2WheelJoint exploring b2WheelJoint :: GetLocalAnchorB
b2WheelJoint exploring b2WheelJoint :: GetLocalAxisA
b2WheelJoint exploring b2WheelJoint :: GetJointTranslation
b2WheelJoint exploring b2WheelJoint :: GetJointSpeed
b2WheelJoint exploring b2WheelJoint :: IsMotorEnabled
b2WheelJoint exploring b2WheelJoint :: EnableMotor
b2WheelJoint exploring b2WheelJoint :: SetMotorSpeed
b2WheelJoint exploring b2WheelJoint :: GetMotorSpeed
b2WheelJoint exploring b2WheelJoint :: SetMaxMotorTorque
b2WheelJoint exploring b2WheelJoint :: GetMaxMotorTorque
b2WheelJoint exploring b2WheelJoint :: GetMotorTorque
b2WheelJoint exploring b2WheelJoint :: SetSpringFrequencyHz
b2WheelJoint exploring b2WheelJoint :: GetSpringFrequencyHz
b2WheelJoint exploring b2WheelJoint :: SetSpringDampingRatio
b2WheelJoint exploring b2WheelJoint :: GetSpringDampingRatio
b2WheelJoint exploring b2WheelJoint :: Dump
b2WheelJoint exploring b2WheelJoint :: b2WheelJoint
b2WheelJoint exploring b2WheelJoint :: __destroy__
b2WheelJoint exploring b2Joint :: GetType
b2WheelJoint exploring b2Joint :: GetBodyA
b2WheelJoint exploring b2Joint :: GetBodyB
b2WheelJoint exploring b2Joint :: GetAnchorA
b2WheelJoint exploring b2Joint :: GetAnchorB
b2WheelJoint exploring b2Joint :: GetReactionForce
b2WheelJoint exploring b2Joint :: GetReactionTorque
b2WheelJoint exploring b2Joint :: GetNext
b2WheelJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2WheelJoint , skipping
b2WheelJoint exploring b2Joint :: GetUserData
b2WheelJoint exploring b2Joint :: SetUserData
b2WheelJoint exploring b2Joint :: IsActive
b2WheelJoint exploring b2Joint :: GetCollideConnected
b2WheelJoint exploring b2Joint :: Dump
b2Draw exploring b2Draw :: b2Draw
b2Draw exploring b2Draw :: b2Draw
zz Nothing to do there
b2Draw exploring b2Draw :: SetFlags
b2Draw exploring b2Draw :: GetFlags
b2Draw exploring b2Draw :: AppendFlags
b2Draw exploring b2Draw :: ClearFlags
b2Draw exploring b2Draw :: DrawPolygon
b2Draw exploring b2Draw :: DrawSolidPolygon
b2Draw exploring b2Draw :: DrawCircle
b2Draw exploring b2Draw :: DrawSolidCircle
b2Draw exploring b2Draw :: DrawSegment
b2Draw exploring b2Draw :: DrawTransform
b2Draw exploring b2Draw :: __destroy__
b2Joint exploring b2Joint :: GetType
b2Joint exploring b2Joint :: GetBodyA
b2Joint exploring b2Joint :: GetBodyB
b2Joint exploring b2Joint :: GetAnchorA
b2Joint exploring b2Joint :: GetAnchorB
b2Joint exploring b2Joint :: GetReactionForce
b2Joint exploring b2Joint :: GetReactionTorque
b2Joint exploring b2Joint :: GetNext
b2Joint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2Joint , skipping
b2Joint exploring b2Joint :: GetUserData
b2Joint exploring b2Joint :: SetUserData
b2Joint exploring b2Joint :: IsActive
b2Joint exploring b2Joint :: GetCollideConnected
b2Joint exploring b2Joint :: Dump
b2GearJoint exploring b2GearJoint :: GetAnchorA
b2GearJoint exploring b2GearJoint :: GetAnchorB
b2GearJoint exploring b2GearJoint :: GetReactionForce
b2GearJoint exploring b2GearJoint :: GetReactionTorque
b2GearJoint exploring b2GearJoint :: GetJoint1
b2GearJoint exploring b2GearJoint :: GetJoint2
b2GearJoint exploring b2GearJoint :: SetRatio
b2GearJoint exploring b2GearJoint :: GetRatio
b2GearJoint exploring b2GearJoint :: Dump
b2GearJoint exploring b2GearJoint :: b2GearJoint
b2GearJoint exploring b2GearJoint :: __destroy__
b2GearJoint exploring b2Joint :: GetType
b2GearJoint exploring b2Joint :: GetBodyA
b2GearJoint exploring b2Joint :: GetBodyB
b2GearJoint exploring b2Joint :: GetAnchorA
b2GearJoint exploring b2Joint :: GetAnchorB
b2GearJoint exploring b2Joint :: GetReactionForce
b2GearJoint exploring b2Joint :: GetReactionTorque
b2GearJoint exploring b2Joint :: GetNext
b2GearJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2GearJoint , skipping
b2GearJoint exploring b2Joint :: GetUserData
b2GearJoint exploring b2Joint :: SetUserData
b2GearJoint exploring b2Joint :: IsActive
b2GearJoint exploring b2Joint :: GetCollideConnected
b2GearJoint exploring b2Joint :: Dump
b2RayCastCallback exploring b2RayCastCallback :: b2RayCastCallback
b2RayCastCallback exploring b2RayCastCallback :: b2RayCastCallback
zz Nothing to do there
b2RayCastCallback exploring b2RayCastCallback :: ReportFixture
b2RayCastCallback exploring b2RayCastCallback :: __destroy__
b2DynamicTree exploring b2DynamicTree :: b2DynamicTree
b2DynamicTree exploring b2DynamicTree :: b2DynamicTree
zz Nothing to do there
b2DynamicTree exploring b2DynamicTree :: CreateProxy
b2DynamicTree exploring b2DynamicTree :: DestroyProxy
b2DynamicTree exploring b2DynamicTree :: MoveProxy
b2DynamicTree exploring b2DynamicTree :: GetUserData
b2DynamicTree exploring b2DynamicTree :: GetFatAABB
b2DynamicTree exploring b2DynamicTree :: Query
b2DynamicTree exploring b2DynamicTree :: RayCast
b2DynamicTree exploring b2DynamicTree :: Validate
b2DynamicTree exploring b2DynamicTree :: GetHeight
b2DynamicTree exploring b2DynamicTree :: GetMaxBalance
b2DynamicTree exploring b2DynamicTree :: GetAreaRatio
b2DynamicTree exploring b2DynamicTree :: RebuildBottomUp
b2DynamicTree exploring b2DynamicTree :: __destroy__
b2WeldJoint exploring b2WeldJoint :: GetAnchorA
b2WeldJoint exploring b2WeldJoint :: GetAnchorB
b2WeldJoint exploring b2WeldJoint :: GetReactionForce
b2WeldJoint exploring b2WeldJoint :: GetReactionTorque
b2WeldJoint exploring b2WeldJoint :: GetLocalAnchorA
b2WeldJoint exploring b2WeldJoint :: GetLocalAnchorB
b2WeldJoint exploring b2WeldJoint :: GetReferenceAngle
b2WeldJoint exploring b2WeldJoint :: SetFrequency
b2WeldJoint exploring b2WeldJoint :: GetFrequency
b2WeldJoint exploring b2WeldJoint :: SetDampingRatio
b2WeldJoint exploring b2WeldJoint :: GetDampingRatio
b2WeldJoint exploring b2WeldJoint :: Dump
b2WeldJoint exploring b2WeldJoint :: b2WeldJoint
b2WeldJoint exploring b2WeldJoint :: __destroy__
b2WeldJoint exploring b2Joint :: GetType
b2WeldJoint exploring b2Joint :: GetBodyA
b2WeldJoint exploring b2Joint :: GetBodyB
b2WeldJoint exploring b2Joint :: GetAnchorA
b2WeldJoint exploring b2Joint :: GetAnchorB
b2WeldJoint exploring b2Joint :: GetReactionForce
b2WeldJoint exploring b2Joint :: GetReactionTorque
b2WeldJoint exploring b2Joint :: GetNext
b2WeldJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2WeldJoint , skipping
b2WeldJoint exploring b2Joint :: GetUserData
b2WeldJoint exploring b2Joint :: SetUserData
b2WeldJoint exploring b2Joint :: IsActive
b2WeldJoint exploring b2Joint :: GetCollideConnected
b2WeldJoint exploring b2Joint :: Dump
b2RevoluteJoint exploring b2RevoluteJoint :: GetAnchorA
b2RevoluteJoint exploring b2RevoluteJoint :: GetAnchorB
b2RevoluteJoint exploring b2RevoluteJoint :: GetLocalAnchorA
b2RevoluteJoint exploring b2RevoluteJoint :: GetLocalAnchorB
b2RevoluteJoint exploring b2RevoluteJoint :: GetReferenceAngle
b2RevoluteJoint exploring b2RevoluteJoint :: GetJointAngle
b2RevoluteJoint exploring b2RevoluteJoint :: GetJointSpeed
b2RevoluteJoint exploring b2RevoluteJoint :: IsLimitEnabled
b2RevoluteJoint exploring b2RevoluteJoint :: EnableLimit
b2RevoluteJoint exploring b2RevoluteJoint :: GetLowerLimit
b2RevoluteJoint exploring b2RevoluteJoint :: GetUpperLimit
b2RevoluteJoint exploring b2RevoluteJoint :: SetLimits
b2RevoluteJoint exploring b2RevoluteJoint :: IsMotorEnabled
b2RevoluteJoint exploring b2RevoluteJoint :: EnableMotor
b2RevoluteJoint exploring b2RevoluteJoint :: SetMotorSpeed
b2RevoluteJoint exploring b2RevoluteJoint :: GetMotorSpeed
b2RevoluteJoint exploring b2RevoluteJoint :: SetMaxMotorTorque
b2RevoluteJoint exploring b2RevoluteJoint :: GetMaxMotorTorque
b2RevoluteJoint exploring b2RevoluteJoint :: GetReactionForce
b2RevoluteJoint exploring b2RevoluteJoint :: GetReactionTorque
b2RevoluteJoint exploring b2RevoluteJoint :: GetMotorTorque
b2RevoluteJoint exploring b2RevoluteJoint :: Dump
b2RevoluteJoint exploring b2RevoluteJoint :: b2RevoluteJoint
b2RevoluteJoint exploring b2RevoluteJoint :: __destroy__
b2RevoluteJoint exploring b2Joint :: GetType
b2RevoluteJoint exploring b2Joint :: GetBodyA
b2RevoluteJoint exploring b2Joint :: GetBodyB
b2RevoluteJoint exploring b2Joint :: GetAnchorA
b2RevoluteJoint exploring b2Joint :: GetAnchorB
b2RevoluteJoint exploring b2Joint :: GetReactionForce
b2RevoluteJoint exploring b2Joint :: GetReactionTorque
b2RevoluteJoint exploring b2Joint :: GetNext
b2RevoluteJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2RevoluteJoint , skipping
b2RevoluteJoint exploring b2Joint :: GetUserData
b2RevoluteJoint exploring b2Joint :: SetUserData
b2RevoluteJoint exploring b2Joint :: IsActive
b2RevoluteJoint exploring b2Joint :: GetCollideConnected
b2RevoluteJoint exploring b2Joint :: Dump
b2Timer exploring b2Timer :: b2Timer
b2Timer exploring b2Timer :: Reset
b2Timer exploring b2Timer :: GetMilliseconds
b2Timer exploring b2Timer :: __destroy__
b2ContactListener exploring b2ContactListener :: b2ContactListener
b2ContactListener exploring b2ContactListener :: b2ContactListener
zz Nothing to do there
b2ContactListener exploring b2ContactListener :: BeginContact
b2ContactListener exploring b2ContactListener :: EndContact
b2ContactListener exploring b2ContactListener :: PreSolve
b2ContactListener exploring b2ContactListener :: PostSolve
b2ContactListener exploring b2ContactListener :: __destroy__
b2ChainShape exploring b2ChainShape :: b2ChainShape
b2ChainShape exploring b2ChainShape :: b2ChainShape
zz Nothing to do there
b2ChainShape exploring b2ChainShape :: CreateLoop
b2ChainShape exploring b2ChainShape :: CreateChain
b2ChainShape exploring b2ChainShape :: SetPrevVertex
b2ChainShape exploring b2ChainShape :: SetNextVertex
b2ChainShape exploring b2ChainShape :: Clone
b2ChainShape exploring b2ChainShape :: GetChildCount
b2ChainShape exploring b2ChainShape :: GetChildEdge
b2ChainShape exploring b2ChainShape :: TestPoint
b2ChainShape exploring b2ChainShape :: RayCast
b2ChainShape exploring b2ChainShape :: ComputeAABB
b2ChainShape exploring b2ChainShape :: ComputeMass
b2ChainShape exploring b2ChainShape :: get_m_vertices
b2ChainShape exploring b2ChainShape :: set_m_vertices
b2ChainShape exploring b2ChainShape :: get_m_count
b2ChainShape exploring b2ChainShape :: set_m_count
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2ChainShape , skipping
b2ChainShape exploring b2ChainShape :: __destroy__
b2ChainShape exploring b2Shape :: b2Shape
zz Subclasses cannot directly use their parent's constructors
b2ChainShape exploring b2Shape :: Clone
b2ChainShape exploring b2Shape :: GetType
b2ChainShape exploring b2Shape :: GetChildCount
b2ChainShape exploring b2Shape :: TestPoint
b2ChainShape exploring b2Shape :: RayCast
b2ChainShape exploring b2Shape :: ComputeAABB
b2ChainShape exploring b2Shape :: ComputeMass
b2ChainShape exploring b2Shape :: get_m_radius
b2ChainShape exploring b2Shape :: set_m_radius
b2ChainShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2ChainShape , skipping
b2ChainShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2ChainShape , skipping
b2QueryCallback exploring b2QueryCallback :: b2QueryCallback
b2QueryCallback exploring b2QueryCallback :: b2QueryCallback
zz Nothing to do there
b2QueryCallback exploring b2QueryCallback :: ReportFixture
b2QueryCallback exploring b2QueryCallback :: __destroy__
b2BlockAllocator exploring b2BlockAllocator :: b2BlockAllocator
b2BlockAllocator exploring b2BlockAllocator :: b2BlockAllocator
zz Nothing to do there
b2BlockAllocator exploring b2BlockAllocator :: Allocate
b2BlockAllocator exploring b2BlockAllocator :: Free
b2BlockAllocator exploring b2BlockAllocator :: Clear
b2BlockAllocator exploring b2BlockAllocator :: __destroy__
b2RopeJoint exploring b2RopeJoint :: GetAnchorA
b2RopeJoint exploring b2RopeJoint :: GetAnchorB
b2RopeJoint exploring b2RopeJoint :: GetReactionForce
b2RopeJoint exploring b2RopeJoint :: GetReactionTorque
b2RopeJoint exploring b2RopeJoint :: GetLocalAnchorA
b2RopeJoint exploring b2RopeJoint :: GetLocalAnchorB
b2RopeJoint exploring b2RopeJoint :: SetMaxLength
b2RopeJoint exploring b2RopeJoint :: GetMaxLength
b2RopeJoint exploring b2RopeJoint :: GetLimitState
b2RopeJoint exploring b2RopeJoint :: Dump
b2RopeJoint exploring b2RopeJoint :: b2RopeJoint
b2RopeJoint exploring b2RopeJoint :: __destroy__
b2RopeJoint exploring b2Joint :: GetType
b2RopeJoint exploring b2Joint :: GetBodyA
b2RopeJoint exploring b2Joint :: GetBodyB
b2RopeJoint exploring b2Joint :: GetAnchorA
b2RopeJoint exploring b2Joint :: GetAnchorB
b2RopeJoint exploring b2Joint :: GetReactionForce
b2RopeJoint exploring b2Joint :: GetReactionTorque
b2RopeJoint exploring b2Joint :: GetNext
b2RopeJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2RopeJoint , skipping
b2RopeJoint exploring b2Joint :: GetUserData
b2RopeJoint exploring b2Joint :: SetUserData
b2RopeJoint exploring b2Joint :: IsActive
b2RopeJoint exploring b2Joint :: GetCollideConnected
b2RopeJoint exploring b2Joint :: Dump
b2PolygonShape exploring b2PolygonShape :: b2PolygonShape
b2PolygonShape exploring b2PolygonShape :: Clone
b2PolygonShape exploring b2PolygonShape :: GetChildCount
b2PolygonShape exploring b2PolygonShape :: Set
b2PolygonShape exploring b2PolygonShape :: SetAsBox
b2PolygonShape exploring b2PolygonShape :: SetAsBox
zz  b2PolygonShape has updated parameters of  [[{'type': 'float', 'name': 'hx'}, {'type': 'float', 'name': 'hy'}], [{'type': 'float', 'name': 'hx'}, {'type': 'float', 'name': 'hy'}, {'type': 'const b2Vec2 &', 'name': 'center'}, {'type': 'float', 'name': 'angle'}]]
b2PolygonShape exploring b2PolygonShape :: TestPoint
b2PolygonShape exploring b2PolygonShape :: RayCast
b2PolygonShape exploring b2PolygonShape :: ComputeAABB
b2PolygonShape exploring b2PolygonShape :: ComputeMass
b2PolygonShape exploring b2PolygonShape :: GetVertexCount
b2PolygonShape exploring b2PolygonShape :: GetVertex
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_centroid
Warning: Cannot mix in overloaded functions get_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_centroid
Warning: Cannot mix in overloaded functions set_m_centroid in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: get_m_vertexCount
Warning: Cannot mix in overloaded functions get_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: set_m_vertexCount
Warning: Cannot mix in overloaded functions set_m_vertexCount in class b2PolygonShape , skipping
b2PolygonShape exploring b2PolygonShape :: __destroy__
b2PolygonShape exploring b2Shape :: b2Shape
zz Subclasses cannot directly use their parent's constructors
b2PolygonShape exploring b2Shape :: Clone
b2PolygonShape exploring b2Shape :: GetType
b2PolygonShape exploring b2Shape :: GetChildCount
b2PolygonShape exploring b2Shape :: TestPoint
b2PolygonShape exploring b2Shape :: RayCast
b2PolygonShape exploring b2Shape :: ComputeAABB
b2PolygonShape exploring b2Shape :: ComputeMass
b2PolygonShape exploring b2Shape :: get_m_radius
b2PolygonShape exploring b2Shape :: set_m_radius
b2PolygonShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2PolygonShape , skipping
b2PolygonShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2PolygonShape , skipping
b2EdgeShape exploring b2EdgeShape :: b2EdgeShape
b2EdgeShape exploring b2EdgeShape :: Set
b2EdgeShape exploring b2EdgeShape :: Clone
b2EdgeShape exploring b2EdgeShape :: GetChildCount
b2EdgeShape exploring b2EdgeShape :: TestPoint
b2EdgeShape exploring b2EdgeShape :: RayCast
b2EdgeShape exploring b2EdgeShape :: ComputeAABB
b2EdgeShape exploring b2EdgeShape :: ComputeMass
b2EdgeShape exploring b2EdgeShape :: __destroy__
b2EdgeShape exploring b2Shape :: b2Shape
zz Subclasses cannot directly use their parent's constructors
b2EdgeShape exploring b2Shape :: Clone
b2EdgeShape exploring b2Shape :: GetType
b2EdgeShape exploring b2Shape :: GetChildCount
b2EdgeShape exploring b2Shape :: TestPoint
b2EdgeShape exploring b2Shape :: RayCast
b2EdgeShape exploring b2Shape :: ComputeAABB
b2EdgeShape exploring b2Shape :: ComputeMass
b2EdgeShape exploring b2Shape :: get_m_radius
b2EdgeShape exploring b2Shape :: set_m_radius
b2EdgeShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2EdgeShape , skipping
b2EdgeShape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2EdgeShape , skipping
b2Contact exploring b2Contact :: GetManifold
b2Contact exploring b2Contact :: GetManifold
Warning: Cannot mix in overloaded functions GetManifold in class b2Contact , skipping
b2Contact exploring b2Contact :: GetWorldManifold
b2Contact exploring b2Contact :: IsTouching
b2Contact exploring b2Contact :: SetEnabled
b2Contact exploring b2Contact :: IsEnabled
b2Contact exploring b2Contact :: GetNext
b2Contact exploring b2Contact :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2Contact , skipping
b2Contact exploring b2Contact :: GetFixtureA
b2Contact exploring b2Contact :: GetFixtureA
Warning: Cannot mix in overloaded functions GetFixtureA in class b2Contact , skipping
b2Contact exploring b2Contact :: GetChildIndexA
b2Contact exploring b2Contact :: GetFixtureB
b2Contact exploring b2Contact :: GetFixtureB
Warning: Cannot mix in overloaded functions GetFixtureB in class b2Contact , skipping
b2Contact exploring b2Contact :: GetChildIndexB
b2Contact exploring b2Contact :: SetFriction
b2Contact exploring b2Contact :: GetFriction
b2Contact exploring b2Contact :: ResetFriction
b2Contact exploring b2Contact :: SetRestitution
b2Contact exploring b2Contact :: GetRestitution
b2Contact exploring b2Contact :: ResetRestitution
b2Contact exploring b2Contact :: Evaluate
b2Shape exploring b2Shape :: b2Shape
zz Nothing to do there
b2Shape exploring b2Shape :: Clone
b2Shape exploring b2Shape :: GetType
b2Shape exploring b2Shape :: GetChildCount
b2Shape exploring b2Shape :: TestPoint
b2Shape exploring b2Shape :: RayCast
b2Shape exploring b2Shape :: ComputeAABB
b2Shape exploring b2Shape :: ComputeMass
b2Shape exploring b2Shape :: get_m_radius
b2Shape exploring b2Shape :: set_m_radius
b2Shape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2Shape , skipping
b2Shape exploring b2Shape :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2Shape , skipping
b2Body exploring b2Body :: CreateFixture
b2Body exploring b2Body :: CreateFixture
zz  b2Body has updated parameters of  [[{'type': 'const b2FixtureDef *', 'name': 'def'}], [{'type': 'const b2Shape *', 'name': 'shape'}, {'type': 'float', 'name': 'density'}]]
b2Body exploring b2Body :: DestroyFixture
b2Body exploring b2Body :: SetTransform
b2Body exploring b2Body :: GetTransform
b2Body exploring b2Body :: GetPosition
b2Body exploring b2Body :: GetAngle
b2Body exploring b2Body :: GetWorldCenter
b2Body exploring b2Body :: GetLocalCenter
b2Body exploring b2Body :: SetLinearVelocity
b2Body exploring b2Body :: GetLinearVelocity
b2Body exploring b2Body :: SetAngularVelocity
b2Body exploring b2Body :: GetAngularVelocity
b2Body exploring b2Body :: ApplyForce
b2Body exploring b2Body :: ApplyForceToCenter
b2Body exploring b2Body :: ApplyTorque
b2Body exploring b2Body :: ApplyLinearImpulse
b2Body exploring b2Body :: ApplyAngularImpulse
b2Body exploring b2Body :: GetMass
b2Body exploring b2Body :: GetInertia
b2Body exploring b2Body :: GetMassData
b2Body exploring b2Body :: SetMassData
b2Body exploring b2Body :: ResetMassData
b2Body exploring b2Body :: GetWorldPoint
b2Body exploring b2Body :: GetWorldVector
b2Body exploring b2Body :: GetLocalPoint
b2Body exploring b2Body :: GetLocalVector
b2Body exploring b2Body :: GetLinearVelocityFromWorldPoint
b2Body exploring b2Body :: GetLinearVelocityFromLocalPoint
b2Body exploring b2Body :: GetLinearDamping
b2Body exploring b2Body :: SetLinearDamping
b2Body exploring b2Body :: GetAngularDamping
b2Body exploring b2Body :: SetAngularDamping
b2Body exploring b2Body :: GetGravityScale
b2Body exploring b2Body :: SetGravityScale
b2Body exploring b2Body :: SetType
b2Body exploring b2Body :: GetType
b2Body exploring b2Body :: SetBullet
b2Body exploring b2Body :: IsBullet
b2Body exploring b2Body :: SetSleepingAllowed
b2Body exploring b2Body :: IsSleepingAllowed
b2Body exploring b2Body :: SetAwake
b2Body exploring b2Body :: IsAwake
b2Body exploring b2Body :: SetActive
b2Body exploring b2Body :: IsActive
b2Body exploring b2Body :: SetFixedRotation
b2Body exploring b2Body :: IsFixedRotation
b2Body exploring b2Body :: GetFixtureList
b2Body exploring b2Body :: GetFixtureList
Warning: Cannot mix in overloaded functions GetFixtureList in class b2Body , skipping
b2Body exploring b2Body :: GetJointList
b2Body exploring b2Body :: GetJointList
Warning: Cannot mix in overloaded functions GetJointList in class b2Body , skipping
b2Body exploring b2Body :: GetContactList
b2Body exploring b2Body :: GetContactList
Warning: Cannot mix in overloaded functions GetContactList in class b2Body , skipping
b2Body exploring b2Body :: GetNext
b2Body exploring b2Body :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2Body , skipping
b2Body exploring b2Body :: GetUserData
b2Body exploring b2Body :: SetUserData
b2Body exploring b2Body :: GetWorld
b2Body exploring b2Body :: GetWorld
Warning: Cannot mix in overloaded functions GetWorld in class b2Body , skipping
b2Body exploring b2Body :: Dump
b2GrowableStack exploring b2GrowableStack :: b2GrowableStack
b2GrowableStack exploring b2GrowableStack :: b2GrowableStack
zz Nothing to do there
b2GrowableStack exploring b2GrowableStack :: Push
b2GrowableStack exploring b2GrowableStack :: Pop
b2GrowableStack exploring b2GrowableStack :: GetCount
b2GrowableStack exploring b2GrowableStack :: __destroy__
b2FrictionJoint exploring b2FrictionJoint :: GetAnchorA
b2FrictionJoint exploring b2FrictionJoint :: GetAnchorB
b2FrictionJoint exploring b2FrictionJoint :: GetReactionForce
b2FrictionJoint exploring b2FrictionJoint :: GetReactionTorque
b2FrictionJoint exploring b2FrictionJoint :: GetLocalAnchorA
b2FrictionJoint exploring b2FrictionJoint :: GetLocalAnchorB
b2FrictionJoint exploring b2FrictionJoint :: SetMaxForce
b2FrictionJoint exploring b2FrictionJoint :: GetMaxForce
b2FrictionJoint exploring b2FrictionJoint :: SetMaxTorque
b2FrictionJoint exploring b2FrictionJoint :: GetMaxTorque
b2FrictionJoint exploring b2FrictionJoint :: Dump
b2FrictionJoint exploring b2FrictionJoint :: b2FrictionJoint
b2FrictionJoint exploring b2FrictionJoint :: __destroy__
b2FrictionJoint exploring b2Joint :: GetType
b2FrictionJoint exploring b2Joint :: GetBodyA
b2FrictionJoint exploring b2Joint :: GetBodyB
b2FrictionJoint exploring b2Joint :: GetAnchorA
b2FrictionJoint exploring b2Joint :: GetAnchorB
b2FrictionJoint exploring b2Joint :: GetReactionForce
b2FrictionJoint exploring b2Joint :: GetReactionTorque
b2FrictionJoint exploring b2Joint :: GetNext
b2FrictionJoint exploring b2Joint :: GetNext
Warning: Cannot mix in overloaded functions GetNext in class b2FrictionJoint , skipping
b2FrictionJoint exploring b2Joint :: GetUserData
b2FrictionJoint exploring b2Joint :: SetUserData
b2FrictionJoint exploring b2Joint :: IsActive
b2FrictionJoint exploring b2Joint :: GetCollideConnected
b2FrictionJoint exploring b2Joint :: Dump
b2StackAllocator exploring b2StackAllocator :: b2StackAllocator
b2StackAllocator exploring b2StackAllocator :: b2StackAllocator
zz Nothing to do there
b2StackAllocator exploring b2StackAllocator :: Allocate
b2StackAllocator exploring b2StackAllocator :: Free
b2StackAllocator exploring b2StackAllocator :: GetMaxAllocation
b2StackAllocator exploring b2StackAllocator :: __destroy__
b2DestructionListener exploring b2DestructionListener :: b2DestructionListener
b2DestructionListener exploring b2DestructionListener :: b2DestructionListener
zz Nothing to do there
b2DestructionListener exploring b2DestructionListener :: SayGoodbye
b2DestructionListener exploring b2DestructionListener :: SayGoodbye
Warning: Cannot mix in overloaded functions SayGoodbye in class b2DestructionListener , skipping
b2DestructionListener exploring b2DestructionListener :: __destroy__
b2ContactFilter exploring b2ContactFilter :: b2ContactFilter
zz Nothing to do there
b2ContactFilter exploring b2ContactFilter :: ShouldCollide
b2ContactFilter exploring b2ContactFilter :: __destroy__
_exception exploring _exception :: __destroy__
b2TreeNode exploring b2TreeNode :: IsLeaf
b2TreeNode exploring b2TreeNode :: get_aabb
b2TreeNode exploring b2TreeNode :: set_aabb
b2TreeNode exploring b2TreeNode :: get_userData
b2TreeNode exploring b2TreeNode :: set_userData
b2TreeNode exploring b2TreeNode :: get_parent
b2TreeNode exploring b2TreeNode :: set_parent
b2TreeNode exploring b2TreeNode :: get_next
b2TreeNode exploring b2TreeNode :: set_next
b2TreeNode exploring b2TreeNode :: get_child1
b2TreeNode exploring b2TreeNode :: set_child1
b2TreeNode exploring b2TreeNode :: get_child2
b2TreeNode exploring b2TreeNode :: set_child2
b2TreeNode exploring b2TreeNode :: get_height
b2TreeNode exploring b2TreeNode :: set_height
b2TreeNode exploring b2TreeNode :: __destroy__
b2Mat33 exploring b2Mat33 :: b2Mat33
b2Mat33 exploring b2Mat33 :: b2Mat33
zz  b2Mat33 has updated parameters of  [[], [{'type': 'const b2Vec3 &', 'name': 'c1'}, {'type': 'const b2Vec3 &', 'name': 'c2'}, {'type': 'const b2Vec3 &', 'name': 'c3'}]]
b2Mat33 exploring b2Mat33 :: SetZero
b2Mat33 exploring b2Mat33 :: Solve33
b2Mat33 exploring b2Mat33 :: Solve22
b2Mat33 exploring b2Mat33 :: GetInverse22
b2Mat33 exploring b2Mat33 :: GetSymInverse33
b2Mat33 exploring b2Mat33 :: get_ez
b2Mat33 exploring b2Mat33 :: set_ez
b2Mat33 exploring b2Mat33 :: get_ez
Warning: Cannot mix in overloaded functions get_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: set_ez
Warning: Cannot mix in overloaded functions set_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: get_ez
Warning: Cannot mix in overloaded functions get_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: set_ez
Warning: Cannot mix in overloaded functions set_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: get_ez
Warning: Cannot mix in overloaded functions get_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: set_ez
Warning: Cannot mix in overloaded functions set_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: get_ez
Warning: Cannot mix in overloaded functions get_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: set_ez
Warning: Cannot mix in overloaded functions set_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: get_ez
Warning: Cannot mix in overloaded functions get_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: set_ez
Warning: Cannot mix in overloaded functions set_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: get_ez
Warning: Cannot mix in overloaded functions get_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: set_ez
Warning: Cannot mix in overloaded functions set_ez in class b2Mat33 , skipping
b2Mat33 exploring b2Mat33 :: __destroy__
b2Position exploring b2Position :: __destroy__
b2TOIOutput exploring b2TOIOutput :: __destroy__
b2Filter exploring b2Filter :: b2Filter
b2Filter exploring b2Filter :: get_categoryBits
b2Filter exploring b2Filter :: set_categoryBits
b2Filter exploring b2Filter :: get_maskBits
b2Filter exploring b2Filter :: set_maskBits
b2Filter exploring b2Filter :: get_groupIndex
b2Filter exploring b2Filter :: set_groupIndex
b2Filter exploring b2Filter :: __destroy__
b2StackEntry exploring b2StackEntry :: __destroy__
b2RopeJointDef exploring b2RopeJointDef :: b2RopeJointDef
b2RopeJointDef exploring b2RopeJointDef :: set_bodyA
b2RopeJointDef exploring b2RopeJointDef :: set_bodyB
b2RopeJointDef exploring b2RopeJointDef :: set_collideConnected
b2RopeJointDef exploring b2RopeJointDef :: get_bodyA
b2RopeJointDef exploring b2RopeJointDef :: get_bodyB
b2RopeJointDef exploring b2RopeJointDef :: get_collideConnected
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorA
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorA
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorB
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorB
b2RopeJointDef exploring b2RopeJointDef :: get_maxLength
b2RopeJointDef exploring b2RopeJointDef :: set_maxLength
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_maxLength
Warning: Cannot mix in overloaded functions get_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_maxLength
Warning: Cannot mix in overloaded functions set_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_maxLength
Warning: Cannot mix in overloaded functions get_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_maxLength
Warning: Cannot mix in overloaded functions set_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_maxLength
Warning: Cannot mix in overloaded functions get_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_maxLength
Warning: Cannot mix in overloaded functions set_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_maxLength
Warning: Cannot mix in overloaded functions get_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_maxLength
Warning: Cannot mix in overloaded functions set_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_maxLength
Warning: Cannot mix in overloaded functions get_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_maxLength
Warning: Cannot mix in overloaded functions set_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: get_maxLength
Warning: Cannot mix in overloaded functions get_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: set_maxLength
Warning: Cannot mix in overloaded functions set_maxLength in class b2RopeJointDef , skipping
b2RopeJointDef exploring b2RopeJointDef :: __destroy__
b2DistanceInput exploring b2DistanceInput :: __destroy__
b2FrictionJointDef exploring b2FrictionJointDef :: b2FrictionJointDef
b2FrictionJointDef exploring b2FrictionJointDef :: Initialize
b2FrictionJointDef exploring b2FrictionJointDef :: set_bodyA
b2FrictionJointDef exploring b2FrictionJointDef :: set_bodyB
b2FrictionJointDef exploring b2FrictionJointDef :: set_collideConnected
b2FrictionJointDef exploring b2FrictionJointDef :: get_bodyA
b2FrictionJointDef exploring b2FrictionJointDef :: get_bodyB
b2FrictionJointDef exploring b2FrictionJointDef :: get_collideConnected
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
Warning: Cannot mix in overloaded functions get_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
Warning: Cannot mix in overloaded functions set_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
Warning: Cannot mix in overloaded functions get_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
Warning: Cannot mix in overloaded functions set_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
Warning: Cannot mix in overloaded functions get_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
Warning: Cannot mix in overloaded functions set_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
Warning: Cannot mix in overloaded functions get_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
Warning: Cannot mix in overloaded functions set_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
Warning: Cannot mix in overloaded functions get_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
Warning: Cannot mix in overloaded functions set_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
Warning: Cannot mix in overloaded functions get_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
Warning: Cannot mix in overloaded functions set_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: get_maxTorque
Warning: Cannot mix in overloaded functions get_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: set_maxTorque
Warning: Cannot mix in overloaded functions set_maxTorque in class b2FrictionJointDef , skipping
b2FrictionJointDef exploring b2FrictionJointDef :: __destroy__
b2Profile exploring b2Profile :: __destroy__
b2BodyDef exploring b2BodyDef :: b2BodyDef
b2BodyDef exploring b2BodyDef :: get_type
b2BodyDef exploring b2BodyDef :: set_type
b2BodyDef exploring b2BodyDef :: get_position
b2BodyDef exploring b2BodyDef :: set_position
b2BodyDef exploring b2BodyDef :: get_angle
b2BodyDef exploring b2BodyDef :: set_angle
b2BodyDef exploring b2BodyDef :: get_linearVelocity
b2BodyDef exploring b2BodyDef :: set_linearVelocity
b2BodyDef exploring b2BodyDef :: get_angularVelocity
b2BodyDef exploring b2BodyDef :: set_angularVelocity
b2BodyDef exploring b2BodyDef :: get_linearDamping
b2BodyDef exploring b2BodyDef :: set_linearDamping
b2BodyDef exploring b2BodyDef :: get_angularDamping
b2BodyDef exploring b2BodyDef :: set_angularDamping
b2BodyDef exploring b2BodyDef :: get_allowSleep
b2BodyDef exploring b2BodyDef :: set_allowSleep
b2BodyDef exploring b2BodyDef :: get_awake
b2BodyDef exploring b2BodyDef :: set_awake
b2BodyDef exploring b2BodyDef :: get_fixedRotation
b2BodyDef exploring b2BodyDef :: set_fixedRotation
b2BodyDef exploring b2BodyDef :: get_bullet
b2BodyDef exploring b2BodyDef :: set_bullet
b2BodyDef exploring b2BodyDef :: get_active
b2BodyDef exploring b2BodyDef :: set_active
b2BodyDef exploring b2BodyDef :: get_userData
b2BodyDef exploring b2BodyDef :: set_userData
b2BodyDef exploring b2BodyDef :: get_gravityScale
b2BodyDef exploring b2BodyDef :: set_gravityScale
b2BodyDef exploring b2BodyDef :: __destroy__
b2Vec2 exploring b2Vec2 :: b2Vec2
b2Vec2 exploring b2Vec2 :: b2Vec2
zz  b2Vec2 has updated parameters of  [[], [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}]]
b2Vec2 exploring b2Vec2 :: SetZero
b2Vec2 exploring b2Vec2 :: Set
b2Vec2 exploring b2Vec2 :: op_sub
b2Vec2 exploring b2Vec2 :: op_add
b2Vec2 exploring b2Vec2 :: op_sub
b2Vec2 exploring b2Vec2 :: op_mul
b2Vec2 exploring b2Vec2 :: Length
b2Vec2 exploring b2Vec2 :: LengthSquared
b2Vec2 exploring b2Vec2 :: Normalize
b2Vec2 exploring b2Vec2 :: IsValid
b2Vec2 exploring b2Vec2 :: Skew
b2Vec2 exploring b2Vec2 :: get_x
b2Vec2 exploring b2Vec2 :: set_x
b2Vec2 exploring b2Vec2 :: get_y
b2Vec2 exploring b2Vec2 :: set_y
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_x
Warning: Cannot mix in overloaded functions get_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_x
Warning: Cannot mix in overloaded functions set_x in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: get_y
Warning: Cannot mix in overloaded functions get_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: set_y
Warning: Cannot mix in overloaded functions set_y in class b2Vec2 , skipping
b2Vec2 exploring b2Vec2 :: __destroy__
b2Vec3 exploring b2Vec3 :: b2Vec3
b2Vec3 exploring b2Vec3 :: b2Vec3
zz  b2Vec3 has updated parameters of  [[], [{'type': 'float', 'name': 'x'}, {'type': 'float', 'name': 'y'}, {'type': 'float', 'name': 'z'}]]
b2Vec3 exploring b2Vec3 :: SetZero
b2Vec3 exploring b2Vec3 :: Set
b2Vec3 exploring b2Vec3 :: op_sub
b2Vec3 exploring b2Vec3 :: op_add
b2Vec3 exploring b2Vec3 :: op_sub
b2Vec3 exploring b2Vec3 :: op_mul
b2Vec3 exploring b2Vec3 :: get_z
b2Vec3 exploring b2Vec3 :: set_z
b2Vec3 exploring b2Vec3 :: get_z
Warning: Cannot mix in overloaded functions get_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: set_z
Warning: Cannot mix in overloaded functions set_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: get_z
Warning: Cannot mix in overloaded functions get_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: set_z
Warning: Cannot mix in overloaded functions set_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: get_z
Warning: Cannot mix in overloaded functions get_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: set_z
Warning: Cannot mix in overloaded functions set_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: get_z
Warning: Cannot mix in overloaded functions get_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: set_z
Warning: Cannot mix in overloaded functions set_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: get_z
Warning: Cannot mix in overloaded functions get_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: set_z
Warning: Cannot mix in overloaded functions set_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: get_z
Warning: Cannot mix in overloaded functions get_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: set_z
Warning: Cannot mix in overloaded functions set_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: get_z
Warning: Cannot mix in overloaded functions get_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: set_z
Warning: Cannot mix in overloaded functions set_z in class b2Vec3 , skipping
b2Vec3 exploring b2Vec3 :: __destroy__
b2AABB exploring b2AABB :: b2AABB
b2AABB exploring b2AABB :: IsValid
b2AABB exploring b2AABB :: GetCenter
b2AABB exploring b2AABB :: GetExtents
b2AABB exploring b2AABB :: GetPerimeter
b2AABB exploring b2AABB :: Combine
b2AABB exploring b2AABB :: Combine
zz  b2AABB has updated parameters of  [[{'type': 'const b2AABB &', 'name': 'aabb'}], [{'type': 'const b2AABB &', 'name': 'aabb1'}, {'type': 'const b2AABB &', 'name': 'aabb2'}]]
b2AABB exploring b2AABB :: Contains
b2AABB exploring b2AABB :: RayCast
b2AABB exploring b2AABB :: get_lowerBound
b2AABB exploring b2AABB :: set_lowerBound
b2AABB exploring b2AABB :: get_upperBound
b2AABB exploring b2AABB :: set_upperBound
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_lowerBound
Warning: Cannot mix in overloaded functions get_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_lowerBound
Warning: Cannot mix in overloaded functions set_lowerBound in class b2AABB , skipping
b2AABB exploring b2AABB :: get_upperBound
Warning: Cannot mix in overloaded functions get_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: set_upperBound
Warning: Cannot mix in overloaded functions set_upperBound in class b2AABB , skipping
b2AABB exploring b2AABB :: __destroy__
b2Pair exploring b2Pair :: __destroy__
b2TimeStep exploring b2TimeStep :: __destroy__
b2FixtureDef exploring b2FixtureDef :: b2FixtureDef
b2FixtureDef exploring b2FixtureDef :: get_shape
b2FixtureDef exploring b2FixtureDef :: set_shape
b2FixtureDef exploring b2FixtureDef :: get_userData
b2FixtureDef exploring b2FixtureDef :: set_userData
b2FixtureDef exploring b2FixtureDef :: get_friction
b2FixtureDef exploring b2FixtureDef :: set_friction
b2FixtureDef exploring b2FixtureDef :: get_restitution
b2FixtureDef exploring b2FixtureDef :: set_restitution
b2FixtureDef exploring b2FixtureDef :: get_density
b2FixtureDef exploring b2FixtureDef :: set_density
b2FixtureDef exploring b2FixtureDef :: get_isSensor
b2FixtureDef exploring b2FixtureDef :: set_isSensor
b2FixtureDef exploring b2FixtureDef :: get_filter
b2FixtureDef exploring b2FixtureDef :: set_filter
b2FixtureDef exploring b2FixtureDef :: __destroy__
b2Version exploring b2Version :: __destroy__
b2Manifold exploring b2Manifold :: __destroy__
b2WorldManifold exploring b2WorldManifold :: Initialize
b2WorldManifold exploring b2WorldManifold :: get_normal
b2WorldManifold exploring b2WorldManifold :: set_normal
b2WorldManifold exploring b2WorldManifold :: __destroy__
b2PrismaticJointDef exploring b2PrismaticJointDef :: b2PrismaticJointDef
b2PrismaticJointDef exploring b2PrismaticJointDef :: Initialize
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_bodyA
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_bodyB
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_collideConnected
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_bodyA
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_bodyB
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_collideConnected
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
Warning: Cannot mix in overloaded functions get_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
Warning: Cannot mix in overloaded functions set_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
Warning: Cannot mix in overloaded functions get_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
Warning: Cannot mix in overloaded functions set_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
Warning: Cannot mix in overloaded functions get_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
Warning: Cannot mix in overloaded functions set_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
Warning: Cannot mix in overloaded functions get_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
Warning: Cannot mix in overloaded functions set_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
Warning: Cannot mix in overloaded functions get_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
Warning: Cannot mix in overloaded functions set_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
Warning: Cannot mix in overloaded functions get_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
Warning: Cannot mix in overloaded functions set_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
Warning: Cannot mix in overloaded functions get_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
Warning: Cannot mix in overloaded functions set_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
Warning: Cannot mix in overloaded functions get_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
Warning: Cannot mix in overloaded functions set_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
Warning: Cannot mix in overloaded functions get_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
Warning: Cannot mix in overloaded functions set_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
Warning: Cannot mix in overloaded functions get_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
Warning: Cannot mix in overloaded functions set_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
Warning: Cannot mix in overloaded functions get_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
Warning: Cannot mix in overloaded functions set_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
Warning: Cannot mix in overloaded functions get_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
Warning: Cannot mix in overloaded functions set_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
Warning: Cannot mix in overloaded functions get_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
Warning: Cannot mix in overloaded functions set_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
Warning: Cannot mix in overloaded functions get_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
Warning: Cannot mix in overloaded functions set_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
Warning: Cannot mix in overloaded functions get_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
Warning: Cannot mix in overloaded functions set_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
Warning: Cannot mix in overloaded functions get_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
Warning: Cannot mix in overloaded functions set_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
Warning: Cannot mix in overloaded functions get_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
Warning: Cannot mix in overloaded functions set_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
Warning: Cannot mix in overloaded functions get_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
Warning: Cannot mix in overloaded functions set_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_lowerTranslation
Warning: Cannot mix in overloaded functions get_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_lowerTranslation
Warning: Cannot mix in overloaded functions set_lowerTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_upperTranslation
Warning: Cannot mix in overloaded functions get_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_upperTranslation
Warning: Cannot mix in overloaded functions set_upperTranslation in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_maxMotorForce
Warning: Cannot mix in overloaded functions get_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_maxMotorForce
Warning: Cannot mix in overloaded functions set_maxMotorForce in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2PrismaticJointDef , skipping
b2PrismaticJointDef exploring b2PrismaticJointDef :: __destroy__
b2RayCastOutput exploring b2RayCastOutput :: __destroy__
b2SimplexCache exploring b2SimplexCache :: __destroy__
b2ContactFeature exploring b2ContactFeature :: __destroy__
b2WheelJointDef exploring b2WheelJointDef :: b2WheelJointDef
b2WheelJointDef exploring b2WheelJointDef :: Initialize
b2WheelJointDef exploring b2WheelJointDef :: set_bodyA
b2WheelJointDef exploring b2WheelJointDef :: set_bodyB
b2WheelJointDef exploring b2WheelJointDef :: set_collideConnected
b2WheelJointDef exploring b2WheelJointDef :: get_bodyA
b2WheelJointDef exploring b2WheelJointDef :: get_bodyB
b2WheelJointDef exploring b2WheelJointDef :: get_collideConnected
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_localAxisA
Warning: Cannot mix in overloaded functions get_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_localAxisA
Warning: Cannot mix in overloaded functions set_localAxisA in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WheelJointDef , skipping
b2WheelJointDef exploring b2WheelJointDef :: __destroy__
b2MassData exploring b2MassData :: __destroy__
b2RevoluteJointDef exploring b2RevoluteJointDef :: b2RevoluteJointDef
b2RevoluteJointDef exploring b2RevoluteJointDef :: Initialize
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_bodyA
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_bodyB
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_collideConnected
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_bodyA
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_bodyB
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_collideConnected
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
Warning: Cannot mix in overloaded functions get_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
Warning: Cannot mix in overloaded functions set_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
Warning: Cannot mix in overloaded functions get_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
Warning: Cannot mix in overloaded functions set_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
Warning: Cannot mix in overloaded functions get_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
Warning: Cannot mix in overloaded functions set_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
Warning: Cannot mix in overloaded functions get_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
Warning: Cannot mix in overloaded functions set_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
Warning: Cannot mix in overloaded functions get_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
Warning: Cannot mix in overloaded functions set_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
Warning: Cannot mix in overloaded functions get_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
Warning: Cannot mix in overloaded functions set_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
Warning: Cannot mix in overloaded functions get_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
Warning: Cannot mix in overloaded functions set_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
Warning: Cannot mix in overloaded functions get_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
Warning: Cannot mix in overloaded functions set_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
Warning: Cannot mix in overloaded functions get_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
Warning: Cannot mix in overloaded functions set_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
Warning: Cannot mix in overloaded functions get_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
Warning: Cannot mix in overloaded functions set_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
Warning: Cannot mix in overloaded functions get_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
Warning: Cannot mix in overloaded functions set_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
Warning: Cannot mix in overloaded functions get_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
Warning: Cannot mix in overloaded functions set_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableLimit
Warning: Cannot mix in overloaded functions get_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableLimit
Warning: Cannot mix in overloaded functions set_enableLimit in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_lowerAngle
Warning: Cannot mix in overloaded functions get_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_lowerAngle
Warning: Cannot mix in overloaded functions set_lowerAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_upperAngle
Warning: Cannot mix in overloaded functions get_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_upperAngle
Warning: Cannot mix in overloaded functions set_upperAngle in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_enableMotor
Warning: Cannot mix in overloaded functions get_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_enableMotor
Warning: Cannot mix in overloaded functions set_enableMotor in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_motorSpeed
Warning: Cannot mix in overloaded functions get_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_motorSpeed
Warning: Cannot mix in overloaded functions set_motorSpeed in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: get_maxMotorTorque
Warning: Cannot mix in overloaded functions get_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: set_maxMotorTorque
Warning: Cannot mix in overloaded functions set_maxMotorTorque in class b2RevoluteJointDef , skipping
b2RevoluteJointDef exploring b2RevoluteJointDef :: __destroy__
b2ContactImpulse exploring b2ContactImpulse :: __destroy__
b2JointEdge exploring b2JointEdge :: __destroy__
b2PulleyJointDef exploring b2PulleyJointDef :: b2PulleyJointDef
b2PulleyJointDef exploring b2PulleyJointDef :: Initialize
b2PulleyJointDef exploring b2PulleyJointDef :: set_bodyA
b2PulleyJointDef exploring b2PulleyJointDef :: set_bodyB
b2PulleyJointDef exploring b2PulleyJointDef :: set_collideConnected
b2PulleyJointDef exploring b2PulleyJointDef :: get_bodyA
b2PulleyJointDef exploring b2PulleyJointDef :: get_bodyB
b2PulleyJointDef exploring b2PulleyJointDef :: get_collideConnected
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
Warning: Cannot mix in overloaded functions get_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
Warning: Cannot mix in overloaded functions set_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
Warning: Cannot mix in overloaded functions get_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
Warning: Cannot mix in overloaded functions set_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
Warning: Cannot mix in overloaded functions get_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
Warning: Cannot mix in overloaded functions set_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
Warning: Cannot mix in overloaded functions get_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
Warning: Cannot mix in overloaded functions set_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
Warning: Cannot mix in overloaded functions get_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
Warning: Cannot mix in overloaded functions set_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
Warning: Cannot mix in overloaded functions get_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
Warning: Cannot mix in overloaded functions set_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
Warning: Cannot mix in overloaded functions get_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
Warning: Cannot mix in overloaded functions set_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
Warning: Cannot mix in overloaded functions get_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
Warning: Cannot mix in overloaded functions set_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
Warning: Cannot mix in overloaded functions get_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
Warning: Cannot mix in overloaded functions set_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
Warning: Cannot mix in overloaded functions get_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
Warning: Cannot mix in overloaded functions set_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
Warning: Cannot mix in overloaded functions get_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
Warning: Cannot mix in overloaded functions set_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
Warning: Cannot mix in overloaded functions get_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
Warning: Cannot mix in overloaded functions set_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
Warning: Cannot mix in overloaded functions get_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
Warning: Cannot mix in overloaded functions set_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
Warning: Cannot mix in overloaded functions get_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
Warning: Cannot mix in overloaded functions set_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
Warning: Cannot mix in overloaded functions get_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
Warning: Cannot mix in overloaded functions set_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
Warning: Cannot mix in overloaded functions get_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
Warning: Cannot mix in overloaded functions set_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
Warning: Cannot mix in overloaded functions get_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
Warning: Cannot mix in overloaded functions set_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
Warning: Cannot mix in overloaded functions get_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
Warning: Cannot mix in overloaded functions set_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
Warning: Cannot mix in overloaded functions get_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
Warning: Cannot mix in overloaded functions set_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
Warning: Cannot mix in overloaded functions get_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
Warning: Cannot mix in overloaded functions set_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
Warning: Cannot mix in overloaded functions get_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
Warning: Cannot mix in overloaded functions set_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
Warning: Cannot mix in overloaded functions get_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
Warning: Cannot mix in overloaded functions set_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
Warning: Cannot mix in overloaded functions get_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
Warning: Cannot mix in overloaded functions set_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
Warning: Cannot mix in overloaded functions get_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
Warning: Cannot mix in overloaded functions set_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorA
Warning: Cannot mix in overloaded functions get_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorA
Warning: Cannot mix in overloaded functions set_groundAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_groundAnchorB
Warning: Cannot mix in overloaded functions get_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_groundAnchorB
Warning: Cannot mix in overloaded functions set_groundAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthA
Warning: Cannot mix in overloaded functions get_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthA
Warning: Cannot mix in overloaded functions set_lengthA in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_lengthB
Warning: Cannot mix in overloaded functions get_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_lengthB
Warning: Cannot mix in overloaded functions set_lengthB in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2PulleyJointDef , skipping
b2PulleyJointDef exploring b2PulleyJointDef :: __destroy__
b2Mat22 exploring b2Mat22 :: b2Mat22
b2Mat22 exploring b2Mat22 :: b2Mat22
zz  b2Mat22 has updated parameters of  [[], [{'type': 'const b2Vec2 &', 'name': 'c1'}, {'type': 'const b2Vec2 &', 'name': 'c2'}]]
b2Mat22 exploring b2Mat22 :: b2Mat22
zz  b2Mat22 has updated parameters of  [[], [{'type': 'const b2Vec2 &', 'name': 'c1'}, {'type': 'const b2Vec2 &', 'name': 'c2'}], [{'type': 'float', 'name': 'a11'}, {'type': 'float', 'name': 'a12'}, {'type': 'float', 'name': 'a21'}, {'type': 'float', 'name': 'a22'}]]
b2Mat22 exploring b2Mat22 :: Set
b2Mat22 exploring b2Mat22 :: SetIdentity
b2Mat22 exploring b2Mat22 :: SetZero
b2Mat22 exploring b2Mat22 :: GetInverse
b2Mat22 exploring b2Mat22 :: Solve
b2Mat22 exploring b2Mat22 :: get_ey
b2Mat22 exploring b2Mat22 :: set_ey
b2Mat22 exploring b2Mat22 :: get_ey
Warning: Cannot mix in overloaded functions get_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: set_ey
Warning: Cannot mix in overloaded functions set_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: get_ey
Warning: Cannot mix in overloaded functions get_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: set_ey
Warning: Cannot mix in overloaded functions set_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: get_ey
Warning: Cannot mix in overloaded functions get_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: set_ey
Warning: Cannot mix in overloaded functions set_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: get_ey
Warning: Cannot mix in overloaded functions get_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: set_ey
Warning: Cannot mix in overloaded functions set_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: get_ey
Warning: Cannot mix in overloaded functions get_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: set_ey
Warning: Cannot mix in overloaded functions set_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: get_ey
Warning: Cannot mix in overloaded functions get_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: set_ey
Warning: Cannot mix in overloaded functions set_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: get_ey
Warning: Cannot mix in overloaded functions get_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: set_ey
Warning: Cannot mix in overloaded functions set_ey in class b2Mat22 , skipping
b2Mat22 exploring b2Mat22 :: __destroy__
b2ManifoldPoint exploring b2ManifoldPoint :: __destroy__
b2JointDef exploring b2JointDef :: b2JointDef
b2JointDef exploring b2JointDef :: get_type
b2JointDef exploring b2JointDef :: set_type
b2JointDef exploring b2JointDef :: get_userData
b2JointDef exploring b2JointDef :: set_userData
b2JointDef exploring b2JointDef :: get_bodyA
b2JointDef exploring b2JointDef :: set_bodyA
b2JointDef exploring b2JointDef :: get_bodyB
b2JointDef exploring b2JointDef :: set_bodyB
b2JointDef exploring b2JointDef :: get_collideConnected
b2JointDef exploring b2JointDef :: set_collideConnected
b2JointDef exploring b2JointDef :: __destroy__
b2SolverData exploring b2SolverData :: __destroy__
b2Transform exploring b2Transform :: b2Transform
b2Transform exploring b2Transform :: b2Transform
zz  b2Transform has updated parameters of  [[], [{'type': 'const b2Vec2 &', 'name': 'position'}, {'type': 'const b2Rot &', 'name': 'rotation'}]]
b2Transform exploring b2Transform :: SetIdentity
b2Transform exploring b2Transform :: Set
b2Transform exploring b2Transform :: get_p
b2Transform exploring b2Transform :: set_p
b2Transform exploring b2Transform :: get_q
b2Transform exploring b2Transform :: set_q
b2Transform exploring b2Transform :: get_p
Warning: Cannot mix in overloaded functions get_p in class b2Transform , skipping
b2Transform exploring b2Transform :: set_p
Warning: Cannot mix in overloaded functions set_p in class b2Transform , skipping
b2Transform exploring b2Transform :: get_q
Warning: Cannot mix in overloaded functions get_q in class b2Transform , skipping
b2Transform exploring b2Transform :: set_q
Warning: Cannot mix in overloaded functions set_q in class b2Transform , skipping
b2Transform exploring b2Transform :: get_p
Warning: Cannot mix in overloaded functions get_p in class b2Transform , skipping
b2Transform exploring b2Transform :: set_p
Warning: Cannot mix in overloaded functions set_p in class b2Transform , skipping
b2Transform exploring b2Transform :: get_q
Warning: Cannot mix in overloaded functions get_q in class b2Transform , skipping
b2Transform exploring b2Transform :: set_q
Warning: Cannot mix in overloaded functions set_q in class b2Transform , skipping
b2Transform exploring b2Transform :: get_p
Warning: Cannot mix in overloaded functions get_p in class b2Transform , skipping
b2Transform exploring b2Transform :: set_p
Warning: Cannot mix in overloaded functions set_p in class b2Transform , skipping
b2Transform exploring b2Transform :: get_q
Warning: Cannot mix in overloaded functions get_q in class b2Transform , skipping
b2Transform exploring b2Transform :: set_q
Warning: Cannot mix in overloaded functions set_q in class b2Transform , skipping
b2Transform exploring b2Transform :: __destroy__
b2Color exploring b2Color :: b2Color
b2Color exploring b2Color :: b2Color
zz  b2Color has updated parameters of  [[], [{'type': 'float', 'name': 'r'}, {'type': 'float', 'name': 'g'}, {'type': 'float', 'name': 'b'}]]
b2Color exploring b2Color :: Set
b2Color exploring b2Color :: get_r
b2Color exploring b2Color :: set_r
b2Color exploring b2Color :: get_g
b2Color exploring b2Color :: set_g
b2Color exploring b2Color :: get_b
b2Color exploring b2Color :: set_b
b2Color exploring b2Color :: get_r
Warning: Cannot mix in overloaded functions get_r in class b2Color , skipping
b2Color exploring b2Color :: set_r
Warning: Cannot mix in overloaded functions set_r in class b2Color , skipping
b2Color exploring b2Color :: get_g
Warning: Cannot mix in overloaded functions get_g in class b2Color , skipping
b2Color exploring b2Color :: set_g
Warning: Cannot mix in overloaded functions set_g in class b2Color , skipping
b2Color exploring b2Color :: get_b
Warning: Cannot mix in overloaded functions get_b in class b2Color , skipping
b2Color exploring b2Color :: set_b
Warning: Cannot mix in overloaded functions set_b in class b2Color , skipping
b2Color exploring b2Color :: get_r
Warning: Cannot mix in overloaded functions get_r in class b2Color , skipping
b2Color exploring b2Color :: set_r
Warning: Cannot mix in overloaded functions set_r in class b2Color , skipping
b2Color exploring b2Color :: get_g
Warning: Cannot mix in overloaded functions get_g in class b2Color , skipping
b2Color exploring b2Color :: set_g
Warning: Cannot mix in overloaded functions set_g in class b2Color , skipping
b2Color exploring b2Color :: get_b
Warning: Cannot mix in overloaded functions get_b in class b2Color , skipping
b2Color exploring b2Color :: set_b
Warning: Cannot mix in overloaded functions set_b in class b2Color , skipping
b2Color exploring b2Color :: __destroy__
b2Velocity exploring b2Velocity :: __destroy__
b2RayCastInput exploring b2RayCastInput :: __destroy__
b2Rot exploring b2Rot :: b2Rot
b2Rot exploring b2Rot :: b2Rot
zz  b2Rot has updated parameters of  [[], [{'type': 'float', 'name': 'angle'}]]
b2Rot exploring b2Rot :: Set
b2Rot exploring b2Rot :: SetIdentity
b2Rot exploring b2Rot :: GetAngle
b2Rot exploring b2Rot :: GetXAxis
b2Rot exploring b2Rot :: GetYAxis
b2Rot exploring b2Rot :: get_c
b2Rot exploring b2Rot :: set_c
b2Rot exploring b2Rot :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Rot , skipping
b2Rot exploring b2Rot :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Rot , skipping
b2Rot exploring b2Rot :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Rot , skipping
b2Rot exploring b2Rot :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Rot , skipping
b2Rot exploring b2Rot :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Rot , skipping
b2Rot exploring b2Rot :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Rot , skipping
b2Rot exploring b2Rot :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Rot , skipping
b2Rot exploring b2Rot :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Rot , skipping
b2Rot exploring b2Rot :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Rot , skipping
b2Rot exploring b2Rot :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Rot , skipping
b2Rot exploring b2Rot :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Rot , skipping
b2Rot exploring b2Rot :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Rot , skipping
b2Rot exploring b2Rot :: __destroy__
b2TOIInput exploring b2TOIInput :: __destroy__
b2WeldJointDef exploring b2WeldJointDef :: b2WeldJointDef
b2WeldJointDef exploring b2WeldJointDef :: Initialize
b2WeldJointDef exploring b2WeldJointDef :: set_bodyA
b2WeldJointDef exploring b2WeldJointDef :: set_bodyB
b2WeldJointDef exploring b2WeldJointDef :: set_collideConnected
b2WeldJointDef exploring b2WeldJointDef :: get_bodyA
b2WeldJointDef exploring b2WeldJointDef :: get_bodyB
b2WeldJointDef exploring b2WeldJointDef :: get_collideConnected
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_referenceAngle
Warning: Cannot mix in overloaded functions get_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_referenceAngle
Warning: Cannot mix in overloaded functions set_referenceAngle in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2WeldJointDef , skipping
b2WeldJointDef exploring b2WeldJointDef :: __destroy__
b2ClipVertex exploring b2ClipVertex :: __destroy__
b2FixtureProxy exploring b2FixtureProxy :: __destroy__
b2MouseJointDef exploring b2MouseJointDef :: b2MouseJointDef
b2MouseJointDef exploring b2MouseJointDef :: set_bodyA
b2MouseJointDef exploring b2MouseJointDef :: set_bodyB
b2MouseJointDef exploring b2MouseJointDef :: set_collideConnected
b2MouseJointDef exploring b2MouseJointDef :: get_bodyA
b2MouseJointDef exploring b2MouseJointDef :: get_bodyB
b2MouseJointDef exploring b2MouseJointDef :: get_collideConnected
b2MouseJointDef exploring b2MouseJointDef :: get_target
b2MouseJointDef exploring b2MouseJointDef :: set_target
b2MouseJointDef exploring b2MouseJointDef :: get_maxForce
b2MouseJointDef exploring b2MouseJointDef :: set_maxForce
b2MouseJointDef exploring b2MouseJointDef :: get_frequencyHz
b2MouseJointDef exploring b2MouseJointDef :: set_frequencyHz
b2MouseJointDef exploring b2MouseJointDef :: get_dampingRatio
b2MouseJointDef exploring b2MouseJointDef :: set_dampingRatio
b2MouseJointDef exploring b2MouseJointDef :: get_target
Warning: Cannot mix in overloaded functions get_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_target
Warning: Cannot mix in overloaded functions set_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_target
Warning: Cannot mix in overloaded functions get_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_target
Warning: Cannot mix in overloaded functions set_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_target
Warning: Cannot mix in overloaded functions get_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_target
Warning: Cannot mix in overloaded functions set_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_target
Warning: Cannot mix in overloaded functions get_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_target
Warning: Cannot mix in overloaded functions set_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_target
Warning: Cannot mix in overloaded functions get_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_target
Warning: Cannot mix in overloaded functions set_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_target
Warning: Cannot mix in overloaded functions get_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_target
Warning: Cannot mix in overloaded functions set_target in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_maxForce
Warning: Cannot mix in overloaded functions get_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_maxForce
Warning: Cannot mix in overloaded functions set_maxForce in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2MouseJointDef , skipping
b2MouseJointDef exploring b2MouseJointDef :: __destroy__
_complex exploring _complex :: __destroy__
b2DistanceOutput exploring b2DistanceOutput :: __destroy__
b2DistanceProxy exploring b2DistanceProxy :: b2DistanceProxy
b2DistanceProxy exploring b2DistanceProxy :: Set
b2DistanceProxy exploring b2DistanceProxy :: GetSupport
b2DistanceProxy exploring b2DistanceProxy :: GetSupportVertex
b2DistanceProxy exploring b2DistanceProxy :: GetVertexCount
b2DistanceProxy exploring b2DistanceProxy :: GetVertex
b2DistanceProxy exploring b2DistanceProxy :: get_m_vertices
b2DistanceProxy exploring b2DistanceProxy :: set_m_vertices
b2DistanceProxy exploring b2DistanceProxy :: get_m_count
b2DistanceProxy exploring b2DistanceProxy :: set_m_count
b2DistanceProxy exploring b2DistanceProxy :: get_m_radius
b2DistanceProxy exploring b2DistanceProxy :: set_m_radius
b2DistanceProxy exploring b2DistanceProxy :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_vertices
Warning: Cannot mix in overloaded functions get_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_vertices
Warning: Cannot mix in overloaded functions set_m_vertices in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_count
Warning: Cannot mix in overloaded functions get_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_count
Warning: Cannot mix in overloaded functions set_m_count in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: get_m_radius
Warning: Cannot mix in overloaded functions get_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: set_m_radius
Warning: Cannot mix in overloaded functions set_m_radius in class b2DistanceProxy , skipping
b2DistanceProxy exploring b2DistanceProxy :: __destroy__
b2ContactRegister exploring b2ContactRegister :: __destroy__
b2DistanceJointDef exploring b2DistanceJointDef :: b2DistanceJointDef
b2DistanceJointDef exploring b2DistanceJointDef :: Initialize
b2DistanceJointDef exploring b2DistanceJointDef :: set_bodyA
b2DistanceJointDef exploring b2DistanceJointDef :: set_bodyB
b2DistanceJointDef exploring b2DistanceJointDef :: set_collideConnected
b2DistanceJointDef exploring b2DistanceJointDef :: get_bodyA
b2DistanceJointDef exploring b2DistanceJointDef :: get_bodyB
b2DistanceJointDef exploring b2DistanceJointDef :: get_collideConnected
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
Warning: Cannot mix in overloaded functions get_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
Warning: Cannot mix in overloaded functions set_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
Warning: Cannot mix in overloaded functions get_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
Warning: Cannot mix in overloaded functions set_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
Warning: Cannot mix in overloaded functions get_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
Warning: Cannot mix in overloaded functions set_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
Warning: Cannot mix in overloaded functions get_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
Warning: Cannot mix in overloaded functions set_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
Warning: Cannot mix in overloaded functions get_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
Warning: Cannot mix in overloaded functions set_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
Warning: Cannot mix in overloaded functions get_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
Warning: Cannot mix in overloaded functions set_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorA
Warning: Cannot mix in overloaded functions get_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorA
Warning: Cannot mix in overloaded functions set_localAnchorA in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_localAnchorB
Warning: Cannot mix in overloaded functions get_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_localAnchorB
Warning: Cannot mix in overloaded functions set_localAnchorB in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_length
Warning: Cannot mix in overloaded functions get_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_length
Warning: Cannot mix in overloaded functions set_length in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_frequencyHz
Warning: Cannot mix in overloaded functions get_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_frequencyHz
Warning: Cannot mix in overloaded functions set_frequencyHz in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: get_dampingRatio
Warning: Cannot mix in overloaded functions get_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: set_dampingRatio
Warning: Cannot mix in overloaded functions set_dampingRatio in class b2DistanceJointDef , skipping
b2DistanceJointDef exploring b2DistanceJointDef :: __destroy__
b2GearJointDef exploring b2GearJointDef :: b2GearJointDef
b2GearJointDef exploring b2GearJointDef :: set_bodyA
b2GearJointDef exploring b2GearJointDef :: set_bodyB
b2GearJointDef exploring b2GearJointDef :: set_collideConnected
b2GearJointDef exploring b2GearJointDef :: get_bodyA
b2GearJointDef exploring b2GearJointDef :: get_bodyB
b2GearJointDef exploring b2GearJointDef :: get_collideConnected
b2GearJointDef exploring b2GearJointDef :: get_joint1
b2GearJointDef exploring b2GearJointDef :: set_joint1
b2GearJointDef exploring b2GearJointDef :: get_joint2
b2GearJointDef exploring b2GearJointDef :: set_joint2
b2GearJointDef exploring b2GearJointDef :: get_ratio
b2GearJointDef exploring b2GearJointDef :: set_ratio
b2GearJointDef exploring b2GearJointDef :: get_joint1
Warning: Cannot mix in overloaded functions get_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint1
Warning: Cannot mix in overloaded functions set_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint2
Warning: Cannot mix in overloaded functions get_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint2
Warning: Cannot mix in overloaded functions set_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint1
Warning: Cannot mix in overloaded functions get_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint1
Warning: Cannot mix in overloaded functions set_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint2
Warning: Cannot mix in overloaded functions get_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint2
Warning: Cannot mix in overloaded functions set_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint1
Warning: Cannot mix in overloaded functions get_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint1
Warning: Cannot mix in overloaded functions set_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint2
Warning: Cannot mix in overloaded functions get_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint2
Warning: Cannot mix in overloaded functions set_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint1
Warning: Cannot mix in overloaded functions get_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint1
Warning: Cannot mix in overloaded functions set_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint2
Warning: Cannot mix in overloaded functions get_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint2
Warning: Cannot mix in overloaded functions set_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint1
Warning: Cannot mix in overloaded functions get_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint1
Warning: Cannot mix in overloaded functions set_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint2
Warning: Cannot mix in overloaded functions get_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint2
Warning: Cannot mix in overloaded functions set_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint1
Warning: Cannot mix in overloaded functions get_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint1
Warning: Cannot mix in overloaded functions set_joint1 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_joint2
Warning: Cannot mix in overloaded functions get_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_joint2
Warning: Cannot mix in overloaded functions set_joint2 in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: get_ratio
Warning: Cannot mix in overloaded functions get_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: set_ratio
Warning: Cannot mix in overloaded functions set_ratio in class b2GearJointDef , skipping
b2GearJointDef exploring b2GearJointDef :: __destroy__
b2Jacobian exploring b2Jacobian :: __destroy__
b2ContactEdge exploring b2ContactEdge :: b2ContactEdge
b2ContactEdge exploring b2ContactEdge :: get_other
b2ContactEdge exploring b2ContactEdge :: set_other
b2ContactEdge exploring b2ContactEdge :: get_contact
b2ContactEdge exploring b2ContactEdge :: set_contact
b2ContactEdge exploring b2ContactEdge :: get_prev
b2ContactEdge exploring b2ContactEdge :: set_prev
b2ContactEdge exploring b2ContactEdge :: get_next
b2ContactEdge exploring b2ContactEdge :: set_next
b2ContactEdge exploring b2ContactEdge :: __destroy__
b2Sweep exploring b2Sweep :: GetTransform
b2Sweep exploring b2Sweep :: Advance
b2Sweep exploring b2Sweep :: Normalize
b2Sweep exploring b2Sweep :: get_localCenter
b2Sweep exploring b2Sweep :: set_localCenter
b2Sweep exploring b2Sweep :: get_c
b2Sweep exploring b2Sweep :: set_c
b2Sweep exploring b2Sweep :: get_a
b2Sweep exploring b2Sweep :: set_a
b2Sweep exploring b2Sweep :: get_alpha0
b2Sweep exploring b2Sweep :: set_alpha0
b2Sweep exploring b2Sweep :: get_localCenter
Warning: Cannot mix in overloaded functions get_localCenter in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_localCenter
Warning: Cannot mix in overloaded functions set_localCenter in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: get_a
Warning: Cannot mix in overloaded functions get_a in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_a
Warning: Cannot mix in overloaded functions set_a in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: get_alpha0
Warning: Cannot mix in overloaded functions get_alpha0 in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_alpha0
Warning: Cannot mix in overloaded functions set_alpha0 in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: get_localCenter
Warning: Cannot mix in overloaded functions get_localCenter in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_localCenter
Warning: Cannot mix in overloaded functions set_localCenter in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: get_c
Warning: Cannot mix in overloaded functions get_c in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_c
Warning: Cannot mix in overloaded functions set_c in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: get_a
Warning: Cannot mix in overloaded functions get_a in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_a
Warning: Cannot mix in overloaded functions set_a in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: get_alpha0
Warning: Cannot mix in overloaded functions get_alpha0 in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: set_alpha0
Warning: Cannot mix in overloaded functions set_alpha0 in class b2Sweep , skipping
b2Sweep exploring b2Sweep :: __destroy__
Checking pure virtual for b2ContactManager []
zz b2ContactManager is abstract? None
zz b2ContactManager has constructor? True
zz generating: b2ContactManager b2ContactManager
zz methods:  ['get_m_contactFilter', 'get_m_contactCount', 'set_m_contactFilter', 'b2ContactManager', 'AddPair', 'set_m_allocator', 'set_m_contactCount', 'Collide', 'set_m_contactList', 'FindNewContacts', 'get_m_contactListener', '__destroy__', 'set_m_contactListener', 'get_m_broadPhase', 'Destroy', 'set_m_broadPhase', 'get_m_contactList', 'get_m_allocator']
zz generating b2ContactManager::get_m_contactFilter
zz making return b2ContactManager get_m_contactFilter b2ContactFilter _emscripten_bind_b2ContactManager__get_m_contactFilter_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager get_m_contactFilter get_m_contactFilter
zz generating b2ContactManager::get_m_contactCount
zz making return b2ContactManager get_m_contactCount signed int _emscripten_bind_b2ContactManager__get_m_contactCount_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager get_m_contactCount get_m_contactCount
zz generating b2ContactManager::set_m_contactFilter
zz making return b2ContactManager set_m_contactFilter void _emscripten_bind_b2ContactManager__set_m_contactFilter_p1(this.ptr, arg0.ptr)
Maekin: b2ContactManager b2ContactManager set_m_contactFilter set_m_contactFilter
zz generating b2ContactManager::b2ContactManager
Maekin: b2ContactManager b2ContactManager b2ContactManager b2ContactManager
zz generating b2ContactManager::AddPair
zz making return b2ContactManager AddPair void _emscripten_bind_b2ContactManager__AddPair_p2(this.ptr, arg0, arg1)
Maekin: b2ContactManager b2ContactManager AddPair AddPair
zz generating b2ContactManager::set_m_allocator
zz making return b2ContactManager set_m_allocator void _emscripten_bind_b2ContactManager__set_m_allocator_p1(this.ptr, arg0.ptr)
Maekin: b2ContactManager b2ContactManager set_m_allocator set_m_allocator
zz generating b2ContactManager::set_m_contactCount
zz making return b2ContactManager set_m_contactCount void _emscripten_bind_b2ContactManager__set_m_contactCount_p1(this.ptr, arg0)
Maekin: b2ContactManager b2ContactManager set_m_contactCount set_m_contactCount
zz generating b2ContactManager::Collide
zz making return b2ContactManager Collide void _emscripten_bind_b2ContactManager__Collide_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager Collide Collide
zz generating b2ContactManager::set_m_contactList
zz making return b2ContactManager set_m_contactList void _emscripten_bind_b2ContactManager__set_m_contactList_p1(this.ptr, arg0.ptr)
Maekin: b2ContactManager b2ContactManager set_m_contactList set_m_contactList
zz generating b2ContactManager::FindNewContacts
zz making return b2ContactManager FindNewContacts void _emscripten_bind_b2ContactManager__FindNewContacts_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager FindNewContacts FindNewContacts
zz generating b2ContactManager::get_m_contactListener
zz making return b2ContactManager get_m_contactListener b2ContactListener _emscripten_bind_b2ContactManager__get_m_contactListener_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager get_m_contactListener get_m_contactListener
zz generating b2ContactManager::__destroy__
zz making return b2ContactManager __destroy__ void _emscripten_bind_b2ContactManager____destroy___p0(this.ptr)
Maekin: b2ContactManager b2ContactManager __destroy__ __destroy__
zz generating b2ContactManager::set_m_contactListener
zz making return b2ContactManager set_m_contactListener void _emscripten_bind_b2ContactManager__set_m_contactListener_p1(this.ptr, arg0.ptr)
Maekin: b2ContactManager b2ContactManager set_m_contactListener set_m_contactListener
zz generating b2ContactManager::get_m_broadPhase
zz making return b2ContactManager get_m_broadPhase b2BroadPhase _emscripten_bind_b2ContactManager__get_m_broadPhase_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager get_m_broadPhase get_m_broadPhase
zz generating b2ContactManager::Destroy
zz making return b2ContactManager Destroy void _emscripten_bind_b2ContactManager__Destroy_p1(this.ptr, arg0.ptr)
Maekin: b2ContactManager b2ContactManager Destroy Destroy
zz generating b2ContactManager::set_m_broadPhase
zz making return b2ContactManager set_m_broadPhase void _emscripten_bind_b2ContactManager__set_m_broadPhase_p1(this.ptr, arg0.ptr)
Maekin: b2ContactManager b2ContactManager set_m_broadPhase set_m_broadPhase
zz generating b2ContactManager::get_m_contactList
zz making return b2ContactManager get_m_contactList b2Contact _emscripten_bind_b2ContactManager__get_m_contactList_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager get_m_contactList get_m_contactList
zz generating b2ContactManager::get_m_allocator
zz making return b2ContactManager get_m_allocator b2BlockAllocator _emscripten_bind_b2ContactManager__get_m_allocator_p0(this.ptr)
Maekin: b2ContactManager b2ContactManager get_m_allocator get_m_allocator
Checking pure virtual for b2DistanceJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2DistanceJoint is abstract? None
zz b2DistanceJoint has constructor? True
zz generating: b2DistanceJoint b2DistanceJoint
zz methods:  ['GetBodyA', 'GetBodyB', 'SetFrequency', 'GetUserData', 'SetUserData', 'GetAnchorB', 'GetAnchorA', 'GetNext', 'GetLocalAnchorA', 'GetLocalAnchorB', 'GetFrequency', 'GetReactionForce', 'GetLength', 'GetDampingRatio', 'GetCollideConnected', '__destroy__', 'Dump', 'GetType', 'b2DistanceJoint', 'SetDampingRatio', 'GetReactionTorque', 'SetLength', 'IsActive']
zz generating b2DistanceJoint::GetBodyA
zz making return b2DistanceJoint GetBodyA b2Body _emscripten_bind_b2DistanceJoint__GetBodyA_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetBodyA GetBodyA
zz generating b2DistanceJoint::GetBodyB
zz making return b2DistanceJoint GetBodyB b2Body _emscripten_bind_b2DistanceJoint__GetBodyB_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetBodyB GetBodyB
zz generating b2DistanceJoint::SetFrequency
zz making return b2DistanceJoint SetFrequency void _emscripten_bind_b2DistanceJoint__SetFrequency_p1(this.ptr, arg0)
Maekin: b2DistanceJoint b2DistanceJoint SetFrequency SetFrequency
zz generating b2DistanceJoint::GetUserData
zz making return b2DistanceJoint GetUserData void _emscripten_bind_b2DistanceJoint__GetUserData_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetUserData GetUserData
zz generating b2DistanceJoint::SetUserData
zz making return b2DistanceJoint SetUserData void _emscripten_bind_b2DistanceJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2DistanceJoint b2DistanceJoint SetUserData SetUserData
zz generating b2DistanceJoint::GetAnchorB
zz making return b2DistanceJoint GetAnchorB b2Vec2 _emscripten_bind_b2DistanceJoint__GetAnchorB_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetAnchorB GetAnchorB
zz generating b2DistanceJoint::GetAnchorA
zz making return b2DistanceJoint GetAnchorA b2Vec2 _emscripten_bind_b2DistanceJoint__GetAnchorA_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetAnchorA GetAnchorA
zz generating b2DistanceJoint::GetNext
zz making return b2DistanceJoint GetNext b2Joint _emscripten_bind_b2DistanceJoint__GetNext_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetNext GetNext
zz generating b2DistanceJoint::GetLocalAnchorA
zz making return b2DistanceJoint GetLocalAnchorA b2Vec2 _emscripten_bind_b2DistanceJoint__GetLocalAnchorA_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetLocalAnchorA GetLocalAnchorA
zz generating b2DistanceJoint::GetLocalAnchorB
zz making return b2DistanceJoint GetLocalAnchorB b2Vec2 _emscripten_bind_b2DistanceJoint__GetLocalAnchorB_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetLocalAnchorB GetLocalAnchorB
zz generating b2DistanceJoint::GetFrequency
zz making return b2DistanceJoint GetFrequency float _emscripten_bind_b2DistanceJoint__GetFrequency_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetFrequency GetFrequency
zz generating b2DistanceJoint::GetReactionForce
zz making return b2DistanceJoint GetReactionForce b2Vec2 _emscripten_bind_b2DistanceJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2DistanceJoint b2DistanceJoint GetReactionForce GetReactionForce
zz generating b2DistanceJoint::GetLength
zz making return b2DistanceJoint GetLength float _emscripten_bind_b2DistanceJoint__GetLength_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetLength GetLength
zz generating b2DistanceJoint::GetDampingRatio
zz making return b2DistanceJoint GetDampingRatio float _emscripten_bind_b2DistanceJoint__GetDampingRatio_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetDampingRatio GetDampingRatio
zz generating b2DistanceJoint::GetCollideConnected
zz making return b2DistanceJoint GetCollideConnected bool _emscripten_bind_b2DistanceJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetCollideConnected GetCollideConnected
zz generating b2DistanceJoint::__destroy__
zz making return b2DistanceJoint __destroy__ void _emscripten_bind_b2DistanceJoint____destroy___p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint __destroy__ __destroy__
zz generating b2DistanceJoint::Dump
zz making return b2DistanceJoint Dump void _emscripten_bind_b2DistanceJoint__Dump_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint Dump Dump
zz generating b2DistanceJoint::GetType
zz making return b2DistanceJoint GetType int _emscripten_bind_b2DistanceJoint__GetType_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint GetType GetType
zz generating b2DistanceJoint::b2DistanceJoint
Maekin: b2DistanceJoint b2DistanceJoint b2DistanceJoint b2DistanceJoint
zz generating b2DistanceJoint::SetDampingRatio
zz making return b2DistanceJoint SetDampingRatio void _emscripten_bind_b2DistanceJoint__SetDampingRatio_p1(this.ptr, arg0)
Maekin: b2DistanceJoint b2DistanceJoint SetDampingRatio SetDampingRatio
zz generating b2DistanceJoint::GetReactionTorque
zz making return b2DistanceJoint GetReactionTorque float _emscripten_bind_b2DistanceJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2DistanceJoint b2DistanceJoint GetReactionTorque GetReactionTorque
zz generating b2DistanceJoint::SetLength
zz making return b2DistanceJoint SetLength void _emscripten_bind_b2DistanceJoint__SetLength_p1(this.ptr, arg0)
Maekin: b2DistanceJoint b2DistanceJoint SetLength SetLength
zz generating b2DistanceJoint::IsActive
zz making return b2DistanceJoint IsActive bool _emscripten_bind_b2DistanceJoint__IsActive_p0(this.ptr)
Maekin: b2DistanceJoint b2DistanceJoint IsActive IsActive
Checking pure virtual for b2Fixture []
zz b2Fixture is abstract? None
zz b2Fixture has constructor? True
zz generating: b2Fixture b2Fixture
zz methods:  ['GetRestitution', 'SetFilterData', 'SetFriction', 'b2Fixture', 'GetShape', 'SetRestitution', 'GetBody', 'GetNext', 'GetFriction', 'GetUserData', 'SetDensity', 'GetMassData', 'SetSensor', 'GetAABB', 'TestPoint', 'SetUserData', '__destroy__', 'RayCast', 'Refilter', 'Dump', 'GetFilterData', 'IsSensor', 'GetType', 'GetDensity']
zz generating b2Fixture::GetRestitution
zz making return b2Fixture GetRestitution float _emscripten_bind_b2Fixture__GetRestitution_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetRestitution GetRestitution
zz generating b2Fixture::SetFilterData
zz making return b2Fixture SetFilterData void _emscripten_bind_b2Fixture__SetFilterData_p1(this.ptr, arg0.ptr)
Maekin: b2Fixture b2Fixture SetFilterData SetFilterData
zz generating b2Fixture::SetFriction
zz making return b2Fixture SetFriction void _emscripten_bind_b2Fixture__SetFriction_p1(this.ptr, arg0)
Maekin: b2Fixture b2Fixture SetFriction SetFriction
zz generating b2Fixture::b2Fixture
Maekin: b2Fixture b2Fixture b2Fixture b2Fixture
zz generating b2Fixture::GetShape
zz making return b2Fixture GetShape b2Shape _emscripten_bind_b2Fixture__GetShape_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetShape GetShape
zz generating b2Fixture::SetRestitution
zz making return b2Fixture SetRestitution void _emscripten_bind_b2Fixture__SetRestitution_p1(this.ptr, arg0)
Maekin: b2Fixture b2Fixture SetRestitution SetRestitution
zz generating b2Fixture::GetBody
zz making return b2Fixture GetBody b2Body _emscripten_bind_b2Fixture__GetBody_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetBody GetBody
zz generating b2Fixture::GetNext
zz making return b2Fixture GetNext b2Fixture _emscripten_bind_b2Fixture__GetNext_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetNext GetNext
zz generating b2Fixture::GetFriction
zz making return b2Fixture GetFriction float _emscripten_bind_b2Fixture__GetFriction_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetFriction GetFriction
zz generating b2Fixture::GetUserData
zz making return b2Fixture GetUserData void _emscripten_bind_b2Fixture__GetUserData_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetUserData GetUserData
zz generating b2Fixture::SetDensity
zz making return b2Fixture SetDensity void _emscripten_bind_b2Fixture__SetDensity_p1(this.ptr, arg0)
Maekin: b2Fixture b2Fixture SetDensity SetDensity
zz generating b2Fixture::GetMassData
zz making return b2Fixture GetMassData void _emscripten_bind_b2Fixture__GetMassData_p1(this.ptr, arg0.ptr)
Maekin: b2Fixture b2Fixture GetMassData GetMassData
zz generating b2Fixture::SetSensor
zz making return b2Fixture SetSensor void _emscripten_bind_b2Fixture__SetSensor_p1(this.ptr, arg0)
Maekin: b2Fixture b2Fixture SetSensor SetSensor
zz generating b2Fixture::GetAABB
zz making return b2Fixture GetAABB b2AABB _emscripten_bind_b2Fixture__GetAABB_p1(this.ptr, arg0)
Maekin: b2Fixture b2Fixture GetAABB GetAABB
zz generating b2Fixture::TestPoint
zz making return b2Fixture TestPoint bool _emscripten_bind_b2Fixture__TestPoint_p1(this.ptr, arg0.ptr)
Maekin: b2Fixture b2Fixture TestPoint TestPoint
zz generating b2Fixture::SetUserData
zz making return b2Fixture SetUserData void _emscripten_bind_b2Fixture__SetUserData_p1(this.ptr, arg0)
Maekin: b2Fixture b2Fixture SetUserData SetUserData
zz generating b2Fixture::__destroy__
zz making return b2Fixture __destroy__ void _emscripten_bind_b2Fixture____destroy___p0(this.ptr)
Maekin: b2Fixture b2Fixture __destroy__ __destroy__
zz generating b2Fixture::RayCast
zz making return b2Fixture RayCast bool _emscripten_bind_b2Fixture__RayCast_p3(this.ptr, arg0.ptr, arg1.ptr, arg2)
Maekin: b2Fixture b2Fixture RayCast RayCast
zz generating b2Fixture::Refilter
zz making return b2Fixture Refilter void _emscripten_bind_b2Fixture__Refilter_p0(this.ptr)
Maekin: b2Fixture b2Fixture Refilter Refilter
zz generating b2Fixture::Dump
zz making return b2Fixture Dump void _emscripten_bind_b2Fixture__Dump_p1(this.ptr, arg0)
Maekin: b2Fixture b2Fixture Dump Dump
zz generating b2Fixture::GetFilterData
zz making return b2Fixture GetFilterData b2Filter _emscripten_bind_b2Fixture__GetFilterData_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetFilterData GetFilterData
zz generating b2Fixture::IsSensor
zz making return b2Fixture IsSensor bool _emscripten_bind_b2Fixture__IsSensor_p0(this.ptr)
Maekin: b2Fixture b2Fixture IsSensor IsSensor
zz generating b2Fixture::GetType
zz making return b2Fixture GetType int _emscripten_bind_b2Fixture__GetType_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetType GetType
zz generating b2Fixture::GetDensity
zz making return b2Fixture GetDensity float _emscripten_bind_b2Fixture__GetDensity_p0(this.ptr)
Maekin: b2Fixture b2Fixture GetDensity GetDensity
Checking pure virtual for b2MouseJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2MouseJoint is abstract? None
zz b2MouseJoint has constructor? True
zz generating: b2MouseJoint b2MouseJoint
zz methods:  ['GetBodyA', 'GetBodyB', 'SetFrequency', 'GetUserData', 'SetMaxForce', 'SetUserData', 'GetAnchorB', 'GetAnchorA', 'b2MouseJoint', 'GetNext', 'GetMaxForce', 'GetTarget', 'GetFrequency', 'GetReactionForce', 'GetDampingRatio', 'GetCollideConnected', '__destroy__', 'Dump', 'SetTarget', 'GetType', 'SetDampingRatio', 'GetReactionTorque', 'IsActive']
zz generating b2MouseJoint::GetBodyA
zz making return b2MouseJoint GetBodyA b2Body _emscripten_bind_b2MouseJoint__GetBodyA_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetBodyA GetBodyA
zz generating b2MouseJoint::GetBodyB
zz making return b2MouseJoint GetBodyB b2Body _emscripten_bind_b2MouseJoint__GetBodyB_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetBodyB GetBodyB
zz generating b2MouseJoint::SetFrequency
zz making return b2MouseJoint SetFrequency void _emscripten_bind_b2MouseJoint__SetFrequency_p1(this.ptr, arg0)
Maekin: b2MouseJoint b2MouseJoint SetFrequency SetFrequency
zz generating b2MouseJoint::GetUserData
zz making return b2MouseJoint GetUserData void _emscripten_bind_b2MouseJoint__GetUserData_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetUserData GetUserData
zz generating b2MouseJoint::SetMaxForce
zz making return b2MouseJoint SetMaxForce void _emscripten_bind_b2MouseJoint__SetMaxForce_p1(this.ptr, arg0)
Maekin: b2MouseJoint b2MouseJoint SetMaxForce SetMaxForce
zz generating b2MouseJoint::SetUserData
zz making return b2MouseJoint SetUserData void _emscripten_bind_b2MouseJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2MouseJoint b2MouseJoint SetUserData SetUserData
zz generating b2MouseJoint::GetAnchorB
zz making return b2MouseJoint GetAnchorB b2Vec2 _emscripten_bind_b2MouseJoint__GetAnchorB_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetAnchorB GetAnchorB
zz generating b2MouseJoint::GetAnchorA
zz making return b2MouseJoint GetAnchorA b2Vec2 _emscripten_bind_b2MouseJoint__GetAnchorA_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetAnchorA GetAnchorA
zz generating b2MouseJoint::b2MouseJoint
Maekin: b2MouseJoint b2MouseJoint b2MouseJoint b2MouseJoint
zz generating b2MouseJoint::GetNext
zz making return b2MouseJoint GetNext b2Joint _emscripten_bind_b2MouseJoint__GetNext_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetNext GetNext
zz generating b2MouseJoint::GetMaxForce
zz making return b2MouseJoint GetMaxForce float _emscripten_bind_b2MouseJoint__GetMaxForce_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetMaxForce GetMaxForce
zz generating b2MouseJoint::GetTarget
zz making return b2MouseJoint GetTarget b2Vec2 _emscripten_bind_b2MouseJoint__GetTarget_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetTarget GetTarget
zz generating b2MouseJoint::GetFrequency
zz making return b2MouseJoint GetFrequency float _emscripten_bind_b2MouseJoint__GetFrequency_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetFrequency GetFrequency
zz generating b2MouseJoint::GetReactionForce
zz making return b2MouseJoint GetReactionForce b2Vec2 _emscripten_bind_b2MouseJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2MouseJoint b2MouseJoint GetReactionForce GetReactionForce
zz generating b2MouseJoint::GetDampingRatio
zz making return b2MouseJoint GetDampingRatio float _emscripten_bind_b2MouseJoint__GetDampingRatio_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetDampingRatio GetDampingRatio
zz generating b2MouseJoint::GetCollideConnected
zz making return b2MouseJoint GetCollideConnected bool _emscripten_bind_b2MouseJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetCollideConnected GetCollideConnected
zz generating b2MouseJoint::__destroy__
zz making return b2MouseJoint __destroy__ void _emscripten_bind_b2MouseJoint____destroy___p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint __destroy__ __destroy__
zz generating b2MouseJoint::Dump
zz making return b2MouseJoint Dump void _emscripten_bind_b2MouseJoint__Dump_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint Dump Dump
zz generating b2MouseJoint::SetTarget
zz making return b2MouseJoint SetTarget void _emscripten_bind_b2MouseJoint__SetTarget_p1(this.ptr, arg0.ptr)
Maekin: b2MouseJoint b2MouseJoint SetTarget SetTarget
zz generating b2MouseJoint::GetType
zz making return b2MouseJoint GetType int _emscripten_bind_b2MouseJoint__GetType_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint GetType GetType
zz generating b2MouseJoint::SetDampingRatio
zz making return b2MouseJoint SetDampingRatio void _emscripten_bind_b2MouseJoint__SetDampingRatio_p1(this.ptr, arg0)
Maekin: b2MouseJoint b2MouseJoint SetDampingRatio SetDampingRatio
zz generating b2MouseJoint::GetReactionTorque
zz making return b2MouseJoint GetReactionTorque float _emscripten_bind_b2MouseJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2MouseJoint b2MouseJoint GetReactionTorque GetReactionTorque
zz generating b2MouseJoint::IsActive
zz making return b2MouseJoint IsActive bool _emscripten_bind_b2MouseJoint__IsActive_p0(this.ptr)
Maekin: b2MouseJoint b2MouseJoint IsActive IsActive
Checking pure virtual for b2PulleyJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2PulleyJoint is abstract? None
zz b2PulleyJoint has constructor? True
zz generating: b2PulleyJoint b2PulleyJoint
zz methods:  ['GetBodyA', '__destroy__', 'GetAnchorA', 'GetType', 'GetGroundAnchorB', 'GetReactionTorque', 'Dump', 'GetGroundAnchorA', 'GetLengthB', 'GetUserData', 'GetLengthA', 'GetBodyB', 'GetCollideConnected', 'SetUserData', 'GetAnchorB', 'GetReactionForce', 'GetNext', 'b2PulleyJoint', 'IsActive', 'GetRatio']
zz generating b2PulleyJoint::GetBodyA
zz making return b2PulleyJoint GetBodyA b2Body _emscripten_bind_b2PulleyJoint__GetBodyA_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetBodyA GetBodyA
zz generating b2PulleyJoint::__destroy__
zz making return b2PulleyJoint __destroy__ void _emscripten_bind_b2PulleyJoint____destroy___p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint __destroy__ __destroy__
zz generating b2PulleyJoint::GetAnchorA
zz making return b2PulleyJoint GetAnchorA b2Vec2 _emscripten_bind_b2PulleyJoint__GetAnchorA_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetAnchorA GetAnchorA
zz generating b2PulleyJoint::GetType
zz making return b2PulleyJoint GetType int _emscripten_bind_b2PulleyJoint__GetType_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetType GetType
zz generating b2PulleyJoint::GetGroundAnchorB
zz making return b2PulleyJoint GetGroundAnchorB b2Vec2 _emscripten_bind_b2PulleyJoint__GetGroundAnchorB_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetGroundAnchorB GetGroundAnchorB
zz generating b2PulleyJoint::GetReactionTorque
zz making return b2PulleyJoint GetReactionTorque float _emscripten_bind_b2PulleyJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2PulleyJoint b2PulleyJoint GetReactionTorque GetReactionTorque
zz generating b2PulleyJoint::Dump
zz making return b2PulleyJoint Dump void _emscripten_bind_b2PulleyJoint__Dump_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint Dump Dump
zz generating b2PulleyJoint::GetGroundAnchorA
zz making return b2PulleyJoint GetGroundAnchorA b2Vec2 _emscripten_bind_b2PulleyJoint__GetGroundAnchorA_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetGroundAnchorA GetGroundAnchorA
zz generating b2PulleyJoint::GetLengthB
zz making return b2PulleyJoint GetLengthB float _emscripten_bind_b2PulleyJoint__GetLengthB_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetLengthB GetLengthB
zz generating b2PulleyJoint::GetUserData
zz making return b2PulleyJoint GetUserData void _emscripten_bind_b2PulleyJoint__GetUserData_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetUserData GetUserData
zz generating b2PulleyJoint::GetLengthA
zz making return b2PulleyJoint GetLengthA float _emscripten_bind_b2PulleyJoint__GetLengthA_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetLengthA GetLengthA
zz generating b2PulleyJoint::GetBodyB
zz making return b2PulleyJoint GetBodyB b2Body _emscripten_bind_b2PulleyJoint__GetBodyB_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetBodyB GetBodyB
zz generating b2PulleyJoint::GetCollideConnected
zz making return b2PulleyJoint GetCollideConnected bool _emscripten_bind_b2PulleyJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetCollideConnected GetCollideConnected
zz generating b2PulleyJoint::SetUserData
zz making return b2PulleyJoint SetUserData void _emscripten_bind_b2PulleyJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2PulleyJoint b2PulleyJoint SetUserData SetUserData
zz generating b2PulleyJoint::GetAnchorB
zz making return b2PulleyJoint GetAnchorB b2Vec2 _emscripten_bind_b2PulleyJoint__GetAnchorB_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetAnchorB GetAnchorB
zz generating b2PulleyJoint::GetReactionForce
zz making return b2PulleyJoint GetReactionForce b2Vec2 _emscripten_bind_b2PulleyJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2PulleyJoint b2PulleyJoint GetReactionForce GetReactionForce
zz generating b2PulleyJoint::GetNext
zz making return b2PulleyJoint GetNext b2Joint _emscripten_bind_b2PulleyJoint__GetNext_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetNext GetNext
zz generating b2PulleyJoint::b2PulleyJoint
Maekin: b2PulleyJoint b2PulleyJoint b2PulleyJoint b2PulleyJoint
zz generating b2PulleyJoint::IsActive
zz making return b2PulleyJoint IsActive bool _emscripten_bind_b2PulleyJoint__IsActive_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint IsActive IsActive
zz generating b2PulleyJoint::GetRatio
zz making return b2PulleyJoint GetRatio float _emscripten_bind_b2PulleyJoint__GetRatio_p0(this.ptr)
Maekin: b2PulleyJoint b2PulleyJoint GetRatio GetRatio
Checking pure virtual for b2BroadPhase []
zz b2BroadPhase is abstract? None
zz b2BroadPhase has constructor? True
zz generating: b2BroadPhase b2BroadPhase
zz methods:  ['GetTreeQuality', 'RayCast', 'GetFatAABB', 'GetUserData', '__destroy__', 'GetTreeHeight', 'b2BroadPhase', 'GetProxyCount', 'GetTreeBalance', 'TestOverlap', 'TouchProxy', 'UpdatePairs', 'CreateProxy', 'MoveProxy', 'Query', 'DestroyProxy']
zz generating b2BroadPhase::GetTreeQuality
zz making return b2BroadPhase GetTreeQuality float _emscripten_bind_b2BroadPhase__GetTreeQuality_p0(this.ptr)
Maekin: b2BroadPhase b2BroadPhase GetTreeQuality GetTreeQuality
zz ignoring RayCast
zz generating b2BroadPhase::GetFatAABB
zz making return b2BroadPhase GetFatAABB b2AABB _emscripten_bind_b2BroadPhase__GetFatAABB_p1(this.ptr, arg0)
Maekin: b2BroadPhase b2BroadPhase GetFatAABB GetFatAABB
zz generating b2BroadPhase::GetUserData
zz making return b2BroadPhase GetUserData void _emscripten_bind_b2BroadPhase__GetUserData_p1(this.ptr, arg0)
Maekin: b2BroadPhase b2BroadPhase GetUserData GetUserData
zz generating b2BroadPhase::__destroy__
zz making return b2BroadPhase __destroy__ void _emscripten_bind_b2BroadPhase____destroy___p0(this.ptr)
Maekin: b2BroadPhase b2BroadPhase __destroy__ __destroy__
zz generating b2BroadPhase::GetTreeHeight
zz making return b2BroadPhase GetTreeHeight int _emscripten_bind_b2BroadPhase__GetTreeHeight_p0(this.ptr)
Maekin: b2BroadPhase b2BroadPhase GetTreeHeight GetTreeHeight
zz generating b2BroadPhase::b2BroadPhase
Maekin: b2BroadPhase b2BroadPhase b2BroadPhase b2BroadPhase
zz generating b2BroadPhase::GetProxyCount
zz making return b2BroadPhase GetProxyCount int _emscripten_bind_b2BroadPhase__GetProxyCount_p0(this.ptr)
Maekin: b2BroadPhase b2BroadPhase GetProxyCount GetProxyCount
zz generating b2BroadPhase::GetTreeBalance
zz making return b2BroadPhase GetTreeBalance int _emscripten_bind_b2BroadPhase__GetTreeBalance_p0(this.ptr)
Maekin: b2BroadPhase b2BroadPhase GetTreeBalance GetTreeBalance
zz generating b2BroadPhase::TestOverlap
zz making return b2BroadPhase TestOverlap bool _emscripten_bind_b2BroadPhase__TestOverlap_p2(this.ptr, arg0, arg1)
Maekin: b2BroadPhase b2BroadPhase TestOverlap TestOverlap
zz generating b2BroadPhase::TouchProxy
zz making return b2BroadPhase TouchProxy void _emscripten_bind_b2BroadPhase__TouchProxy_p1(this.ptr, arg0)
Maekin: b2BroadPhase b2BroadPhase TouchProxy TouchProxy
zz ignoring UpdatePairs
zz generating b2BroadPhase::CreateProxy
zz making return b2BroadPhase CreateProxy int _emscripten_bind_b2BroadPhase__CreateProxy_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2BroadPhase b2BroadPhase CreateProxy CreateProxy
zz generating b2BroadPhase::MoveProxy
zz making return b2BroadPhase MoveProxy void _emscripten_bind_b2BroadPhase__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr)
Maekin: b2BroadPhase b2BroadPhase MoveProxy MoveProxy
zz ignoring Query
zz generating b2BroadPhase::DestroyProxy
zz making return b2BroadPhase DestroyProxy void _emscripten_bind_b2BroadPhase__DestroyProxy_p1(this.ptr, arg0)
Maekin: b2BroadPhase b2BroadPhase DestroyProxy DestroyProxy
Checking pure virtual for b2World []
zz b2World is abstract? None
zz b2World has constructor? True
zz generating: b2World b2World
zz methods:  ['QueryAABB', 'SetSubStepping', 'GetTreeQuality', 'GetTreeHeight', 'GetProfile', 'GetTreeBalance', 'GetSubStepping', 'GetContactManager', 'SetContactListener', 'DrawDebugData', 'SetContinuousPhysics', 'SetGravity', 'GetBodyCount', 'GetAutoClearForces', 'GetContinuousPhysics', 'GetJointList', 'CreateBody', 'GetBodyList', 'SetDestructionListener', 'DestroyJoint', 'b2World', 'GetJointCount', 'Step', 'ClearForces', 'GetWarmStarting', 'SetAllowSleeping', 'DestroyBody', 'GetAllowSleeping', 'CreateJoint', 'GetProxyCount', 'RayCast', 'IsLocked', 'GetContactList', 'SetDebugDraw', '__destroy__', 'Dump', 'SetAutoClearForces', 'GetGravity', 'GetContactCount', 'SetWarmStarting', 'SetContactFilter']
zz generating b2World::QueryAABB
zz making return b2World QueryAABB void _emscripten_bind_b2World__QueryAABB_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2World b2World QueryAABB QueryAABB
zz generating b2World::SetSubStepping
zz making return b2World SetSubStepping void _emscripten_bind_b2World__SetSubStepping_p1(this.ptr, arg0)
Maekin: b2World b2World SetSubStepping SetSubStepping
zz generating b2World::GetTreeQuality
zz making return b2World GetTreeQuality float _emscripten_bind_b2World__GetTreeQuality_p0(this.ptr)
Maekin: b2World b2World GetTreeQuality GetTreeQuality
zz generating b2World::GetTreeHeight
zz making return b2World GetTreeHeight int _emscripten_bind_b2World__GetTreeHeight_p0(this.ptr)
Maekin: b2World b2World GetTreeHeight GetTreeHeight
zz generating b2World::GetProfile
zz making return b2World GetProfile b2Profile _emscripten_bind_b2World__GetProfile_p0(this.ptr)
Maekin: b2World b2World GetProfile GetProfile
zz generating b2World::GetTreeBalance
zz making return b2World GetTreeBalance int _emscripten_bind_b2World__GetTreeBalance_p0(this.ptr)
Maekin: b2World b2World GetTreeBalance GetTreeBalance
zz generating b2World::GetSubStepping
zz making return b2World GetSubStepping bool _emscripten_bind_b2World__GetSubStepping_p0(this.ptr)
Maekin: b2World b2World GetSubStepping GetSubStepping
zz generating b2World::GetContactManager
zz making return b2World GetContactManager b2ContactManager _emscripten_bind_b2World__GetContactManager_p0(this.ptr)
Maekin: b2World b2World GetContactManager GetContactManager
zz generating b2World::SetContactListener
zz making return b2World SetContactListener void _emscripten_bind_b2World__SetContactListener_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World SetContactListener SetContactListener
zz generating b2World::DrawDebugData
zz making return b2World DrawDebugData void _emscripten_bind_b2World__DrawDebugData_p0(this.ptr)
Maekin: b2World b2World DrawDebugData DrawDebugData
zz generating b2World::SetContinuousPhysics
zz making return b2World SetContinuousPhysics void _emscripten_bind_b2World__SetContinuousPhysics_p1(this.ptr, arg0)
Maekin: b2World b2World SetContinuousPhysics SetContinuousPhysics
zz generating b2World::SetGravity
zz making return b2World SetGravity void _emscripten_bind_b2World__SetGravity_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World SetGravity SetGravity
zz generating b2World::GetBodyCount
zz making return b2World GetBodyCount int _emscripten_bind_b2World__GetBodyCount_p0(this.ptr)
Maekin: b2World b2World GetBodyCount GetBodyCount
zz generating b2World::GetAutoClearForces
zz making return b2World GetAutoClearForces bool _emscripten_bind_b2World__GetAutoClearForces_p0(this.ptr)
Maekin: b2World b2World GetAutoClearForces GetAutoClearForces
zz generating b2World::GetContinuousPhysics
zz making return b2World GetContinuousPhysics bool _emscripten_bind_b2World__GetContinuousPhysics_p0(this.ptr)
Maekin: b2World b2World GetContinuousPhysics GetContinuousPhysics
zz generating b2World::GetJointList
zz making return b2World GetJointList b2Joint _emscripten_bind_b2World__GetJointList_p0(this.ptr)
Maekin: b2World b2World GetJointList GetJointList
zz generating b2World::CreateBody
zz making return b2World CreateBody b2Body _emscripten_bind_b2World__CreateBody_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World CreateBody CreateBody
zz generating b2World::GetBodyList
zz making return b2World GetBodyList b2Body _emscripten_bind_b2World__GetBodyList_p0(this.ptr)
Maekin: b2World b2World GetBodyList GetBodyList
zz generating b2World::SetDestructionListener
zz making return b2World SetDestructionListener void _emscripten_bind_b2World__SetDestructionListener_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World SetDestructionListener SetDestructionListener
zz generating b2World::DestroyJoint
zz making return b2World DestroyJoint void _emscripten_bind_b2World__DestroyJoint_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World DestroyJoint DestroyJoint
zz generating b2World::b2World
Maekin: b2World b2World b2World b2World
zz generating b2World::GetJointCount
zz making return b2World GetJointCount int _emscripten_bind_b2World__GetJointCount_p0(this.ptr)
Maekin: b2World b2World GetJointCount GetJointCount
zz generating b2World::Step
zz making return b2World Step void _emscripten_bind_b2World__Step_p3(this.ptr, arg0, arg1, arg2)
Maekin: b2World b2World Step Step
zz generating b2World::ClearForces
zz making return b2World ClearForces void _emscripten_bind_b2World__ClearForces_p0(this.ptr)
Maekin: b2World b2World ClearForces ClearForces
zz generating b2World::GetWarmStarting
zz making return b2World GetWarmStarting bool _emscripten_bind_b2World__GetWarmStarting_p0(this.ptr)
Maekin: b2World b2World GetWarmStarting GetWarmStarting
zz generating b2World::SetAllowSleeping
zz making return b2World SetAllowSleeping void _emscripten_bind_b2World__SetAllowSleeping_p1(this.ptr, arg0)
Maekin: b2World b2World SetAllowSleeping SetAllowSleeping
zz generating b2World::DestroyBody
zz making return b2World DestroyBody void _emscripten_bind_b2World__DestroyBody_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World DestroyBody DestroyBody
zz generating b2World::GetAllowSleeping
zz making return b2World GetAllowSleeping bool _emscripten_bind_b2World__GetAllowSleeping_p0(this.ptr)
Maekin: b2World b2World GetAllowSleeping GetAllowSleeping
zz generating b2World::CreateJoint
zz making return b2World CreateJoint b2Joint _emscripten_bind_b2World__CreateJoint_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World CreateJoint CreateJoint
zz generating b2World::GetProxyCount
zz making return b2World GetProxyCount int _emscripten_bind_b2World__GetProxyCount_p0(this.ptr)
Maekin: b2World b2World GetProxyCount GetProxyCount
zz generating b2World::RayCast
zz making return b2World RayCast void _emscripten_bind_b2World__RayCast_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr)
Maekin: b2World b2World RayCast RayCast
zz generating b2World::IsLocked
zz making return b2World IsLocked bool _emscripten_bind_b2World__IsLocked_p0(this.ptr)
Maekin: b2World b2World IsLocked IsLocked
zz generating b2World::GetContactList
zz making return b2World GetContactList b2Contact _emscripten_bind_b2World__GetContactList_p0(this.ptr)
Maekin: b2World b2World GetContactList GetContactList
zz generating b2World::SetDebugDraw
zz making return b2World SetDebugDraw void _emscripten_bind_b2World__SetDebugDraw_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World SetDebugDraw SetDebugDraw
zz generating b2World::__destroy__
zz making return b2World __destroy__ void _emscripten_bind_b2World____destroy___p0(this.ptr)
Maekin: b2World b2World __destroy__ __destroy__
zz generating b2World::Dump
zz making return b2World Dump void _emscripten_bind_b2World__Dump_p0(this.ptr)
Maekin: b2World b2World Dump Dump
zz generating b2World::SetAutoClearForces
zz making return b2World SetAutoClearForces void _emscripten_bind_b2World__SetAutoClearForces_p1(this.ptr, arg0)
Maekin: b2World b2World SetAutoClearForces SetAutoClearForces
zz generating b2World::GetGravity
zz making return b2World GetGravity b2Vec2 _emscripten_bind_b2World__GetGravity_p0(this.ptr)
Maekin: b2World b2World GetGravity GetGravity
zz generating b2World::GetContactCount
zz making return b2World GetContactCount int _emscripten_bind_b2World__GetContactCount_p0(this.ptr)
Maekin: b2World b2World GetContactCount GetContactCount
zz generating b2World::SetWarmStarting
zz making return b2World SetWarmStarting void _emscripten_bind_b2World__SetWarmStarting_p1(this.ptr, arg0)
Maekin: b2World b2World SetWarmStarting SetWarmStarting
zz generating b2World::SetContactFilter
zz making return b2World SetContactFilter void _emscripten_bind_b2World__SetContactFilter_p1(this.ptr, arg0.ptr)
Maekin: b2World b2World SetContactFilter SetContactFilter
Checking pure virtual for b2PrismaticJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2PrismaticJoint is abstract? None
zz b2PrismaticJoint has constructor? True
zz generating: b2PrismaticJoint b2PrismaticJoint
zz methods:  ['GetBodyA', 'GetBodyB', 'GetUserData', 'GetLocalAxisA', 'GetLowerLimit', 'GetAnchorA', 'GetNext', 'b2PrismaticJoint', 'GetLocalAnchorA', 'SetMotorSpeed', 'GetLocalAnchorB', 'GetMotorSpeed', 'SetMaxMotorForce', 'EnableLimit', 'IsMotorEnabled', 'SetUserData', 'GetReactionForce', 'GetMaxMotorForce', 'GetCollideConnected', 'GetJointSpeed', 'EnableMotor', '__destroy__', 'GetReferenceAngle', 'Dump', 'GetMotorForce', 'GetJointTranslation', 'GetType', 'IsLimitEnabled', 'GetReactionTorque', 'SetLimits', 'GetUpperLimit', 'IsActive', 'GetAnchorB']
zz generating b2PrismaticJoint::GetBodyA
zz making return b2PrismaticJoint GetBodyA b2Body _emscripten_bind_b2PrismaticJoint__GetBodyA_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetBodyA GetBodyA
zz generating b2PrismaticJoint::GetBodyB
zz making return b2PrismaticJoint GetBodyB b2Body _emscripten_bind_b2PrismaticJoint__GetBodyB_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetBodyB GetBodyB
zz generating b2PrismaticJoint::GetUserData
zz making return b2PrismaticJoint GetUserData void _emscripten_bind_b2PrismaticJoint__GetUserData_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetUserData GetUserData
zz generating b2PrismaticJoint::GetLocalAxisA
zz making return b2PrismaticJoint GetLocalAxisA b2Vec2 _emscripten_bind_b2PrismaticJoint__GetLocalAxisA_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetLocalAxisA GetLocalAxisA
zz generating b2PrismaticJoint::GetLowerLimit
zz making return b2PrismaticJoint GetLowerLimit float _emscripten_bind_b2PrismaticJoint__GetLowerLimit_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetLowerLimit GetLowerLimit
zz generating b2PrismaticJoint::GetAnchorA
zz making return b2PrismaticJoint GetAnchorA b2Vec2 _emscripten_bind_b2PrismaticJoint__GetAnchorA_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetAnchorA GetAnchorA
zz generating b2PrismaticJoint::GetNext
zz making return b2PrismaticJoint GetNext b2Joint _emscripten_bind_b2PrismaticJoint__GetNext_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetNext GetNext
zz generating b2PrismaticJoint::b2PrismaticJoint
Maekin: b2PrismaticJoint b2PrismaticJoint b2PrismaticJoint b2PrismaticJoint
zz generating b2PrismaticJoint::GetLocalAnchorA
zz making return b2PrismaticJoint GetLocalAnchorA b2Vec2 _emscripten_bind_b2PrismaticJoint__GetLocalAnchorA_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetLocalAnchorA GetLocalAnchorA
zz generating b2PrismaticJoint::SetMotorSpeed
zz making return b2PrismaticJoint SetMotorSpeed void _emscripten_bind_b2PrismaticJoint__SetMotorSpeed_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint SetMotorSpeed SetMotorSpeed
zz generating b2PrismaticJoint::GetLocalAnchorB
zz making return b2PrismaticJoint GetLocalAnchorB b2Vec2 _emscripten_bind_b2PrismaticJoint__GetLocalAnchorB_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetLocalAnchorB GetLocalAnchorB
zz generating b2PrismaticJoint::GetMotorSpeed
zz making return b2PrismaticJoint GetMotorSpeed float _emscripten_bind_b2PrismaticJoint__GetMotorSpeed_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetMotorSpeed GetMotorSpeed
zz generating b2PrismaticJoint::SetMaxMotorForce
zz making return b2PrismaticJoint SetMaxMotorForce void _emscripten_bind_b2PrismaticJoint__SetMaxMotorForce_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint SetMaxMotorForce SetMaxMotorForce
zz generating b2PrismaticJoint::EnableLimit
zz making return b2PrismaticJoint EnableLimit void _emscripten_bind_b2PrismaticJoint__EnableLimit_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint EnableLimit EnableLimit
zz generating b2PrismaticJoint::IsMotorEnabled
zz making return b2PrismaticJoint IsMotorEnabled bool _emscripten_bind_b2PrismaticJoint__IsMotorEnabled_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint IsMotorEnabled IsMotorEnabled
zz generating b2PrismaticJoint::SetUserData
zz making return b2PrismaticJoint SetUserData void _emscripten_bind_b2PrismaticJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint SetUserData SetUserData
zz generating b2PrismaticJoint::GetReactionForce
zz making return b2PrismaticJoint GetReactionForce b2Vec2 _emscripten_bind_b2PrismaticJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint GetReactionForce GetReactionForce
zz generating b2PrismaticJoint::GetMaxMotorForce
zz making return b2PrismaticJoint GetMaxMotorForce float _emscripten_bind_b2PrismaticJoint__GetMaxMotorForce_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetMaxMotorForce GetMaxMotorForce
zz generating b2PrismaticJoint::GetCollideConnected
zz making return b2PrismaticJoint GetCollideConnected bool _emscripten_bind_b2PrismaticJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetCollideConnected GetCollideConnected
zz generating b2PrismaticJoint::GetJointSpeed
zz making return b2PrismaticJoint GetJointSpeed float _emscripten_bind_b2PrismaticJoint__GetJointSpeed_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetJointSpeed GetJointSpeed
zz generating b2PrismaticJoint::EnableMotor
zz making return b2PrismaticJoint EnableMotor void _emscripten_bind_b2PrismaticJoint__EnableMotor_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint EnableMotor EnableMotor
zz generating b2PrismaticJoint::__destroy__
zz making return b2PrismaticJoint __destroy__ void _emscripten_bind_b2PrismaticJoint____destroy___p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint __destroy__ __destroy__
zz generating b2PrismaticJoint::GetReferenceAngle
zz making return b2PrismaticJoint GetReferenceAngle float _emscripten_bind_b2PrismaticJoint__GetReferenceAngle_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetReferenceAngle GetReferenceAngle
zz generating b2PrismaticJoint::Dump
zz making return b2PrismaticJoint Dump void _emscripten_bind_b2PrismaticJoint__Dump_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint Dump Dump
zz generating b2PrismaticJoint::GetMotorForce
zz making return b2PrismaticJoint GetMotorForce float _emscripten_bind_b2PrismaticJoint__GetMotorForce_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint GetMotorForce GetMotorForce
zz generating b2PrismaticJoint::GetJointTranslation
zz making return b2PrismaticJoint GetJointTranslation float _emscripten_bind_b2PrismaticJoint__GetJointTranslation_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetJointTranslation GetJointTranslation
zz generating b2PrismaticJoint::GetType
zz making return b2PrismaticJoint GetType int _emscripten_bind_b2PrismaticJoint__GetType_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetType GetType
zz generating b2PrismaticJoint::IsLimitEnabled
zz making return b2PrismaticJoint IsLimitEnabled bool _emscripten_bind_b2PrismaticJoint__IsLimitEnabled_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint IsLimitEnabled IsLimitEnabled
zz generating b2PrismaticJoint::GetReactionTorque
zz making return b2PrismaticJoint GetReactionTorque float _emscripten_bind_b2PrismaticJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2PrismaticJoint b2PrismaticJoint GetReactionTorque GetReactionTorque
zz generating b2PrismaticJoint::SetLimits
zz making return b2PrismaticJoint SetLimits void _emscripten_bind_b2PrismaticJoint__SetLimits_p2(this.ptr, arg0, arg1)
Maekin: b2PrismaticJoint b2PrismaticJoint SetLimits SetLimits
zz generating b2PrismaticJoint::GetUpperLimit
zz making return b2PrismaticJoint GetUpperLimit float _emscripten_bind_b2PrismaticJoint__GetUpperLimit_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetUpperLimit GetUpperLimit
zz generating b2PrismaticJoint::IsActive
zz making return b2PrismaticJoint IsActive bool _emscripten_bind_b2PrismaticJoint__IsActive_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint IsActive IsActive
zz generating b2PrismaticJoint::GetAnchorB
zz making return b2PrismaticJoint GetAnchorB b2Vec2 _emscripten_bind_b2PrismaticJoint__GetAnchorB_p0(this.ptr)
Maekin: b2PrismaticJoint b2PrismaticJoint GetAnchorB GetAnchorB
Checking pure virtual for b2CircleShape [{'access': 'public', 'class': 'b2Shape'}]
Checking pure virtual for b2Shape []
zz b2CircleShape is abstract? None
zz b2CircleShape has constructor? True
zz generating: b2CircleShape b2CircleShape
zz methods:  ['__destroy__', 'GetType', 'ComputeMass', 'set_m_radius', 'get_m_radius', 'GetVertex', 'Clone', 'GetSupportVertex', 'RayCast', 'ComputeAABB', 'GetVertexCount', 'GetChildCount', 'TestPoint', 'b2CircleShape', 'GetSupport', 'set_m_p', 'get_m_p']
zz generating b2CircleShape::__destroy__
zz making return b2CircleShape __destroy__ void _emscripten_bind_b2CircleShape____destroy___p0(this.ptr)
Maekin: b2CircleShape b2CircleShape __destroy__ __destroy__
zz generating b2CircleShape::GetType
zz making return b2CircleShape GetType int _emscripten_bind_b2CircleShape__GetType_p0(this.ptr)
Maekin: b2CircleShape b2CircleShape GetType GetType
zz generating b2CircleShape::ComputeMass
zz making return b2CircleShape ComputeMass void _emscripten_bind_b2CircleShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2CircleShape b2CircleShape ComputeMass ComputeMass
zz generating b2CircleShape::set_m_radius
zz making return b2CircleShape set_m_radius void _emscripten_bind_b2CircleShape__set_m_radius_p1(this.ptr, arg0)
Maekin: b2CircleShape b2CircleShape set_m_radius set_m_radius
zz generating b2CircleShape::get_m_radius
zz making return b2CircleShape get_m_radius float _emscripten_bind_b2CircleShape__get_m_radius_p0(this.ptr)
Maekin: b2CircleShape b2CircleShape get_m_radius get_m_radius
zz generating b2CircleShape::GetVertex
zz making return b2CircleShape GetVertex b2Vec2 _emscripten_bind_b2CircleShape__GetVertex_p1(this.ptr, arg0)
Maekin: b2CircleShape b2CircleShape GetVertex GetVertex
zz generating b2CircleShape::Clone
zz making return b2CircleShape Clone b2Shape _emscripten_bind_b2CircleShape__Clone_p1(this.ptr, arg0.ptr)
Maekin: b2CircleShape b2CircleShape Clone Clone
zz generating b2CircleShape::GetSupportVertex
zz making return b2CircleShape GetSupportVertex b2Vec2 _emscripten_bind_b2CircleShape__GetSupportVertex_p1(this.ptr, arg0.ptr)
Maekin: b2CircleShape b2CircleShape GetSupportVertex GetSupportVertex
zz generating b2CircleShape::RayCast
zz making return b2CircleShape RayCast bool _emscripten_bind_b2CircleShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3)
Maekin: b2CircleShape b2CircleShape RayCast RayCast
zz generating b2CircleShape::ComputeAABB
zz making return b2CircleShape ComputeAABB void _emscripten_bind_b2CircleShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2)
Maekin: b2CircleShape b2CircleShape ComputeAABB ComputeAABB
zz generating b2CircleShape::GetVertexCount
zz making return b2CircleShape GetVertexCount int _emscripten_bind_b2CircleShape__GetVertexCount_p0(this.ptr)
Maekin: b2CircleShape b2CircleShape GetVertexCount GetVertexCount
zz generating b2CircleShape::GetChildCount
zz making return b2CircleShape GetChildCount int _emscripten_bind_b2CircleShape__GetChildCount_p0(this.ptr)
Maekin: b2CircleShape b2CircleShape GetChildCount GetChildCount
zz generating b2CircleShape::TestPoint
zz making return b2CircleShape TestPoint bool _emscripten_bind_b2CircleShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2CircleShape b2CircleShape TestPoint TestPoint
zz generating b2CircleShape::b2CircleShape
Maekin: b2CircleShape b2CircleShape b2CircleShape b2CircleShape
zz generating b2CircleShape::GetSupport
zz making return b2CircleShape GetSupport int _emscripten_bind_b2CircleShape__GetSupport_p1(this.ptr, arg0.ptr)
Maekin: b2CircleShape b2CircleShape GetSupport GetSupport
zz generating b2CircleShape::set_m_p
zz making return b2CircleShape set_m_p void _emscripten_bind_b2CircleShape__set_m_p_p1(this.ptr, arg0.ptr)
Maekin: b2CircleShape b2CircleShape set_m_p set_m_p
zz generating b2CircleShape::get_m_p
zz making return b2CircleShape get_m_p b2Vec2 _emscripten_bind_b2CircleShape__get_m_p_p0(this.ptr)
Maekin: b2CircleShape b2CircleShape get_m_p get_m_p
Checking pure virtual for b2WheelJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2WheelJoint is abstract? None
zz b2WheelJoint has constructor? True
zz generating: b2WheelJoint b2WheelJoint
zz methods:  ['GetBodyA', 'GetBodyB', 'GetUserData', 'GetDefinition', 'GetLocalAxisA', 'SetSpringDampingRatio', 'GetAnchorB', 'GetAnchorA', 'GetNext', 'GetSpringFrequencyHz', 'GetLocalAnchorA', 'SetMotorSpeed', 'GetLocalAnchorB', 'GetMotorSpeed', 'GetMotorTorque', 'b2WheelJoint', 'IsMotorEnabled', 'GetJointTranslation', 'SetUserData', 'GetReactionForce', 'GetSpringDampingRatio', 'SetMaxMotorTorque', 'GetCollideConnected', 'GetJointSpeed', 'EnableMotor', '__destroy__', 'Dump', 'GetMaxMotorTorque', 'GetType', 'GetReactionTorque', 'SetSpringFrequencyHz', 'IsActive']
zz generating b2WheelJoint::GetBodyA
zz making return b2WheelJoint GetBodyA b2Body _emscripten_bind_b2WheelJoint__GetBodyA_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetBodyA GetBodyA
zz generating b2WheelJoint::GetBodyB
zz making return b2WheelJoint GetBodyB b2Body _emscripten_bind_b2WheelJoint__GetBodyB_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetBodyB GetBodyB
zz generating b2WheelJoint::GetUserData
zz making return b2WheelJoint GetUserData void _emscripten_bind_b2WheelJoint__GetUserData_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetUserData GetUserData
zz generating b2WheelJoint::GetDefinition
zz making return b2WheelJoint GetDefinition void _emscripten_bind_b2WheelJoint__GetDefinition_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJoint b2WheelJoint GetDefinition GetDefinition
zz generating b2WheelJoint::GetLocalAxisA
zz making return b2WheelJoint GetLocalAxisA b2Vec2 _emscripten_bind_b2WheelJoint__GetLocalAxisA_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetLocalAxisA GetLocalAxisA
zz generating b2WheelJoint::SetSpringDampingRatio
zz making return b2WheelJoint SetSpringDampingRatio void _emscripten_bind_b2WheelJoint__SetSpringDampingRatio_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint SetSpringDampingRatio SetSpringDampingRatio
zz generating b2WheelJoint::GetAnchorB
zz making return b2WheelJoint GetAnchorB b2Vec2 _emscripten_bind_b2WheelJoint__GetAnchorB_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetAnchorB GetAnchorB
zz generating b2WheelJoint::GetAnchorA
zz making return b2WheelJoint GetAnchorA b2Vec2 _emscripten_bind_b2WheelJoint__GetAnchorA_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetAnchorA GetAnchorA
zz generating b2WheelJoint::GetNext
zz making return b2WheelJoint GetNext b2Joint _emscripten_bind_b2WheelJoint__GetNext_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetNext GetNext
zz generating b2WheelJoint::GetSpringFrequencyHz
zz making return b2WheelJoint GetSpringFrequencyHz float _emscripten_bind_b2WheelJoint__GetSpringFrequencyHz_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetSpringFrequencyHz GetSpringFrequencyHz
zz generating b2WheelJoint::GetLocalAnchorA
zz making return b2WheelJoint GetLocalAnchorA b2Vec2 _emscripten_bind_b2WheelJoint__GetLocalAnchorA_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetLocalAnchorA GetLocalAnchorA
zz generating b2WheelJoint::SetMotorSpeed
zz making return b2WheelJoint SetMotorSpeed void _emscripten_bind_b2WheelJoint__SetMotorSpeed_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint SetMotorSpeed SetMotorSpeed
zz generating b2WheelJoint::GetLocalAnchorB
zz making return b2WheelJoint GetLocalAnchorB b2Vec2 _emscripten_bind_b2WheelJoint__GetLocalAnchorB_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetLocalAnchorB GetLocalAnchorB
zz generating b2WheelJoint::GetMotorSpeed
zz making return b2WheelJoint GetMotorSpeed float _emscripten_bind_b2WheelJoint__GetMotorSpeed_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetMotorSpeed GetMotorSpeed
zz generating b2WheelJoint::GetMotorTorque
zz making return b2WheelJoint GetMotorTorque float _emscripten_bind_b2WheelJoint__GetMotorTorque_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint GetMotorTorque GetMotorTorque
zz generating b2WheelJoint::b2WheelJoint
Maekin: b2WheelJoint b2WheelJoint b2WheelJoint b2WheelJoint
zz generating b2WheelJoint::IsMotorEnabled
zz making return b2WheelJoint IsMotorEnabled bool _emscripten_bind_b2WheelJoint__IsMotorEnabled_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint IsMotorEnabled IsMotorEnabled
zz generating b2WheelJoint::GetJointTranslation
zz making return b2WheelJoint GetJointTranslation float _emscripten_bind_b2WheelJoint__GetJointTranslation_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetJointTranslation GetJointTranslation
zz generating b2WheelJoint::SetUserData
zz making return b2WheelJoint SetUserData void _emscripten_bind_b2WheelJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint SetUserData SetUserData
zz generating b2WheelJoint::GetReactionForce
zz making return b2WheelJoint GetReactionForce b2Vec2 _emscripten_bind_b2WheelJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint GetReactionForce GetReactionForce
zz generating b2WheelJoint::GetSpringDampingRatio
zz making return b2WheelJoint GetSpringDampingRatio float _emscripten_bind_b2WheelJoint__GetSpringDampingRatio_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetSpringDampingRatio GetSpringDampingRatio
zz generating b2WheelJoint::SetMaxMotorTorque
zz making return b2WheelJoint SetMaxMotorTorque void _emscripten_bind_b2WheelJoint__SetMaxMotorTorque_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint SetMaxMotorTorque SetMaxMotorTorque
zz generating b2WheelJoint::GetCollideConnected
zz making return b2WheelJoint GetCollideConnected bool _emscripten_bind_b2WheelJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetCollideConnected GetCollideConnected
zz generating b2WheelJoint::GetJointSpeed
zz making return b2WheelJoint GetJointSpeed float _emscripten_bind_b2WheelJoint__GetJointSpeed_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetJointSpeed GetJointSpeed
zz generating b2WheelJoint::EnableMotor
zz making return b2WheelJoint EnableMotor void _emscripten_bind_b2WheelJoint__EnableMotor_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint EnableMotor EnableMotor
zz generating b2WheelJoint::__destroy__
zz making return b2WheelJoint __destroy__ void _emscripten_bind_b2WheelJoint____destroy___p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint __destroy__ __destroy__
zz generating b2WheelJoint::Dump
zz making return b2WheelJoint Dump void _emscripten_bind_b2WheelJoint__Dump_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint Dump Dump
zz generating b2WheelJoint::GetMaxMotorTorque
zz making return b2WheelJoint GetMaxMotorTorque float _emscripten_bind_b2WheelJoint__GetMaxMotorTorque_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetMaxMotorTorque GetMaxMotorTorque
zz generating b2WheelJoint::GetType
zz making return b2WheelJoint GetType int _emscripten_bind_b2WheelJoint__GetType_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint GetType GetType
zz generating b2WheelJoint::GetReactionTorque
zz making return b2WheelJoint GetReactionTorque float _emscripten_bind_b2WheelJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint GetReactionTorque GetReactionTorque
zz generating b2WheelJoint::SetSpringFrequencyHz
zz making return b2WheelJoint SetSpringFrequencyHz void _emscripten_bind_b2WheelJoint__SetSpringFrequencyHz_p1(this.ptr, arg0)
Maekin: b2WheelJoint b2WheelJoint SetSpringFrequencyHz SetSpringFrequencyHz
zz generating b2WheelJoint::IsActive
zz making return b2WheelJoint IsActive bool _emscripten_bind_b2WheelJoint__IsActive_p0(this.ptr)
Maekin: b2WheelJoint b2WheelJoint IsActive IsActive
Checking pure virtual for b2Draw []
zz b2Draw is abstract? None
zz b2Draw has constructor? True
zz generating: b2Draw b2Draw
zz methods:  ['__destroy__', 'AppendFlags', 'DrawTransform', 'ClearFlags', 'DrawPolygon', 'DrawSolidCircle', 'DrawSolidPolygon', 'DrawCircle', 'SetFlags', 'DrawSegment', 'b2Draw', 'GetFlags']
zz generating b2Draw::__destroy__
zz making return b2Draw __destroy__ void _emscripten_bind_b2Draw____destroy___p0(this.ptr)
Maekin: b2Draw b2Draw __destroy__ __destroy__
zz generating b2Draw::AppendFlags
zz making return b2Draw AppendFlags void _emscripten_bind_b2Draw__AppendFlags_p1(this.ptr, arg0)
Maekin: b2Draw b2Draw AppendFlags AppendFlags
zz generating b2Draw::DrawTransform
zz making return b2Draw DrawTransform void _emscripten_bind_b2Draw__DrawTransform_p1(this.ptr, arg0.ptr)
Maekin: b2Draw b2Draw DrawTransform DrawTransform
zz generating b2Draw::ClearFlags
zz making return b2Draw ClearFlags void _emscripten_bind_b2Draw__ClearFlags_p1(this.ptr, arg0)
Maekin: b2Draw b2Draw ClearFlags ClearFlags
zz generating b2Draw::DrawPolygon
zz making return b2Draw DrawPolygon void _emscripten_bind_b2Draw__DrawPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr)
Maekin: b2Draw b2Draw DrawPolygon DrawPolygon
zz generating b2Draw::DrawSolidCircle
zz making return b2Draw DrawSolidCircle void _emscripten_bind_b2Draw__DrawSolidCircle_p4(this.ptr, arg0.ptr, arg1, arg2.ptr, arg3.ptr)
Maekin: b2Draw b2Draw DrawSolidCircle DrawSolidCircle
zz generating b2Draw::DrawSolidPolygon
zz making return b2Draw DrawSolidPolygon void _emscripten_bind_b2Draw__DrawSolidPolygon_p3(this.ptr, arg0.ptr, arg1, arg2.ptr)
Maekin: b2Draw b2Draw DrawSolidPolygon DrawSolidPolygon
zz generating b2Draw::DrawCircle
zz making return b2Draw DrawCircle void _emscripten_bind_b2Draw__DrawCircle_p3(this.ptr, arg0.ptr, arg1, arg2.ptr)
Maekin: b2Draw b2Draw DrawCircle DrawCircle
zz generating b2Draw::SetFlags
zz making return b2Draw SetFlags void _emscripten_bind_b2Draw__SetFlags_p1(this.ptr, arg0)
Maekin: b2Draw b2Draw SetFlags SetFlags
zz generating b2Draw::DrawSegment
zz making return b2Draw DrawSegment void _emscripten_bind_b2Draw__DrawSegment_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr)
Maekin: b2Draw b2Draw DrawSegment DrawSegment
zz generating b2Draw::b2Draw
Maekin: b2Draw b2Draw b2Draw b2Draw
zz generating b2Draw::GetFlags
zz making return b2Draw GetFlags unsigned int _emscripten_bind_b2Draw__GetFlags_p0(this.ptr)
Maekin: b2Draw b2Draw GetFlags GetFlags
Checking pure virtual for b2Joint []
zz ignoring pure virtual class b2Joint due to GetAnchorA
zz b2Joint is abstract? True
zz b2Joint has constructor? False
zz generating: b2Joint b2Joint
zz methods:  ['GetNext', 'GetBodyA', 'GetBodyB', 'GetReactionTorque', 'GetAnchorA', 'GetUserData', 'GetType', 'SetUserData', 'GetCollideConnected', 'Dump', 'GetAnchorB', 'GetReactionForce', 'IsActive']
zz generating b2Joint::GetNext
zz making return b2Joint GetNext b2Joint _emscripten_bind_b2Joint__GetNext_p0(this.ptr)
Maekin: b2Joint b2Joint GetNext GetNext
zz generating b2Joint::GetBodyA
zz making return b2Joint GetBodyA b2Body _emscripten_bind_b2Joint__GetBodyA_p0(this.ptr)
Maekin: b2Joint b2Joint GetBodyA GetBodyA
zz generating b2Joint::GetBodyB
zz making return b2Joint GetBodyB b2Body _emscripten_bind_b2Joint__GetBodyB_p0(this.ptr)
Maekin: b2Joint b2Joint GetBodyB GetBodyB
zz generating b2Joint::GetReactionTorque
zz making return b2Joint GetReactionTorque float _emscripten_bind_b2Joint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2Joint b2Joint GetReactionTorque GetReactionTorque
zz generating b2Joint::GetAnchorA
zz making return b2Joint GetAnchorA b2Vec2 _emscripten_bind_b2Joint__GetAnchorA_p0(this.ptr)
Maekin: b2Joint b2Joint GetAnchorA GetAnchorA
zz generating b2Joint::GetUserData
zz making return b2Joint GetUserData void _emscripten_bind_b2Joint__GetUserData_p0(this.ptr)
Maekin: b2Joint b2Joint GetUserData GetUserData
zz generating b2Joint::GetType
zz making return b2Joint GetType int _emscripten_bind_b2Joint__GetType_p0(this.ptr)
Maekin: b2Joint b2Joint GetType GetType
zz generating b2Joint::SetUserData
zz making return b2Joint SetUserData void _emscripten_bind_b2Joint__SetUserData_p1(this.ptr, arg0)
Maekin: b2Joint b2Joint SetUserData SetUserData
zz generating b2Joint::GetCollideConnected
zz making return b2Joint GetCollideConnected bool _emscripten_bind_b2Joint__GetCollideConnected_p0(this.ptr)
Maekin: b2Joint b2Joint GetCollideConnected GetCollideConnected
zz generating b2Joint::Dump
zz making return b2Joint Dump void _emscripten_bind_b2Joint__Dump_p0(this.ptr)
Maekin: b2Joint b2Joint Dump Dump
zz generating b2Joint::GetAnchorB
zz making return b2Joint GetAnchorB b2Vec2 _emscripten_bind_b2Joint__GetAnchorB_p0(this.ptr)
Maekin: b2Joint b2Joint GetAnchorB GetAnchorB
zz generating b2Joint::GetReactionForce
zz making return b2Joint GetReactionForce b2Vec2 _emscripten_bind_b2Joint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2Joint b2Joint GetReactionForce GetReactionForce
zz generating b2Joint::IsActive
zz making return b2Joint IsActive bool _emscripten_bind_b2Joint__IsActive_p0(this.ptr)
Maekin: b2Joint b2Joint IsActive IsActive
Checking pure virtual for b2GearJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2GearJoint is abstract? None
zz b2GearJoint has constructor? True
zz generating: b2GearJoint b2GearJoint
zz methods:  ['GetJoint1', 'b2GearJoint', 'GetAnchorA', 'GetJoint2', 'GetReactionTorque', 'Dump', '__destroy__', 'SetRatio', 'GetType', 'GetUserData', 'GetBodyB', 'GetCollideConnected', 'SetUserData', 'GetAnchorB', 'GetReactionForce', 'GetBodyA', 'GetNext', 'IsActive', 'GetRatio']
zz generating b2GearJoint::GetJoint1
zz making return b2GearJoint GetJoint1 b2Joint _emscripten_bind_b2GearJoint__GetJoint1_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetJoint1 GetJoint1
zz generating b2GearJoint::b2GearJoint
Maekin: b2GearJoint b2GearJoint b2GearJoint b2GearJoint
zz generating b2GearJoint::GetAnchorA
zz making return b2GearJoint GetAnchorA b2Vec2 _emscripten_bind_b2GearJoint__GetAnchorA_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetAnchorA GetAnchorA
zz generating b2GearJoint::GetJoint2
zz making return b2GearJoint GetJoint2 b2Joint _emscripten_bind_b2GearJoint__GetJoint2_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetJoint2 GetJoint2
zz generating b2GearJoint::GetReactionTorque
zz making return b2GearJoint GetReactionTorque float _emscripten_bind_b2GearJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2GearJoint b2GearJoint GetReactionTorque GetReactionTorque
zz generating b2GearJoint::Dump
zz making return b2GearJoint Dump void _emscripten_bind_b2GearJoint__Dump_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint Dump Dump
zz generating b2GearJoint::__destroy__
zz making return b2GearJoint __destroy__ void _emscripten_bind_b2GearJoint____destroy___p0(this.ptr)
Maekin: b2GearJoint b2GearJoint __destroy__ __destroy__
zz generating b2GearJoint::SetRatio
zz making return b2GearJoint SetRatio void _emscripten_bind_b2GearJoint__SetRatio_p1(this.ptr, arg0)
Maekin: b2GearJoint b2GearJoint SetRatio SetRatio
zz generating b2GearJoint::GetType
zz making return b2GearJoint GetType int _emscripten_bind_b2GearJoint__GetType_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetType GetType
zz generating b2GearJoint::GetUserData
zz making return b2GearJoint GetUserData void _emscripten_bind_b2GearJoint__GetUserData_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetUserData GetUserData
zz generating b2GearJoint::GetBodyB
zz making return b2GearJoint GetBodyB b2Body _emscripten_bind_b2GearJoint__GetBodyB_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetBodyB GetBodyB
zz generating b2GearJoint::GetCollideConnected
zz making return b2GearJoint GetCollideConnected bool _emscripten_bind_b2GearJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetCollideConnected GetCollideConnected
zz generating b2GearJoint::SetUserData
zz making return b2GearJoint SetUserData void _emscripten_bind_b2GearJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2GearJoint b2GearJoint SetUserData SetUserData
zz generating b2GearJoint::GetAnchorB
zz making return b2GearJoint GetAnchorB b2Vec2 _emscripten_bind_b2GearJoint__GetAnchorB_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetAnchorB GetAnchorB
zz generating b2GearJoint::GetReactionForce
zz making return b2GearJoint GetReactionForce b2Vec2 _emscripten_bind_b2GearJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2GearJoint b2GearJoint GetReactionForce GetReactionForce
zz generating b2GearJoint::GetBodyA
zz making return b2GearJoint GetBodyA b2Body _emscripten_bind_b2GearJoint__GetBodyA_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetBodyA GetBodyA
zz generating b2GearJoint::GetNext
zz making return b2GearJoint GetNext b2Joint _emscripten_bind_b2GearJoint__GetNext_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetNext GetNext
zz generating b2GearJoint::IsActive
zz making return b2GearJoint IsActive bool _emscripten_bind_b2GearJoint__IsActive_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint IsActive IsActive
zz generating b2GearJoint::GetRatio
zz making return b2GearJoint GetRatio float _emscripten_bind_b2GearJoint__GetRatio_p0(this.ptr)
Maekin: b2GearJoint b2GearJoint GetRatio GetRatio
Checking pure virtual for b2RayCastCallback []
zz b2RayCastCallback is abstract? None
zz b2RayCastCallback has constructor? True
zz generating: b2RayCastCallback b2RayCastCallback
zz methods:  ['ReportFixture', 'b2RayCastCallback', '__destroy__']
zz generating b2RayCastCallback::ReportFixture
zz making return b2RayCastCallback ReportFixture float _emscripten_bind_b2RayCastCallback__ReportFixture_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3)
Maekin: b2RayCastCallback b2RayCastCallback ReportFixture ReportFixture
zz generating b2RayCastCallback::b2RayCastCallback
Maekin: b2RayCastCallback b2RayCastCallback b2RayCastCallback b2RayCastCallback
zz generating b2RayCastCallback::__destroy__
zz making return b2RayCastCallback __destroy__ void _emscripten_bind_b2RayCastCallback____destroy___p0(this.ptr)
Maekin: b2RayCastCallback b2RayCastCallback __destroy__ __destroy__
Checking pure virtual for b2DynamicTree []
zz b2DynamicTree is abstract? None
zz b2DynamicTree has constructor? True
zz generating: b2DynamicTree b2DynamicTree
zz methods:  ['__destroy__', 'b2DynamicTree', 'GetFatAABB', 'GetUserData', 'GetMaxBalance', 'GetHeight', 'RayCast', 'GetAreaRatio', 'RebuildBottomUp', 'CreateProxy', 'MoveProxy', 'Query', 'Validate', 'DestroyProxy']
zz generating b2DynamicTree::__destroy__
zz making return b2DynamicTree __destroy__ void _emscripten_bind_b2DynamicTree____destroy___p0(this.ptr)
Maekin: b2DynamicTree b2DynamicTree __destroy__ __destroy__
zz generating b2DynamicTree::b2DynamicTree
Maekin: b2DynamicTree b2DynamicTree b2DynamicTree b2DynamicTree
zz generating b2DynamicTree::GetFatAABB
zz making return b2DynamicTree GetFatAABB b2AABB _emscripten_bind_b2DynamicTree__GetFatAABB_p1(this.ptr, arg0)
Maekin: b2DynamicTree b2DynamicTree GetFatAABB GetFatAABB
zz generating b2DynamicTree::GetUserData
zz making return b2DynamicTree GetUserData void _emscripten_bind_b2DynamicTree__GetUserData_p1(this.ptr, arg0)
Maekin: b2DynamicTree b2DynamicTree GetUserData GetUserData
zz generating b2DynamicTree::GetMaxBalance
zz making return b2DynamicTree GetMaxBalance int _emscripten_bind_b2DynamicTree__GetMaxBalance_p0(this.ptr)
Maekin: b2DynamicTree b2DynamicTree GetMaxBalance GetMaxBalance
zz generating b2DynamicTree::GetHeight
zz making return b2DynamicTree GetHeight int _emscripten_bind_b2DynamicTree__GetHeight_p0(this.ptr)
Maekin: b2DynamicTree b2DynamicTree GetHeight GetHeight
zz ignoring RayCast
zz generating b2DynamicTree::GetAreaRatio
zz making return b2DynamicTree GetAreaRatio float _emscripten_bind_b2DynamicTree__GetAreaRatio_p0(this.ptr)
Maekin: b2DynamicTree b2DynamicTree GetAreaRatio GetAreaRatio
zz generating b2DynamicTree::RebuildBottomUp
zz making return b2DynamicTree RebuildBottomUp void _emscripten_bind_b2DynamicTree__RebuildBottomUp_p0(this.ptr)
Maekin: b2DynamicTree b2DynamicTree RebuildBottomUp RebuildBottomUp
zz generating b2DynamicTree::CreateProxy
zz making return b2DynamicTree CreateProxy int _emscripten_bind_b2DynamicTree__CreateProxy_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2DynamicTree b2DynamicTree CreateProxy CreateProxy
zz generating b2DynamicTree::MoveProxy
zz making return b2DynamicTree MoveProxy bool _emscripten_bind_b2DynamicTree__MoveProxy_p3(this.ptr, arg0, arg1.ptr, arg2.ptr)
Maekin: b2DynamicTree b2DynamicTree MoveProxy MoveProxy
zz ignoring Query
zz generating b2DynamicTree::Validate
zz making return b2DynamicTree Validate void _emscripten_bind_b2DynamicTree__Validate_p0(this.ptr)
Maekin: b2DynamicTree b2DynamicTree Validate Validate
zz generating b2DynamicTree::DestroyProxy
zz making return b2DynamicTree DestroyProxy void _emscripten_bind_b2DynamicTree__DestroyProxy_p1(this.ptr, arg0)
Maekin: b2DynamicTree b2DynamicTree DestroyProxy DestroyProxy
Checking pure virtual for b2WeldJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2WeldJoint is abstract? None
zz b2WeldJoint has constructor? True
zz generating: b2WeldJoint b2WeldJoint
zz methods:  ['GetBodyA', 'GetBodyB', 'SetFrequency', 'GetUserData', 'SetUserData', 'GetAnchorB', 'GetAnchorA', 'GetNext', 'GetLocalAnchorA', 'GetLocalAnchorB', 'GetFrequency', 'b2WeldJoint', 'GetReactionForce', 'GetDampingRatio', 'GetCollideConnected', '__destroy__', 'GetReferenceAngle', 'Dump', 'GetType', 'SetDampingRatio', 'GetReactionTorque', 'IsActive']
zz generating b2WeldJoint::GetBodyA
zz making return b2WeldJoint GetBodyA b2Body _emscripten_bind_b2WeldJoint__GetBodyA_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetBodyA GetBodyA
zz generating b2WeldJoint::GetBodyB
zz making return b2WeldJoint GetBodyB b2Body _emscripten_bind_b2WeldJoint__GetBodyB_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetBodyB GetBodyB
zz generating b2WeldJoint::SetFrequency
zz making return b2WeldJoint SetFrequency void _emscripten_bind_b2WeldJoint__SetFrequency_p1(this.ptr, arg0)
Maekin: b2WeldJoint b2WeldJoint SetFrequency SetFrequency
zz generating b2WeldJoint::GetUserData
zz making return b2WeldJoint GetUserData void _emscripten_bind_b2WeldJoint__GetUserData_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetUserData GetUserData
zz generating b2WeldJoint::SetUserData
zz making return b2WeldJoint SetUserData void _emscripten_bind_b2WeldJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2WeldJoint b2WeldJoint SetUserData SetUserData
zz generating b2WeldJoint::GetAnchorB
zz making return b2WeldJoint GetAnchorB b2Vec2 _emscripten_bind_b2WeldJoint__GetAnchorB_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetAnchorB GetAnchorB
zz generating b2WeldJoint::GetAnchorA
zz making return b2WeldJoint GetAnchorA b2Vec2 _emscripten_bind_b2WeldJoint__GetAnchorA_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetAnchorA GetAnchorA
zz generating b2WeldJoint::GetNext
zz making return b2WeldJoint GetNext b2Joint _emscripten_bind_b2WeldJoint__GetNext_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetNext GetNext
zz generating b2WeldJoint::GetLocalAnchorA
zz making return b2WeldJoint GetLocalAnchorA b2Vec2 _emscripten_bind_b2WeldJoint__GetLocalAnchorA_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetLocalAnchorA GetLocalAnchorA
zz generating b2WeldJoint::GetLocalAnchorB
zz making return b2WeldJoint GetLocalAnchorB b2Vec2 _emscripten_bind_b2WeldJoint__GetLocalAnchorB_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetLocalAnchorB GetLocalAnchorB
zz generating b2WeldJoint::GetFrequency
zz making return b2WeldJoint GetFrequency float _emscripten_bind_b2WeldJoint__GetFrequency_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetFrequency GetFrequency
zz generating b2WeldJoint::b2WeldJoint
Maekin: b2WeldJoint b2WeldJoint b2WeldJoint b2WeldJoint
zz generating b2WeldJoint::GetReactionForce
zz making return b2WeldJoint GetReactionForce b2Vec2 _emscripten_bind_b2WeldJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2WeldJoint b2WeldJoint GetReactionForce GetReactionForce
zz generating b2WeldJoint::GetDampingRatio
zz making return b2WeldJoint GetDampingRatio float _emscripten_bind_b2WeldJoint__GetDampingRatio_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetDampingRatio GetDampingRatio
zz generating b2WeldJoint::GetCollideConnected
zz making return b2WeldJoint GetCollideConnected bool _emscripten_bind_b2WeldJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetCollideConnected GetCollideConnected
zz generating b2WeldJoint::__destroy__
zz making return b2WeldJoint __destroy__ void _emscripten_bind_b2WeldJoint____destroy___p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint __destroy__ __destroy__
zz generating b2WeldJoint::GetReferenceAngle
zz making return b2WeldJoint GetReferenceAngle float _emscripten_bind_b2WeldJoint__GetReferenceAngle_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetReferenceAngle GetReferenceAngle
zz generating b2WeldJoint::Dump
zz making return b2WeldJoint Dump void _emscripten_bind_b2WeldJoint__Dump_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint Dump Dump
zz generating b2WeldJoint::GetType
zz making return b2WeldJoint GetType int _emscripten_bind_b2WeldJoint__GetType_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint GetType GetType
zz generating b2WeldJoint::SetDampingRatio
zz making return b2WeldJoint SetDampingRatio void _emscripten_bind_b2WeldJoint__SetDampingRatio_p1(this.ptr, arg0)
Maekin: b2WeldJoint b2WeldJoint SetDampingRatio SetDampingRatio
zz generating b2WeldJoint::GetReactionTorque
zz making return b2WeldJoint GetReactionTorque float _emscripten_bind_b2WeldJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2WeldJoint b2WeldJoint GetReactionTorque GetReactionTorque
zz generating b2WeldJoint::IsActive
zz making return b2WeldJoint IsActive bool _emscripten_bind_b2WeldJoint__IsActive_p0(this.ptr)
Maekin: b2WeldJoint b2WeldJoint IsActive IsActive
Checking pure virtual for b2RevoluteJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2RevoluteJoint is abstract? None
zz b2RevoluteJoint has constructor? True
zz generating: b2RevoluteJoint b2RevoluteJoint
zz methods:  ['GetBodyA', 'GetBodyB', 'GetUserData', 'GetLowerLimit', 'GetAnchorA', 'b2RevoluteJoint', 'GetNext', 'GetLocalAnchorA', 'SetMotorSpeed', 'GetLocalAnchorB', 'GetJointAngle', 'GetMotorSpeed', 'GetMotorTorque', 'IsLimitEnabled', 'EnableLimit', 'IsMotorEnabled', 'SetUserData', 'GetReactionForce', 'SetMaxMotorTorque', 'GetCollideConnected', 'GetJointSpeed', 'EnableMotor', '__destroy__', 'GetReferenceAngle', 'Dump', 'SetLimits', 'GetMaxMotorTorque', 'GetType', 'GetReactionTorque', 'GetUpperLimit', 'IsActive', 'GetAnchorB']
zz generating b2RevoluteJoint::GetBodyA
zz making return b2RevoluteJoint GetBodyA b2Body _emscripten_bind_b2RevoluteJoint__GetBodyA_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetBodyA GetBodyA
zz generating b2RevoluteJoint::GetBodyB
zz making return b2RevoluteJoint GetBodyB b2Body _emscripten_bind_b2RevoluteJoint__GetBodyB_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetBodyB GetBodyB
zz generating b2RevoluteJoint::GetUserData
zz making return b2RevoluteJoint GetUserData void _emscripten_bind_b2RevoluteJoint__GetUserData_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetUserData GetUserData
zz generating b2RevoluteJoint::GetLowerLimit
zz making return b2RevoluteJoint GetLowerLimit float _emscripten_bind_b2RevoluteJoint__GetLowerLimit_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetLowerLimit GetLowerLimit
zz generating b2RevoluteJoint::GetAnchorA
zz making return b2RevoluteJoint GetAnchorA b2Vec2 _emscripten_bind_b2RevoluteJoint__GetAnchorA_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetAnchorA GetAnchorA
zz generating b2RevoluteJoint::b2RevoluteJoint
Maekin: b2RevoluteJoint b2RevoluteJoint b2RevoluteJoint b2RevoluteJoint
zz generating b2RevoluteJoint::GetNext
zz making return b2RevoluteJoint GetNext b2Joint _emscripten_bind_b2RevoluteJoint__GetNext_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetNext GetNext
zz generating b2RevoluteJoint::GetLocalAnchorA
zz making return b2RevoluteJoint GetLocalAnchorA b2Vec2 _emscripten_bind_b2RevoluteJoint__GetLocalAnchorA_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetLocalAnchorA GetLocalAnchorA
zz generating b2RevoluteJoint::SetMotorSpeed
zz making return b2RevoluteJoint SetMotorSpeed void _emscripten_bind_b2RevoluteJoint__SetMotorSpeed_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint SetMotorSpeed SetMotorSpeed
zz generating b2RevoluteJoint::GetLocalAnchorB
zz making return b2RevoluteJoint GetLocalAnchorB b2Vec2 _emscripten_bind_b2RevoluteJoint__GetLocalAnchorB_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetLocalAnchorB GetLocalAnchorB
zz generating b2RevoluteJoint::GetJointAngle
zz making return b2RevoluteJoint GetJointAngle float _emscripten_bind_b2RevoluteJoint__GetJointAngle_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetJointAngle GetJointAngle
zz generating b2RevoluteJoint::GetMotorSpeed
zz making return b2RevoluteJoint GetMotorSpeed float _emscripten_bind_b2RevoluteJoint__GetMotorSpeed_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetMotorSpeed GetMotorSpeed
zz generating b2RevoluteJoint::GetMotorTorque
zz making return b2RevoluteJoint GetMotorTorque float _emscripten_bind_b2RevoluteJoint__GetMotorTorque_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint GetMotorTorque GetMotorTorque
zz generating b2RevoluteJoint::IsLimitEnabled
zz making return b2RevoluteJoint IsLimitEnabled bool _emscripten_bind_b2RevoluteJoint__IsLimitEnabled_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint IsLimitEnabled IsLimitEnabled
zz generating b2RevoluteJoint::EnableLimit
zz making return b2RevoluteJoint EnableLimit void _emscripten_bind_b2RevoluteJoint__EnableLimit_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint EnableLimit EnableLimit
zz generating b2RevoluteJoint::IsMotorEnabled
zz making return b2RevoluteJoint IsMotorEnabled bool _emscripten_bind_b2RevoluteJoint__IsMotorEnabled_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint IsMotorEnabled IsMotorEnabled
zz generating b2RevoluteJoint::SetUserData
zz making return b2RevoluteJoint SetUserData void _emscripten_bind_b2RevoluteJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint SetUserData SetUserData
zz generating b2RevoluteJoint::GetReactionForce
zz making return b2RevoluteJoint GetReactionForce b2Vec2 _emscripten_bind_b2RevoluteJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint GetReactionForce GetReactionForce
zz generating b2RevoluteJoint::SetMaxMotorTorque
zz making return b2RevoluteJoint SetMaxMotorTorque void _emscripten_bind_b2RevoluteJoint__SetMaxMotorTorque_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint SetMaxMotorTorque SetMaxMotorTorque
zz generating b2RevoluteJoint::GetCollideConnected
zz making return b2RevoluteJoint GetCollideConnected bool _emscripten_bind_b2RevoluteJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetCollideConnected GetCollideConnected
zz generating b2RevoluteJoint::GetJointSpeed
zz making return b2RevoluteJoint GetJointSpeed float _emscripten_bind_b2RevoluteJoint__GetJointSpeed_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetJointSpeed GetJointSpeed
zz generating b2RevoluteJoint::EnableMotor
zz making return b2RevoluteJoint EnableMotor void _emscripten_bind_b2RevoluteJoint__EnableMotor_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint EnableMotor EnableMotor
zz generating b2RevoluteJoint::__destroy__
zz making return b2RevoluteJoint __destroy__ void _emscripten_bind_b2RevoluteJoint____destroy___p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint __destroy__ __destroy__
zz generating b2RevoluteJoint::GetReferenceAngle
zz making return b2RevoluteJoint GetReferenceAngle float _emscripten_bind_b2RevoluteJoint__GetReferenceAngle_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetReferenceAngle GetReferenceAngle
zz generating b2RevoluteJoint::Dump
zz making return b2RevoluteJoint Dump void _emscripten_bind_b2RevoluteJoint__Dump_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint Dump Dump
zz generating b2RevoluteJoint::SetLimits
zz making return b2RevoluteJoint SetLimits void _emscripten_bind_b2RevoluteJoint__SetLimits_p2(this.ptr, arg0, arg1)
Maekin: b2RevoluteJoint b2RevoluteJoint SetLimits SetLimits
zz generating b2RevoluteJoint::GetMaxMotorTorque
zz making return b2RevoluteJoint GetMaxMotorTorque float _emscripten_bind_b2RevoluteJoint__GetMaxMotorTorque_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetMaxMotorTorque GetMaxMotorTorque
zz generating b2RevoluteJoint::GetType
zz making return b2RevoluteJoint GetType int _emscripten_bind_b2RevoluteJoint__GetType_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetType GetType
zz generating b2RevoluteJoint::GetReactionTorque
zz making return b2RevoluteJoint GetReactionTorque float _emscripten_bind_b2RevoluteJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2RevoluteJoint b2RevoluteJoint GetReactionTorque GetReactionTorque
zz generating b2RevoluteJoint::GetUpperLimit
zz making return b2RevoluteJoint GetUpperLimit float _emscripten_bind_b2RevoluteJoint__GetUpperLimit_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetUpperLimit GetUpperLimit
zz generating b2RevoluteJoint::IsActive
zz making return b2RevoluteJoint IsActive bool _emscripten_bind_b2RevoluteJoint__IsActive_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint IsActive IsActive
zz generating b2RevoluteJoint::GetAnchorB
zz making return b2RevoluteJoint GetAnchorB b2Vec2 _emscripten_bind_b2RevoluteJoint__GetAnchorB_p0(this.ptr)
Maekin: b2RevoluteJoint b2RevoluteJoint GetAnchorB GetAnchorB
Checking pure virtual for b2Timer []
zz b2Timer is abstract? None
zz b2Timer has constructor? True
zz generating: b2Timer b2Timer
zz methods:  ['b2Timer', 'Reset', '__destroy__', 'GetMilliseconds']
zz generating b2Timer::b2Timer
Maekin: b2Timer b2Timer b2Timer b2Timer
zz generating b2Timer::Reset
zz making return b2Timer Reset void _emscripten_bind_b2Timer__Reset_p0(this.ptr)
Maekin: b2Timer b2Timer Reset Reset
zz generating b2Timer::__destroy__
zz making return b2Timer __destroy__ void _emscripten_bind_b2Timer____destroy___p0(this.ptr)
Maekin: b2Timer b2Timer __destroy__ __destroy__
zz generating b2Timer::GetMilliseconds
zz making return b2Timer GetMilliseconds float _emscripten_bind_b2Timer__GetMilliseconds_p0(this.ptr)
Maekin: b2Timer b2Timer GetMilliseconds GetMilliseconds
Checking pure virtual for b2ContactListener []
zz b2ContactListener is abstract? None
zz b2ContactListener has constructor? True
zz generating: b2ContactListener b2ContactListener
zz methods:  ['__destroy__', 'b2ContactListener', 'EndContact', 'BeginContact', 'PreSolve', 'PostSolve']
zz generating b2ContactListener::__destroy__
zz making return b2ContactListener __destroy__ void _emscripten_bind_b2ContactListener____destroy___p0(this.ptr)
Maekin: b2ContactListener b2ContactListener __destroy__ __destroy__
zz generating b2ContactListener::b2ContactListener
Maekin: b2ContactListener b2ContactListener b2ContactListener b2ContactListener
zz generating b2ContactListener::EndContact
zz making return b2ContactListener EndContact void _emscripten_bind_b2ContactListener__EndContact_p1(this.ptr, arg0.ptr)
Maekin: b2ContactListener b2ContactListener EndContact EndContact
zz generating b2ContactListener::BeginContact
zz making return b2ContactListener BeginContact void _emscripten_bind_b2ContactListener__BeginContact_p1(this.ptr, arg0.ptr)
Maekin: b2ContactListener b2ContactListener BeginContact BeginContact
zz generating b2ContactListener::PreSolve
zz making return b2ContactListener PreSolve void _emscripten_bind_b2ContactListener__PreSolve_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2ContactListener b2ContactListener PreSolve PreSolve
zz generating b2ContactListener::PostSolve
zz making return b2ContactListener PostSolve void _emscripten_bind_b2ContactListener__PostSolve_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2ContactListener b2ContactListener PostSolve PostSolve
Checking pure virtual for b2ChainShape [{'access': 'public', 'class': 'b2Shape'}]
Checking pure virtual for b2Shape []
zz b2ChainShape is abstract? None
zz b2ChainShape has constructor? True
zz generating: b2ChainShape b2ChainShape
zz methods:  ['__destroy__', 'GetType', 'CreateChain', 'set_m_radius', 'get_m_radius', 'get_m_vertices', 'ComputeMass', 'Clone', 'get_m_count', 'GetChildEdge', 'b2ChainShape', 'ComputeAABB', 'RayCast', 'GetChildCount', 'TestPoint', 'SetPrevVertex', 'CreateLoop', 'set_m_vertices', 'SetNextVertex', 'set_m_count']
zz generating b2ChainShape::__destroy__
zz making return b2ChainShape __destroy__ void _emscripten_bind_b2ChainShape____destroy___p0(this.ptr)
Maekin: b2ChainShape b2ChainShape __destroy__ __destroy__
zz generating b2ChainShape::GetType
zz making return b2ChainShape GetType int _emscripten_bind_b2ChainShape__GetType_p0(this.ptr)
Maekin: b2ChainShape b2ChainShape GetType GetType
zz generating b2ChainShape::CreateChain
zz making return b2ChainShape CreateChain void _emscripten_bind_b2ChainShape__CreateChain_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2ChainShape b2ChainShape CreateChain CreateChain
zz generating b2ChainShape::set_m_radius
zz making return b2ChainShape set_m_radius void _emscripten_bind_b2ChainShape__set_m_radius_p1(this.ptr, arg0)
Maekin: b2ChainShape b2ChainShape set_m_radius set_m_radius
zz generating b2ChainShape::get_m_radius
zz making return b2ChainShape get_m_radius float _emscripten_bind_b2ChainShape__get_m_radius_p0(this.ptr)
Maekin: b2ChainShape b2ChainShape get_m_radius get_m_radius
zz generating b2ChainShape::get_m_vertices
zz making return b2ChainShape get_m_vertices b2Vec2 _emscripten_bind_b2ChainShape__get_m_vertices_p0(this.ptr)
Maekin: b2ChainShape b2ChainShape get_m_vertices get_m_vertices
zz generating b2ChainShape::ComputeMass
zz making return b2ChainShape ComputeMass void _emscripten_bind_b2ChainShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2ChainShape b2ChainShape ComputeMass ComputeMass
zz generating b2ChainShape::Clone
zz making return b2ChainShape Clone b2Shape _emscripten_bind_b2ChainShape__Clone_p1(this.ptr, arg0.ptr)
Maekin: b2ChainShape b2ChainShape Clone Clone
zz generating b2ChainShape::get_m_count
zz making return b2ChainShape get_m_count signed int _emscripten_bind_b2ChainShape__get_m_count_p0(this.ptr)
Maekin: b2ChainShape b2ChainShape get_m_count get_m_count
zz generating b2ChainShape::GetChildEdge
zz making return b2ChainShape GetChildEdge void _emscripten_bind_b2ChainShape__GetChildEdge_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2ChainShape b2ChainShape GetChildEdge GetChildEdge
zz generating b2ChainShape::b2ChainShape
Maekin: b2ChainShape b2ChainShape b2ChainShape b2ChainShape
zz generating b2ChainShape::ComputeAABB
zz making return b2ChainShape ComputeAABB void _emscripten_bind_b2ChainShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2)
Maekin: b2ChainShape b2ChainShape ComputeAABB ComputeAABB
zz generating b2ChainShape::RayCast
zz making return b2ChainShape RayCast bool _emscripten_bind_b2ChainShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3)
Maekin: b2ChainShape b2ChainShape RayCast RayCast
zz generating b2ChainShape::GetChildCount
zz making return b2ChainShape GetChildCount int _emscripten_bind_b2ChainShape__GetChildCount_p0(this.ptr)
Maekin: b2ChainShape b2ChainShape GetChildCount GetChildCount
zz generating b2ChainShape::TestPoint
zz making return b2ChainShape TestPoint bool _emscripten_bind_b2ChainShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2ChainShape b2ChainShape TestPoint TestPoint
zz generating b2ChainShape::SetPrevVertex
zz making return b2ChainShape SetPrevVertex void _emscripten_bind_b2ChainShape__SetPrevVertex_p1(this.ptr, arg0.ptr)
Maekin: b2ChainShape b2ChainShape SetPrevVertex SetPrevVertex
zz generating b2ChainShape::CreateLoop
zz making return b2ChainShape CreateLoop void _emscripten_bind_b2ChainShape__CreateLoop_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2ChainShape b2ChainShape CreateLoop CreateLoop
zz generating b2ChainShape::set_m_vertices
zz making return b2ChainShape set_m_vertices void _emscripten_bind_b2ChainShape__set_m_vertices_p1(this.ptr, arg0.ptr)
Maekin: b2ChainShape b2ChainShape set_m_vertices set_m_vertices
zz generating b2ChainShape::SetNextVertex
zz making return b2ChainShape SetNextVertex void _emscripten_bind_b2ChainShape__SetNextVertex_p1(this.ptr, arg0.ptr)
Maekin: b2ChainShape b2ChainShape SetNextVertex SetNextVertex
zz generating b2ChainShape::set_m_count
zz making return b2ChainShape set_m_count void _emscripten_bind_b2ChainShape__set_m_count_p1(this.ptr, arg0)
Maekin: b2ChainShape b2ChainShape set_m_count set_m_count
Checking pure virtual for b2QueryCallback []
zz b2QueryCallback is abstract? None
zz b2QueryCallback has constructor? True
zz generating: b2QueryCallback b2QueryCallback
zz methods:  ['ReportFixture', '__destroy__', 'b2QueryCallback']
zz generating b2QueryCallback::ReportFixture
zz making return b2QueryCallback ReportFixture bool _emscripten_bind_b2QueryCallback__ReportFixture_p1(this.ptr, arg0.ptr)
Maekin: b2QueryCallback b2QueryCallback ReportFixture ReportFixture
zz generating b2QueryCallback::__destroy__
zz making return b2QueryCallback __destroy__ void _emscripten_bind_b2QueryCallback____destroy___p0(this.ptr)
Maekin: b2QueryCallback b2QueryCallback __destroy__ __destroy__
zz generating b2QueryCallback::b2QueryCallback
Maekin: b2QueryCallback b2QueryCallback b2QueryCallback b2QueryCallback
Checking pure virtual for b2BlockAllocator []
zz b2BlockAllocator is abstract? None
zz b2BlockAllocator has constructor? True
zz generating: b2BlockAllocator b2BlockAllocator
zz methods:  ['__destroy__', 'Clear', 'Free', 'Allocate', 'b2BlockAllocator']
zz generating b2BlockAllocator::__destroy__
zz making return b2BlockAllocator __destroy__ void _emscripten_bind_b2BlockAllocator____destroy___p0(this.ptr)
Maekin: b2BlockAllocator b2BlockAllocator __destroy__ __destroy__
zz generating b2BlockAllocator::Clear
zz making return b2BlockAllocator Clear void _emscripten_bind_b2BlockAllocator__Clear_p0(this.ptr)
Maekin: b2BlockAllocator b2BlockAllocator Clear Clear
zz generating b2BlockAllocator::Free
zz making return b2BlockAllocator Free void _emscripten_bind_b2BlockAllocator__Free_p2(this.ptr, arg0, arg1)
Maekin: b2BlockAllocator b2BlockAllocator Free Free
zz generating b2BlockAllocator::Allocate
zz making return b2BlockAllocator Allocate void _emscripten_bind_b2BlockAllocator__Allocate_p1(this.ptr, arg0)
Maekin: b2BlockAllocator b2BlockAllocator Allocate Allocate
zz generating b2BlockAllocator::b2BlockAllocator
Maekin: b2BlockAllocator b2BlockAllocator b2BlockAllocator b2BlockAllocator
Checking pure virtual for b2RopeJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2RopeJoint is abstract? None
zz b2RopeJoint has constructor? True
zz generating: b2RopeJoint b2RopeJoint
zz methods:  ['GetNext', '__destroy__', 'GetAnchorA', 'GetReactionTorque', 'GetMaxLength', 'GetBodyA', 'GetCollideConnected', 'GetUserData', 'GetType', 'GetBodyB', 'GetLocalAnchorA', 'Dump', 'SetMaxLength', 'GetLocalAnchorB', 'SetUserData', 'GetAnchorB', 'GetReactionForce', 'b2RopeJoint', 'GetLimitState', 'IsActive']
zz generating b2RopeJoint::GetNext
zz making return b2RopeJoint GetNext b2Joint _emscripten_bind_b2RopeJoint__GetNext_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetNext GetNext
zz generating b2RopeJoint::__destroy__
zz making return b2RopeJoint __destroy__ void _emscripten_bind_b2RopeJoint____destroy___p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint __destroy__ __destroy__
zz generating b2RopeJoint::GetAnchorA
zz making return b2RopeJoint GetAnchorA b2Vec2 _emscripten_bind_b2RopeJoint__GetAnchorA_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetAnchorA GetAnchorA
zz generating b2RopeJoint::GetReactionTorque
zz making return b2RopeJoint GetReactionTorque float _emscripten_bind_b2RopeJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2RopeJoint b2RopeJoint GetReactionTorque GetReactionTorque
zz generating b2RopeJoint::GetMaxLength
zz making return b2RopeJoint GetMaxLength float _emscripten_bind_b2RopeJoint__GetMaxLength_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetMaxLength GetMaxLength
zz generating b2RopeJoint::GetBodyA
zz making return b2RopeJoint GetBodyA b2Body _emscripten_bind_b2RopeJoint__GetBodyA_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetBodyA GetBodyA
zz generating b2RopeJoint::GetCollideConnected
zz making return b2RopeJoint GetCollideConnected bool _emscripten_bind_b2RopeJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetCollideConnected GetCollideConnected
zz generating b2RopeJoint::GetUserData
zz making return b2RopeJoint GetUserData void _emscripten_bind_b2RopeJoint__GetUserData_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetUserData GetUserData
zz generating b2RopeJoint::GetType
zz making return b2RopeJoint GetType int _emscripten_bind_b2RopeJoint__GetType_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetType GetType
zz generating b2RopeJoint::GetBodyB
zz making return b2RopeJoint GetBodyB b2Body _emscripten_bind_b2RopeJoint__GetBodyB_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetBodyB GetBodyB
zz generating b2RopeJoint::GetLocalAnchorA
zz making return b2RopeJoint GetLocalAnchorA b2Vec2 _emscripten_bind_b2RopeJoint__GetLocalAnchorA_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetLocalAnchorA GetLocalAnchorA
zz generating b2RopeJoint::Dump
zz making return b2RopeJoint Dump void _emscripten_bind_b2RopeJoint__Dump_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint Dump Dump
zz generating b2RopeJoint::SetMaxLength
zz making return b2RopeJoint SetMaxLength void _emscripten_bind_b2RopeJoint__SetMaxLength_p1(this.ptr, arg0)
Maekin: b2RopeJoint b2RopeJoint SetMaxLength SetMaxLength
zz generating b2RopeJoint::GetLocalAnchorB
zz making return b2RopeJoint GetLocalAnchorB b2Vec2 _emscripten_bind_b2RopeJoint__GetLocalAnchorB_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetLocalAnchorB GetLocalAnchorB
zz generating b2RopeJoint::SetUserData
zz making return b2RopeJoint SetUserData void _emscripten_bind_b2RopeJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2RopeJoint b2RopeJoint SetUserData SetUserData
zz generating b2RopeJoint::GetAnchorB
zz making return b2RopeJoint GetAnchorB b2Vec2 _emscripten_bind_b2RopeJoint__GetAnchorB_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetAnchorB GetAnchorB
zz generating b2RopeJoint::GetReactionForce
zz making return b2RopeJoint GetReactionForce b2Vec2 _emscripten_bind_b2RopeJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2RopeJoint b2RopeJoint GetReactionForce GetReactionForce
zz generating b2RopeJoint::b2RopeJoint
Maekin: b2RopeJoint b2RopeJoint b2RopeJoint b2RopeJoint
zz generating b2RopeJoint::GetLimitState
zz making return b2RopeJoint GetLimitState int _emscripten_bind_b2RopeJoint__GetLimitState_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint GetLimitState GetLimitState
zz generating b2RopeJoint::IsActive
zz making return b2RopeJoint IsActive bool _emscripten_bind_b2RopeJoint__IsActive_p0(this.ptr)
Maekin: b2RopeJoint b2RopeJoint IsActive IsActive
Checking pure virtual for b2PolygonShape [{'access': 'public', 'class': 'b2Shape'}]
Checking pure virtual for b2Shape []
zz b2PolygonShape is abstract? None
zz b2PolygonShape has constructor? True
zz generating: b2PolygonShape b2PolygonShape
zz methods:  ['__destroy__', 'Set', 'ComputeMass', 'set_m_radius', 'get_m_radius', 'Clone', 'GetVertex', 'RayCast', 'SetAsBox', 'set_m_centroid', 'ComputeAABB', 'set_m_vertexCount', 'GetVertexCount', 'GetChildCount', 'TestPoint', 'GetType', 'b2PolygonShape', 'get_m_vertexCount', 'get_m_centroid']
zz generating b2PolygonShape::__destroy__
zz making return b2PolygonShape __destroy__ void _emscripten_bind_b2PolygonShape____destroy___p0(this.ptr)
Maekin: b2PolygonShape b2PolygonShape __destroy__ __destroy__
zz generating b2PolygonShape::Set
zz making return b2PolygonShape Set void _emscripten_bind_b2PolygonShape__Set_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2PolygonShape b2PolygonShape Set Set
zz generating b2PolygonShape::ComputeMass
zz making return b2PolygonShape ComputeMass void _emscripten_bind_b2PolygonShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2PolygonShape b2PolygonShape ComputeMass ComputeMass
zz generating b2PolygonShape::set_m_radius
zz making return b2PolygonShape set_m_radius void _emscripten_bind_b2PolygonShape__set_m_radius_p1(this.ptr, arg0)
Maekin: b2PolygonShape b2PolygonShape set_m_radius set_m_radius
zz generating b2PolygonShape::get_m_radius
zz making return b2PolygonShape get_m_radius float _emscripten_bind_b2PolygonShape__get_m_radius_p0(this.ptr)
Maekin: b2PolygonShape b2PolygonShape get_m_radius get_m_radius
zz generating b2PolygonShape::Clone
zz making return b2PolygonShape Clone b2Shape _emscripten_bind_b2PolygonShape__Clone_p1(this.ptr, arg0.ptr)
Maekin: b2PolygonShape b2PolygonShape Clone Clone
zz generating b2PolygonShape::GetVertex
zz making return b2PolygonShape GetVertex b2Vec2 _emscripten_bind_b2PolygonShape__GetVertex_p1(this.ptr, arg0)
Maekin: b2PolygonShape b2PolygonShape GetVertex GetVertex
zz generating b2PolygonShape::RayCast
zz making return b2PolygonShape RayCast bool _emscripten_bind_b2PolygonShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3)
Maekin: b2PolygonShape b2PolygonShape RayCast RayCast
zz generating b2PolygonShape::SetAsBox
zz making return b2PolygonShape SetAsBox void _emscripten_bind_b2PolygonShape__SetAsBox_p2(this.ptr, arg0, arg1)
zz making return b2PolygonShape SetAsBox void _emscripten_bind_b2PolygonShape__SetAsBox_p4(this.ptr, arg0, arg1, arg2.ptr, arg3)
Maekin: b2PolygonShape b2PolygonShape SetAsBox SetAsBox
zz generating b2PolygonShape::set_m_centroid
zz making return b2PolygonShape set_m_centroid void _emscripten_bind_b2PolygonShape__set_m_centroid_p1(this.ptr, arg0.ptr)
Maekin: b2PolygonShape b2PolygonShape set_m_centroid set_m_centroid
zz generating b2PolygonShape::ComputeAABB
zz making return b2PolygonShape ComputeAABB void _emscripten_bind_b2PolygonShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2)
Maekin: b2PolygonShape b2PolygonShape ComputeAABB ComputeAABB
zz generating b2PolygonShape::set_m_vertexCount
zz making return b2PolygonShape set_m_vertexCount void _emscripten_bind_b2PolygonShape__set_m_vertexCount_p1(this.ptr, arg0)
Maekin: b2PolygonShape b2PolygonShape set_m_vertexCount set_m_vertexCount
zz generating b2PolygonShape::GetVertexCount
zz making return b2PolygonShape GetVertexCount int _emscripten_bind_b2PolygonShape__GetVertexCount_p0(this.ptr)
Maekin: b2PolygonShape b2PolygonShape GetVertexCount GetVertexCount
zz generating b2PolygonShape::GetChildCount
zz making return b2PolygonShape GetChildCount int _emscripten_bind_b2PolygonShape__GetChildCount_p0(this.ptr)
Maekin: b2PolygonShape b2PolygonShape GetChildCount GetChildCount
zz generating b2PolygonShape::TestPoint
zz making return b2PolygonShape TestPoint bool _emscripten_bind_b2PolygonShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2PolygonShape b2PolygonShape TestPoint TestPoint
zz generating b2PolygonShape::GetType
zz making return b2PolygonShape GetType int _emscripten_bind_b2PolygonShape__GetType_p0(this.ptr)
Maekin: b2PolygonShape b2PolygonShape GetType GetType
zz generating b2PolygonShape::b2PolygonShape
Maekin: b2PolygonShape b2PolygonShape b2PolygonShape b2PolygonShape
zz generating b2PolygonShape::get_m_vertexCount
zz making return b2PolygonShape get_m_vertexCount signed int _emscripten_bind_b2PolygonShape__get_m_vertexCount_p0(this.ptr)
Maekin: b2PolygonShape b2PolygonShape get_m_vertexCount get_m_vertexCount
zz generating b2PolygonShape::get_m_centroid
zz making return b2PolygonShape get_m_centroid b2Vec2 _emscripten_bind_b2PolygonShape__get_m_centroid_p0(this.ptr)
Maekin: b2PolygonShape b2PolygonShape get_m_centroid get_m_centroid
Checking pure virtual for b2EdgeShape [{'access': 'public', 'class': 'b2Shape'}]
Checking pure virtual for b2Shape []
zz b2EdgeShape is abstract? None
zz b2EdgeShape has constructor? True
zz generating: b2EdgeShape b2EdgeShape
zz methods:  ['__destroy__', 'Set', 'ComputeMass', 'set_m_radius', 'get_m_radius', 'Clone', 'GetType', 'RayCast', 'ComputeAABB', 'GetChildCount', 'TestPoint', 'b2EdgeShape']
zz generating b2EdgeShape::__destroy__
zz making return b2EdgeShape __destroy__ void _emscripten_bind_b2EdgeShape____destroy___p0(this.ptr)
Maekin: b2EdgeShape b2EdgeShape __destroy__ __destroy__
zz generating b2EdgeShape::Set
zz making return b2EdgeShape Set void _emscripten_bind_b2EdgeShape__Set_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2EdgeShape b2EdgeShape Set Set
zz generating b2EdgeShape::ComputeMass
zz making return b2EdgeShape ComputeMass void _emscripten_bind_b2EdgeShape__ComputeMass_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2EdgeShape b2EdgeShape ComputeMass ComputeMass
zz generating b2EdgeShape::set_m_radius
zz making return b2EdgeShape set_m_radius void _emscripten_bind_b2EdgeShape__set_m_radius_p1(this.ptr, arg0)
Maekin: b2EdgeShape b2EdgeShape set_m_radius set_m_radius
zz generating b2EdgeShape::get_m_radius
zz making return b2EdgeShape get_m_radius float _emscripten_bind_b2EdgeShape__get_m_radius_p0(this.ptr)
Maekin: b2EdgeShape b2EdgeShape get_m_radius get_m_radius
zz generating b2EdgeShape::Clone
zz making return b2EdgeShape Clone b2Shape _emscripten_bind_b2EdgeShape__Clone_p1(this.ptr, arg0.ptr)
Maekin: b2EdgeShape b2EdgeShape Clone Clone
zz generating b2EdgeShape::GetType
zz making return b2EdgeShape GetType int _emscripten_bind_b2EdgeShape__GetType_p0(this.ptr)
Maekin: b2EdgeShape b2EdgeShape GetType GetType
zz generating b2EdgeShape::RayCast
zz making return b2EdgeShape RayCast bool _emscripten_bind_b2EdgeShape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3)
Maekin: b2EdgeShape b2EdgeShape RayCast RayCast
zz generating b2EdgeShape::ComputeAABB
zz making return b2EdgeShape ComputeAABB void _emscripten_bind_b2EdgeShape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2)
Maekin: b2EdgeShape b2EdgeShape ComputeAABB ComputeAABB
zz generating b2EdgeShape::GetChildCount
zz making return b2EdgeShape GetChildCount int _emscripten_bind_b2EdgeShape__GetChildCount_p0(this.ptr)
Maekin: b2EdgeShape b2EdgeShape GetChildCount GetChildCount
zz generating b2EdgeShape::TestPoint
zz making return b2EdgeShape TestPoint bool _emscripten_bind_b2EdgeShape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2EdgeShape b2EdgeShape TestPoint TestPoint
zz generating b2EdgeShape::b2EdgeShape
Maekin: b2EdgeShape b2EdgeShape b2EdgeShape b2EdgeShape
Checking pure virtual for b2Contact []
zz ignoring pure virtual class b2Contact due to Evaluate
zz b2Contact is abstract? True
zz b2Contact has constructor? False
zz generating: b2Contact b2Contact
zz methods:  ['GetNext', 'SetEnabled', 'GetWorldManifold', 'GetRestitution', 'ResetFriction', 'GetFriction', 'IsTouching', 'IsEnabled', 'GetFixtureB', 'SetFriction', 'GetFixtureA', 'GetChildIndexA', 'GetChildIndexB', 'Evaluate', 'SetRestitution', 'GetManifold', 'ResetRestitution']
zz generating b2Contact::GetNext
zz making return b2Contact GetNext b2Contact _emscripten_bind_b2Contact__GetNext_p0(this.ptr)
Maekin: b2Contact b2Contact GetNext GetNext
zz generating b2Contact::SetEnabled
zz making return b2Contact SetEnabled void _emscripten_bind_b2Contact__SetEnabled_p1(this.ptr, arg0)
Maekin: b2Contact b2Contact SetEnabled SetEnabled
zz generating b2Contact::GetWorldManifold
zz making return b2Contact GetWorldManifold void _emscripten_bind_b2Contact__GetWorldManifold_p1(this.ptr, arg0.ptr)
Maekin: b2Contact b2Contact GetWorldManifold GetWorldManifold
zz generating b2Contact::GetRestitution
zz making return b2Contact GetRestitution float _emscripten_bind_b2Contact__GetRestitution_p0(this.ptr)
Maekin: b2Contact b2Contact GetRestitution GetRestitution
zz generating b2Contact::ResetFriction
zz making return b2Contact ResetFriction void _emscripten_bind_b2Contact__ResetFriction_p0(this.ptr)
Maekin: b2Contact b2Contact ResetFriction ResetFriction
zz generating b2Contact::GetFriction
zz making return b2Contact GetFriction float _emscripten_bind_b2Contact__GetFriction_p0(this.ptr)
Maekin: b2Contact b2Contact GetFriction GetFriction
zz generating b2Contact::IsTouching
zz making return b2Contact IsTouching bool _emscripten_bind_b2Contact__IsTouching_p0(this.ptr)
Maekin: b2Contact b2Contact IsTouching IsTouching
zz generating b2Contact::IsEnabled
zz making return b2Contact IsEnabled bool _emscripten_bind_b2Contact__IsEnabled_p0(this.ptr)
Maekin: b2Contact b2Contact IsEnabled IsEnabled
zz generating b2Contact::GetFixtureB
zz making return b2Contact GetFixtureB b2Fixture _emscripten_bind_b2Contact__GetFixtureB_p0(this.ptr)
Maekin: b2Contact b2Contact GetFixtureB GetFixtureB
zz generating b2Contact::SetFriction
zz making return b2Contact SetFriction void _emscripten_bind_b2Contact__SetFriction_p1(this.ptr, arg0)
Maekin: b2Contact b2Contact SetFriction SetFriction
zz generating b2Contact::GetFixtureA
zz making return b2Contact GetFixtureA b2Fixture _emscripten_bind_b2Contact__GetFixtureA_p0(this.ptr)
Maekin: b2Contact b2Contact GetFixtureA GetFixtureA
zz generating b2Contact::GetChildIndexA
zz making return b2Contact GetChildIndexA int _emscripten_bind_b2Contact__GetChildIndexA_p0(this.ptr)
Maekin: b2Contact b2Contact GetChildIndexA GetChildIndexA
zz generating b2Contact::GetChildIndexB
zz making return b2Contact GetChildIndexB int _emscripten_bind_b2Contact__GetChildIndexB_p0(this.ptr)
Maekin: b2Contact b2Contact GetChildIndexB GetChildIndexB
zz generating b2Contact::Evaluate
zz making return b2Contact Evaluate void _emscripten_bind_b2Contact__Evaluate_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr)
Maekin: b2Contact b2Contact Evaluate Evaluate
zz generating b2Contact::SetRestitution
zz making return b2Contact SetRestitution void _emscripten_bind_b2Contact__SetRestitution_p1(this.ptr, arg0)
Maekin: b2Contact b2Contact SetRestitution SetRestitution
zz generating b2Contact::GetManifold
zz making return b2Contact GetManifold b2Manifold _emscripten_bind_b2Contact__GetManifold_p0(this.ptr)
Maekin: b2Contact b2Contact GetManifold GetManifold
zz generating b2Contact::ResetRestitution
zz making return b2Contact ResetRestitution void _emscripten_bind_b2Contact__ResetRestitution_p0(this.ptr)
Maekin: b2Contact b2Contact ResetRestitution ResetRestitution
Checking pure virtual for b2Shape []
zz ignoring pure virtual class b2Shape due to Clone
zz b2Shape is abstract? True
zz b2Shape has constructor? False
zz generating: b2Shape b2Shape
zz methods:  ['get_m_radius', 'ComputeMass', 'set_m_radius', 'Clone', 'GetType', 'RayCast', 'ComputeAABB', 'GetChildCount', 'TestPoint']
zz generating b2Shape::get_m_radius
zz making return b2Shape get_m_radius float _emscripten_bind_b2Shape__get_m_radius_p0(this.ptr)
Maekin: b2Shape b2Shape get_m_radius get_m_radius
zz generating b2Shape::ComputeMass
zz making return b2Shape ComputeMass void _emscripten_bind_b2Shape__ComputeMass_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2Shape b2Shape ComputeMass ComputeMass
zz generating b2Shape::set_m_radius
zz making return b2Shape set_m_radius void _emscripten_bind_b2Shape__set_m_radius_p1(this.ptr, arg0)
Maekin: b2Shape b2Shape set_m_radius set_m_radius
zz generating b2Shape::Clone
zz making return b2Shape Clone b2Shape _emscripten_bind_b2Shape__Clone_p1(this.ptr, arg0.ptr)
Maekin: b2Shape b2Shape Clone Clone
zz generating b2Shape::GetType
zz making return b2Shape GetType int _emscripten_bind_b2Shape__GetType_p0(this.ptr)
Maekin: b2Shape b2Shape GetType GetType
zz generating b2Shape::RayCast
zz making return b2Shape RayCast bool _emscripten_bind_b2Shape__RayCast_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3)
Maekin: b2Shape b2Shape RayCast RayCast
zz generating b2Shape::ComputeAABB
zz making return b2Shape ComputeAABB void _emscripten_bind_b2Shape__ComputeAABB_p3(this.ptr, arg0.ptr, arg1.ptr, arg2)
Maekin: b2Shape b2Shape ComputeAABB ComputeAABB
zz generating b2Shape::GetChildCount
zz making return b2Shape GetChildCount int _emscripten_bind_b2Shape__GetChildCount_p0(this.ptr)
Maekin: b2Shape b2Shape GetChildCount GetChildCount
zz generating b2Shape::TestPoint
zz making return b2Shape TestPoint bool _emscripten_bind_b2Shape__TestPoint_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2Shape b2Shape TestPoint TestPoint
Checking pure virtual for b2Body []
zz b2Body is abstract? True
zz b2Body has constructor? False
zz generating: b2Body b2Body
zz methods:  ['GetAngle', 'GetUserData', 'IsSleepingAllowed', 'SetAngularDamping', 'SetActive', 'SetGravityScale', 'SetUserData', 'GetAngularVelocity', 'GetFixtureList', 'ApplyForce', 'GetLocalPoint', 'SetLinearVelocity', 'GetJointList', 'GetLinearVelocity', 'GetNext', 'SetSleepingAllowed', 'SetTransform', 'GetMass', 'SetAngularVelocity', 'GetMassData', 'GetLinearVelocityFromWorldPoint', 'ResetMassData', 'ApplyForceToCenter', 'ApplyTorque', 'IsAwake', 'SetType', 'CreateFixture', 'SetMassData', 'GetTransform', 'GetWorldCenter', 'GetAngularDamping', 'ApplyLinearImpulse', 'IsFixedRotation', 'GetLocalCenter', 'GetWorldVector', 'GetLinearVelocityFromLocalPoint', 'GetContactList', 'GetWorldPoint', 'SetAwake', 'GetLinearDamping', 'IsBullet', 'GetWorld', 'GetLocalVector', 'SetLinearDamping', 'Dump', 'SetBullet', 'GetType', 'GetGravityScale', 'DestroyFixture', 'GetInertia', 'IsActive', 'SetFixedRotation', 'ApplyAngularImpulse', 'GetPosition']
zz generating b2Body::GetAngle
zz making return b2Body GetAngle float _emscripten_bind_b2Body__GetAngle_p0(this.ptr)
Maekin: b2Body b2Body GetAngle GetAngle
zz generating b2Body::GetUserData
zz making return b2Body GetUserData void _emscripten_bind_b2Body__GetUserData_p0(this.ptr)
Maekin: b2Body b2Body GetUserData GetUserData
zz generating b2Body::IsSleepingAllowed
zz making return b2Body IsSleepingAllowed bool _emscripten_bind_b2Body__IsSleepingAllowed_p0(this.ptr)
Maekin: b2Body b2Body IsSleepingAllowed IsSleepingAllowed
zz generating b2Body::SetAngularDamping
zz making return b2Body SetAngularDamping void _emscripten_bind_b2Body__SetAngularDamping_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetAngularDamping SetAngularDamping
zz generating b2Body::SetActive
zz making return b2Body SetActive void _emscripten_bind_b2Body__SetActive_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetActive SetActive
zz generating b2Body::SetGravityScale
zz making return b2Body SetGravityScale void _emscripten_bind_b2Body__SetGravityScale_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetGravityScale SetGravityScale
zz generating b2Body::SetUserData
zz making return b2Body SetUserData void _emscripten_bind_b2Body__SetUserData_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetUserData SetUserData
zz generating b2Body::GetAngularVelocity
zz making return b2Body GetAngularVelocity float _emscripten_bind_b2Body__GetAngularVelocity_p0(this.ptr)
Maekin: b2Body b2Body GetAngularVelocity GetAngularVelocity
zz generating b2Body::GetFixtureList
zz making return b2Body GetFixtureList b2Fixture _emscripten_bind_b2Body__GetFixtureList_p0(this.ptr)
Maekin: b2Body b2Body GetFixtureList GetFixtureList
zz generating b2Body::ApplyForce
zz making return b2Body ApplyForce void _emscripten_bind_b2Body__ApplyForce_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2Body b2Body ApplyForce ApplyForce
zz generating b2Body::GetLocalPoint
zz making return b2Body GetLocalPoint b2Vec2 _emscripten_bind_b2Body__GetLocalPoint_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body GetLocalPoint GetLocalPoint
zz generating b2Body::SetLinearVelocity
zz making return b2Body SetLinearVelocity void _emscripten_bind_b2Body__SetLinearVelocity_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body SetLinearVelocity SetLinearVelocity
zz generating b2Body::GetJointList
zz making return b2Body GetJointList b2JointEdge _emscripten_bind_b2Body__GetJointList_p0(this.ptr)
Maekin: b2Body b2Body GetJointList GetJointList
zz generating b2Body::GetLinearVelocity
zz making return b2Body GetLinearVelocity b2Vec2 _emscripten_bind_b2Body__GetLinearVelocity_p0(this.ptr)
Maekin: b2Body b2Body GetLinearVelocity GetLinearVelocity
zz generating b2Body::GetNext
zz making return b2Body GetNext b2Body _emscripten_bind_b2Body__GetNext_p0(this.ptr)
Maekin: b2Body b2Body GetNext GetNext
zz generating b2Body::SetSleepingAllowed
zz making return b2Body SetSleepingAllowed void _emscripten_bind_b2Body__SetSleepingAllowed_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetSleepingAllowed SetSleepingAllowed
zz generating b2Body::SetTransform
zz making return b2Body SetTransform void _emscripten_bind_b2Body__SetTransform_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2Body b2Body SetTransform SetTransform
zz generating b2Body::GetMass
zz making return b2Body GetMass float _emscripten_bind_b2Body__GetMass_p0(this.ptr)
Maekin: b2Body b2Body GetMass GetMass
zz generating b2Body::SetAngularVelocity
zz making return b2Body SetAngularVelocity void _emscripten_bind_b2Body__SetAngularVelocity_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetAngularVelocity SetAngularVelocity
zz generating b2Body::GetMassData
zz making return b2Body GetMassData void _emscripten_bind_b2Body__GetMassData_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body GetMassData GetMassData
zz generating b2Body::GetLinearVelocityFromWorldPoint
zz making return b2Body GetLinearVelocityFromWorldPoint b2Vec2 _emscripten_bind_b2Body__GetLinearVelocityFromWorldPoint_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body GetLinearVelocityFromWorldPoint GetLinearVelocityFromWorldPoint
zz generating b2Body::ResetMassData
zz making return b2Body ResetMassData void _emscripten_bind_b2Body__ResetMassData_p0(this.ptr)
Maekin: b2Body b2Body ResetMassData ResetMassData
zz generating b2Body::ApplyForceToCenter
zz making return b2Body ApplyForceToCenter void _emscripten_bind_b2Body__ApplyForceToCenter_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body ApplyForceToCenter ApplyForceToCenter
zz generating b2Body::ApplyTorque
zz making return b2Body ApplyTorque void _emscripten_bind_b2Body__ApplyTorque_p1(this.ptr, arg0)
Maekin: b2Body b2Body ApplyTorque ApplyTorque
zz generating b2Body::IsAwake
zz making return b2Body IsAwake bool _emscripten_bind_b2Body__IsAwake_p0(this.ptr)
Maekin: b2Body b2Body IsAwake IsAwake
zz generating b2Body::SetType
zz making return b2Body SetType void _emscripten_bind_b2Body__SetType_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetType SetType
zz generating b2Body::CreateFixture
zz making return b2Body CreateFixture b2Fixture _emscripten_bind_b2Body__CreateFixture_p1(this.ptr, arg0.ptr)
zz making return b2Body CreateFixture b2Fixture _emscripten_bind_b2Body__CreateFixture_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2Body b2Body CreateFixture CreateFixture
zz generating b2Body::SetMassData
zz making return b2Body SetMassData void _emscripten_bind_b2Body__SetMassData_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body SetMassData SetMassData
zz generating b2Body::GetTransform
zz making return b2Body GetTransform b2Transform _emscripten_bind_b2Body__GetTransform_p0(this.ptr)
Maekin: b2Body b2Body GetTransform GetTransform
zz generating b2Body::GetWorldCenter
zz making return b2Body GetWorldCenter b2Vec2 _emscripten_bind_b2Body__GetWorldCenter_p0(this.ptr)
Maekin: b2Body b2Body GetWorldCenter GetWorldCenter
zz generating b2Body::GetAngularDamping
zz making return b2Body GetAngularDamping float _emscripten_bind_b2Body__GetAngularDamping_p0(this.ptr)
Maekin: b2Body b2Body GetAngularDamping GetAngularDamping
zz generating b2Body::ApplyLinearImpulse
zz making return b2Body ApplyLinearImpulse void _emscripten_bind_b2Body__ApplyLinearImpulse_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2Body b2Body ApplyLinearImpulse ApplyLinearImpulse
zz generating b2Body::IsFixedRotation
zz making return b2Body IsFixedRotation bool _emscripten_bind_b2Body__IsFixedRotation_p0(this.ptr)
Maekin: b2Body b2Body IsFixedRotation IsFixedRotation
zz generating b2Body::GetLocalCenter
zz making return b2Body GetLocalCenter b2Vec2 _emscripten_bind_b2Body__GetLocalCenter_p0(this.ptr)
Maekin: b2Body b2Body GetLocalCenter GetLocalCenter
zz generating b2Body::GetWorldVector
zz making return b2Body GetWorldVector b2Vec2 _emscripten_bind_b2Body__GetWorldVector_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body GetWorldVector GetWorldVector
zz generating b2Body::GetLinearVelocityFromLocalPoint
zz making return b2Body GetLinearVelocityFromLocalPoint b2Vec2 _emscripten_bind_b2Body__GetLinearVelocityFromLocalPoint_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body GetLinearVelocityFromLocalPoint GetLinearVelocityFromLocalPoint
zz generating b2Body::GetContactList
zz making return b2Body GetContactList b2ContactEdge _emscripten_bind_b2Body__GetContactList_p0(this.ptr)
Maekin: b2Body b2Body GetContactList GetContactList
zz generating b2Body::GetWorldPoint
zz making return b2Body GetWorldPoint b2Vec2 _emscripten_bind_b2Body__GetWorldPoint_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body GetWorldPoint GetWorldPoint
zz generating b2Body::SetAwake
zz making return b2Body SetAwake void _emscripten_bind_b2Body__SetAwake_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetAwake SetAwake
zz generating b2Body::GetLinearDamping
zz making return b2Body GetLinearDamping float _emscripten_bind_b2Body__GetLinearDamping_p0(this.ptr)
Maekin: b2Body b2Body GetLinearDamping GetLinearDamping
zz generating b2Body::IsBullet
zz making return b2Body IsBullet bool _emscripten_bind_b2Body__IsBullet_p0(this.ptr)
Maekin: b2Body b2Body IsBullet IsBullet
zz generating b2Body::GetWorld
zz making return b2Body GetWorld b2World _emscripten_bind_b2Body__GetWorld_p0(this.ptr)
Maekin: b2Body b2Body GetWorld GetWorld
zz generating b2Body::GetLocalVector
zz making return b2Body GetLocalVector b2Vec2 _emscripten_bind_b2Body__GetLocalVector_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body GetLocalVector GetLocalVector
zz generating b2Body::SetLinearDamping
zz making return b2Body SetLinearDamping void _emscripten_bind_b2Body__SetLinearDamping_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetLinearDamping SetLinearDamping
zz generating b2Body::Dump
zz making return b2Body Dump void _emscripten_bind_b2Body__Dump_p0(this.ptr)
Maekin: b2Body b2Body Dump Dump
zz generating b2Body::SetBullet
zz making return b2Body SetBullet void _emscripten_bind_b2Body__SetBullet_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetBullet SetBullet
zz generating b2Body::GetType
zz making return b2Body GetType int _emscripten_bind_b2Body__GetType_p0(this.ptr)
Maekin: b2Body b2Body GetType GetType
zz generating b2Body::GetGravityScale
zz making return b2Body GetGravityScale float _emscripten_bind_b2Body__GetGravityScale_p0(this.ptr)
Maekin: b2Body b2Body GetGravityScale GetGravityScale
zz generating b2Body::DestroyFixture
zz making return b2Body DestroyFixture void _emscripten_bind_b2Body__DestroyFixture_p1(this.ptr, arg0.ptr)
Maekin: b2Body b2Body DestroyFixture DestroyFixture
zz generating b2Body::GetInertia
zz making return b2Body GetInertia float _emscripten_bind_b2Body__GetInertia_p0(this.ptr)
Maekin: b2Body b2Body GetInertia GetInertia
zz generating b2Body::IsActive
zz making return b2Body IsActive bool _emscripten_bind_b2Body__IsActive_p0(this.ptr)
Maekin: b2Body b2Body IsActive IsActive
zz generating b2Body::SetFixedRotation
zz making return b2Body SetFixedRotation void _emscripten_bind_b2Body__SetFixedRotation_p1(this.ptr, arg0)
Maekin: b2Body b2Body SetFixedRotation SetFixedRotation
zz generating b2Body::ApplyAngularImpulse
zz making return b2Body ApplyAngularImpulse void _emscripten_bind_b2Body__ApplyAngularImpulse_p1(this.ptr, arg0)
Maekin: b2Body b2Body ApplyAngularImpulse ApplyAngularImpulse
zz generating b2Body::GetPosition
zz making return b2Body GetPosition b2Vec2 _emscripten_bind_b2Body__GetPosition_p0(this.ptr)
Maekin: b2Body b2Body GetPosition GetPosition
zz ignoring templated base class b2GrowableStack
Checking pure virtual for b2FrictionJoint [{'access': 'public', 'class': 'b2Joint'}]
Checking pure virtual for b2Joint []
zz b2FrictionJoint is abstract? None
zz b2FrictionJoint has constructor? True
zz generating: b2FrictionJoint b2FrictionJoint
zz methods:  ['SetMaxTorque', 'GetMaxForce', 'GetAnchorA', 'GetReactionTorque', 'Dump', '__destroy__', 'GetCollideConnected', 'GetUserData', 'GetType', 'SetMaxForce', 'GetBodyB', 'GetLocalAnchorA', 'b2FrictionJoint', 'GetLocalAnchorB', 'SetUserData', 'GetAnchorB', 'GetReactionForce', 'GetBodyA', 'GetNext', 'GetMaxTorque', 'IsActive']
zz generating b2FrictionJoint::SetMaxTorque
zz making return b2FrictionJoint SetMaxTorque void _emscripten_bind_b2FrictionJoint__SetMaxTorque_p1(this.ptr, arg0)
Maekin: b2FrictionJoint b2FrictionJoint SetMaxTorque SetMaxTorque
zz generating b2FrictionJoint::GetMaxForce
zz making return b2FrictionJoint GetMaxForce float _emscripten_bind_b2FrictionJoint__GetMaxForce_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetMaxForce GetMaxForce
zz generating b2FrictionJoint::GetAnchorA
zz making return b2FrictionJoint GetAnchorA b2Vec2 _emscripten_bind_b2FrictionJoint__GetAnchorA_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetAnchorA GetAnchorA
zz generating b2FrictionJoint::GetReactionTorque
zz making return b2FrictionJoint GetReactionTorque float _emscripten_bind_b2FrictionJoint__GetReactionTorque_p1(this.ptr, arg0)
Maekin: b2FrictionJoint b2FrictionJoint GetReactionTorque GetReactionTorque
zz generating b2FrictionJoint::Dump
zz making return b2FrictionJoint Dump void _emscripten_bind_b2FrictionJoint__Dump_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint Dump Dump
zz generating b2FrictionJoint::__destroy__
zz making return b2FrictionJoint __destroy__ void _emscripten_bind_b2FrictionJoint____destroy___p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint __destroy__ __destroy__
zz generating b2FrictionJoint::GetCollideConnected
zz making return b2FrictionJoint GetCollideConnected bool _emscripten_bind_b2FrictionJoint__GetCollideConnected_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetCollideConnected GetCollideConnected
zz generating b2FrictionJoint::GetUserData
zz making return b2FrictionJoint GetUserData void _emscripten_bind_b2FrictionJoint__GetUserData_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetUserData GetUserData
zz generating b2FrictionJoint::GetType
zz making return b2FrictionJoint GetType int _emscripten_bind_b2FrictionJoint__GetType_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetType GetType
zz generating b2FrictionJoint::SetMaxForce
zz making return b2FrictionJoint SetMaxForce void _emscripten_bind_b2FrictionJoint__SetMaxForce_p1(this.ptr, arg0)
Maekin: b2FrictionJoint b2FrictionJoint SetMaxForce SetMaxForce
zz generating b2FrictionJoint::GetBodyB
zz making return b2FrictionJoint GetBodyB b2Body _emscripten_bind_b2FrictionJoint__GetBodyB_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetBodyB GetBodyB
zz generating b2FrictionJoint::GetLocalAnchorA
zz making return b2FrictionJoint GetLocalAnchorA b2Vec2 _emscripten_bind_b2FrictionJoint__GetLocalAnchorA_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetLocalAnchorA GetLocalAnchorA
zz generating b2FrictionJoint::b2FrictionJoint
Maekin: b2FrictionJoint b2FrictionJoint b2FrictionJoint b2FrictionJoint
zz generating b2FrictionJoint::GetLocalAnchorB
zz making return b2FrictionJoint GetLocalAnchorB b2Vec2 _emscripten_bind_b2FrictionJoint__GetLocalAnchorB_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetLocalAnchorB GetLocalAnchorB
zz generating b2FrictionJoint::SetUserData
zz making return b2FrictionJoint SetUserData void _emscripten_bind_b2FrictionJoint__SetUserData_p1(this.ptr, arg0)
Maekin: b2FrictionJoint b2FrictionJoint SetUserData SetUserData
zz generating b2FrictionJoint::GetAnchorB
zz making return b2FrictionJoint GetAnchorB b2Vec2 _emscripten_bind_b2FrictionJoint__GetAnchorB_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetAnchorB GetAnchorB
zz generating b2FrictionJoint::GetReactionForce
zz making return b2FrictionJoint GetReactionForce b2Vec2 _emscripten_bind_b2FrictionJoint__GetReactionForce_p1(this.ptr, arg0)
Maekin: b2FrictionJoint b2FrictionJoint GetReactionForce GetReactionForce
zz generating b2FrictionJoint::GetBodyA
zz making return b2FrictionJoint GetBodyA b2Body _emscripten_bind_b2FrictionJoint__GetBodyA_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetBodyA GetBodyA
zz generating b2FrictionJoint::GetNext
zz making return b2FrictionJoint GetNext b2Joint _emscripten_bind_b2FrictionJoint__GetNext_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetNext GetNext
zz generating b2FrictionJoint::GetMaxTorque
zz making return b2FrictionJoint GetMaxTorque float _emscripten_bind_b2FrictionJoint__GetMaxTorque_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint GetMaxTorque GetMaxTorque
zz generating b2FrictionJoint::IsActive
zz making return b2FrictionJoint IsActive bool _emscripten_bind_b2FrictionJoint__IsActive_p0(this.ptr)
Maekin: b2FrictionJoint b2FrictionJoint IsActive IsActive
Checking pure virtual for b2StackAllocator []
zz b2StackAllocator is abstract? None
zz b2StackAllocator has constructor? True
zz generating: b2StackAllocator b2StackAllocator
zz methods:  ['GetMaxAllocation', '__destroy__', 'b2StackAllocator', 'Allocate', 'Free']
zz generating b2StackAllocator::GetMaxAllocation
zz making return b2StackAllocator GetMaxAllocation int _emscripten_bind_b2StackAllocator__GetMaxAllocation_p0(this.ptr)
Maekin: b2StackAllocator b2StackAllocator GetMaxAllocation GetMaxAllocation
zz generating b2StackAllocator::__destroy__
zz making return b2StackAllocator __destroy__ void _emscripten_bind_b2StackAllocator____destroy___p0(this.ptr)
Maekin: b2StackAllocator b2StackAllocator __destroy__ __destroy__
zz generating b2StackAllocator::b2StackAllocator
Maekin: b2StackAllocator b2StackAllocator b2StackAllocator b2StackAllocator
zz generating b2StackAllocator::Allocate
zz making return b2StackAllocator Allocate void _emscripten_bind_b2StackAllocator__Allocate_p1(this.ptr, arg0)
Maekin: b2StackAllocator b2StackAllocator Allocate Allocate
zz generating b2StackAllocator::Free
zz making return b2StackAllocator Free void _emscripten_bind_b2StackAllocator__Free_p1(this.ptr, arg0)
Maekin: b2StackAllocator b2StackAllocator Free Free
Checking pure virtual for b2DestructionListener []
zz b2DestructionListener is abstract? None
zz b2DestructionListener has constructor? True
zz generating: b2DestructionListener b2DestructionListener
zz methods:  ['__destroy__', 'SayGoodbye', 'b2DestructionListener']
zz generating b2DestructionListener::__destroy__
zz making return b2DestructionListener __destroy__ void _emscripten_bind_b2DestructionListener____destroy___p0(this.ptr)
Maekin: b2DestructionListener b2DestructionListener __destroy__ __destroy__
zz generating b2DestructionListener::SayGoodbye
zz making return b2DestructionListener SayGoodbye void _emscripten_bind_b2DestructionListener__SayGoodbye_p1(this.ptr, arg0.ptr)
Maekin: b2DestructionListener b2DestructionListener SayGoodbye SayGoodbye
zz generating b2DestructionListener::b2DestructionListener
Maekin: b2DestructionListener b2DestructionListener b2DestructionListener b2DestructionListener
Checking pure virtual for b2ContactFilter []
zz b2ContactFilter is abstract? None
zz b2ContactFilter has constructor? False
zz no constructor for b2ContactFilter and not abstract, so ignoring
Checking pure virtual for _exception []
zz _exception is abstract? None
zz _exception has constructor? False
zz no constructor for _exception and not abstract, so ignoring
Checking pure virtual for b2TreeNode []
zz b2TreeNode is abstract? None
zz b2TreeNode has constructor? False
zz no constructor for b2TreeNode and not abstract, so ignoring
zz ignoring b2Mat33
Checking pure virtual for b2Position []
zz b2Position is abstract? None
zz b2Position has constructor? False
zz no constructor for b2Position and not abstract, so ignoring
Checking pure virtual for b2TOIOutput []
zz b2TOIOutput is abstract? None
zz b2TOIOutput has constructor? False
zz no constructor for b2TOIOutput and not abstract, so ignoring
Checking pure virtual for b2Filter []
zz b2Filter is abstract? None
zz b2Filter has constructor? True
zz generating: b2Filter b2Filter
zz methods:  ['__destroy__', 'set_maskBits', 'set_categoryBits', 'get_groupIndex', 'set_groupIndex', 'get_maskBits', 'b2Filter', 'get_categoryBits']
zz generating b2Filter::__destroy__
zz making return b2Filter __destroy__ void _emscripten_bind_b2Filter____destroy___p0(this.ptr)
Maekin: b2Filter b2Filter __destroy__ __destroy__
zz generating b2Filter::set_maskBits
zz making return b2Filter set_maskBits void _emscripten_bind_b2Filter__set_maskBits_p1(this.ptr, arg0)
Maekin: b2Filter b2Filter set_maskBits set_maskBits
zz generating b2Filter::set_categoryBits
zz making return b2Filter set_categoryBits void _emscripten_bind_b2Filter__set_categoryBits_p1(this.ptr, arg0)
Maekin: b2Filter b2Filter set_categoryBits set_categoryBits
zz generating b2Filter::get_groupIndex
zz making return b2Filter get_groupIndex signed short _emscripten_bind_b2Filter__get_groupIndex_p0(this.ptr)
Maekin: b2Filter b2Filter get_groupIndex get_groupIndex
zz generating b2Filter::set_groupIndex
zz making return b2Filter set_groupIndex void _emscripten_bind_b2Filter__set_groupIndex_p1(this.ptr, arg0)
Maekin: b2Filter b2Filter set_groupIndex set_groupIndex
zz generating b2Filter::get_maskBits
zz making return b2Filter get_maskBits unsigned short _emscripten_bind_b2Filter__get_maskBits_p0(this.ptr)
Maekin: b2Filter b2Filter get_maskBits get_maskBits
zz generating b2Filter::b2Filter
Maekin: b2Filter b2Filter b2Filter b2Filter
zz generating b2Filter::get_categoryBits
zz making return b2Filter get_categoryBits unsigned short _emscripten_bind_b2Filter__get_categoryBits_p0(this.ptr)
Maekin: b2Filter b2Filter get_categoryBits get_categoryBits
Checking pure virtual for b2StackEntry []
zz b2StackEntry is abstract? None
zz b2StackEntry has constructor? False
zz no constructor for b2StackEntry and not abstract, so ignoring
Checking pure virtual for b2RopeJointDef []
zz b2RopeJointDef is abstract? None
zz b2RopeJointDef has constructor? True
zz generating: b2RopeJointDef b2RopeJointDef
zz methods:  ['set_localAnchorA', 'get_bodyA', 'get_bodyB', 'set_localAnchorB', 'set_bodyA', 'set_bodyB', '__destroy__', 'get_localAnchorA', 'get_maxLength', 'get_localAnchorB', 'get_collideConnected', 'set_collideConnected', 'b2RopeJointDef', 'set_maxLength']
zz generating b2RopeJointDef::set_localAnchorA
zz making return b2RopeJointDef set_localAnchorA void _emscripten_bind_b2RopeJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2RopeJointDef b2RopeJointDef set_localAnchorA set_localAnchorA
zz generating b2RopeJointDef::get_bodyA
zz making return b2RopeJointDef get_bodyA b2Body _emscripten_bind_b2RopeJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2RopeJointDef b2RopeJointDef get_bodyA get_bodyA
zz generating b2RopeJointDef::get_bodyB
zz making return b2RopeJointDef get_bodyB b2Body _emscripten_bind_b2RopeJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2RopeJointDef b2RopeJointDef get_bodyB get_bodyB
zz generating b2RopeJointDef::set_localAnchorB
zz making return b2RopeJointDef set_localAnchorB void _emscripten_bind_b2RopeJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2RopeJointDef b2RopeJointDef set_localAnchorB set_localAnchorB
zz generating b2RopeJointDef::set_bodyA
zz making return b2RopeJointDef set_bodyA void _emscripten_bind_b2RopeJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2RopeJointDef b2RopeJointDef set_bodyA set_bodyA
zz generating b2RopeJointDef::set_bodyB
zz making return b2RopeJointDef set_bodyB void _emscripten_bind_b2RopeJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2RopeJointDef b2RopeJointDef set_bodyB set_bodyB
zz generating b2RopeJointDef::__destroy__
zz making return b2RopeJointDef __destroy__ void _emscripten_bind_b2RopeJointDef____destroy___p0(this.ptr)
Maekin: b2RopeJointDef b2RopeJointDef __destroy__ __destroy__
zz generating b2RopeJointDef::get_localAnchorA
zz making return b2RopeJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2RopeJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2RopeJointDef b2RopeJointDef get_localAnchorA get_localAnchorA
zz generating b2RopeJointDef::get_maxLength
zz making return b2RopeJointDef get_maxLength float _emscripten_bind_b2RopeJointDef__get_maxLength_p0(this.ptr)
Maekin: b2RopeJointDef b2RopeJointDef get_maxLength get_maxLength
zz generating b2RopeJointDef::get_localAnchorB
zz making return b2RopeJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2RopeJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2RopeJointDef b2RopeJointDef get_localAnchorB get_localAnchorB
zz generating b2RopeJointDef::get_collideConnected
zz making return b2RopeJointDef get_collideConnected bool _emscripten_bind_b2RopeJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2RopeJointDef b2RopeJointDef get_collideConnected get_collideConnected
zz generating b2RopeJointDef::set_collideConnected
zz making return b2RopeJointDef set_collideConnected void _emscripten_bind_b2RopeJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2RopeJointDef b2RopeJointDef set_collideConnected set_collideConnected
zz generating b2RopeJointDef::b2RopeJointDef
Maekin: b2RopeJointDef b2RopeJointDef b2RopeJointDef b2RopeJointDef
zz generating b2RopeJointDef::set_maxLength
zz making return b2RopeJointDef set_maxLength void _emscripten_bind_b2RopeJointDef__set_maxLength_p1(this.ptr, arg0)
Maekin: b2RopeJointDef b2RopeJointDef set_maxLength set_maxLength
Checking pure virtual for b2DistanceInput []
zz b2DistanceInput is abstract? None
zz b2DistanceInput has constructor? False
zz no constructor for b2DistanceInput and not abstract, so ignoring
Checking pure virtual for b2FrictionJointDef []
zz b2FrictionJointDef is abstract? None
zz b2FrictionJointDef has constructor? True
zz generating: b2FrictionJointDef b2FrictionJointDef
zz methods:  ['set_localAnchorA', 'get_bodyA', 'get_bodyB', 'set_localAnchorB', 'set_bodyA', 'set_bodyB', '__destroy__', 'get_maxForce', 'b2FrictionJointDef', 'get_localAnchorA', 'set_maxForce', 'get_localAnchorB', 'get_collideConnected', 'set_maxTorque', 'set_collideConnected', 'Initialize', 'get_maxTorque']
zz generating b2FrictionJointDef::set_localAnchorA
zz making return b2FrictionJointDef set_localAnchorA void _emscripten_bind_b2FrictionJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef set_localAnchorA set_localAnchorA
zz generating b2FrictionJointDef::get_bodyA
zz making return b2FrictionJointDef get_bodyA b2Body _emscripten_bind_b2FrictionJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef get_bodyA get_bodyA
zz generating b2FrictionJointDef::get_bodyB
zz making return b2FrictionJointDef get_bodyB b2Body _emscripten_bind_b2FrictionJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef get_bodyB get_bodyB
zz generating b2FrictionJointDef::set_localAnchorB
zz making return b2FrictionJointDef set_localAnchorB void _emscripten_bind_b2FrictionJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef set_localAnchorB set_localAnchorB
zz generating b2FrictionJointDef::set_bodyA
zz making return b2FrictionJointDef set_bodyA void _emscripten_bind_b2FrictionJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef set_bodyA set_bodyA
zz generating b2FrictionJointDef::set_bodyB
zz making return b2FrictionJointDef set_bodyB void _emscripten_bind_b2FrictionJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef set_bodyB set_bodyB
zz generating b2FrictionJointDef::__destroy__
zz making return b2FrictionJointDef __destroy__ void _emscripten_bind_b2FrictionJointDef____destroy___p0(this.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef __destroy__ __destroy__
zz generating b2FrictionJointDef::get_maxForce
zz making return b2FrictionJointDef get_maxForce float _emscripten_bind_b2FrictionJointDef__get_maxForce_p0(this.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef get_maxForce get_maxForce
zz generating b2FrictionJointDef::b2FrictionJointDef
Maekin: b2FrictionJointDef b2FrictionJointDef b2FrictionJointDef b2FrictionJointDef
zz generating b2FrictionJointDef::get_localAnchorA
zz making return b2FrictionJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2FrictionJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef get_localAnchorA get_localAnchorA
zz generating b2FrictionJointDef::set_maxForce
zz making return b2FrictionJointDef set_maxForce void _emscripten_bind_b2FrictionJointDef__set_maxForce_p1(this.ptr, arg0)
Maekin: b2FrictionJointDef b2FrictionJointDef set_maxForce set_maxForce
zz generating b2FrictionJointDef::get_localAnchorB
zz making return b2FrictionJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2FrictionJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef get_localAnchorB get_localAnchorB
zz generating b2FrictionJointDef::get_collideConnected
zz making return b2FrictionJointDef get_collideConnected bool _emscripten_bind_b2FrictionJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2FrictionJointDef b2FrictionJointDef get_collideConnected get_collideConnected
zz generating b2FrictionJointDef::set_maxTorque
zz making return b2FrictionJointDef set_maxTorque void _emscripten_bind_b2FrictionJointDef__set_maxTorque_p1(this.ptr, arg0)
Maekin: b2FrictionJointDef b2FrictionJointDef set_maxTorque set_maxTorque
zz generating b2FrictionJointDef::set_collideConnected
zz making return b2FrictionJointDef set_collideConnected void _emscripten_bind_b2FrictionJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2FrictionJointDef b2FrictionJointDef set_collideConnected set_collideConnected
zz generating b2FrictionJointDef::Initialize
zz making return b2FrictionJointDef Initialize void _emscripten_bind_b2FrictionJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef Initialize Initialize
zz generating b2FrictionJointDef::get_maxTorque
zz making return b2FrictionJointDef get_maxTorque float _emscripten_bind_b2FrictionJointDef__get_maxTorque_p0(this.ptr)
Maekin: b2FrictionJointDef b2FrictionJointDef get_maxTorque get_maxTorque
Checking pure virtual for b2Profile []
zz b2Profile is abstract? None
zz b2Profile has constructor? False
zz no constructor for b2Profile and not abstract, so ignoring
Checking pure virtual for b2BodyDef []
zz b2BodyDef is abstract? None
zz b2BodyDef has constructor? True
zz generating: b2BodyDef b2BodyDef
zz methods:  ['get_linearDamping', 'get_awake', 'get_type', 'get_allowSleep', 'set_position', 'set_linearVelocity', 'b2BodyDef', 'get_bullet', 'get_userData', 'set_angularDamping', 'set_fixedRotation', 'set_allowSleep', 'get_gravityScale', 'set_angularVelocity', 'set_userData', 'get_position', '__destroy__', 'set_type', 'set_gravityScale', 'get_angularDamping', 'set_bullet', 'set_active', 'set_angle', 'get_angle', 'get_angularVelocity', 'get_linearVelocity', 'get_active', 'set_linearDamping', 'get_fixedRotation', 'set_awake']
zz generating b2BodyDef::get_linearDamping
zz making return b2BodyDef get_linearDamping float _emscripten_bind_b2BodyDef__get_linearDamping_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_linearDamping get_linearDamping
zz generating b2BodyDef::get_awake
zz making return b2BodyDef get_awake bool _emscripten_bind_b2BodyDef__get_awake_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_awake get_awake
zz generating b2BodyDef::get_type
zz making return b2BodyDef get_type b2BodyType _emscripten_bind_b2BodyDef__get_type_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_type get_type
zz generating b2BodyDef::get_allowSleep
zz making return b2BodyDef get_allowSleep bool _emscripten_bind_b2BodyDef__get_allowSleep_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_allowSleep get_allowSleep
zz generating b2BodyDef::set_position
zz making return b2BodyDef set_position void _emscripten_bind_b2BodyDef__set_position_p1(this.ptr, arg0.ptr)
Maekin: b2BodyDef b2BodyDef set_position set_position
zz generating b2BodyDef::set_linearVelocity
zz making return b2BodyDef set_linearVelocity void _emscripten_bind_b2BodyDef__set_linearVelocity_p1(this.ptr, arg0.ptr)
Maekin: b2BodyDef b2BodyDef set_linearVelocity set_linearVelocity
zz generating b2BodyDef::b2BodyDef
Maekin: b2BodyDef b2BodyDef b2BodyDef b2BodyDef
zz generating b2BodyDef::get_bullet
zz making return b2BodyDef get_bullet bool _emscripten_bind_b2BodyDef__get_bullet_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_bullet get_bullet
zz generating b2BodyDef::get_userData
zz making return b2BodyDef get_userData void _emscripten_bind_b2BodyDef__get_userData_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_userData get_userData
zz generating b2BodyDef::set_angularDamping
zz making return b2BodyDef set_angularDamping void _emscripten_bind_b2BodyDef__set_angularDamping_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_angularDamping set_angularDamping
zz generating b2BodyDef::set_fixedRotation
zz making return b2BodyDef set_fixedRotation void _emscripten_bind_b2BodyDef__set_fixedRotation_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_fixedRotation set_fixedRotation
zz generating b2BodyDef::set_allowSleep
zz making return b2BodyDef set_allowSleep void _emscripten_bind_b2BodyDef__set_allowSleep_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_allowSleep set_allowSleep
zz generating b2BodyDef::get_gravityScale
zz making return b2BodyDef get_gravityScale float _emscripten_bind_b2BodyDef__get_gravityScale_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_gravityScale get_gravityScale
zz generating b2BodyDef::set_angularVelocity
zz making return b2BodyDef set_angularVelocity void _emscripten_bind_b2BodyDef__set_angularVelocity_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_angularVelocity set_angularVelocity
zz generating b2BodyDef::set_userData
zz making return b2BodyDef set_userData void _emscripten_bind_b2BodyDef__set_userData_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_userData set_userData
zz generating b2BodyDef::get_position
zz making return b2BodyDef get_position b2Vec2 _emscripten_bind_b2BodyDef__get_position_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_position get_position
zz generating b2BodyDef::__destroy__
zz making return b2BodyDef __destroy__ void _emscripten_bind_b2BodyDef____destroy___p0(this.ptr)
Maekin: b2BodyDef b2BodyDef __destroy__ __destroy__
zz generating b2BodyDef::set_type
zz making return b2BodyDef set_type void _emscripten_bind_b2BodyDef__set_type_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_type set_type
zz generating b2BodyDef::set_gravityScale
zz making return b2BodyDef set_gravityScale void _emscripten_bind_b2BodyDef__set_gravityScale_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_gravityScale set_gravityScale
zz generating b2BodyDef::get_angularDamping
zz making return b2BodyDef get_angularDamping float _emscripten_bind_b2BodyDef__get_angularDamping_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_angularDamping get_angularDamping
zz generating b2BodyDef::set_bullet
zz making return b2BodyDef set_bullet void _emscripten_bind_b2BodyDef__set_bullet_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_bullet set_bullet
zz generating b2BodyDef::set_active
zz making return b2BodyDef set_active void _emscripten_bind_b2BodyDef__set_active_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_active set_active
zz generating b2BodyDef::set_angle
zz making return b2BodyDef set_angle void _emscripten_bind_b2BodyDef__set_angle_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_angle set_angle
zz generating b2BodyDef::get_angle
zz making return b2BodyDef get_angle float _emscripten_bind_b2BodyDef__get_angle_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_angle get_angle
zz generating b2BodyDef::get_angularVelocity
zz making return b2BodyDef get_angularVelocity float _emscripten_bind_b2BodyDef__get_angularVelocity_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_angularVelocity get_angularVelocity
zz generating b2BodyDef::get_linearVelocity
zz making return b2BodyDef get_linearVelocity b2Vec2 _emscripten_bind_b2BodyDef__get_linearVelocity_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_linearVelocity get_linearVelocity
zz generating b2BodyDef::get_active
zz making return b2BodyDef get_active bool _emscripten_bind_b2BodyDef__get_active_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_active get_active
zz generating b2BodyDef::set_linearDamping
zz making return b2BodyDef set_linearDamping void _emscripten_bind_b2BodyDef__set_linearDamping_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_linearDamping set_linearDamping
zz generating b2BodyDef::get_fixedRotation
zz making return b2BodyDef get_fixedRotation bool _emscripten_bind_b2BodyDef__get_fixedRotation_p0(this.ptr)
Maekin: b2BodyDef b2BodyDef get_fixedRotation get_fixedRotation
zz generating b2BodyDef::set_awake
zz making return b2BodyDef set_awake void _emscripten_bind_b2BodyDef__set_awake_p1(this.ptr, arg0)
Maekin: b2BodyDef b2BodyDef set_awake set_awake
Checking pure virtual for b2Vec2 []
zz b2Vec2 is abstract? None
zz b2Vec2 has constructor? True
zz generating: b2Vec2 b2Vec2
zz methods:  ['Normalize', 'set_x', 'b2Vec2', 'Set', 'get_x', 'get_y', 'set_y', 'IsValid', 'Skew', 'LengthSquared', 'op_add', 'SetZero', 'Length', '__destroy__', 'op_mul', 'op_sub']
zz generating b2Vec2::Normalize
zz making return b2Vec2 Normalize float32 _emscripten_bind_b2Vec2__Normalize_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 Normalize Normalize
zz generating b2Vec2::set_x
zz making return b2Vec2 set_x void _emscripten_bind_b2Vec2__set_x_p1(this.ptr, arg0)
Maekin: b2Vec2 b2Vec2 set_x set_x
zz generating b2Vec2::b2Vec2
Maekin: b2Vec2 b2Vec2 b2Vec2 b2Vec2
zz generating b2Vec2::Set
zz making return b2Vec2 Set void _emscripten_bind_b2Vec2__Set_p2(this.ptr, arg0, arg1)
Maekin: b2Vec2 b2Vec2 Set Set
zz generating b2Vec2::get_x
zz making return b2Vec2 get_x float _emscripten_bind_b2Vec2__get_x_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 get_x get_x
zz generating b2Vec2::get_y
zz making return b2Vec2 get_y float _emscripten_bind_b2Vec2__get_y_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 get_y get_y
zz generating b2Vec2::set_y
zz making return b2Vec2 set_y void _emscripten_bind_b2Vec2__set_y_p1(this.ptr, arg0)
Maekin: b2Vec2 b2Vec2 set_y set_y
zz generating b2Vec2::IsValid
zz making return b2Vec2 IsValid bool _emscripten_bind_b2Vec2__IsValid_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 IsValid IsValid
zz generating b2Vec2::Skew
zz making return b2Vec2 Skew b2Vec2 _emscripten_bind_b2Vec2__Skew_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 Skew Skew
zz generating b2Vec2::LengthSquared
zz making return b2Vec2 LengthSquared float32 _emscripten_bind_b2Vec2__LengthSquared_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 LengthSquared LengthSquared
zz generating b2Vec2::op_add
zz making return b2Vec2 op_add void _emscripten_bind_b2Vec2__op_add_p1(this.ptr, arg0.ptr)
Maekin: b2Vec2 b2Vec2 op_add op_add
zz generating b2Vec2::SetZero
zz making return b2Vec2 SetZero void _emscripten_bind_b2Vec2__SetZero_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 SetZero SetZero
zz generating b2Vec2::Length
zz making return b2Vec2 Length float32 _emscripten_bind_b2Vec2__Length_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 Length Length
zz generating b2Vec2::__destroy__
zz making return b2Vec2 __destroy__ void _emscripten_bind_b2Vec2____destroy___p0(this.ptr)
Maekin: b2Vec2 b2Vec2 __destroy__ __destroy__
zz generating b2Vec2::op_mul
zz making return b2Vec2 op_mul void _emscripten_bind_b2Vec2__op_mul_p1(this.ptr, arg0)
Maekin: b2Vec2 b2Vec2 op_mul op_mul
zz generating b2Vec2::op_sub
zz making return b2Vec2 op_sub b2Vec2 _emscripten_bind_b2Vec2__op_sub_p0(this.ptr)
Maekin: b2Vec2 b2Vec2 op_sub op_sub
Checking pure virtual for b2Vec3 []
zz b2Vec3 is abstract? None
zz b2Vec3 has constructor? True
zz generating: b2Vec3 b2Vec3
zz methods:  ['__destroy__', 'set_z', 'Set', 'get_z', 'op_add', 'SetZero', 'b2Vec3', 'op_mul', 'op_sub']
zz generating b2Vec3::__destroy__
zz making return b2Vec3 __destroy__ void _emscripten_bind_b2Vec3____destroy___p0(this.ptr)
Maekin: b2Vec3 b2Vec3 __destroy__ __destroy__
zz generating b2Vec3::set_z
zz making return b2Vec3 set_z void _emscripten_bind_b2Vec3__set_z_p1(this.ptr, arg0)
Maekin: b2Vec3 b2Vec3 set_z set_z
zz generating b2Vec3::Set
zz making return b2Vec3 Set void _emscripten_bind_b2Vec3__Set_p3(this.ptr, arg0, arg1, arg2)
Maekin: b2Vec3 b2Vec3 Set Set
zz generating b2Vec3::get_z
zz making return b2Vec3 get_z float _emscripten_bind_b2Vec3__get_z_p0(this.ptr)
Maekin: b2Vec3 b2Vec3 get_z get_z
zz generating b2Vec3::op_add
zz making return b2Vec3 op_add void _emscripten_bind_b2Vec3__op_add_p1(this.ptr, arg0.ptr)
Maekin: b2Vec3 b2Vec3 op_add op_add
zz generating b2Vec3::SetZero
zz making return b2Vec3 SetZero void _emscripten_bind_b2Vec3__SetZero_p0(this.ptr)
Maekin: b2Vec3 b2Vec3 SetZero SetZero
zz generating b2Vec3::b2Vec3
Maekin: b2Vec3 b2Vec3 b2Vec3 b2Vec3
zz generating b2Vec3::op_mul
zz making return b2Vec3 op_mul void _emscripten_bind_b2Vec3__op_mul_p1(this.ptr, arg0)
Maekin: b2Vec3 b2Vec3 op_mul op_mul
zz generating b2Vec3::op_sub
zz making return b2Vec3 op_sub b2Vec3 _emscripten_bind_b2Vec3__op_sub_p0(this.ptr)
Maekin: b2Vec3 b2Vec3 op_sub op_sub
Checking pure virtual for b2AABB []
zz b2AABB is abstract? None
zz b2AABB has constructor? True
zz generating: b2AABB b2AABB
zz methods:  ['__destroy__', 'b2AABB', 'set_upperBound', 'IsValid', 'Contains', 'GetExtents', 'GetCenter', 'get_upperBound', 'GetPerimeter', 'Combine', 'RayCast', 'set_lowerBound', 'get_lowerBound']
zz generating b2AABB::__destroy__
zz making return b2AABB __destroy__ void _emscripten_bind_b2AABB____destroy___p0(this.ptr)
Maekin: b2AABB b2AABB __destroy__ __destroy__
zz generating b2AABB::b2AABB
Maekin: b2AABB b2AABB b2AABB b2AABB
zz generating b2AABB::set_upperBound
zz making return b2AABB set_upperBound void _emscripten_bind_b2AABB__set_upperBound_p1(this.ptr, arg0.ptr)
Maekin: b2AABB b2AABB set_upperBound set_upperBound
zz generating b2AABB::IsValid
zz making return b2AABB IsValid bool _emscripten_bind_b2AABB__IsValid_p0(this.ptr)
Maekin: b2AABB b2AABB IsValid IsValid
zz generating b2AABB::Contains
zz making return b2AABB Contains bool _emscripten_bind_b2AABB__Contains_p1(this.ptr, arg0.ptr)
Maekin: b2AABB b2AABB Contains Contains
zz generating b2AABB::GetExtents
zz making return b2AABB GetExtents b2Vec2 _emscripten_bind_b2AABB__GetExtents_p0(this.ptr)
Maekin: b2AABB b2AABB GetExtents GetExtents
zz generating b2AABB::GetCenter
zz making return b2AABB GetCenter b2Vec2 _emscripten_bind_b2AABB__GetCenter_p0(this.ptr)
Maekin: b2AABB b2AABB GetCenter GetCenter
zz generating b2AABB::get_upperBound
zz making return b2AABB get_upperBound b2Vec2 _emscripten_bind_b2AABB__get_upperBound_p0(this.ptr)
Maekin: b2AABB b2AABB get_upperBound get_upperBound
zz generating b2AABB::GetPerimeter
zz making return b2AABB GetPerimeter float32 _emscripten_bind_b2AABB__GetPerimeter_p0(this.ptr)
Maekin: b2AABB b2AABB GetPerimeter GetPerimeter
zz generating b2AABB::Combine
zz making return b2AABB Combine void _emscripten_bind_b2AABB__Combine_p1(this.ptr, arg0.ptr)
zz making return b2AABB Combine void _emscripten_bind_b2AABB__Combine_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2AABB b2AABB Combine Combine
zz generating b2AABB::RayCast
zz making return b2AABB RayCast bool _emscripten_bind_b2AABB__RayCast_p2(this.ptr, arg0.ptr, arg1.ptr)
Maekin: b2AABB b2AABB RayCast RayCast
zz generating b2AABB::set_lowerBound
zz making return b2AABB set_lowerBound void _emscripten_bind_b2AABB__set_lowerBound_p1(this.ptr, arg0.ptr)
Maekin: b2AABB b2AABB set_lowerBound set_lowerBound
zz generating b2AABB::get_lowerBound
zz making return b2AABB get_lowerBound b2Vec2 _emscripten_bind_b2AABB__get_lowerBound_p0(this.ptr)
Maekin: b2AABB b2AABB get_lowerBound get_lowerBound
Checking pure virtual for b2Pair []
zz b2Pair is abstract? None
zz b2Pair has constructor? False
zz no constructor for b2Pair and not abstract, so ignoring
Checking pure virtual for b2TimeStep []
zz b2TimeStep is abstract? None
zz b2TimeStep has constructor? False
zz no constructor for b2TimeStep and not abstract, so ignoring
Checking pure virtual for b2FixtureDef []
zz b2FixtureDef is abstract? None
zz b2FixtureDef has constructor? True
zz generating: b2FixtureDef b2FixtureDef
zz methods:  ['__destroy__', 'get_isSensor', 'set_userData', 'set_shape', 'get_density', 'get_shape', 'b2FixtureDef', 'set_density', 'set_restitution', 'get_restitution', 'set_isSensor', 'get_filter', 'get_friction', 'set_friction', 'get_userData', 'set_filter']
zz generating b2FixtureDef::__destroy__
zz making return b2FixtureDef __destroy__ void _emscripten_bind_b2FixtureDef____destroy___p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef __destroy__ __destroy__
zz generating b2FixtureDef::get_isSensor
zz making return b2FixtureDef get_isSensor bool _emscripten_bind_b2FixtureDef__get_isSensor_p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef get_isSensor get_isSensor
zz generating b2FixtureDef::set_userData
zz making return b2FixtureDef set_userData void _emscripten_bind_b2FixtureDef__set_userData_p1(this.ptr, arg0)
Maekin: b2FixtureDef b2FixtureDef set_userData set_userData
zz generating b2FixtureDef::set_shape
zz making return b2FixtureDef set_shape void _emscripten_bind_b2FixtureDef__set_shape_p1(this.ptr, arg0.ptr)
Maekin: b2FixtureDef b2FixtureDef set_shape set_shape
zz generating b2FixtureDef::get_density
zz making return b2FixtureDef get_density float _emscripten_bind_b2FixtureDef__get_density_p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef get_density get_density
zz generating b2FixtureDef::get_shape
zz making return b2FixtureDef get_shape const b2Shape _emscripten_bind_b2FixtureDef__get_shape_p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef get_shape get_shape
zz generating b2FixtureDef::b2FixtureDef
Maekin: b2FixtureDef b2FixtureDef b2FixtureDef b2FixtureDef
zz generating b2FixtureDef::set_density
zz making return b2FixtureDef set_density void _emscripten_bind_b2FixtureDef__set_density_p1(this.ptr, arg0)
Maekin: b2FixtureDef b2FixtureDef set_density set_density
zz generating b2FixtureDef::set_restitution
zz making return b2FixtureDef set_restitution void _emscripten_bind_b2FixtureDef__set_restitution_p1(this.ptr, arg0)
Maekin: b2FixtureDef b2FixtureDef set_restitution set_restitution
zz generating b2FixtureDef::get_restitution
zz making return b2FixtureDef get_restitution float _emscripten_bind_b2FixtureDef__get_restitution_p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef get_restitution get_restitution
zz generating b2FixtureDef::set_isSensor
zz making return b2FixtureDef set_isSensor void _emscripten_bind_b2FixtureDef__set_isSensor_p1(this.ptr, arg0)
Maekin: b2FixtureDef b2FixtureDef set_isSensor set_isSensor
zz generating b2FixtureDef::get_filter
zz making return b2FixtureDef get_filter b2Filter _emscripten_bind_b2FixtureDef__get_filter_p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef get_filter get_filter
zz generating b2FixtureDef::get_friction
zz making return b2FixtureDef get_friction float _emscripten_bind_b2FixtureDef__get_friction_p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef get_friction get_friction
zz generating b2FixtureDef::set_friction
zz making return b2FixtureDef set_friction void _emscripten_bind_b2FixtureDef__set_friction_p1(this.ptr, arg0)
Maekin: b2FixtureDef b2FixtureDef set_friction set_friction
zz generating b2FixtureDef::get_userData
zz making return b2FixtureDef get_userData void _emscripten_bind_b2FixtureDef__get_userData_p0(this.ptr)
Maekin: b2FixtureDef b2FixtureDef get_userData get_userData
zz generating b2FixtureDef::set_filter
zz making return b2FixtureDef set_filter void _emscripten_bind_b2FixtureDef__set_filter_p1(this.ptr, arg0.ptr)
Maekin: b2FixtureDef b2FixtureDef set_filter set_filter
Checking pure virtual for b2Version []
zz b2Version is abstract? None
zz b2Version has constructor? False
zz no constructor for b2Version and not abstract, so ignoring
Checking pure virtual for b2Manifold []
zz b2Manifold is abstract? None
zz b2Manifold has constructor? False
zz no constructor for b2Manifold and not abstract, so ignoring
Checking pure virtual for b2WorldManifold []
zz b2WorldManifold is abstract? None
zz b2WorldManifold has constructor? False
zz no constructor for b2WorldManifold and not abstract, so ignoring
Checking pure virtual for b2PrismaticJointDef []
zz b2PrismaticJointDef is abstract? None
zz b2PrismaticJointDef has constructor? True
zz generating: b2PrismaticJointDef b2PrismaticJointDef
zz methods:  ['set_localAnchorA', 'set_localAnchorB', 'get_motorSpeed', 'get_enableMotor', 'get_referenceAngle', 'set_enableLimit', 'set_motorSpeed', 'get_localAxisA', 'set_bodyA', 'set_bodyB', 'b2PrismaticJointDef', 'Initialize', 'set_lowerTranslation', 'get_upperTranslation', 'get_enableLimit', '__destroy__', 'set_referenceAngle', 'get_localAnchorA', 'get_localAnchorB', 'get_collideConnected', 'get_bodyA', 'get_bodyB', 'set_upperTranslation', 'get_maxMotorForce', 'set_maxMotorForce', 'set_enableMotor', 'set_collideConnected', 'get_lowerTranslation', 'set_localAxisA']
zz generating b2PrismaticJointDef::set_localAnchorA
zz making return b2PrismaticJointDef set_localAnchorA void _emscripten_bind_b2PrismaticJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_localAnchorA set_localAnchorA
zz generating b2PrismaticJointDef::set_localAnchorB
zz making return b2PrismaticJointDef set_localAnchorB void _emscripten_bind_b2PrismaticJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_localAnchorB set_localAnchorB
zz generating b2PrismaticJointDef::get_motorSpeed
zz making return b2PrismaticJointDef get_motorSpeed float _emscripten_bind_b2PrismaticJointDef__get_motorSpeed_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_motorSpeed get_motorSpeed
zz generating b2PrismaticJointDef::get_enableMotor
zz making return b2PrismaticJointDef get_enableMotor bool _emscripten_bind_b2PrismaticJointDef__get_enableMotor_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_enableMotor get_enableMotor
zz generating b2PrismaticJointDef::get_referenceAngle
zz making return b2PrismaticJointDef get_referenceAngle float _emscripten_bind_b2PrismaticJointDef__get_referenceAngle_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_referenceAngle get_referenceAngle
zz generating b2PrismaticJointDef::set_enableLimit
zz making return b2PrismaticJointDef set_enableLimit void _emscripten_bind_b2PrismaticJointDef__set_enableLimit_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_enableLimit set_enableLimit
zz generating b2PrismaticJointDef::set_motorSpeed
zz making return b2PrismaticJointDef set_motorSpeed void _emscripten_bind_b2PrismaticJointDef__set_motorSpeed_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_motorSpeed set_motorSpeed
zz generating b2PrismaticJointDef::get_localAxisA
zz making return b2PrismaticJointDef get_localAxisA b2Vec2 _emscripten_bind_b2PrismaticJointDef__get_localAxisA_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_localAxisA get_localAxisA
zz generating b2PrismaticJointDef::set_bodyA
zz making return b2PrismaticJointDef set_bodyA void _emscripten_bind_b2PrismaticJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_bodyA set_bodyA
zz generating b2PrismaticJointDef::set_bodyB
zz making return b2PrismaticJointDef set_bodyB void _emscripten_bind_b2PrismaticJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_bodyB set_bodyB
zz generating b2PrismaticJointDef::b2PrismaticJointDef
Maekin: b2PrismaticJointDef b2PrismaticJointDef b2PrismaticJointDef b2PrismaticJointDef
zz generating b2PrismaticJointDef::Initialize
zz making return b2PrismaticJointDef Initialize void _emscripten_bind_b2PrismaticJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef Initialize Initialize
zz generating b2PrismaticJointDef::set_lowerTranslation
zz making return b2PrismaticJointDef set_lowerTranslation void _emscripten_bind_b2PrismaticJointDef__set_lowerTranslation_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_lowerTranslation set_lowerTranslation
zz generating b2PrismaticJointDef::get_upperTranslation
zz making return b2PrismaticJointDef get_upperTranslation float _emscripten_bind_b2PrismaticJointDef__get_upperTranslation_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_upperTranslation get_upperTranslation
zz generating b2PrismaticJointDef::get_enableLimit
zz making return b2PrismaticJointDef get_enableLimit bool _emscripten_bind_b2PrismaticJointDef__get_enableLimit_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_enableLimit get_enableLimit
zz generating b2PrismaticJointDef::__destroy__
zz making return b2PrismaticJointDef __destroy__ void _emscripten_bind_b2PrismaticJointDef____destroy___p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef __destroy__ __destroy__
zz generating b2PrismaticJointDef::set_referenceAngle
zz making return b2PrismaticJointDef set_referenceAngle void _emscripten_bind_b2PrismaticJointDef__set_referenceAngle_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_referenceAngle set_referenceAngle
zz generating b2PrismaticJointDef::get_localAnchorA
zz making return b2PrismaticJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2PrismaticJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_localAnchorA get_localAnchorA
zz generating b2PrismaticJointDef::get_localAnchorB
zz making return b2PrismaticJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2PrismaticJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_localAnchorB get_localAnchorB
zz generating b2PrismaticJointDef::get_collideConnected
zz making return b2PrismaticJointDef get_collideConnected bool _emscripten_bind_b2PrismaticJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_collideConnected get_collideConnected
zz generating b2PrismaticJointDef::get_bodyA
zz making return b2PrismaticJointDef get_bodyA b2Body _emscripten_bind_b2PrismaticJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_bodyA get_bodyA
zz generating b2PrismaticJointDef::get_bodyB
zz making return b2PrismaticJointDef get_bodyB b2Body _emscripten_bind_b2PrismaticJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_bodyB get_bodyB
zz generating b2PrismaticJointDef::set_upperTranslation
zz making return b2PrismaticJointDef set_upperTranslation void _emscripten_bind_b2PrismaticJointDef__set_upperTranslation_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_upperTranslation set_upperTranslation
zz generating b2PrismaticJointDef::get_maxMotorForce
zz making return b2PrismaticJointDef get_maxMotorForce float _emscripten_bind_b2PrismaticJointDef__get_maxMotorForce_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_maxMotorForce get_maxMotorForce
zz generating b2PrismaticJointDef::set_maxMotorForce
zz making return b2PrismaticJointDef set_maxMotorForce void _emscripten_bind_b2PrismaticJointDef__set_maxMotorForce_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_maxMotorForce set_maxMotorForce
zz generating b2PrismaticJointDef::set_enableMotor
zz making return b2PrismaticJointDef set_enableMotor void _emscripten_bind_b2PrismaticJointDef__set_enableMotor_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_enableMotor set_enableMotor
zz generating b2PrismaticJointDef::set_collideConnected
zz making return b2PrismaticJointDef set_collideConnected void _emscripten_bind_b2PrismaticJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_collideConnected set_collideConnected
zz generating b2PrismaticJointDef::get_lowerTranslation
zz making return b2PrismaticJointDef get_lowerTranslation float _emscripten_bind_b2PrismaticJointDef__get_lowerTranslation_p0(this.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef get_lowerTranslation get_lowerTranslation
zz generating b2PrismaticJointDef::set_localAxisA
zz making return b2PrismaticJointDef set_localAxisA void _emscripten_bind_b2PrismaticJointDef__set_localAxisA_p1(this.ptr, arg0.ptr)
Maekin: b2PrismaticJointDef b2PrismaticJointDef set_localAxisA set_localAxisA
Checking pure virtual for b2RayCastOutput []
zz b2RayCastOutput is abstract? None
zz b2RayCastOutput has constructor? False
zz no constructor for b2RayCastOutput and not abstract, so ignoring
Checking pure virtual for b2SimplexCache []
zz b2SimplexCache is abstract? None
zz b2SimplexCache has constructor? False
zz no constructor for b2SimplexCache and not abstract, so ignoring
Checking pure virtual for b2ContactFeature []
zz b2ContactFeature is abstract? None
zz b2ContactFeature has constructor? False
zz no constructor for b2ContactFeature and not abstract, so ignoring
Checking pure virtual for b2WheelJointDef []
zz b2WheelJointDef is abstract? None
zz b2WheelJointDef has constructor? True
zz generating: b2WheelJointDef b2WheelJointDef
zz methods:  ['set_localAnchorA', 'set_localAnchorB', 'get_motorSpeed', 'set_maxMotorTorque', 'set_frequencyHz', 'set_motorSpeed', 'get_localAxisA', 'set_bodyA', 'set_bodyB', 'Initialize', 'b2WheelJointDef', 'get_frequencyHz', 'set_dampingRatio', '__destroy__', 'get_localAnchorA', 'get_maxMotorTorque', 'get_localAnchorB', 'get_collideConnected', 'get_enableMotor', 'get_dampingRatio', 'get_bodyA', 'get_bodyB', 'set_enableMotor', 'set_collideConnected', 'set_localAxisA']
zz generating b2WheelJointDef::set_localAnchorA
zz making return b2WheelJointDef set_localAnchorA void _emscripten_bind_b2WheelJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJointDef b2WheelJointDef set_localAnchorA set_localAnchorA
zz generating b2WheelJointDef::set_localAnchorB
zz making return b2WheelJointDef set_localAnchorB void _emscripten_bind_b2WheelJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJointDef b2WheelJointDef set_localAnchorB set_localAnchorB
zz generating b2WheelJointDef::get_motorSpeed
zz making return b2WheelJointDef get_motorSpeed float _emscripten_bind_b2WheelJointDef__get_motorSpeed_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_motorSpeed get_motorSpeed
zz generating b2WheelJointDef::set_maxMotorTorque
zz making return b2WheelJointDef set_maxMotorTorque void _emscripten_bind_b2WheelJointDef__set_maxMotorTorque_p1(this.ptr, arg0)
Maekin: b2WheelJointDef b2WheelJointDef set_maxMotorTorque set_maxMotorTorque
zz generating b2WheelJointDef::set_frequencyHz
zz making return b2WheelJointDef set_frequencyHz void _emscripten_bind_b2WheelJointDef__set_frequencyHz_p1(this.ptr, arg0)
Maekin: b2WheelJointDef b2WheelJointDef set_frequencyHz set_frequencyHz
zz generating b2WheelJointDef::set_motorSpeed
zz making return b2WheelJointDef set_motorSpeed void _emscripten_bind_b2WheelJointDef__set_motorSpeed_p1(this.ptr, arg0)
Maekin: b2WheelJointDef b2WheelJointDef set_motorSpeed set_motorSpeed
zz generating b2WheelJointDef::get_localAxisA
zz making return b2WheelJointDef get_localAxisA b2Vec2 _emscripten_bind_b2WheelJointDef__get_localAxisA_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_localAxisA get_localAxisA
zz generating b2WheelJointDef::set_bodyA
zz making return b2WheelJointDef set_bodyA void _emscripten_bind_b2WheelJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJointDef b2WheelJointDef set_bodyA set_bodyA
zz generating b2WheelJointDef::set_bodyB
zz making return b2WheelJointDef set_bodyB void _emscripten_bind_b2WheelJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJointDef b2WheelJointDef set_bodyB set_bodyB
zz generating b2WheelJointDef::Initialize
zz making return b2WheelJointDef Initialize void _emscripten_bind_b2WheelJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr)
Maekin: b2WheelJointDef b2WheelJointDef Initialize Initialize
zz generating b2WheelJointDef::b2WheelJointDef
Maekin: b2WheelJointDef b2WheelJointDef b2WheelJointDef b2WheelJointDef
zz generating b2WheelJointDef::get_frequencyHz
zz making return b2WheelJointDef get_frequencyHz float _emscripten_bind_b2WheelJointDef__get_frequencyHz_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_frequencyHz get_frequencyHz
zz generating b2WheelJointDef::set_dampingRatio
zz making return b2WheelJointDef set_dampingRatio void _emscripten_bind_b2WheelJointDef__set_dampingRatio_p1(this.ptr, arg0)
Maekin: b2WheelJointDef b2WheelJointDef set_dampingRatio set_dampingRatio
zz generating b2WheelJointDef::__destroy__
zz making return b2WheelJointDef __destroy__ void _emscripten_bind_b2WheelJointDef____destroy___p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef __destroy__ __destroy__
zz generating b2WheelJointDef::get_localAnchorA
zz making return b2WheelJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2WheelJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_localAnchorA get_localAnchorA
zz generating b2WheelJointDef::get_maxMotorTorque
zz making return b2WheelJointDef get_maxMotorTorque float _emscripten_bind_b2WheelJointDef__get_maxMotorTorque_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_maxMotorTorque get_maxMotorTorque
zz generating b2WheelJointDef::get_localAnchorB
zz making return b2WheelJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2WheelJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_localAnchorB get_localAnchorB
zz generating b2WheelJointDef::get_collideConnected
zz making return b2WheelJointDef get_collideConnected bool _emscripten_bind_b2WheelJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2WheelJointDef b2WheelJointDef get_collideConnected get_collideConnected
zz generating b2WheelJointDef::get_enableMotor
zz making return b2WheelJointDef get_enableMotor bool _emscripten_bind_b2WheelJointDef__get_enableMotor_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_enableMotor get_enableMotor
zz generating b2WheelJointDef::get_dampingRatio
zz making return b2WheelJointDef get_dampingRatio float _emscripten_bind_b2WheelJointDef__get_dampingRatio_p0(this.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_dampingRatio get_dampingRatio
zz generating b2WheelJointDef::get_bodyA
zz making return b2WheelJointDef get_bodyA b2Body _emscripten_bind_b2WheelJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_bodyA get_bodyA
zz generating b2WheelJointDef::get_bodyB
zz making return b2WheelJointDef get_bodyB b2Body _emscripten_bind_b2WheelJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJointDef b2WheelJointDef get_bodyB get_bodyB
zz generating b2WheelJointDef::set_enableMotor
zz making return b2WheelJointDef set_enableMotor void _emscripten_bind_b2WheelJointDef__set_enableMotor_p1(this.ptr, arg0)
Maekin: b2WheelJointDef b2WheelJointDef set_enableMotor set_enableMotor
zz generating b2WheelJointDef::set_collideConnected
zz making return b2WheelJointDef set_collideConnected void _emscripten_bind_b2WheelJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2WheelJointDef b2WheelJointDef set_collideConnected set_collideConnected
zz generating b2WheelJointDef::set_localAxisA
zz making return b2WheelJointDef set_localAxisA void _emscripten_bind_b2WheelJointDef__set_localAxisA_p1(this.ptr, arg0.ptr)
Maekin: b2WheelJointDef b2WheelJointDef set_localAxisA set_localAxisA
Checking pure virtual for b2MassData []
zz b2MassData is abstract? None
zz b2MassData has constructor? False
zz no constructor for b2MassData and not abstract, so ignoring
Checking pure virtual for b2RevoluteJointDef []
zz b2RevoluteJointDef is abstract? None
zz b2RevoluteJointDef has constructor? True
zz generating: b2RevoluteJointDef b2RevoluteJointDef
zz methods:  ['set_localAnchorA', 'get_lowerAngle', 'set_localAnchorB', 'set_lowerAngle', 'get_enableMotor', 'set_upperAngle', 'get_referenceAngle', 'set_enableLimit', 'get_motorSpeed', 'set_motorSpeed', 'get_maxMotorTorque', 'set_bodyA', 'set_bodyB', 'b2RevoluteJointDef', 'Initialize', 'get_enableLimit', '__destroy__', 'get_upperAngle', 'set_referenceAngle', 'get_localAnchorA', 'get_localAnchorB', 'get_collideConnected', 'get_bodyA', 'get_bodyB', 'set_maxMotorTorque', 'set_enableMotor', 'set_collideConnected']
zz generating b2RevoluteJointDef::set_localAnchorA
zz making return b2RevoluteJointDef set_localAnchorA void _emscripten_bind_b2RevoluteJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_localAnchorA set_localAnchorA
zz generating b2RevoluteJointDef::get_lowerAngle
zz making return b2RevoluteJointDef get_lowerAngle float _emscripten_bind_b2RevoluteJointDef__get_lowerAngle_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_lowerAngle get_lowerAngle
zz generating b2RevoluteJointDef::set_localAnchorB
zz making return b2RevoluteJointDef set_localAnchorB void _emscripten_bind_b2RevoluteJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_localAnchorB set_localAnchorB
zz generating b2RevoluteJointDef::set_lowerAngle
zz making return b2RevoluteJointDef set_lowerAngle void _emscripten_bind_b2RevoluteJointDef__set_lowerAngle_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_lowerAngle set_lowerAngle
zz generating b2RevoluteJointDef::get_enableMotor
zz making return b2RevoluteJointDef get_enableMotor bool _emscripten_bind_b2RevoluteJointDef__get_enableMotor_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_enableMotor get_enableMotor
zz generating b2RevoluteJointDef::set_upperAngle
zz making return b2RevoluteJointDef set_upperAngle void _emscripten_bind_b2RevoluteJointDef__set_upperAngle_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_upperAngle set_upperAngle
zz generating b2RevoluteJointDef::get_referenceAngle
zz making return b2RevoluteJointDef get_referenceAngle float _emscripten_bind_b2RevoluteJointDef__get_referenceAngle_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_referenceAngle get_referenceAngle
zz generating b2RevoluteJointDef::set_enableLimit
zz making return b2RevoluteJointDef set_enableLimit void _emscripten_bind_b2RevoluteJointDef__set_enableLimit_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_enableLimit set_enableLimit
zz generating b2RevoluteJointDef::get_motorSpeed
zz making return b2RevoluteJointDef get_motorSpeed float _emscripten_bind_b2RevoluteJointDef__get_motorSpeed_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_motorSpeed get_motorSpeed
zz generating b2RevoluteJointDef::set_motorSpeed
zz making return b2RevoluteJointDef set_motorSpeed void _emscripten_bind_b2RevoluteJointDef__set_motorSpeed_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_motorSpeed set_motorSpeed
zz generating b2RevoluteJointDef::get_maxMotorTorque
zz making return b2RevoluteJointDef get_maxMotorTorque float _emscripten_bind_b2RevoluteJointDef__get_maxMotorTorque_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_maxMotorTorque get_maxMotorTorque
zz generating b2RevoluteJointDef::set_bodyA
zz making return b2RevoluteJointDef set_bodyA void _emscripten_bind_b2RevoluteJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_bodyA set_bodyA
zz generating b2RevoluteJointDef::set_bodyB
zz making return b2RevoluteJointDef set_bodyB void _emscripten_bind_b2RevoluteJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_bodyB set_bodyB
zz generating b2RevoluteJointDef::b2RevoluteJointDef
Maekin: b2RevoluteJointDef b2RevoluteJointDef b2RevoluteJointDef b2RevoluteJointDef
zz generating b2RevoluteJointDef::Initialize
zz making return b2RevoluteJointDef Initialize void _emscripten_bind_b2RevoluteJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef Initialize Initialize
zz generating b2RevoluteJointDef::get_enableLimit
zz making return b2RevoluteJointDef get_enableLimit bool _emscripten_bind_b2RevoluteJointDef__get_enableLimit_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_enableLimit get_enableLimit
zz generating b2RevoluteJointDef::__destroy__
zz making return b2RevoluteJointDef __destroy__ void _emscripten_bind_b2RevoluteJointDef____destroy___p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef __destroy__ __destroy__
zz generating b2RevoluteJointDef::get_upperAngle
zz making return b2RevoluteJointDef get_upperAngle float _emscripten_bind_b2RevoluteJointDef__get_upperAngle_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_upperAngle get_upperAngle
zz generating b2RevoluteJointDef::set_referenceAngle
zz making return b2RevoluteJointDef set_referenceAngle void _emscripten_bind_b2RevoluteJointDef__set_referenceAngle_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_referenceAngle set_referenceAngle
zz generating b2RevoluteJointDef::get_localAnchorA
zz making return b2RevoluteJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2RevoluteJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_localAnchorA get_localAnchorA
zz generating b2RevoluteJointDef::get_localAnchorB
zz making return b2RevoluteJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2RevoluteJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_localAnchorB get_localAnchorB
zz generating b2RevoluteJointDef::get_collideConnected
zz making return b2RevoluteJointDef get_collideConnected bool _emscripten_bind_b2RevoluteJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_collideConnected get_collideConnected
zz generating b2RevoluteJointDef::get_bodyA
zz making return b2RevoluteJointDef get_bodyA b2Body _emscripten_bind_b2RevoluteJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_bodyA get_bodyA
zz generating b2RevoluteJointDef::get_bodyB
zz making return b2RevoluteJointDef get_bodyB b2Body _emscripten_bind_b2RevoluteJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2RevoluteJointDef b2RevoluteJointDef get_bodyB get_bodyB
zz generating b2RevoluteJointDef::set_maxMotorTorque
zz making return b2RevoluteJointDef set_maxMotorTorque void _emscripten_bind_b2RevoluteJointDef__set_maxMotorTorque_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_maxMotorTorque set_maxMotorTorque
zz generating b2RevoluteJointDef::set_enableMotor
zz making return b2RevoluteJointDef set_enableMotor void _emscripten_bind_b2RevoluteJointDef__set_enableMotor_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_enableMotor set_enableMotor
zz generating b2RevoluteJointDef::set_collideConnected
zz making return b2RevoluteJointDef set_collideConnected void _emscripten_bind_b2RevoluteJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2RevoluteJointDef b2RevoluteJointDef set_collideConnected set_collideConnected
Checking pure virtual for b2ContactImpulse []
zz b2ContactImpulse is abstract? None
zz b2ContactImpulse has constructor? False
zz no constructor for b2ContactImpulse and not abstract, so ignoring
Checking pure virtual for b2JointEdge []
zz b2JointEdge is abstract? None
zz b2JointEdge has constructor? False
zz no constructor for b2JointEdge and not abstract, so ignoring
Checking pure virtual for b2PulleyJointDef []
zz b2PulleyJointDef is abstract? None
zz b2PulleyJointDef has constructor? True
zz generating: b2PulleyJointDef b2PulleyJointDef
zz methods:  ['set_localAnchorA', 'set_localAnchorB', 'set_ratio', 'set_groundAnchorB', 'set_groundAnchorA', 'get_groundAnchorB', 'get_groundAnchorA', 'set_bodyA', 'set_bodyB', 'Initialize', 'get_ratio', '__destroy__', 'get_localAnchorA', 'get_localAnchorB', 'get_collideConnected', 'set_lengthB', 'set_lengthA', 'get_bodyA', 'get_bodyB', 'get_lengthB', 'get_lengthA', 'set_collideConnected', 'b2PulleyJointDef']
zz generating b2PulleyJointDef::set_localAnchorA
zz making return b2PulleyJointDef set_localAnchorA void _emscripten_bind_b2PulleyJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef set_localAnchorA set_localAnchorA
zz generating b2PulleyJointDef::set_localAnchorB
zz making return b2PulleyJointDef set_localAnchorB void _emscripten_bind_b2PulleyJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef set_localAnchorB set_localAnchorB
zz generating b2PulleyJointDef::set_ratio
zz making return b2PulleyJointDef set_ratio void _emscripten_bind_b2PulleyJointDef__set_ratio_p1(this.ptr, arg0)
Maekin: b2PulleyJointDef b2PulleyJointDef set_ratio set_ratio
zz generating b2PulleyJointDef::set_groundAnchorB
zz making return b2PulleyJointDef set_groundAnchorB void _emscripten_bind_b2PulleyJointDef__set_groundAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef set_groundAnchorB set_groundAnchorB
zz generating b2PulleyJointDef::set_groundAnchorA
zz making return b2PulleyJointDef set_groundAnchorA void _emscripten_bind_b2PulleyJointDef__set_groundAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef set_groundAnchorA set_groundAnchorA
zz generating b2PulleyJointDef::get_groundAnchorB
zz making return b2PulleyJointDef get_groundAnchorB b2Vec2 _emscripten_bind_b2PulleyJointDef__get_groundAnchorB_p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_groundAnchorB get_groundAnchorB
zz generating b2PulleyJointDef::get_groundAnchorA
zz making return b2PulleyJointDef get_groundAnchorA b2Vec2 _emscripten_bind_b2PulleyJointDef__get_groundAnchorA_p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_groundAnchorA get_groundAnchorA
zz generating b2PulleyJointDef::set_bodyA
zz making return b2PulleyJointDef set_bodyA void _emscripten_bind_b2PulleyJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef set_bodyA set_bodyA
zz generating b2PulleyJointDef::set_bodyB
zz making return b2PulleyJointDef set_bodyB void _emscripten_bind_b2PulleyJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef set_bodyB set_bodyB
zz generating b2PulleyJointDef::Initialize
zz making return b2PulleyJointDef Initialize void _emscripten_bind_b2PulleyJointDef__Initialize_p7(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr, arg4.ptr, arg5.ptr, arg6)
Maekin: b2PulleyJointDef b2PulleyJointDef Initialize Initialize
zz generating b2PulleyJointDef::get_ratio
zz making return b2PulleyJointDef get_ratio float _emscripten_bind_b2PulleyJointDef__get_ratio_p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_ratio get_ratio
zz generating b2PulleyJointDef::__destroy__
zz making return b2PulleyJointDef __destroy__ void _emscripten_bind_b2PulleyJointDef____destroy___p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef __destroy__ __destroy__
zz generating b2PulleyJointDef::get_localAnchorA
zz making return b2PulleyJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2PulleyJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_localAnchorA get_localAnchorA
zz generating b2PulleyJointDef::get_localAnchorB
zz making return b2PulleyJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2PulleyJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_localAnchorB get_localAnchorB
zz generating b2PulleyJointDef::get_collideConnected
zz making return b2PulleyJointDef get_collideConnected bool _emscripten_bind_b2PulleyJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2PulleyJointDef b2PulleyJointDef get_collideConnected get_collideConnected
zz generating b2PulleyJointDef::set_lengthB
zz making return b2PulleyJointDef set_lengthB void _emscripten_bind_b2PulleyJointDef__set_lengthB_p1(this.ptr, arg0)
Maekin: b2PulleyJointDef b2PulleyJointDef set_lengthB set_lengthB
zz generating b2PulleyJointDef::set_lengthA
zz making return b2PulleyJointDef set_lengthA void _emscripten_bind_b2PulleyJointDef__set_lengthA_p1(this.ptr, arg0)
Maekin: b2PulleyJointDef b2PulleyJointDef set_lengthA set_lengthA
zz generating b2PulleyJointDef::get_bodyA
zz making return b2PulleyJointDef get_bodyA b2Body _emscripten_bind_b2PulleyJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_bodyA get_bodyA
zz generating b2PulleyJointDef::get_bodyB
zz making return b2PulleyJointDef get_bodyB b2Body _emscripten_bind_b2PulleyJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_bodyB get_bodyB
zz generating b2PulleyJointDef::get_lengthB
zz making return b2PulleyJointDef get_lengthB float _emscripten_bind_b2PulleyJointDef__get_lengthB_p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_lengthB get_lengthB
zz generating b2PulleyJointDef::get_lengthA
zz making return b2PulleyJointDef get_lengthA float _emscripten_bind_b2PulleyJointDef__get_lengthA_p0(this.ptr)
Maekin: b2PulleyJointDef b2PulleyJointDef get_lengthA get_lengthA
zz generating b2PulleyJointDef::set_collideConnected
zz making return b2PulleyJointDef set_collideConnected void _emscripten_bind_b2PulleyJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2PulleyJointDef b2PulleyJointDef set_collideConnected set_collideConnected
zz generating b2PulleyJointDef::b2PulleyJointDef
Maekin: b2PulleyJointDef b2PulleyJointDef b2PulleyJointDef b2PulleyJointDef
zz ignoring b2Mat22
Checking pure virtual for b2ManifoldPoint []
zz b2ManifoldPoint is abstract? None
zz b2ManifoldPoint has constructor? False
zz no constructor for b2ManifoldPoint and not abstract, so ignoring
Checking pure virtual for b2JointDef []
zz b2JointDef is abstract? None
zz b2JointDef has constructor? True
zz generating: b2JointDef b2JointDef
zz methods:  ['get_bodyA', 'set_userData', 'set_bodyA', 'set_bodyB', '__destroy__', 'get_bodyB', 'set_type', 'get_collideConnected', 'get_type', 'set_collideConnected', 'b2JointDef', 'get_userData']
zz generating b2JointDef::get_bodyA
zz making return b2JointDef get_bodyA b2Body _emscripten_bind_b2JointDef__get_bodyA_p0(this.ptr)
Maekin: b2JointDef b2JointDef get_bodyA get_bodyA
zz generating b2JointDef::set_userData
zz making return b2JointDef set_userData void _emscripten_bind_b2JointDef__set_userData_p1(this.ptr, arg0)
Maekin: b2JointDef b2JointDef set_userData set_userData
zz generating b2JointDef::set_bodyA
zz making return b2JointDef set_bodyA void _emscripten_bind_b2JointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2JointDef b2JointDef set_bodyA set_bodyA
zz generating b2JointDef::set_bodyB
zz making return b2JointDef set_bodyB void _emscripten_bind_b2JointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2JointDef b2JointDef set_bodyB set_bodyB
zz generating b2JointDef::__destroy__
zz making return b2JointDef __destroy__ void _emscripten_bind_b2JointDef____destroy___p0(this.ptr)
Maekin: b2JointDef b2JointDef __destroy__ __destroy__
zz generating b2JointDef::get_bodyB
zz making return b2JointDef get_bodyB b2Body _emscripten_bind_b2JointDef__get_bodyB_p0(this.ptr)
Maekin: b2JointDef b2JointDef get_bodyB get_bodyB
zz generating b2JointDef::set_type
zz making return b2JointDef set_type void _emscripten_bind_b2JointDef__set_type_p1(this.ptr, arg0)
Maekin: b2JointDef b2JointDef set_type set_type
zz generating b2JointDef::get_collideConnected
zz making return b2JointDef get_collideConnected bool _emscripten_bind_b2JointDef__get_collideConnected_p0(this.ptr)
Maekin: b2JointDef b2JointDef get_collideConnected get_collideConnected
zz generating b2JointDef::get_type
zz making return b2JointDef get_type b2JointType _emscripten_bind_b2JointDef__get_type_p0(this.ptr)
Maekin: b2JointDef b2JointDef get_type get_type
zz generating b2JointDef::set_collideConnected
zz making return b2JointDef set_collideConnected void _emscripten_bind_b2JointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2JointDef b2JointDef set_collideConnected set_collideConnected
zz generating b2JointDef::b2JointDef
Maekin: b2JointDef b2JointDef b2JointDef b2JointDef
zz generating b2JointDef::get_userData
zz making return b2JointDef get_userData void _emscripten_bind_b2JointDef__get_userData_p0(this.ptr)
Maekin: b2JointDef b2JointDef get_userData get_userData
Checking pure virtual for b2SolverData []
zz b2SolverData is abstract? None
zz b2SolverData has constructor? False
zz no constructor for b2SolverData and not abstract, so ignoring
Checking pure virtual for b2Transform []
zz b2Transform is abstract? None
zz b2Transform has constructor? True
zz generating: b2Transform b2Transform
zz methods:  ['__destroy__', 'Set', 'set_p', 'set_q', 'get_p', 'get_q', 'b2Transform', 'SetIdentity']
zz generating b2Transform::__destroy__
zz making return b2Transform __destroy__ void _emscripten_bind_b2Transform____destroy___p0(this.ptr)
Maekin: b2Transform b2Transform __destroy__ __destroy__
zz generating b2Transform::Set
zz making return b2Transform Set void _emscripten_bind_b2Transform__Set_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2Transform b2Transform Set Set
zz generating b2Transform::set_p
zz making return b2Transform set_p void _emscripten_bind_b2Transform__set_p_p1(this.ptr, arg0.ptr)
Maekin: b2Transform b2Transform set_p set_p
zz generating b2Transform::set_q
zz making return b2Transform set_q void _emscripten_bind_b2Transform__set_q_p1(this.ptr, arg0.ptr)
Maekin: b2Transform b2Transform set_q set_q
zz generating b2Transform::get_p
zz making return b2Transform get_p b2Vec2 _emscripten_bind_b2Transform__get_p_p0(this.ptr)
Maekin: b2Transform b2Transform get_p get_p
zz generating b2Transform::get_q
zz making return b2Transform get_q b2Rot _emscripten_bind_b2Transform__get_q_p0(this.ptr)
Maekin: b2Transform b2Transform get_q get_q
zz generating b2Transform::b2Transform
Maekin: b2Transform b2Transform b2Transform b2Transform
zz generating b2Transform::SetIdentity
zz making return b2Transform SetIdentity void _emscripten_bind_b2Transform__SetIdentity_p0(this.ptr)
Maekin: b2Transform b2Transform SetIdentity SetIdentity
Checking pure virtual for b2Color []
zz b2Color is abstract? None
zz b2Color has constructor? True
zz generating: b2Color b2Color
zz methods:  ['__destroy__', 'Set', 'set_r', 'get_r', 'b2Color', 'set_b', 'get_g', 'get_b', 'set_g']
zz generating b2Color::__destroy__
zz making return b2Color __destroy__ void _emscripten_bind_b2Color____destroy___p0(this.ptr)
Maekin: b2Color b2Color __destroy__ __destroy__
zz generating b2Color::Set
zz making return b2Color Set void _emscripten_bind_b2Color__Set_p3(this.ptr, arg0, arg1, arg2)
Maekin: b2Color b2Color Set Set
zz generating b2Color::set_r
zz making return b2Color set_r void _emscripten_bind_b2Color__set_r_p1(this.ptr, arg0)
Maekin: b2Color b2Color set_r set_r
zz generating b2Color::get_r
zz making return b2Color get_r float _emscripten_bind_b2Color__get_r_p0(this.ptr)
Maekin: b2Color b2Color get_r get_r
zz generating b2Color::b2Color
Maekin: b2Color b2Color b2Color b2Color
zz generating b2Color::set_b
zz making return b2Color set_b void _emscripten_bind_b2Color__set_b_p1(this.ptr, arg0)
Maekin: b2Color b2Color set_b set_b
zz generating b2Color::get_g
zz making return b2Color get_g float _emscripten_bind_b2Color__get_g_p0(this.ptr)
Maekin: b2Color b2Color get_g get_g
zz generating b2Color::get_b
zz making return b2Color get_b float _emscripten_bind_b2Color__get_b_p0(this.ptr)
Maekin: b2Color b2Color get_b get_b
zz generating b2Color::set_g
zz making return b2Color set_g void _emscripten_bind_b2Color__set_g_p1(this.ptr, arg0)
Maekin: b2Color b2Color set_g set_g
Checking pure virtual for b2Velocity []
zz b2Velocity is abstract? None
zz b2Velocity has constructor? False
zz no constructor for b2Velocity and not abstract, so ignoring
Checking pure virtual for b2RayCastInput []
zz b2RayCastInput is abstract? None
zz b2RayCastInput has constructor? False
zz no constructor for b2RayCastInput and not abstract, so ignoring
Checking pure virtual for b2Rot []
zz b2Rot is abstract? None
zz b2Rot has constructor? True
zz generating: b2Rot b2Rot
zz methods:  ['__destroy__', 'Set', 'GetAngle', 'GetYAxis', 'GetXAxis', 'set_c', 'SetIdentity', 'b2Rot', 'get_c']
zz generating b2Rot::__destroy__
zz making return b2Rot __destroy__ void _emscripten_bind_b2Rot____destroy___p0(this.ptr)
Maekin: b2Rot b2Rot __destroy__ __destroy__
zz generating b2Rot::Set
zz making return b2Rot Set void _emscripten_bind_b2Rot__Set_p1(this.ptr, arg0)
Maekin: b2Rot b2Rot Set Set
zz generating b2Rot::GetAngle
zz making return b2Rot GetAngle float32 _emscripten_bind_b2Rot__GetAngle_p0(this.ptr)
Maekin: b2Rot b2Rot GetAngle GetAngle
zz generating b2Rot::GetYAxis
zz making return b2Rot GetYAxis b2Vec2 _emscripten_bind_b2Rot__GetYAxis_p0(this.ptr)
Maekin: b2Rot b2Rot GetYAxis GetYAxis
zz generating b2Rot::GetXAxis
zz making return b2Rot GetXAxis b2Vec2 _emscripten_bind_b2Rot__GetXAxis_p0(this.ptr)
Maekin: b2Rot b2Rot GetXAxis GetXAxis
zz generating b2Rot::set_c
zz making return b2Rot set_c void _emscripten_bind_b2Rot__set_c_p1(this.ptr, arg0)
Maekin: b2Rot b2Rot set_c set_c
zz generating b2Rot::SetIdentity
zz making return b2Rot SetIdentity void _emscripten_bind_b2Rot__SetIdentity_p0(this.ptr)
Maekin: b2Rot b2Rot SetIdentity SetIdentity
zz generating b2Rot::b2Rot
Maekin: b2Rot b2Rot b2Rot b2Rot
zz generating b2Rot::get_c
zz making return b2Rot get_c float _emscripten_bind_b2Rot__get_c_p0(this.ptr)
Maekin: b2Rot b2Rot get_c get_c
Checking pure virtual for b2TOIInput []
zz b2TOIInput is abstract? None
zz b2TOIInput has constructor? False
zz no constructor for b2TOIInput and not abstract, so ignoring
Checking pure virtual for b2WeldJointDef []
zz b2WeldJointDef is abstract? None
zz b2WeldJointDef has constructor? True
zz generating: b2WeldJointDef b2WeldJointDef
zz methods:  ['set_localAnchorA', 'get_bodyA', 'get_bodyB', 'set_localAnchorB', 'get_frequencyHz', 'set_bodyA', 'set_bodyB', '__destroy__', 'set_referenceAngle', 'get_localAnchorA', 'get_referenceAngle', 'get_localAnchorB', 'get_collideConnected', 'get_dampingRatio', 'set_collideConnected', 'set_frequencyHz', 'Initialize', 'set_dampingRatio', 'b2WeldJointDef']
zz generating b2WeldJointDef::set_localAnchorA
zz making return b2WeldJointDef set_localAnchorA void _emscripten_bind_b2WeldJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2WeldJointDef b2WeldJointDef set_localAnchorA set_localAnchorA
zz generating b2WeldJointDef::get_bodyA
zz making return b2WeldJointDef get_bodyA b2Body _emscripten_bind_b2WeldJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2WeldJointDef b2WeldJointDef get_bodyA get_bodyA
zz generating b2WeldJointDef::get_bodyB
zz making return b2WeldJointDef get_bodyB b2Body _emscripten_bind_b2WeldJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2WeldJointDef b2WeldJointDef get_bodyB get_bodyB
zz generating b2WeldJointDef::set_localAnchorB
zz making return b2WeldJointDef set_localAnchorB void _emscripten_bind_b2WeldJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2WeldJointDef b2WeldJointDef set_localAnchorB set_localAnchorB
zz generating b2WeldJointDef::get_frequencyHz
zz making return b2WeldJointDef get_frequencyHz float _emscripten_bind_b2WeldJointDef__get_frequencyHz_p0(this.ptr)
Maekin: b2WeldJointDef b2WeldJointDef get_frequencyHz get_frequencyHz
zz generating b2WeldJointDef::set_bodyA
zz making return b2WeldJointDef set_bodyA void _emscripten_bind_b2WeldJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2WeldJointDef b2WeldJointDef set_bodyA set_bodyA
zz generating b2WeldJointDef::set_bodyB
zz making return b2WeldJointDef set_bodyB void _emscripten_bind_b2WeldJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2WeldJointDef b2WeldJointDef set_bodyB set_bodyB
zz generating b2WeldJointDef::__destroy__
zz making return b2WeldJointDef __destroy__ void _emscripten_bind_b2WeldJointDef____destroy___p0(this.ptr)
Maekin: b2WeldJointDef b2WeldJointDef __destroy__ __destroy__
zz generating b2WeldJointDef::set_referenceAngle
zz making return b2WeldJointDef set_referenceAngle void _emscripten_bind_b2WeldJointDef__set_referenceAngle_p1(this.ptr, arg0)
Maekin: b2WeldJointDef b2WeldJointDef set_referenceAngle set_referenceAngle
zz generating b2WeldJointDef::get_localAnchorA
zz making return b2WeldJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2WeldJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2WeldJointDef b2WeldJointDef get_localAnchorA get_localAnchorA
zz generating b2WeldJointDef::get_referenceAngle
zz making return b2WeldJointDef get_referenceAngle float _emscripten_bind_b2WeldJointDef__get_referenceAngle_p0(this.ptr)
Maekin: b2WeldJointDef b2WeldJointDef get_referenceAngle get_referenceAngle
zz generating b2WeldJointDef::get_localAnchorB
zz making return b2WeldJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2WeldJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2WeldJointDef b2WeldJointDef get_localAnchorB get_localAnchorB
zz generating b2WeldJointDef::get_collideConnected
zz making return b2WeldJointDef get_collideConnected bool _emscripten_bind_b2WeldJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2WeldJointDef b2WeldJointDef get_collideConnected get_collideConnected
zz generating b2WeldJointDef::get_dampingRatio
zz making return b2WeldJointDef get_dampingRatio float _emscripten_bind_b2WeldJointDef__get_dampingRatio_p0(this.ptr)
Maekin: b2WeldJointDef b2WeldJointDef get_dampingRatio get_dampingRatio
zz generating b2WeldJointDef::set_collideConnected
zz making return b2WeldJointDef set_collideConnected void _emscripten_bind_b2WeldJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2WeldJointDef b2WeldJointDef set_collideConnected set_collideConnected
zz generating b2WeldJointDef::set_frequencyHz
zz making return b2WeldJointDef set_frequencyHz void _emscripten_bind_b2WeldJointDef__set_frequencyHz_p1(this.ptr, arg0)
Maekin: b2WeldJointDef b2WeldJointDef set_frequencyHz set_frequencyHz
zz generating b2WeldJointDef::Initialize
zz making return b2WeldJointDef Initialize void _emscripten_bind_b2WeldJointDef__Initialize_p3(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr)
Maekin: b2WeldJointDef b2WeldJointDef Initialize Initialize
zz generating b2WeldJointDef::set_dampingRatio
zz making return b2WeldJointDef set_dampingRatio void _emscripten_bind_b2WeldJointDef__set_dampingRatio_p1(this.ptr, arg0)
Maekin: b2WeldJointDef b2WeldJointDef set_dampingRatio set_dampingRatio
zz generating b2WeldJointDef::b2WeldJointDef
Maekin: b2WeldJointDef b2WeldJointDef b2WeldJointDef b2WeldJointDef
Checking pure virtual for b2ClipVertex []
zz b2ClipVertex is abstract? None
zz b2ClipVertex has constructor? False
zz no constructor for b2ClipVertex and not abstract, so ignoring
Checking pure virtual for b2FixtureProxy []
zz b2FixtureProxy is abstract? None
zz b2FixtureProxy has constructor? False
zz no constructor for b2FixtureProxy and not abstract, so ignoring
Checking pure virtual for b2MouseJointDef []
zz b2MouseJointDef is abstract? None
zz b2MouseJointDef has constructor? True
zz generating: b2MouseJointDef b2MouseJointDef
zz methods:  ['get_bodyA', 'get_bodyB', 'set_dampingRatio', 'set_bodyA', 'set_bodyB', 'b2MouseJointDef', 'get_maxForce', 'set_target', 'set_maxForce', 'get_frequencyHz', 'get_target', 'get_collideConnected', '__destroy__', 'set_collideConnected', 'set_frequencyHz', 'get_dampingRatio']
zz generating b2MouseJointDef::get_bodyA
zz making return b2MouseJointDef get_bodyA b2Body _emscripten_bind_b2MouseJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2MouseJointDef b2MouseJointDef get_bodyA get_bodyA
zz generating b2MouseJointDef::get_bodyB
zz making return b2MouseJointDef get_bodyB b2Body _emscripten_bind_b2MouseJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2MouseJointDef b2MouseJointDef get_bodyB get_bodyB
zz generating b2MouseJointDef::set_dampingRatio
zz making return b2MouseJointDef set_dampingRatio void _emscripten_bind_b2MouseJointDef__set_dampingRatio_p1(this.ptr, arg0)
Maekin: b2MouseJointDef b2MouseJointDef set_dampingRatio set_dampingRatio
zz generating b2MouseJointDef::set_bodyA
zz making return b2MouseJointDef set_bodyA void _emscripten_bind_b2MouseJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2MouseJointDef b2MouseJointDef set_bodyA set_bodyA
zz generating b2MouseJointDef::set_bodyB
zz making return b2MouseJointDef set_bodyB void _emscripten_bind_b2MouseJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2MouseJointDef b2MouseJointDef set_bodyB set_bodyB
zz generating b2MouseJointDef::b2MouseJointDef
Maekin: b2MouseJointDef b2MouseJointDef b2MouseJointDef b2MouseJointDef
zz generating b2MouseJointDef::get_maxForce
zz making return b2MouseJointDef get_maxForce float _emscripten_bind_b2MouseJointDef__get_maxForce_p0(this.ptr)
Maekin: b2MouseJointDef b2MouseJointDef get_maxForce get_maxForce
zz generating b2MouseJointDef::set_target
zz making return b2MouseJointDef set_target void _emscripten_bind_b2MouseJointDef__set_target_p1(this.ptr, arg0.ptr)
Maekin: b2MouseJointDef b2MouseJointDef set_target set_target
zz generating b2MouseJointDef::set_maxForce
zz making return b2MouseJointDef set_maxForce void _emscripten_bind_b2MouseJointDef__set_maxForce_p1(this.ptr, arg0)
Maekin: b2MouseJointDef b2MouseJointDef set_maxForce set_maxForce
zz generating b2MouseJointDef::get_frequencyHz
zz making return b2MouseJointDef get_frequencyHz float _emscripten_bind_b2MouseJointDef__get_frequencyHz_p0(this.ptr)
Maekin: b2MouseJointDef b2MouseJointDef get_frequencyHz get_frequencyHz
zz generating b2MouseJointDef::get_target
zz making return b2MouseJointDef get_target b2Vec2 _emscripten_bind_b2MouseJointDef__get_target_p0(this.ptr)
Maekin: b2MouseJointDef b2MouseJointDef get_target get_target
zz generating b2MouseJointDef::get_collideConnected
zz making return b2MouseJointDef get_collideConnected bool _emscripten_bind_b2MouseJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2MouseJointDef b2MouseJointDef get_collideConnected get_collideConnected
zz generating b2MouseJointDef::__destroy__
zz making return b2MouseJointDef __destroy__ void _emscripten_bind_b2MouseJointDef____destroy___p0(this.ptr)
Maekin: b2MouseJointDef b2MouseJointDef __destroy__ __destroy__
zz generating b2MouseJointDef::set_collideConnected
zz making return b2MouseJointDef set_collideConnected void _emscripten_bind_b2MouseJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2MouseJointDef b2MouseJointDef set_collideConnected set_collideConnected
zz generating b2MouseJointDef::set_frequencyHz
zz making return b2MouseJointDef set_frequencyHz void _emscripten_bind_b2MouseJointDef__set_frequencyHz_p1(this.ptr, arg0)
Maekin: b2MouseJointDef b2MouseJointDef set_frequencyHz set_frequencyHz
zz generating b2MouseJointDef::get_dampingRatio
zz making return b2MouseJointDef get_dampingRatio float _emscripten_bind_b2MouseJointDef__get_dampingRatio_p0(this.ptr)
Maekin: b2MouseJointDef b2MouseJointDef get_dampingRatio get_dampingRatio
Checking pure virtual for _complex []
zz _complex is abstract? None
zz _complex has constructor? False
zz no constructor for _complex and not abstract, so ignoring
Checking pure virtual for b2DistanceOutput []
zz b2DistanceOutput is abstract? None
zz b2DistanceOutput has constructor? False
zz no constructor for b2DistanceOutput and not abstract, so ignoring
Checking pure virtual for b2DistanceProxy []
zz b2DistanceProxy is abstract? None
zz b2DistanceProxy has constructor? True
zz generating: b2DistanceProxy b2DistanceProxy
zz methods:  ['get_m_radius', 'Set', 'b2DistanceProxy', 'set_m_radius', '__destroy__', 'get_m_vertices', 'GetSupportVertex', 'get_m_count', 'GetVertexCount', 'GetVertex', 'GetSupport', 'set_m_vertices', 'set_m_count']
zz generating b2DistanceProxy::get_m_radius
zz making return b2DistanceProxy get_m_radius float _emscripten_bind_b2DistanceProxy__get_m_radius_p0(this.ptr)
Maekin: b2DistanceProxy b2DistanceProxy get_m_radius get_m_radius
zz generating b2DistanceProxy::Set
zz making return b2DistanceProxy Set void _emscripten_bind_b2DistanceProxy__Set_p2(this.ptr, arg0.ptr, arg1)
Maekin: b2DistanceProxy b2DistanceProxy Set Set
zz generating b2DistanceProxy::b2DistanceProxy
Maekin: b2DistanceProxy b2DistanceProxy b2DistanceProxy b2DistanceProxy
zz generating b2DistanceProxy::set_m_radius
zz making return b2DistanceProxy set_m_radius void _emscripten_bind_b2DistanceProxy__set_m_radius_p1(this.ptr, arg0)
Maekin: b2DistanceProxy b2DistanceProxy set_m_radius set_m_radius
zz generating b2DistanceProxy::__destroy__
zz making return b2DistanceProxy __destroy__ void _emscripten_bind_b2DistanceProxy____destroy___p0(this.ptr)
Maekin: b2DistanceProxy b2DistanceProxy __destroy__ __destroy__
zz generating b2DistanceProxy::get_m_vertices
zz making return b2DistanceProxy get_m_vertices const b2Vec2 _emscripten_bind_b2DistanceProxy__get_m_vertices_p0(this.ptr)
Maekin: b2DistanceProxy b2DistanceProxy get_m_vertices get_m_vertices
zz generating b2DistanceProxy::GetSupportVertex
zz making return b2DistanceProxy GetSupportVertex b2Vec2 _emscripten_bind_b2DistanceProxy__GetSupportVertex_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceProxy b2DistanceProxy GetSupportVertex GetSupportVertex
zz generating b2DistanceProxy::get_m_count
zz making return b2DistanceProxy get_m_count signed int _emscripten_bind_b2DistanceProxy__get_m_count_p0(this.ptr)
Maekin: b2DistanceProxy b2DistanceProxy get_m_count get_m_count
zz generating b2DistanceProxy::GetVertexCount
zz making return b2DistanceProxy GetVertexCount int32 _emscripten_bind_b2DistanceProxy__GetVertexCount_p0(this.ptr)
Maekin: b2DistanceProxy b2DistanceProxy GetVertexCount GetVertexCount
zz generating b2DistanceProxy::GetVertex
zz making return b2DistanceProxy GetVertex b2Vec2 _emscripten_bind_b2DistanceProxy__GetVertex_p1(this.ptr, arg0)
Maekin: b2DistanceProxy b2DistanceProxy GetVertex GetVertex
zz generating b2DistanceProxy::GetSupport
zz making return b2DistanceProxy GetSupport int32 _emscripten_bind_b2DistanceProxy__GetSupport_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceProxy b2DistanceProxy GetSupport GetSupport
zz generating b2DistanceProxy::set_m_vertices
zz making return b2DistanceProxy set_m_vertices void _emscripten_bind_b2DistanceProxy__set_m_vertices_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceProxy b2DistanceProxy set_m_vertices set_m_vertices
zz generating b2DistanceProxy::set_m_count
zz making return b2DistanceProxy set_m_count void _emscripten_bind_b2DistanceProxy__set_m_count_p1(this.ptr, arg0)
Maekin: b2DistanceProxy b2DistanceProxy set_m_count set_m_count
Checking pure virtual for b2ContactRegister []
zz b2ContactRegister is abstract? None
zz b2ContactRegister has constructor? False
zz no constructor for b2ContactRegister and not abstract, so ignoring
Checking pure virtual for b2DistanceJointDef []
zz b2DistanceJointDef is abstract? None
zz b2DistanceJointDef has constructor? True
zz generating: b2DistanceJointDef b2DistanceJointDef
zz methods:  ['set_localAnchorA', 'get_bodyA', 'get_bodyB', 'set_localAnchorB', 'set_dampingRatio', 'set_bodyA', 'set_bodyB', 'get_length', 'get_localAnchorA', 'get_frequencyHz', 'get_localAnchorB', 'get_collideConnected', 'get_dampingRatio', 'b2DistanceJointDef', '__destroy__', 'set_collideConnected', 'set_length', 'set_frequencyHz', 'Initialize']
zz generating b2DistanceJointDef::set_localAnchorA
zz making return b2DistanceJointDef set_localAnchorA void _emscripten_bind_b2DistanceJointDef__set_localAnchorA_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef set_localAnchorA set_localAnchorA
zz generating b2DistanceJointDef::get_bodyA
zz making return b2DistanceJointDef get_bodyA b2Body _emscripten_bind_b2DistanceJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef get_bodyA get_bodyA
zz generating b2DistanceJointDef::get_bodyB
zz making return b2DistanceJointDef get_bodyB b2Body _emscripten_bind_b2DistanceJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef get_bodyB get_bodyB
zz generating b2DistanceJointDef::set_localAnchorB
zz making return b2DistanceJointDef set_localAnchorB void _emscripten_bind_b2DistanceJointDef__set_localAnchorB_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef set_localAnchorB set_localAnchorB
zz generating b2DistanceJointDef::set_dampingRatio
zz making return b2DistanceJointDef set_dampingRatio void _emscripten_bind_b2DistanceJointDef__set_dampingRatio_p1(this.ptr, arg0)
Maekin: b2DistanceJointDef b2DistanceJointDef set_dampingRatio set_dampingRatio
zz generating b2DistanceJointDef::set_bodyA
zz making return b2DistanceJointDef set_bodyA void _emscripten_bind_b2DistanceJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef set_bodyA set_bodyA
zz generating b2DistanceJointDef::set_bodyB
zz making return b2DistanceJointDef set_bodyB void _emscripten_bind_b2DistanceJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef set_bodyB set_bodyB
zz generating b2DistanceJointDef::get_length
zz making return b2DistanceJointDef get_length float _emscripten_bind_b2DistanceJointDef__get_length_p0(this.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef get_length get_length
zz generating b2DistanceJointDef::get_localAnchorA
zz making return b2DistanceJointDef get_localAnchorA b2Vec2 _emscripten_bind_b2DistanceJointDef__get_localAnchorA_p0(this.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef get_localAnchorA get_localAnchorA
zz generating b2DistanceJointDef::get_frequencyHz
zz making return b2DistanceJointDef get_frequencyHz float _emscripten_bind_b2DistanceJointDef__get_frequencyHz_p0(this.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef get_frequencyHz get_frequencyHz
zz generating b2DistanceJointDef::get_localAnchorB
zz making return b2DistanceJointDef get_localAnchorB b2Vec2 _emscripten_bind_b2DistanceJointDef__get_localAnchorB_p0(this.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef get_localAnchorB get_localAnchorB
zz generating b2DistanceJointDef::get_collideConnected
zz making return b2DistanceJointDef get_collideConnected bool _emscripten_bind_b2DistanceJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2DistanceJointDef b2DistanceJointDef get_collideConnected get_collideConnected
zz generating b2DistanceJointDef::get_dampingRatio
zz making return b2DistanceJointDef get_dampingRatio float _emscripten_bind_b2DistanceJointDef__get_dampingRatio_p0(this.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef get_dampingRatio get_dampingRatio
zz generating b2DistanceJointDef::b2DistanceJointDef
Maekin: b2DistanceJointDef b2DistanceJointDef b2DistanceJointDef b2DistanceJointDef
zz generating b2DistanceJointDef::__destroy__
zz making return b2DistanceJointDef __destroy__ void _emscripten_bind_b2DistanceJointDef____destroy___p0(this.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef __destroy__ __destroy__
zz generating b2DistanceJointDef::set_collideConnected
zz making return b2DistanceJointDef set_collideConnected void _emscripten_bind_b2DistanceJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2DistanceJointDef b2DistanceJointDef set_collideConnected set_collideConnected
zz generating b2DistanceJointDef::set_length
zz making return b2DistanceJointDef set_length void _emscripten_bind_b2DistanceJointDef__set_length_p1(this.ptr, arg0)
Maekin: b2DistanceJointDef b2DistanceJointDef set_length set_length
zz generating b2DistanceJointDef::set_frequencyHz
zz making return b2DistanceJointDef set_frequencyHz void _emscripten_bind_b2DistanceJointDef__set_frequencyHz_p1(this.ptr, arg0)
Maekin: b2DistanceJointDef b2DistanceJointDef set_frequencyHz set_frequencyHz
zz generating b2DistanceJointDef::Initialize
zz making return b2DistanceJointDef Initialize void _emscripten_bind_b2DistanceJointDef__Initialize_p4(this.ptr, arg0.ptr, arg1.ptr, arg2.ptr, arg3.ptr)
Maekin: b2DistanceJointDef b2DistanceJointDef Initialize Initialize
Checking pure virtual for b2GearJointDef []
zz b2GearJointDef is abstract? None
zz b2GearJointDef has constructor? True
zz generating: b2GearJointDef b2GearJointDef
zz methods:  ['__destroy__', 'get_bodyA', 'get_bodyB', 'get_joint1', 'set_bodyA', 'set_bodyB', 'set_joint2', 'set_ratio', 'get_collideConnected', 'get_joint2', 'set_collideConnected', 'b2GearJointDef', 'get_ratio', 'set_joint1']
zz generating b2GearJointDef::__destroy__
zz making return b2GearJointDef __destroy__ void _emscripten_bind_b2GearJointDef____destroy___p0(this.ptr)
Maekin: b2GearJointDef b2GearJointDef __destroy__ __destroy__
zz generating b2GearJointDef::get_bodyA
zz making return b2GearJointDef get_bodyA b2Body _emscripten_bind_b2GearJointDef__get_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2GearJointDef b2GearJointDef get_bodyA get_bodyA
zz generating b2GearJointDef::get_bodyB
zz making return b2GearJointDef get_bodyB b2Body _emscripten_bind_b2GearJointDef__get_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2GearJointDef b2GearJointDef get_bodyB get_bodyB
zz generating b2GearJointDef::get_joint1
zz making return b2GearJointDef get_joint1 b2Joint _emscripten_bind_b2GearJointDef__get_joint1_p0(this.ptr)
Maekin: b2GearJointDef b2GearJointDef get_joint1 get_joint1
zz generating b2GearJointDef::set_bodyA
zz making return b2GearJointDef set_bodyA void _emscripten_bind_b2GearJointDef__set_bodyA_p1(this.ptr, arg0.ptr)
Maekin: b2GearJointDef b2GearJointDef set_bodyA set_bodyA
zz generating b2GearJointDef::set_bodyB
zz making return b2GearJointDef set_bodyB void _emscripten_bind_b2GearJointDef__set_bodyB_p1(this.ptr, arg0.ptr)
Maekin: b2GearJointDef b2GearJointDef set_bodyB set_bodyB
zz generating b2GearJointDef::set_joint2
zz making return b2GearJointDef set_joint2 void _emscripten_bind_b2GearJointDef__set_joint2_p1(this.ptr, arg0.ptr)
Maekin: b2GearJointDef b2GearJointDef set_joint2 set_joint2
zz generating b2GearJointDef::set_ratio
zz making return b2GearJointDef set_ratio void _emscripten_bind_b2GearJointDef__set_ratio_p1(this.ptr, arg0)
Maekin: b2GearJointDef b2GearJointDef set_ratio set_ratio
zz generating b2GearJointDef::get_collideConnected
zz making return b2GearJointDef get_collideConnected bool _emscripten_bind_b2GearJointDef__get_collideConnected_p1(this.ptr, arg0)
Maekin: b2GearJointDef b2GearJointDef get_collideConnected get_collideConnected
zz generating b2GearJointDef::get_joint2
zz making return b2GearJointDef get_joint2 b2Joint _emscripten_bind_b2GearJointDef__get_joint2_p0(this.ptr)
Maekin: b2GearJointDef b2GearJointDef get_joint2 get_joint2
zz generating b2GearJointDef::set_collideConnected
zz making return b2GearJointDef set_collideConnected void _emscripten_bind_b2GearJointDef__set_collideConnected_p1(this.ptr, arg0)
Maekin: b2GearJointDef b2GearJointDef set_collideConnected set_collideConnected
zz generating b2GearJointDef::b2GearJointDef
Maekin: b2GearJointDef b2GearJointDef b2GearJointDef b2GearJointDef
zz generating b2GearJointDef::get_ratio
zz making return b2GearJointDef get_ratio float _emscripten_bind_b2GearJointDef__get_ratio_p0(this.ptr)
Maekin: b2GearJointDef b2GearJointDef get_ratio get_ratio
zz generating b2GearJointDef::set_joint1
zz making return b2GearJointDef set_joint1 void _emscripten_bind_b2GearJointDef__set_joint1_p1(this.ptr, arg0.ptr)
Maekin: b2GearJointDef b2GearJointDef set_joint1 set_joint1
Checking pure virtual for b2Jacobian []
zz b2Jacobian is abstract? None
zz b2Jacobian has constructor? False
zz no constructor for b2Jacobian and not abstract, so ignoring
Checking pure virtual for b2ContactEdge []
zz b2ContactEdge is abstract? None
zz b2ContactEdge has constructor? True
zz generating: b2ContactEdge b2ContactEdge
zz methods:  ['__destroy__', 'set_contact', 'get_prev', 'get_other', 'set_prev', 'get_next', 'set_other', 'set_next', 'b2ContactEdge', 'get_contact']
zz generating b2ContactEdge::__destroy__
zz making return b2ContactEdge __destroy__ void _emscripten_bind_b2ContactEdge____destroy___p0(this.ptr)
Maekin: b2ContactEdge b2ContactEdge __destroy__ __destroy__
zz generating b2ContactEdge::set_contact
zz making return b2ContactEdge set_contact void _emscripten_bind_b2ContactEdge__set_contact_p1(this.ptr, arg0.ptr)
Maekin: b2ContactEdge b2ContactEdge set_contact set_contact
zz generating b2ContactEdge::get_prev
zz making return b2ContactEdge get_prev b2ContactEdge _emscripten_bind_b2ContactEdge__get_prev_p0(this.ptr)
Maekin: b2ContactEdge b2ContactEdge get_prev get_prev
zz generating b2ContactEdge::get_other
zz making return b2ContactEdge get_other b2Body _emscripten_bind_b2ContactEdge__get_other_p0(this.ptr)
Maekin: b2ContactEdge b2ContactEdge get_other get_other
zz generating b2ContactEdge::set_prev
zz making return b2ContactEdge set_prev void _emscripten_bind_b2ContactEdge__set_prev_p1(this.ptr, arg0.ptr)
Maekin: b2ContactEdge b2ContactEdge set_prev set_prev
zz generating b2ContactEdge::get_next
zz making return b2ContactEdge get_next b2ContactEdge _emscripten_bind_b2ContactEdge__get_next_p0(this.ptr)
Maekin: b2ContactEdge b2ContactEdge get_next get_next
zz generating b2ContactEdge::set_other
zz making return b2ContactEdge set_other void _emscripten_bind_b2ContactEdge__set_other_p1(this.ptr, arg0.ptr)
Maekin: b2ContactEdge b2ContactEdge set_other set_other
zz generating b2ContactEdge::set_next
zz making return b2ContactEdge set_next void _emscripten_bind_b2ContactEdge__set_next_p1(this.ptr, arg0.ptr)
Maekin: b2ContactEdge b2ContactEdge set_next set_next
zz generating b2ContactEdge::b2ContactEdge
Maekin: b2ContactEdge b2ContactEdge b2ContactEdge b2ContactEdge
zz generating b2ContactEdge::get_contact
zz making return b2ContactEdge get_contact b2Contact _emscripten_bind_b2ContactEdge__get_contact_p0(this.ptr)
Maekin: b2ContactEdge b2ContactEdge get_contact get_contact
Checking pure virtual for b2Sweep []
zz b2Sweep is abstract? None
zz b2Sweep has constructor? False
zz no constructor for b2Sweep and not abstract, so ignoring
