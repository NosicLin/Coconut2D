"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ______            _
//	  / ____/___  _________  / ____/___  ____ _(_)___  ___
//	 / /   / __ \/ ___/ __ \/ __/ / __ \/ __ `/ / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /___/ / / / /_/ / / / / /  __/
//	\____/\____/\___/\____/_____/_/ /_/\__, /_/_/ /_/\___/
//	                                  /____/
// ==================================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////
state class CocoEngine
{
	// To avoid frame skipping and to enable time-debugging
	// we need to enforce a fixed tick time interval. The
	// constant we choose is for 60 frames per second but
	// we must use division in order to set the float properly.

	public const TICK_TIME:Time = (1000.0/60.0);

	public var device:CocoDevice;

	private reference var __currentState:State;
	private reference var __nextState:State;
	private var __tickables:Array<ITickable>;

	public var __clock:Time;
	public var __ctx:ICocoRenderContext;
	public var __RESIZE_IMAGES_AT_RUNTIME:Boolean;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__RESIZE_IMAGES_AT_RUNTIME = false;
		__clock = 0;
		__currentState = null;
		__nextState = null;
		__tickables = new Array<ITickable>;
		__deviceMessageQueue = new Array<DEVICE_MESSAGE>;
		__clicked = new Array<CocoClip>;
		__track_touch = false;
		__track_key = false;
		__has_touch_device_message = false;

		engine = this;
		device = new CocoDevice();

		__ctx = CocoRenderContext.createContext();
		__attachDevices();
		CocoText.init(1, 1);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		__dettachDevices();

		delete __ctx;
		delete __clicked;
		delete __tickables;
		delete __deviceMessageQueue;
		delete device;
	}

	// ==================================================================================================================================
	//	    ______            _               _____ __        __          __  __                _____
	//	   / ____/___  ____ _(_)___  ___     / ___// /_____ _/ /____     / / / /___ _____  ____/ / (_)___  ____ _
	//	  / __/ / __ \/ __ `/ / __ \/ _ \    \__ \/ __/ __ `/ __/ _ \   / /_/ / __ `/ __ \/ __  / / / __ \/ __ `/
	//	 / /___/ / / / /_/ / / / / /  __/   ___/ / /_/ /_/ / /_/  __/  / __  / /_/ / / / / /_/ / / / / / / /_/ /
	//	/_____/_/ /_/\__, /_/_/ /_/\___/   /____/\__/\__,_/\__/\___/  /_/ /_/\__,_/_/ /_/\__,_/_/_/_/ /_/\__, /
	//	            /____/                                                                              /____/
	// ==================================================================================================================================

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function setNextState(s:State)
	{
		__nextState = s;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getCurrentState():State
	{
		return __currentState;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getNextState():State
	{
		return __nextState;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function run(time:Time)
	{
		if(!__currentState && !__nextState) return;

		// Change current state
		if(__nextState!=null)
		{
			if(__currentState) __currentState.exit();
			__currentState = __nextState;
			__nextState = null;
			trace("\n@@STATE " + __currentState.__name);
			__clicked.clear();
			if(__currentState) __currentState.enter();
		}

		// Tick current Engine state
		if(__currentState)
			__currentState.tick(__clock);

		// Tick ITickable objects
		try
		{
			__tick(__clock);
		}
		catch(e)
		{
			trace("ERROR: CocoEngine::tick() at state " + __currentState.__name);
		}


		// Clear Clicked clips
		__clicked.clear();

		// Paint
		if(__currentState!=null)
		{
			__ctx.cls();
			try
			{
				__currentState.paint(__ctx, __clock);
			}
			catch(e)
			{
				trace("ERROR: CocoEngine::paint() at state " + __currentState.__name);
			}
			__ctx.flush();
		}

		// Clear Device Messages queue
		__clearDeviceMessageQueue();

		// To avoid frame skipping we enfore a fixed time interval of 16.66~ ms.
		__clock += TICK_TIME;
	}

	// ==================================================================================================================================
	//	    ____            _              __  ___                                   __  __                _____
	//	   / __ \___ _   __(_)_______     /  |/  /__  ______________ _____ ____     / / / /___ _____  ____/ / (_)___  ____ _
	//	  / / / / _ \ | / / / ___/ _ \   / /|_/ / _ \/ ___/ ___/ __ `/ __ `/ _ \   / /_/ / __ `/ __ \/ __  / / / __ \/ __ `/
	//	 / /_/ /  __/ |/ / / /__/  __/  / /  / /  __(__  |__  ) /_/ / /_/ /  __/  / __  / /_/ / / / / /_/ / / / / / / /_/ /
	//	/_____/\___/|___/_/\___/\___/  /_/  /_/\___/____/____/\__,_/\__, /\___/  /_/ /_/\__,_/_/ /_/\__,_/_/_/_/ /_/\__, /
	//	                                                           /____/                                          /____/
	// ==================================================================================================================================

	// Device Messages Queue: should hold 1 event per category (eg. 1 touch event, 1 http event, etc).
	private var __deviceMessageQueue:Array<DEVICE_MESSAGE>;

	// Stack of clicked clips.
	private var __clicked:Array<CocoClip>;

	// Touch handling controlor variables
	private var __track_touch:Boolean;
	private var __track_key:Boolean;
	private var __has_touch_device_message:Boolean;

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __attachDevices()
	{
		__deviceMessageQueue = new Array<DEVICE_MESSAGE>;
		__clicked = new Array<CocoClip>;

		__track_touch = false;
		__has_touch_device_message = false;

		if(global.__native || global.__touchEvents)
		{
			window.addEventListener("touchstart", __translateDeviceMessage);
			window.addEventListener("touchmove", __translateDeviceMessage);
			window.addEventListener("touchend", __translateDeviceMessage);
		}
		else
		{
			window.addEventListener("mousedown", __translateDeviceMessage);
			window.addEventListener("mousemove", __translateDeviceMessage);
			window.addEventListener("mouseup", __translateDeviceMessage);
		}

		window.addEventListener("keydown", __translateDeviceMessage);
		window.addEventListener("keyup", __translateDeviceMessage);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __dettachDevices()
	{
		if(global.__native || global.__touchEvents)
		{
			window.removeEventListener("touchstart", __translateDeviceMessage);
			window.removeEventListener("touchmove", __translateDeviceMessage);
			window.removeEventListener("touchend", __translateDeviceMessage);
		}
		else
		{
			window.removeEventListener("mousedown", __translateDeviceMessage);
			window.removeEventListener("mousemove", __translateDeviceMessage);
			window.removeEventListener("mouseup", __translateDeviceMessage);
		}

		window.removeEventListener("keydown", __translateDeviceMessage);
		window.removeEventListener("keyup", __translateDeviceMessage);


		window.addEventListener("orientationchange", __translateDeviceMessage);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __translateDeviceMessage(e:HTMLEvent)
	{
		try
		{
			__translateDeviceMessageImpl(e);
		}
		catch(e)
		{
			trace("ERROR: CocoEngine::__translateDeviceMessage");
		}
	}

	private function __translateDeviceMessageImpl(e:HTMLEvent)
	{
		// Convert an HTMLEvent to a DEVICE_MESSAGE structure. DEVICE_MESSAGE is a unified
		// structure for handling asynchronous device events from HTMLWindow object.
		// HTMLWindow is our "device" and in native ports such as iOS, Android, desktop and
		// other pors, HTMLWindow exposes the device capabilities and receives the device
		// events that wraps then isnide an HTMLEvent object.

		var MSG:DEVICE_MESSAGE = null;

		switch(e.type)
		{

		case "orientationchange":
			break;

		//=============================================================================
		// We need to latch the mouse down/move/up

		case "mousedown":
			if(!__track_touch)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_START;
				MSG.x0 = e.clientX;
				MSG.y0 = e.clientY;
				__track_touch = true;
				__has_touch_device_message = true;
			}
			break;

		case "mousemove":
			if(__track_touch)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_MOVE;
				MSG.x0 = e.clientX;
				MSG.y0 = e.clientY;
				__has_touch_device_message = true;
			}
			break;

		case "mouseup":
			if(__track_touch)
			{
				__removeTouchMessages();
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_END;
				MSG.x0 = e.clientX;
				MSG.y0 = e.clientY;
				__track_touch = false;
				__has_touch_device_message = true;
			}
			break;

		//=============================================================================
		// We need to latch the touch down/move/up

		case "touchstart":
			if(!__track_touch)
			{
				var touch:Touch = e.touches[0];
				if(global.__touchEvents) fixTouch(touch);
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_START;
				MSG.x0 = touch.clientX;
				MSG.y0 = touch.clientY;
				__track_touch = true;
				__has_touch_device_message = true;
			}
			break;

		case "touchmove":
			e.preventDefault();
			if(__track_touch)
			{
				var touch:Touch = e.touches[0];
				if(global.__touchEvents) fixTouch(touch);
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_MOVE;
				MSG.x0 = touch.clientX;
				MSG.y0 = touch.clientY;
				__has_touch_device_message = true;
			}
			break;

		case "touchend":
			if(__track_touch)
			{
				var touch:Touch = e.changedTouches[0];
				if(global.__touchEvents) fixTouch(touch);
				__removeTouchMessages();
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_END;
				MSG.x0 = touch.clientX;
				MSG.y0 = touch.clientY;
				__track_touch = false;
				__has_touch_device_message = true;
			}
			break;

		//=============================================================================
		case "keydown":
			if(!__track_key)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_KEY_DOWN;
				MSG.keyCode = e.keyCode;
				MSG.ctrlKey = e.ctrlKey;
				MSG.altKey = e.altKey;
				MSG.shiftKey = e.shiftKey;
				__track_key = true;
			}
			break;

		case "keyup":
			if(__track_key)
			{
				MSG = new DEVICE_MESSAGE();
				MSG.type = DEVICE_MESSAGE_ENUM.MESSAGE_KEY_UP;
				MSG.keyCode = e.keyCode;
				MSG.ctrlKey = e.ctrlKey;
				MSG.altKey = e.altKey;
				MSG.shiftKey = e.shiftKey;
				__track_key = false;
			}
			break;
		}

		//=============================================================================
		// Add device message in device messages queue so that ITickable objects
		// can peek and handle those messages during the next tick cycle.

		if(MSG)
		{
			MSG.handled = false;
			__deviceMessageQueue.push(MSG);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __hasTouchDeviceMessage():Boolean
	{
		return (__has_touch_device_message && __deviceMessageQueue.size()>0);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __removeTouchMessages()
	{
		if(!__has_touch_device_message) return;
		for(var i:Integer=__deviceMessageQueue.size();i--;)
			if((__deviceMessageQueue[i].type & DEVICE_MESSAGE_ENUM.MESSAGE_TOUCH_MASK)!=0)
				__deviceMessageQueue.splice(i,1);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __peekDeviceMessage(mask:DEVICE_MESSAGE_ENUM) :DEVICE_MESSAGE
	{
		// Purpose of the queue is to collect 1 message per category.
		// Here we use a mask to filter and return that message.
		// If more than 1 messages per category are placed in the queue
		// this will result to unpredictable behaviour because the
		// queue is cleared on every cycle.

		var L:Integer = __deviceMessageQueue.size();
		for(var i:Integer=0; i<L; i++)
		{
			if((__deviceMessageQueue[i].type & mask)!=0)
			{
				if(__deviceMessageQueue[i].handled)
				{
					__has_touch_device_message = false;
					return null;
				}
				return __deviceMessageQueue[i];
			}
		}
		return null;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __clearDeviceMessageQueue()
	{
		__deviceMessageQueue.clear();
		__has_touch_device_message = false;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __pushClicked(clip:CocoClip)
	{
		__clicked.push(clip);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function isClicked(check:Array<CocoClip>):Integer
	{
		for(var i:Integer = __clicked.size(); i--;)
			for(var r:Integer = check.size(); r--;)
				if(check[r] == __clicked[i])
					return r;
		return -1;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function isKeyDown(check:Int32Array):Integer
	{
		var L:Integer = __deviceMessageQueue.size();
		for(var i:Integer=0; i<L; i++)
		{
			if(__deviceMessageQueue[i].type==DEVICE_MESSAGE_ENUM.MESSAGE_KEY_DOWN)
			{
				for(var j:Integer=check.length-1; j>=0; j--)
				{
					if(check[j]==__deviceMessageQueue[i].keyCode)
						return check[j];
				}
			}
		}
		return -1;
	}

	// ==================================================================================================================================
	//	    ___________      __         __    __        __  __                _____
	//	   /  _/_  __(_)____/ /______ _/ /_  / /__     / / / /___ _____  ____/ / (_)___  ____ _
	//	   / /  / / / / ___/ //_/ __ `/ __ \/ / _ \   / /_/ / __ `/ __ \/ __  / / / __ \/ __ `/
	//	 _/ /  / / / / /__/ ,< / /_/ / /_/ / /  __/  / __  / /_/ / / / / /_/ / / / / / / /_/ /
	//	/___/ /_/ /_/\___/_/|_|\__,_/_.___/_/\___/  /_/ /_/\__,_/_/ /_/\__,_/_/_/_/ /_/\__, /
	//	                                                                              /____/
	// ==================================================================================================================================

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function addTickListener(tickable:ITickable)
	{
		__tickables.push(tickable);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function removeTickListener(tickable:ITickable)
	{
		var index:Integer = getTickableIndex(tickable);
		if(index!=-1)
			__tickables.splice(index,1);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getTickableIndex(tickable:ITickable) :Integer
	{
		if(tickable)
			for(var i:Integer=__tickables.size();i--;)
				if(__tickables[i]==tickable)
					return i;
		return -1;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __tick(time:Time)
	{
		for(var i:Integer=__tickables.size();i--;)
			__tickables[i].tick(time);
	}
}
