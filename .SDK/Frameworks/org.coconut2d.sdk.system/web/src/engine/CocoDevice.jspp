"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.yourcompany.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

"#include CocoClip.jspp";

///////////////////////////////////////////////////////////////////////////////////////////////

enum COCO_SCREEN_ORIENTATION
{
	SCREEN_ORIENTATION_PORTRAIT						= 0,
	SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN			= 180,
	SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE			= -90,
	SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE	= 90
};

///////////////////////////////////////////////////////////////////////////////////////////////
class CocoDevice
{
	public function Constructor()
	{
	}

	public function Destructor()
	{
	}

	public function report()
	{
		var msg:String = window.navigator.userAgent;

		if(engine.device.isIPad1) 		msg = "\nDetected iPad";
		if(engine.device.isIPad2) 		msg = "\nDetected iPad 2";
		if(engine.device.isIPad3) 		msg = "\nDetected iPad 3";
		if(engine.device.isIPhone3)		msg = "\nDetected iPhone 3";
		if(engine.device.isIPhone4)		msg = "\nDetected iPhone 4";
		if(engine.device.isIPhone5)		msg = "\nDetected iPhone 5";
		if(engine.device.isIPhone6)		msg = "\nDetected iPhone 6";
		if(engine.device.isIPhone6Plus) msg = "\nDetected iPhone 6 Plus";

		msg += "\nScreen Size: " + String(window.screen.width) + "x" + String(window.screen.height);
		msg += "\nDrawing Buffer Size: " + String(screenWidth*pixelRatio) + "x" + String(screenHeight*pixelRatio);
		msg += "\nDisplay Buffer Size: " + String(screenWidth) + " x " + String(screenHeight);
		msg += "\nWorking Pixel Ratio: " + String(pixelRatio);
		msg += "\nActual Pixel Ratio: " + String(window.devicePixelRatio);

		trace(msg);
	}

	// ==================================================================================================================================
	//	    ____            _              ____      ____
	//	   / __ \___ _   __(_)_______     /  _/___  / __/___
	//	  / / / / _ \ | / / / ___/ _ \    / // __ \/ /_/ __ \
	//	 / /_/ /  __/ |/ / / /__/  __/  _/ // / / / __/ /_/ /
	//	/_____/\___/|___/_/\___/\___/  /___/_/ /_/_/  \____/
	//
	// ==================================================================================================================================

	public property Force2D
	{
		function get():Boolean
		{
			return (window.location.search.indexOf("ctx=2d")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property ForceCSS3
	{
		function get():Boolean
		{
			return (window.location.search.indexOf("ctx=css3")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property pixelRatio
	{
		function get():Float
		{
			return (!isHTML5Browser || (isHTML5Browser && (isIPhone5 || isIPhone6 || isIPhone6Plus))) ? window.devicePixelRatio : 1;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property screenWidth
	{
		function get():Float { return window.innerWidth; }
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property screenHeight
	{
		function get():Float { return window.innerHeight; }
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property unorientedScreenWidth
	{
		function get():Float
		{
			return window.screen.width;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property unorientedScreenHeight
	{
		function get():Float
		{
			return window.screen.height;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property screenOrientation
	{
		function get():COCO_SCREEN_ORIENTATION
		{
			switch (window.orientation)
			{
			case 180:  	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN;
			case -90:	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE;
			case 90:  	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE;
			case 0: 	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT;
			}
			return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isNative
	{
		function get():Boolean
		{
			return global.__native;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isHTML5Browser
	{
		function get():Boolean
		{
			return !isNative && (isChrome || isFirefox || isSafari);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isChrome
	{
		function get():Boolean
		{
			return (window.navigator.userAgent.indexOf("Chrome")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isFirefox
	{
		function get():Boolean
		{
			return (window.navigator.userAgent.indexOf("Firefox")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isSafari
	{
		function get():Boolean
		{
			return (window.navigator.userAgent.indexOf("Safari")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIOS
	{
		function get():Boolean
		{
			return isIPhone || isIPad;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPhone
	{
		function get():Boolean
		{
			return (window.navigator.userAgent.indexOf("iPhone")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPad
	{
		function get():Boolean
		{
			return (window.navigator.userAgent.indexOf("iPad")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPad1
	{
		function get():Boolean
		{
			return isIPad && (window.navigator.userAgent.indexOf("Mobile/8F190")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPad2
	{
		function get():Boolean
		{
			return isIPad && (window.devicePixelRatio==1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPad3
	{
		function get():Boolean
		{
			return isIPad && (window.devicePixelRatio==2);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPhone3
	{
		function get():Boolean
		{
			return (isIPhone && window.devicePixelRatio==1 && unorientedScreenHeight*window.devicePixelRatio==480);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPhone4
	{
		function get():Boolean
		{
			return (isIPhone && window.devicePixelRatio==2 && unorientedScreenHeight*window.devicePixelRatio==960);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPhone5
	{
		function get():Boolean
		{
			return (isIPhone && window.devicePixelRatio==2 && unorientedScreenHeight*window.devicePixelRatio==1136);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPhone6
	{
		function get():Boolean
		{
			return (isIPhone && window.devicePixelRatio==2 && unorientedScreenHeight*window.devicePixelRatio==1334);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isIPhone6Plus
	{
		function get():Boolean
		{
			return (isIPhone && window.devicePixelRatio==3 && window.innerHeight*window.devicePixelRatio==2208);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isDesktopSafari
	{
		function get():Boolean
		{
			return (window.navigator.userAgent.indexOf("Windows")!=-1) && (window.navigator.userAgent.indexOf("Safari")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property iOSVersion
	{
		function get():String
		{
			return "";//isIPhone ? navigator.userAgent.match(/iPhone OS (\d+)/)[1] : 0;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property isAndroid
	{
		function get():Boolean
		{
			return (window.navigator.userAgent.indexOf("Android")!=-1);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property AndroidSDKVersion
	{
		function get():String
		{
			return "";//isAndroid ? navigator.userAgent.match(/Android (\d+\.\d+\.\d+)/)[1] : 0;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property HasTouchscreen
	{
		function get():Boolean
		{
			return isAndroid || isIOS;
		}
	}
}
