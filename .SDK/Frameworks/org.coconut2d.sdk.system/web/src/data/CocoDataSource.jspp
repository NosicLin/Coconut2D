"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____        __        _____
//	  / ____/___  _________  / __ \____ _/ /_____ _/ ___/____  __  _______________
//	 / /   / __ \/ ___/ __ \/ / / / __ `/ __/ __ `/\__ \/ __ \/ / / / ___/ ___/ _ \
//	/ /___/ /_/ / /__/ /_/ / /_/ / /_/ / /_/ /_/ /___/ / /_/ / /_/ / /  / /__/  __/
//	\____/\____/\___/\____/_____/\__,_/\__/\__,_//____/\____/\__,_/_/   \___/\___/
//
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
enum COCO_DATA_PROVIDER_ENUM
{
	PROVIDER_HTTP_POST			= 1,
	PROVIDER_HTTP_GET			= 2,
	PROVIDER_FILESYSTEM			= 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////
enum COCO_REQUEST_DATA_FORMAT_ENUM
{
	REQUEST_URL_QUERY_STRING	= 0,
	REQUEST_URL_ENCODED_FORM	= 1,
	REQUEST_XML					= 2,
	REQUEST_JSON				= 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////
enum COCO_PERSISTENT_STORAGE_ENUM
{
	PERSIST_IN_SESSION 			= 0,
	PERSIST_IN_LOCAL_STORAGE	= 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////
enum COCO_RECORD_STATUS
{
	RECORD_UNCHANGED	= 0,
	RECORD_CREATED		= 1,
	RECORD_UPDATED		= 2,
	RECORD_DELETED		= 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////
struct CocoRequestNameValuePair
{
	Name:String;
	Value:String;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoDataSource : CocoEventSource
{
	// Identity
	public var Name:String;
	public var Blocking:Boolean;
	public var Type:COCO_DATA_PROVIDER_ENUM;
	public var ConnectionString:String;

	// DataSource Request Properties
	public var RequestDataFormat:COCO_REQUEST_DATA_FORMAT_ENUM;
	public var RequestDataPacket:Array<String>;
	public var RequestHeaders:Array<String>;

	// Data Persistency Properties
	public var PersistentStorage:COCO_PERSISTENT_STORAGE_ENUM;
	public var PersistentDataID:String;

	// DataSource Events
	//public event OnDataAvailable(Data:IData);
	//public event OnDataError(ErrorCode:Integer, ErrorMessage:String);

 	public function Constructor()
 	{
 	}

 	public function Destructor()
 	{
 	}

 	public function open() :CocoRecordset
 	{
 		return null;
 	}

}

// ==================================================================================================================================
//	   ______                 ____                           __          __
//	  / ____/___  _________  / __ \___  _________  _________/ /_______  / /_
//	 / /   / __ \/ ___/ __ \/ /_/ / _ \/ ___/ __ \/ ___/ __  / ___/ _ \/ __/
//	/ /___/ /_/ / /__/ /_/ / _, _/  __/ /__/ /_/ / /  / /_/ (__  )  __/ /_
//	\____/\____/\___/\____/_/ |_|\___/\___/\____/_/   \__,_/____/\___/\__/
//
// ==================================================================================================================================


////////////////////////////////////////////////////////////////////////////////////////////////////
struct CocoDataField
{
	Name:String;
	Value:String;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
struct CocoDataRecord
{
	Fields:Array<CocoDataField>;
	Status:COCO_RECORD_STATUS;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoRecordset
{
 	public var CatalogueID:String;

 	private var Records:Array<CocoDataRecord>;
 	private var RecordIndex:Integer;

 	public function Constructor()
 	{
 		Records = new Array<CocoDataRecord>;
 	}

 	public function Destructor()
 	{
 		delete Records;
 	}

 	public function RecordCount():Integer
 	{
 		return Records.size();
 	}

 	public function bof() :Boolean
 	{
 		return RecordCount()>0 && RecordIndex==0;
 	}

 	public function eof() :Boolean
 	{
 		return RecordIndex==RecordCount();
 	}

 	public function MoveNext()
 	{
 		RecordIndex = Math.max(RecordCount()+1,RecordCount());
 	}

 	public function MovePrev()
 	{
 		RecordIndex = Math.min(RecordCount()-1,0);
 	}

 	public function MoveFirst()
 	{
 		RecordIndex = 0;
 	}

 	public function MoveLast()
 	{
 		RecordIndex = RecordCount();
 	}

 	public function Fields(Name:String) :CocoDataField
 	{
 		return null;
 	}

}

