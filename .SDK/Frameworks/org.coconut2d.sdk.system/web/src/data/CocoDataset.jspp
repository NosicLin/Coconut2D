"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____        __                  __
//	  / ____/___  _________  / __ \____ _/ /_____ _________  / /_
//	 / /   / __ \/ ___/ __ \/ / / / __ `/ __/ __ `/ ___/ _ \/ __/
//	/ /___/ /_/ / /__/ /_/ / /_/ / /_/ / /_/ /_/ (__  )  __/ /_
//	\____/\____/\___/\____/_____/\__,_/\__/\__,_/____/\___/\__/
//
// ==================================================================================================================================

"#include CocoDataStream.jspp";

////////////////////////////////////////////////////////////////////////////////////////////////////
enum COCO_RECORD_STATUS
{
	RECORD_UNCHANGED	= 0,
	RECORD_CREATED		= 1,
	RECORD_UPDATED		= 2,
	RECORD_DELETED		= 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoDataset implements IPersistable
{
	// Internal DataStream
 	public var __ds:CocoDataStream;

 	// Array of Field Metadata
 	private var __fields:Array<CocoDataField>;

 	// Array of Record Offsets
 	private var __recordOffsets:Int32Array;

	// DataSet Record Index
 	private var __recordIndex:Integer;

 	// Flag indicating the DataSet is open
 	private var __opened:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function Constructor()
 	{
 		__fields = new Array<CocoDataField>;
 		__recordIndex = -1;
 		__opened = false;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function Destructor()
 	{
 		delete __fields;
 		delete __ds;
 	}

	// ==================================================================================================================================
	//	    ________                 _      __        __    __
	//	   /  _/ __ \___  __________(_)____/ /_____ _/ /_  / /__
	//	   / // /_/ / _ \/ ___/ ___/ / ___/ __/ __ `/ __ \/ / _ \
	//	 _/ // ____/  __/ /  (__  ) (__  ) /_/ /_/ / /_/ / /  __/
	//	/___/_/    \___/_/  /____/_/____/\__/\__,_/_.___/_/\___/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function load(ds:CocoDataStream)
 	{
 		if(__ds)
 			delete(__ds);
		__ds = ds.clone();

		var version:Integer = __ds.readInteger();

		// Load Fields
		var fieldsCount:Integer = __ds.readInteger();
		for(var fieldIndex:Integer=0; fieldIndex<fieldsCount; fieldIndex++)
		{
			var field:CocoDataField = new CocoDataField();
			field.load(__ds);
			field.Index = fieldIndex;
			field.__recordset = this;
			__fields.push(field);
		}

		// Load Record Indexes
		__recordOffsets = ds.readInt32Array();
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function save(ds:CocoDataStream)
 	{
		ds.writeDataStream(__ds);
 	}

	// ==================================================================================================================================
	//	   ____                         __   ________
	//	  / __ \____  ___  ____       _/_/  / ____/ /___  ________
	//	 / / / / __ \/ _ \/ __ \    _/_/   / /   / / __ \/ ___/ _ \
	//	/ /_/ / /_/ /  __/ / / /  _/_/    / /___/ / /_/ (__  )  __/
	//	\____/ .___/\___/_/ /_/  /_/      \____/_/\____/____/\___/
	//	    /_/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function Open()
 	{
 		__opened = true;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function Close()
 	{
 		__opened = false;
 	}

	// ==================================================================================================================================
	//	    ____        __           _______      __    __
	//	   / __ \____ _/ /_____ _   / ____(_)__  / /___/ /____
	//	  / / / / __ `/ __/ __ `/  / /_  / / _ \/ / __  / ___/
	//	 / /_/ / /_/ / /_/ /_/ /  / __/ / /  __/ / /_/ (__  )
	//	/_____/\__,_/\__/\__,_/  /_/   /_/\___/_/\__,_/____/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function AddField(Name:String, Type:COCO_FIELD_DATATYPE, optional Size:Integer) :CocoDataField
 	{
 		var f:CocoDataField = new CocoDataField();
 		f.__recordset = this;
 		f.Name = Name;
 		f.Type = Type;
 		f.Size = Size;
 		__fields.push(f);
 		return f;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	private function __fieldIndex(Name:String) :Integer
 	{
 		for(var i:Integer=__fields.size()-1; i>=0; i--)
 		{
 			var f:CocoDataField = __fields[i];
 			if(f.Name==Name)
 			{
 				f.Index = i;
 				return i;
 			}
 		}
 		return -1;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function __gotoFieldOffset(f:CocoDataField)
 	{
 		__ds.offset = __recordOffsets[__recordIndex] + 4;

		for(var i:Integer=0; i<f.Index; i++)
		{
			switch(__fields[i].Type)
			{
			case COCO_FIELD_DATATYPE.FIELD_TYPE_STRING:
				__ds.offset += __ds.readInteger();
				__ds.offset += __ds.readInteger();
				break;

			case COCO_FIELD_DATATYPE.FIELD_TYPE_INTEGER:
				__ds.offset += 8;
				break;

			case COCO_FIELD_DATATYPE.FIELD_TYPE_FLOAT:
				__ds.offset += 8;
				break;
			}
		}
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
  	public function Fields(Name:String) :CocoDataField
 	{
 		var i:Integer = __fieldIndex(Name);
 		return i>=0 ? __fields[i] : null;
 	}

	// ==================================================================================================================================
	//	    ____        __           ____                           __
	//	   / __ \____ _/ /_____ _   / __ \___  _________  _________/ /____
	//	  / / / / __ `/ __/ __ `/  / /_/ / _ \/ ___/ __ \/ ___/ __  / ___/
	//	 / /_/ / /_/ / /_/ /_/ /  / _, _/  __/ /__/ /_/ / /  / /_/ (__  )
	//	/_____/\__,_/\__/\__,_/  /_/ |_|\___/\___/\____/_/   \__,_/____/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function RecordCount():Integer
 	{
 		return __recordOffsets.length;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function bof() :Boolean
 	{
 		return RecordCount()>0 && __recordIndex==0;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function eof() :Boolean
 	{
 		return __recordIndex==RecordCount();
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function MoveNext()
 	{
 		__recordIndex = Math.min(RecordCount()+1,RecordCount());
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function MovePrev()
 	{
 		__recordIndex = Math.max(RecordCount()-1,0);
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function MoveFirst()
 	{
 		__recordIndex = 0;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function MoveLast()
 	{
 		__recordIndex = RecordCount();
 	}
}

