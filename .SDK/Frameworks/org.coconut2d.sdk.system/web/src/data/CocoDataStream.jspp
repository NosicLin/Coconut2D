"#export native";
"#export web";

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____                           __          __
//	  / ____/___  _________  / __ \___  _________  _________/ /_______  / /_
//	 / /   / __ \/ ___/ __ \/ /_/ / _ \/ ___/ __ \/ ___/ __  / ___/ _ \/ __/
//	/ /___/ /_/ / /__/ /_/ / _, _/  __/ /__/ /_/ / /  / /_/ (__  )  __/ /_
//	\____/\____/\___/\____/_/ |_|\___/\___/\____/_/   \__,_/____/\___/\__/
//
// ==================================================================================================================================

class CocoDataStream
{
	// A DataStream creates an ArrayBuffer and uses two views for accessing its data,
	// a Int32Array and a Float32Array. We use __offset to keep a pointer to the buffer
	// that represents DWORDs and __length which indicates the actual size of the buffer
	// in elements. Each time we attempt to write to the buffer we check if there is enough
	// space and if not we create a new buffer with bigger size and copy the old to it.

	private const ELEMENTS_INCREMENT:Integer = 1024;

	private var bi:Int32Array;
	private var bf:Float32Array;

	private var __offset:Integer;
	private var __length:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function Constructor()
 	{
 		__offset = 0;
 		__length = 0;
		bi = new Int32Array(__length);
		bf = new Float32Array(bi.buffer);
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function Destructor()
 	{
 		delete bf;
 		delete bi;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function increaseSize(s:Integer)
	{
		if(__offset + s <= __length) return;
		__length = __offset + s;
		if(__offset + s <= bi.length) return;
		var nbi:Int32Array = new Int32Array(bi.length + ELEMENTS_INCREMENT + s);
		nbi.set(bi);
		delete bf;
		delete bi;
		bi = nbi;
		bf = new Float32Array(bi.buffer);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function shrink()
	{
		if(bi.length == __length) return;
		var nbi:Int32Array = new Int32Array(__length);
		nbi.set(bi);
		delete bf;
		delete bi;
		bi = nbi;
		bf = new Float32Array(bi.buffer);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function load(URL:String)
 	{
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function save(URL:String)
 	{
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function clone():CocoDataStream
 	{
 		return null;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public property offset
 	{
 		function get():Integer
 		{
 			return __offset;
 		}

 		function set(v:Integer)
 		{
 			__offset = v;
 		}
 	}

	// ==================================================================================================================================
	//	 _       __     _ __          ____        __
	//	| |     / /____(_) /____     / __ \____ _/ /_____ _
	//	| | /| / / ___/ / __/ _ \   / / / / __ `/ __/ __ `/
	//	| |/ |/ / /  / / /_/  __/  / /_/ / /_/ / /_/ /_/ /
	//	|__/|__/_/  /_/\__/\___/  /_____/\__,_/\__/\__,_/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function writeInteger(v:Integer)
 	{
 		increaseSize(Integer(1));
 		bi[__offset++] = v;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function writeFloat(v:Float)
 	{
 		increaseSize(Integer(1));
 		bf[__offset++] = v;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function writeString(v:String)
 	{
 		var L:Integer = v.size();
 		writeInteger(L);
 		for(var i:Integer=0; i<L; i++)
 		{
 			var c:Integer = v.charCodeAt(i);
 			writeInteger(c);
 		}
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function writeBoolean(v:Boolean)
 	{
 		writeInteger(v ? 1 : 0);
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function writeInt32Array(v:Int32Array)
 	{
 		writeInteger(v.length);
 		increaseSize(v.length);
 		bi.set(v, __offset);
 		__offset += v.length;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function writeFloat32Array(v:Float32Array)
 	{
 		writeInteger(v.length);
 		increaseSize(v.length);
 		bf.set(v, __offset);
 		__offset += v.length;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function writeDataStream(v:CocoDataStream)
	{
		v.shrink();
		writeInt32Array(v.bi);
	}


	/////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function writeDate(v:Date)
 	{
 	}

	// ==================================================================================================================================
	//	    ____                 __   ____        __
	//	   / __ \___  ____ _____/ /  / __ \____ _/ /_____ _
	//	  / /_/ / _ \/ __ `/ __  /  / / / / __ `/ __/ __ `/
	//	 / _, _/  __/ /_/ / /_/ /  / /_/ / /_/ / /_/ /_/ /
	//	/_/ |_|\___/\__,_/\__,_/  /_____/\__,_/\__/\__,_/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readCocoDataStream():CocoDataStream
	{
		var data:Int32Array = readInt32Array();
		var ret:CocoDataStream = new CocoDataStream();
		ret.set(data);
		return ret;
	}

 	////////////////////////////////////////////////////////////////////////////////////////////////////
 	protected function set(v:Int32Array)
 	{
 		delete bf;
 		delete bi;
 		bi = new Int32Array(v.length);
 		bi.set(v);
		bf = new Float32Array(bi.buffer);
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readUint8Array():Uint8Array
	{
		if(__offset+1 > __length)
			return null;

		var L:Integer = readInteger();

		if(__offset+L > __length)
			return null;

		var ret:Uint8Array = new Uint8Array(bi.buffer, __offset*4, L);
		__offset += L/4;

		return ret;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readInt32Array():Int32Array
	{
		if(__offset+1 > __length)
			return null;

		var L:Integer = readInteger();

		if(__offset+L > __length)
			return null;

		var ret:Int32Array = new Int32Array(bi.buffer, __offset*4, L);
		__offset += L;

		return ret;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readFloat32Array():Float32Array
	{
		if(__offset+1 > __length)
			return null;

		var L:Integer = readInteger();

		if(__offset+L > __length)
			return null;

		var ret:Float32Array = new Float32Array(bi.buffer, __offset*4, L);
		__offset += L;

		return ret;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readInteger():Integer
	{
		if(__offset+1 > __length)
			return 0;
		return bi[__offset++];
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readFloat():Float
	{
		if(__offset+1 > __length)
			return 0.0;
		return bf[__offset++];
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readString():String
	{
		if(__offset+1 > __length)
			return "";

		var L:Integer = readInteger();

		if(__offset+L> __length)
			return "";

		var ret:String = "";

		for(var i:Integer=0; i<L; i++)
 		{
 			var c:Integer = readInteger();
 			ret += String.fromCharCode(c);
 		}

		return ret;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readBoolean():Boolean
	{
		if(__offset+1 > __length)
			return false;

		var i:Integer = readInteger();
		return i ? true : false;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readDate():Date
	{
		return new Date();
	}
}
