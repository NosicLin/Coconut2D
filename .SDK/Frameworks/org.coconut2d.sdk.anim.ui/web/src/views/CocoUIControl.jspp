/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	   ______                 __  ____________            __             __
//	  / ____/___  _________  / / / /  _/ ____/___  ____  / /__________  / /
//	 / /   / __ \/ ___/ __ \/ / / // // /   / __ \/ __ \/ __/ ___/ __ \/ /
//	/ /___/ /_/ / /__/ /_/ / /_/ // // /___/ /_/ / / / / /_/ /  / /_/ / /
//	\____/\____/\___/\____/\____/___/\____/\____/_/ /_/\__/_/   \____/_/
//
// ==================================================================================================================================

#include "CocoUIView.jspp"

////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoUIControl : CocoUIView
{
	// We add Layers to compose the control in its different states
	// CocoUIControl layers have two keframes: 0 Normal, 1:Selected

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Events
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public event OnGlyphClick();
	public event OnChevronClick();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Selection (pressed)
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __selectable:Boolean;
	protected var __selected:Boolean;
	protected var __selectionWaitTickCycles:Integer;

	published property Selectable { function get():Boolean { return __selectable; } }

	public property Selected
	{
		function get():Boolean { return __selectable && __selected; }
		function set(v:Boolean) { __selected = (__selectable ? v : false); __selectionWaitTickCycles=0; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Margins
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __marginLeft:Integer;
	protected var __marginRight:Integer;
	protected var __marginTop:Integer;
	protected var __marginBottom:Integer;

	published property MarginLeft		{ function get():Integer { return __marginLeft; 	} function set(v:Integer) 	{ __marginLeft=v; invalidate(); 	} }
	published property MarginRight		{ function get():Integer { return __marginRight;	} function set(v:Integer) 	{ __marginRight=v; invalidate(); 	} }
	published property MarginTop		{ function get():Integer { return __marginTop;		} function set(v:Integer)	{ __marginTop=v; invalidate(); 		} }
	published property MarginBottom 	{ function get():Integer { return __marginBottom; 	} function set(v:Integer)	{ __marginBottom=v; invalidate(); 	} }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Paddings
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __paddingLeft:Integer;
	protected var __paddingRight:Integer;
	protected var __paddingTop:Integer;
	protected var __paddingBottom:Integer;

	published property PaddingLeft		{ function get():Integer { return __paddingLeft; 	} function set(v:Integer) 	{ __paddingLeft=v; invalidate(); 	} }
	published property PaddingRight		{ function get():Integer { return __paddingRight;	} function set(v:Integer) 	{ __paddingRight=v; invalidate(); 	} }
	published property PaddingTop		{ function get():Integer { return __paddingTop;		} function set(v:Integer)	{ __paddingTop=v; invalidate(); 	} }
	published property PaddingBottom 	{ function get():Integer { return __paddingBottom; 	} function set(v:Integer)	{ __paddingBottom=v; invalidate(); 	} }

	public property PaddingWidth 		{ function get():Integer { return Width-PaddingLeft-PaddingRight; } }
	public property PaddingHeight 		{ function get():Integer { return Height-PaddingTop-PaddingBottom; } }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Borders
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __borderStyle:COCO_CONTROL_BORDER_STYLE_ENUM;
	protected var __borderRadius:Integer;
	protected var __borderColor:Color;
	protected var __borderColorSel:Color;

	published property BorderStyle		{ function get():COCO_CONTROL_BORDER_STYLE_ENUM { return __borderStyle; }	function set(v:COCO_CONTROL_BORDER_STYLE_ENUM) { __borderStyle = v; invalidate(); }	}

	published property BorderRadius		{ function get():Integer { return __borderRadius; 	}	function set(v:Integer)	{ __borderRadius = v; invalidate(); }}
	published property BorderColor		{ function get():Color { return __borderColor; 		}	function set(v:Color)	{ __borderColor = v; invalidate(); } }
	published property BorderColorSel	{ function get():Color { return __borderColorSel; 	}	function set(v:Color)	{ __borderColorSel = v; invalidate(); } }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Background Gradient
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __backgroundGradient:Gradient;
	protected var __backgroundGradientSel:Gradient;

	published property BackgroundGradient		{ function get():Gradient { return __backgroundGradient;	} 	function set(v:Gradient) 	{ __backgroundGradient = v; invalidate(); 	}}
	published property BackgroundGradientSel	{ function get():Gradient { return __backgroundGradientSel; }	function set(v:Gradient) 	{ __backgroundGradientSel = v; invalidate(); }}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Skin Image
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __skinImage:String;
	protected var __skinImageSel:String;

	published property SkinImage
	{
		function get():String 	{ return (__selected && __skinImageSel ? __skinImageSel : __skinImage); }
		function set(v:String) 	{ __skinImage = v; invalidate(); }
	}

	published property SkinImageSel
	{
		function get():String { return (__skinImageSel ? __skinImageSel: __skinImage); }
		function set(v:String) 	{ __skinImageSel = v; invalidate();	}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Glyph
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __glyphImage:String;
	protected var __glyphImageSel:String;
	protected var __glyphLeft:Integer;
	protected var __glyphTop:Integer;
	protected var __glyphEvents:Boolean;

	private var __glyphClip:CocoUIView;
	private var __glyphSelClip:CocoUIView;

	published property GlyphImage		{ function get():String 	{ return __glyphImage;	 	}	function set(v:String) 	{ __glyphImage = v; invalidate(); 		}}
	published property GlyphImageSel	{ function get():String 	{ return __glyphImageSel; 	}	function set(v:String) 	{ __glyphImageSel = v; invalidate();	}}
	published property GlyphLeft		{ function get():Integer 	{ return __glyphLeft; 		}	function set(v:Integer) { __glyphLeft = v; invalidate();		}}
	published property GlyphTop			{ function get():Integer 	{ return __glyphTop; 		}	function set(v:Integer) { __glyphTop = v; invalidate();			}}
	published property GlyphEvents		{ function get():Boolean	{ return __glyphEvents;		}	function set(v:Boolean)	{ __glyphEvents = v; 					}}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Chevron
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __chevronImage:String;
	protected var __chevronImageSel:String;
	protected var __chevronLeft:Integer;
	protected var __chevronTop:Integer;
	protected var __chevronEvents:Boolean;

	private var __chevronClip:CocoUIView;
	private var __chevronSelClip:CocoUIView;

	published property ChevronImage		{ function get():String 	{ return __chevronImage;	}	function set(v:String) 	{ __chevronImage = v; invalidate(); 	}}
	published property ChevronImageSel	{ function get():String 	{ return __chevronImageSel;	}	function set(v:String) 	{ __chevronImageSel = v; invalidate();	}}
	published property ChevronLeft		{ function get():Integer 	{ return __chevronLeft; 	}	function set(v:Integer) { __chevronLeft = v; invalidate();		}}
	published property ChevronTop		{ function get():Integer 	{ return __chevronTop; 		}	function set(v:Integer) { __chevronTop = v; invalidate();		}}
	published property ChevronEvents	{ function get():Boolean	{ return __chevronEvents;	}	function set(v:Boolean)	{ __chevronEvents = v; 					}}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Texts
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __texts:Array<CocoTextBlock>;

	// ==================================================================================================================================
	//	    ____       ____            ____     _____ _       _
	//	   / __ \___  / __/___ ___  __/ / /_   / ___/(_)___  (_)___  ____ _
	//	  / / / / _ \/ /_/ __ `/ / / / / __/   \__ \/ /_  / / / __ \/ __ `/
	//	 / /_/ /  __/ __/ /_/ / /_/ / / /_    ___/ / / / /_/ / / / / /_/ /
	//	/_____/\___/_/  \__,_/\__,_/_/\__/   /____/_/ /___/_/_/ /_/\__, /
	//	                                                          /____/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function RefreshLayout(parent:CocoUIView)
	{
		super.RefreshLayout;
		Height = CalcHeight();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function CalcHeight() :Integer
	{
		var h:Integer = 0;

		if(__skinImage) 		h = Math.max(h, __scene.getImageSymbolHeight(__skinImage));
		if(__skinImageSel) 		h = Math.max(h, __scene.getImageSymbolHeight(__skinImageSel));
		if(__glyphImage)		h = Math.max(h, __scene.getImageSymbolHeight(__glyphImage));
		if(__glyphImageSel)		h = Math.max(h, __scene.getImageSymbolHeight(__glyphImageSel));
		if(__chevronImage)		h = Math.max(h, __scene.getImageSymbolHeight(__chevronImage));
		if(__chevronImageSel)	h = Math.max(h, __scene.getImageSymbolHeight(__chevronImageSel));

		for(var i:Integer=__texts.size()-1; i>=0; i--)
		{
			if(__texts[i].multiline)
			{
				__texts[i].toImage(false, __scene.__view_scale); // Force text to wrap and calc height
				h = Math.max(h, __texts[i].Height + PaddingTop + PaddingBottom);
			}
			else
			{
				h = Math.max(h, __texts[i].fontSize + PaddingTop + PaddingBottom);
			}
		}

		return h;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function SetMargins(left:Integer, right:Integer, top:Integer, bottom:Integer)
	{
		MarginLeft = left;
		MarginRight = right;
		MarginTop = top;
		MarginBottom = bottom;
		invalidate();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function SetPaddings(left:Integer, right:Integer, top:Integer, bottom:Integer)
	{
		PaddingLeft = left;
		PaddingRight = right;
		PaddingTop = top;
		PaddingBottom = bottom;
		invalidate();
	}

	// ==================================================================================================================================
	//	   ______                 __                  __
	//	  / ____/___  ____  _____/ /________  _______/ /_____  _____
	//	 / /   / __ \/ __ \/ ___/ __/ ___/ / / / ___/ __/ __ \/ ___/
	//	/ /___/ /_/ / / / (__  ) /_/ /  / /_/ / /__/ /_/ /_/ / /
	//	\____/\____/_/ /_/____/\__/_/   \__,_/\___/\__/\____/_/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(name:String)
	{
		__instanceName 				= name;

		__selectable				= true;
		__selected					= false;
		__selectionWaitTickCycles	= 0;

		__marginLeft 				= 0;
		__marginRight 				= 0;
		__marginTop 				= 4;
		__marginBottom 				= 4;

		__paddingLeft 				= 0;
		__paddingRight 				= 0;
		__paddingTop 				= 0;
		__paddingBottom 			= 0;

		__borderStyle				= COCO_CONTROL_BORDER_STYLE_ENUM.BORDER_NONE;
		__borderRadius				= 0;
		__borderColor				= 0x00000000;
		__borderColorSel			= 0x00000000;

		__backgroundGradient		= "";
		__backgroundGradientSel 	= "";

		__skinImage					= "";
		__skinImageSel				= "";

		__glyphImage				= "";
		__glyphImageSel				= "";
		__glyphLeft					= 0;
		__glyphTop					= 0;
		__glyphEvents				= false;
		__glyphClip					= null;
		__glyphSelClip				= null;

		__chevronImage				= "";
		__chevronImageSel			= "";
		__chevronLeft				= 0;
		__chevronTop				= 0;
		__chevronEvents				= false;
		__chevronClip				= null;
		__chevronSelClip			= null;


		__texts = new Array<CocoTextBlock>;

		// Controls by default are clickable, so keyframe has handleEvnets = ture
		__timeline.clear();
		__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '', 0);

		// Hook on touch events
		if(__selectable)
		{
			addEventListener(this.OnTouchStart, __CocoUIControl_OnTouchStart);
	 		addEventListener(this.OnTouchEnd, __CocoUIControl_OnTouchEnd);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
 		if(__selectable)
 		{
 			removeEventListener(this.OnTouchStart, __CocoUIControl_OnTouchStart);
 			removeEventListener(this.OnTouchEnd, __CocoUIControl_OnTouchEnd);
 		}

		delete __texts;
		delete __glyphClip;
		delete __glyphSelClip;
		delete __chevronClip;
		delete __chevronSelClip;
	}

	// ==================================================================================================================================
	//	   _____      __          __  _                __  __                _____
	//	  / ___/___  / /__  _____/ /_(_)___  ____     / / / /___ _____  ____/ / (_)___  ____ _
	//	  \__ \/ _ \/ / _ \/ ___/ __/ / __ \/ __ \   / /_/ / __ `/ __ \/ __  / / / __ \/ __ `/
	//	 ___/ /  __/ /  __/ /__/ /_/ / /_/ / / / /  / __  / /_/ / / / / /_/ / / / / / / /_/ /
	//	/____/\___/_/\___/\___/\__/_/\____/_/ /_/  /_/ /_/\__,_/_/ /_/\__,_/_/_/_/ /_/\__, /
	//	                                                                             /____/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function __CocoUIControl_OnTouchStart(sender:CocoEventSource, e:CocoEvent, x:Integer, y:Integer) :Boolean
	{
		if(__selectable && __selectionWaitTickCycles==0)
			__selectionWaitTickCycles = 5;
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUIControl_OnTouchEnd(sender:CocoEventSource, e:CocoEvent, x:Integer, y:Integer) :Boolean
	{
		__selectionWaitTickCycles=0;
		Selected = false;
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUIControl_Graphic_OnClick(sender:CocoClip, e:CocoEvent) :Boolean
	{
		if(sender==__glyphClip || sender == __glyphSelClip)
		{
			dispatchEvent(this.OnGlyphClick);
		}
		if(sender==__chevronClip || sender == __chevronSelClip)
		{
			dispatchEvent(this.OnChevronClick);
		}
		return false;
	}


	// ==================================================================================================================================
	//	    ____        _       __        __   ______                                 _ __  _
	//	   / __ \____ _(_)___  / /_     _/_/  / ____/___  ____ ___  ____  ____  _____(_) /_(_)___  ____
	//	  / /_/ / __ `/ / __ \/ __/   _/_/   / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ / __/ / __ \/ __ \
	//	 / ____/ /_/ / / / / / /_   _/_/    / /___/ /_/ / / / / / / /_/ / /_/ (__  ) / /_/ / /_/ / / / /
	//	/_/    \__,_/_/_/ /_/\__/  /_/      \____/\____/_/ /_/ /_/ .___/\____/____/_/\__/_/\____/_/ /_/
	//	                                                        /_/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
	{
		if(!__visible || !parentClip || !scene)
			return;

		__scene = scene;

		// It control is invlid, recompose it.
		if(__invalidated)
		{
			ComposeControl();
			__invalidated = false;
		}

		// Set normal/selected control state
		if(__selectable && __selectionWaitTickCycles)
		{
			__selectionWaitTickCycles--;
			if(__selectionWaitTickCycles==0)
				__selected = true;
		}
		gotoFrameByIndex( __selected ? 1 : 0, true);

		super.paint;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function ComposeControl()
	{
		if(__width==0 || __height==0 || !__invalidated)
			return;

		// Dettach children clip events
		if(__glyphClip) __glyphClip.removeEventListener(__glyphClip.OnClick, __CocoUIControl_Graphic_OnClick);
		if(__glyphSelClip) __glyphSelClip.removeEventListener(__glyphSelClip.OnClick, __CocoUIControl_Graphic_OnClick);
		if(__chevronClip) __chevronClip.removeEventListener(__chevronClip.OnClick, __CocoUIControl_Graphic_OnClick);
		if(__chevronSelClip) __chevronSelClip.removeEventListener(__chevronSelClip.OnClick, __CocoUIControl_Graphic_OnClick);

		// Clear children clips
		clear();

		// Add Skin Layer
		if(__skinImage)
			NewLayerFromImage(0, CocoGraphics.GetSkinFromCache(__scene.getImageSymbol(__skinImage), Width, Height), 0, 0, false);

		// Add Glyph Layer
		if(__glyphImage)
		{
			__glyphClip = NewLayerFromImage(0, __scene.getImageSymbol(__glyphImage), __glyphLeft, __glyphTop, __glyphEvents);
			__glyphClip.addEventListener(__glyphClip.OnClick, __CocoUIControl_Graphic_OnClick);
		}

		// Add chevron Layer
		if(__chevronImage)
		{
			__chevronClip = NewLayerFromImage(0, __scene.getImageSymbol(__chevronImage), __chevronLeft, __chevronTop, __chevronEvents);
			__chevronClip.addEventListener(__chevronClip.OnClick, __CocoUIControl_Graphic_OnClick);
		}

		// Add text Layers
		for(var i:Integer = __texts.size()-1; i>=0; i--)
		{
			__texts[i].parent = this;
			NewLayerFromImage(0, __texts[i].toImage(false, __scene.__view_scale * engine.device.pixelRatio), __texts[i].Left, __texts[i].Top, false);
		}

		// SELECTED STATE //
		if(__selectable)
		{
			// Add Skin Layer
			if(SkinImageSel)
				NewLayerFromImage(1, CocoGraphics.GetSkinFromCache(__scene.getImageSymbol(SkinImageSel), Width, Height), 0, 0, false);

			// Add Glyph Layer
			if(GlyphImageSel)
				NewLayerFromImage(1, __scene.getImageSymbol(GlyphImageSel), __glyphLeft, __glyphTop, false);

			// Add chevron Layer
			if(__chevronImage)
				NewLayerFromImage(1, __scene.getImageSymbol(ChevronImageSel), __chevronLeft, __chevronTop, false);

			// Add text Layers
			for(var i:Integer = __texts.size()-1; i>=0; i--)
			{
				__texts[i].parent = this;
				NewLayerFromImage(1, __texts[i].toImage(true, __scene.__view_scale * engine.device.pixelRatio), __texts[i].Left, __texts[i].Top, false);
			}
		}
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function NewLayerFromImage(frameIndex:Integer, image:CocoImage, x:Integer, y:Integer, handleEvents:Boolean) :CocoUIView
	{
		// Composition Layers (skin, texts, glyph, chevron, etc.) are placed
		// with origin the top-left corner of the control. When we finally
		// compose the control by adding child-clips for those layers we need
		// to translate the top-left coordinates to parent coordinates fast.
		//
		// So,
		//
		// 1. Parent's origin is at center
		// 2. Child's origin is also at center
		// 3. (x,y) origin is the top-left corner of the parent.
		//
		// Therefore we need to transform as follows:
		//
		// 1. We move origin to top-left by subtracting 1/2 of width and height
		// 2. We add (x,y)
		// 3. We move origin to clild's center by adding 1/2 of child's width and height

		if(!image) return null;

 		x = -Width / 2 + x + image.textureCellWidth / 2 / (image.pixelRatio / __scene.__view_pixel_ratio);
 		y = -Height / 2 + y + image.textureCellHeight / 2 / (image.pixelRatio / __scene.__view_pixel_ratio);

		var view:CocoUIView = new CocoUIView;
		view.__image = image;
		view.__instanceName = __instanceName + "Layer" + String(__children.size());
		addChild(view);
		view.__timeline.clear();
		view.__timeline.addKeyFrameEx(null, null, frameIndex, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, handleEvents, true, x, y, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '', 0);
		return view;
	}
}
