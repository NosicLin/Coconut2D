"#export web";
//@line 8

function TestEventSource(__CLASS__TESTEVENTSOURCE__$id__)
{
	var __BASE__ = null;

	function __TestEventSource(__CLASS__TESTEVENTSOURCE__$id__)
	{
		var Class = this.Class = 'TestEventSource',
			__PDEFINE__ = Object.defineProperty,
			__NOENUM__ = {enumerable:false},
			__CLASS__TESTEVENTSOURCE__ = this.__CLASS__TESTEVENTSOURCE__ = this;
		var __THIS__ = this;
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { __THIS__ = v; } });
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		},
			__PRIVATE__ = this.__PRIVATE__,
			__PROTECTED__ = this.__PROTECTED__,
			__CLASS__COCOEVENTSOURCE__ = this.__CLASS__COCOEVENTSOURCE__ = __CLASS__TESTEVENTSOURCE__.__CLASS__COCOEVENTSOURCE__
			__CLASS__TESTEVENTSOURCE__.__CLASS__COCOEVENTSOURCE__.__THIS__ = __CLASS__TESTEVENTSOURCE__;
		//@line 10
		this.id = "";
		//@line 11
		global.TestEventSourceOnDoneEvent = function ()
		{
			this.a = null;
			this.b = null;
		};
		global.TestEventSourceOnDoneEvent.prototype = new CocoEvent("OnDone", true, true);
		this.OnDone = new TestEventSourceOnDoneEvent();
		//@line 18
		this.work = function ()
		{
			//@line 20
			__CLASS__TESTEVENTSOURCE__.__CLASS__COCOEVENTSOURCE__.dispatchEvent(__CLASS__TESTEVENTSOURCE__.OnDone, "test1", "test2");
		};
		//@line 13
		this.Constructor = function (id)
		{
			//@line 15
			__CLASS__TESTEVENTSOURCE__.id = id;
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor(__CLASS__TESTEVENTSOURCE__$id__);
		return this;
	}
	__TestEventSource.prototype = new CocoEventSource(__CLASS__TESTEVENTSOURCE__$id__);
	return new __TestEventSource(__CLASS__TESTEVENTSOURCE__$id__);
}
TestEventSource.__PRIVATE__ = {};
TestEventSource.__PROTECTED__ = {};
//@line 28

function TestEventListener()
{
	var __BASE__ = null;

	function __TestEventListener()
	{
		var Class = this.Class = 'TestEventListener',
			__PDEFINE__ = Object.defineProperty,
			__NOENUM__ = {enumerable:false},
			__CLASS__TESTEVENTLISTENER__ = this.__CLASS__TESTEVENTLISTENER__ = this;
		var __THIS__ = this;
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { __THIS__ = v; } });
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		},
			__PRIVATE__ = this.__PRIVATE__ = {},
			__PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 30
		__PRIVATE__.worker = null;
		//@line 40
		this.done = function (sender, e, a, b)
		{
			//@line 42
			trace("Worker " + sender.id + " fired event " + e.type + " a=" + (a) + ", b=" + (b));
			//@line 43
			return false;
			return false
		};
		//@line 46
		this.Destructor = function ()
		{
			{
				//@line 48
				{
					__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker && ((__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.hasOwnProperty('Destructor') && __CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.Destructor()) || !__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.hasOwnProperty('Destructor')) && (delete __CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker);
					__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker = null
				};
			}
			{
				__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker = null;
			}
			return true
		};
		//@line 32
		this.Constructor = function ()
		{
			//@line 34
			__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker = new TestEventSource("worker1");
			//@line 35
			__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.addEventListener(__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.OnDone, __THIS__, __CLASS__TESTEVENTLISTENER__.done);
			//@line 36
			__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.work();
			//@line 37
			__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.removeEventListener(__CLASS__TESTEVENTLISTENER__.__PRIVATE__.worker.OnDone, __THIS__, __CLASS__TESTEVENTLISTENER__.done);
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor();
		return this;
	}
	return new __TestEventListener();
}
TestEventListener.__PRIVATE__ = {};
TestEventListener.__PROTECTED__ = {};