"#export web";
//@line 5

function CocoTextStyle(__CLASS__COCOTEXTSTYLE__$ff__, __CLASS__COCOTEXTSTYLE__$fsp__, __CLASS__COCOTEXTSTYLE__$fs__, __CLASS__COCOTEXTSTYLE__$fw__, __CLASS__COCOTEXTSTYLE__$u__, __CLASS__COCOTEXTSTYLE__$r__, __CLASS__COCOTEXTSTYLE__$g__, __CLASS__COCOTEXTSTYLE__$b__, __CLASS__COCOTEXTSTYLE__$a__, __CLASS__COCOTEXTSTYLE__$br__, __CLASS__COCOTEXTSTYLE__$bg__, __CLASS__COCOTEXTSTYLE__$bb__, __CLASS__COCOTEXTSTYLE__$ba__)
{
	var __BASE__ = null;

	function __CocoTextStyle(__CLASS__COCOTEXTSTYLE__$ff__, __CLASS__COCOTEXTSTYLE__$fsp__, __CLASS__COCOTEXTSTYLE__$fs__, __CLASS__COCOTEXTSTYLE__$fw__, __CLASS__COCOTEXTSTYLE__$u__, __CLASS__COCOTEXTSTYLE__$r__, __CLASS__COCOTEXTSTYLE__$g__, __CLASS__COCOTEXTSTYLE__$b__, __CLASS__COCOTEXTSTYLE__$a__, __CLASS__COCOTEXTSTYLE__$br__, __CLASS__COCOTEXTSTYLE__$bg__, __CLASS__COCOTEXTSTYLE__$bb__, __CLASS__COCOTEXTSTYLE__$ba__)
	{
		var Class = this.Class = 'CocoTextStyle',
			__PDEFINE__ = Object.defineProperty,
			__NOENUM__ = {enumerable:false},
			__CLASS__COCOTEXTSTYLE__ = this.__CLASS__COCOTEXTSTYLE__ = this;
		var __THIS__ = this;
		this.toString = function ()
		{
			return 'CocoTextStyle'
		};
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { trace('chaning "this" of base class [CocoTextStyle] to top-level class [' + v.Class + ']');
				__THIS__ = v;
			}
		});
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		},
			__PRIVATE__ = this.__PRIVATE__ = {},
			__PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 7
		this.fontFamily = "";
		//@line 8
		this.fontSizePixels = 0;
		//@line 9
		this.fontStyle = "";
		//@line 10
		this.fontWeight = "";
		//@line 11
		this.underline = false;
		//@line 12
		this.color = [];
		//@line 13
		this.bgcolor = [];
		//@line 34
		this.Destructor = function ()
		{
			{
				//@line 36
				{
					__CLASS__COCOTEXTSTYLE__.color && ((__CLASS__COCOTEXTSTYLE__.color.hasOwnProperty('Destructor') && __CLASS__COCOTEXTSTYLE__.color.Destructor()) || !__CLASS__COCOTEXTSTYLE__.color.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXTSTYLE__.color);
					__CLASS__COCOTEXTSTYLE__.color = null
				};
				//@line 37
				{
					__CLASS__COCOTEXTSTYLE__.bgcolor && ((__CLASS__COCOTEXTSTYLE__.bgcolor.hasOwnProperty('Destructor') && __CLASS__COCOTEXTSTYLE__.bgcolor.Destructor()) || !__CLASS__COCOTEXTSTYLE__.bgcolor.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXTSTYLE__.bgcolor);
					__CLASS__COCOTEXTSTYLE__.bgcolor = null
				};
			}
			{
				__CLASS__COCOTEXTSTYLE__.fontFamily = null;
				__CLASS__COCOTEXTSTYLE__.fontSizePixels = null;
				__CLASS__COCOTEXTSTYLE__.fontStyle = null;
				__CLASS__COCOTEXTSTYLE__.fontWeight = null;
				__CLASS__COCOTEXTSTYLE__.underline = null;
				__CLASS__COCOTEXTSTYLE__.color = null;
				__CLASS__COCOTEXTSTYLE__.bgcolor = null;
			}
			return true
		};
		//@line 15
		this.Constructor = function (ff, fsp, fs, fw, u, r, g, b, a, br, bg, bb, ba)
		{
			//@line 17
			__CLASS__COCOTEXTSTYLE__.fontFamily = ff;
			//@line 18
			__CLASS__COCOTEXTSTYLE__.fontSizePixels = fsp;
			//@line 19
			__CLASS__COCOTEXTSTYLE__.fontStyle = fs;
			//@line 20
			__CLASS__COCOTEXTSTYLE__.fontWeight = fw;
			//@line 21
			__CLASS__COCOTEXTSTYLE__.underline = u;
			//@line 22
			__CLASS__COCOTEXTSTYLE__.color = new Array;
			//@line 23
			__CLASS__COCOTEXTSTYLE__.color.push(r);
			//@line 24
			__CLASS__COCOTEXTSTYLE__.color.push(g);
			//@line 25
			__CLASS__COCOTEXTSTYLE__.color.push(b);
			//@line 26
			__CLASS__COCOTEXTSTYLE__.color.push(a);
			//@line 27
			__CLASS__COCOTEXTSTYLE__.bgcolor = new Array;
			//@line 28
			__CLASS__COCOTEXTSTYLE__.bgcolor.push(br);
			//@line 29
			__CLASS__COCOTEXTSTYLE__.bgcolor.push(bg);
			//@line 30
			__CLASS__COCOTEXTSTYLE__.bgcolor.push(bb);
			//@line 31
			__CLASS__COCOTEXTSTYLE__.bgcolor.push(ba);
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor(__CLASS__COCOTEXTSTYLE__$ff__, __CLASS__COCOTEXTSTYLE__$fsp__, __CLASS__COCOTEXTSTYLE__$fs__, __CLASS__COCOTEXTSTYLE__$fw__, __CLASS__COCOTEXTSTYLE__$u__, __CLASS__COCOTEXTSTYLE__$r__, __CLASS__COCOTEXTSTYLE__$g__, __CLASS__COCOTEXTSTYLE__$b__, __CLASS__COCOTEXTSTYLE__$a__, __CLASS__COCOTEXTSTYLE__$br__, __CLASS__COCOTEXTSTYLE__$bg__, __CLASS__COCOTEXTSTYLE__$bb__, __CLASS__COCOTEXTSTYLE__$ba__);
		return this;
	}
	return new __CocoTextStyle(__CLASS__COCOTEXTSTYLE__$ff__, __CLASS__COCOTEXTSTYLE__$fsp__, __CLASS__COCOTEXTSTYLE__$fs__, __CLASS__COCOTEXTSTYLE__$fw__, __CLASS__COCOTEXTSTYLE__$u__, __CLASS__COCOTEXTSTYLE__$r__, __CLASS__COCOTEXTSTYLE__$g__, __CLASS__COCOTEXTSTYLE__$b__, __CLASS__COCOTEXTSTYLE__$a__, __CLASS__COCOTEXTSTYLE__$br__, __CLASS__COCOTEXTSTYLE__$bg__, __CLASS__COCOTEXTSTYLE__$bb__, __CLASS__COCOTEXTSTYLE__$ba__);
}
CocoTextStyle.__PRIVATE__ = {};
CocoTextStyle.__PROTECTED__ = {};
//@line 42

function CocoText()
{
	var __BASE__ = null;

	function __CocoText()
	{
		var Class = this.Class = 'CocoText',
			__PDEFINE__ = Object.defineProperty,
			__NOENUM__ = {enumerable:false},
			__CLASS__COCOTEXT__ = this.__CLASS__COCOTEXT__ = this;
		var __THIS__ = this;
		this.toString = function ()
		{
			return 'CocoText'
		};
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { trace('chaning "this" of base class [CocoText] to top-level class [' + v.Class + ']');
				__THIS__ = v;
			}
		});
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		},
			__PRIVATE__ = this.__PRIVATE__ = {},
			__PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 46
		this.str = "";
		//@line 47
		this.styles = [];
		//@line 48
		this.indices = [];
		//@line 49
		this.mappings = [];
		//@line 50
		this.lineBreaks = [];
		//@line 51
		this.lineWidths = [];
		//@line 52
		this.lineHeights = [];
		//@line 53
		this.totalHeight = 0;
		//@line 100
		this.wrap = function (width)
		{
			//@line 102
			__CLASS__COCOTEXT__.lineBreaks.clear();
			//@line 103
			__CLASS__COCOTEXT__.lineWidths.clear();
			//@line 104
			__CLASS__COCOTEXT__.lineHeights.clear();
			//@line 105
			__CLASS__COCOTEXT__.totalHeight = 0;
			//@line 106
			var lineWidth = 0;
			//@line 107
			var lineHeight = 0;
			//@line 108
			var L = __CLASS__COCOTEXT__.indices.size();
			//@line 109
			for (var i = 0; i < L; i++)
			//@line 110
			{
				//@line 111
				var style = __CLASS__COCOTEXT__.styles[__CLASS__COCOTEXT__.mappings[i]];
				//@line 112
				lineHeight = Math.max(lineHeight, style.fontSizePixels);
				//@line 113
				CocoText.c2d.font = style.fontStyle + " normal " + style.fontWeight + " " + (style.fontSizePixels) + "px " + style.fontFamily;
				//@line 114
				var to = i + 1 < __CLASS__COCOTEXT__.indices.size() ? __CLASS__COCOTEXT__.indices[i + 1] : __CLASS__COCOTEXT__.str.size();
				//@line 115
				for (var r = __CLASS__COCOTEXT__.indices[i]; r < to; r++)
				//@line 116
				{
					//@line 117
					var charWidth = CocoText.c2d.measureText((__CLASS__COCOTEXT__.str.substr(r, 1))).width;
					//@line 118
					if (lineWidth + charWidth > width)
					//@line 119
					{
						//@line 120
						if (lineWidth == 0) throw "Too small width!";
						//@line 121
						__CLASS__COCOTEXT__.lineBreaks.push(r);
						//@line 122
						__CLASS__COCOTEXT__.lineWidths.push(lineWidth);
						//@line 123
						__CLASS__COCOTEXT__.lineHeights.push(lineHeight);
						//@line 124
						__CLASS__COCOTEXT__.totalHeight += lineHeight;
						//@line 125
						lineWidth = charWidth;
						//@line 126
						lineHeight = style.fontSizePixels;
					}
					else
					//@line 128
					lineWidth += charWidth;
				}
			}
			//@line 131
			__CLASS__COCOTEXT__.lineWidths.push(lineWidth);
			//@line 132
			__CLASS__COCOTEXT__.lineHeights.push(lineHeight);
			//@line 133
			__CLASS__COCOTEXT__.totalHeight += lineHeight;
		};
		//@line 137
		this.draw = function (width, height, halign, valign, bgR, bgG, bgB, bgA)
		{
			//@line 139
			if (width > CocoText.c2d.canvas.width || height > CocoText.c2d.canvas.height) return "";
			//@line 140
			CocoText.c2d.clearRect(0.0, 0.0, width, height);
			//@line 141
			CocoText.c2d.fillStyle = "rgba(" + (bgR) + ", " + (bgG) + ", " + (bgB) + ", " + (bgA) + ")";
			//@line 142
			var cx = 0;
			//@line 143
			var cy = 0;
			//@line 144
			var currentLine = 0;
			//@line 145
			var prevStop = 0;
			//@line 146
			var firstChar = true;
			//@line 147
			var L = __CLASS__COCOTEXT__.indices.size();
			//@line 148
			for (var i = 0; i < L; i++)
			//@line 149
			{
				//@line 150
				var style = __CLASS__COCOTEXT__.styles[__CLASS__COCOTEXT__.mappings[i]];
				//@line 151
				CocoText.c2d.font = style.fontStyle + " normal " + style.fontWeight + " " + (style.fontSizePixels) + "px " + style.fontFamily;
				//@line 152
				var stop = 0;
				//@line 153
				var nextStop = ((i + 1 < __CLASS__COCOTEXT__.indices.size()) ? __CLASS__COCOTEXT__.indices[i + 1] : __CLASS__COCOTEXT__.str.size());
				//@line 154
				do
				//@line 155
				{
					//@line 156
					var nextBreak = currentLine < __CLASS__COCOTEXT__.lineBreaks.size() ? __CLASS__COCOTEXT__.lineBreaks[currentLine] : __CLASS__COCOTEXT__.str.size();
					//@line 157
					stop = Math.min(nextStop, nextBreak);
					//@line 158
					var s = __CLASS__COCOTEXT__.str.substring(prevStop, stop);
					//@line 159
					if (firstChar)
					//@line 160
					{
						//@line 161
						firstChar = false;
					}
					//@line 163
					prevStop = stop;
					//@line 164
					var sWidth = CocoText.c2d.measureText(s).width;
					//@line 165
					var left = (width - __CLASS__COCOTEXT__.lineWidths[currentLine]) * halign;
					//@line 166
					var top = __CLASS__COCOTEXT__.lineHeights[currentLine] / 1.125 + (height - __CLASS__COCOTEXT__.totalHeight * 1.25) * valign;
					//@line 167
					CocoText.c2d.fillStyle = "rgba(" + (style.bgcolor[0]) + ", " + (style.bgcolor[1]) + ", " + (style.bgcolor[2]) + ", " + (style.bgcolor[3]) + ")";
					//@line 168
					CocoText.c2d.fillRect(cx + left, cy + top - (style.fontSizePixels) / 1.25, sWidth, (style.fontSizePixels) * 1.125);
					//@line 169
					var StyleString = "rgba(" + (style.color[0]) + ", " + (style.color[1]) + ", " + (style.color[2]) + ", " + (style.color[3]) + ")";
					//@line 170
					CocoText.c2d.fillStyle = StyleString;
					//@line 171
					CocoText.c2d.strokeStyle = StyleString;
					//@line 172
					CocoText.c2d.fillText(s, cx + left, cy + top);
					//@line 173
					if (style.underline)
					//@line 174
					{
						//@line 175
						CocoText.c2d.lineWidth = (style.fontSizePixels) / 12.0;
						//@line 176
						CocoText.c2d.beginPath();
						//@line 177
						CocoText.c2d.moveTo(cx + left, cy + top + CocoText.c2d.lineWidth * 1.5);
						//@line 178
						CocoText.c2d.lineTo(cx + left + sWidth, cy + top + CocoText.c2d.lineWidth * 1.5);
						//@line 179
						CocoText.c2d.stroke();
					}
					//@line 181
					cx += sWidth;
					//@line 182
					if (stop == nextBreak)
					//@line 183
					{
						//@line 184
						cx = 0;
						//@line 185
						cy += (__CLASS__COCOTEXT__.lineHeights[currentLine]) * 1.25;
						//@line 186
						++currentLine;
						//@line 187
						firstChar = true;
					}
				}
				while (//@line 189
				stop != nextStop);
			}
			//@line 191
			return CocoText.c2d.canvas.toDataURL();
			return ""
		};
		//@line 89
		this.Destructor = function ()
		{
			{
				//@line 91
				{
					__CLASS__COCOTEXT__.styles && ((__CLASS__COCOTEXT__.styles.hasOwnProperty('Destructor') && __CLASS__COCOTEXT__.styles.Destructor()) || !__CLASS__COCOTEXT__.styles.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXT__.styles);
					__CLASS__COCOTEXT__.styles = null
				};
				//@line 92
				{
					__CLASS__COCOTEXT__.indices && ((__CLASS__COCOTEXT__.indices.hasOwnProperty('Destructor') && __CLASS__COCOTEXT__.indices.Destructor()) || !__CLASS__COCOTEXT__.indices.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXT__.indices);
					__CLASS__COCOTEXT__.indices = null
				};
				//@line 93
				{
					__CLASS__COCOTEXT__.mappings && ((__CLASS__COCOTEXT__.mappings.hasOwnProperty('Destructor') && __CLASS__COCOTEXT__.mappings.Destructor()) || !__CLASS__COCOTEXT__.mappings.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXT__.mappings);
					__CLASS__COCOTEXT__.mappings = null
				};
				//@line 94
				{
					__CLASS__COCOTEXT__.lineBreaks && ((__CLASS__COCOTEXT__.lineBreaks.hasOwnProperty('Destructor') && __CLASS__COCOTEXT__.lineBreaks.Destructor()) || !__CLASS__COCOTEXT__.lineBreaks.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXT__.lineBreaks);
					__CLASS__COCOTEXT__.lineBreaks = null
				};
				//@line 95
				{
					__CLASS__COCOTEXT__.lineWidths && ((__CLASS__COCOTEXT__.lineWidths.hasOwnProperty('Destructor') && __CLASS__COCOTEXT__.lineWidths.Destructor()) || !__CLASS__COCOTEXT__.lineWidths.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXT__.lineWidths);
					__CLASS__COCOTEXT__.lineWidths = null
				};
				//@line 96
				{
					__CLASS__COCOTEXT__.lineHeights && ((__CLASS__COCOTEXT__.lineHeights.hasOwnProperty('Destructor') && __CLASS__COCOTEXT__.lineHeights.Destructor()) || !__CLASS__COCOTEXT__.lineHeights.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTEXT__.lineHeights);
					__CLASS__COCOTEXT__.lineHeights = null
				};
			}
			{
				__CLASS__COCOTEXT__.c2d = null;
				__CLASS__COCOTEXT__.str = null;
				__CLASS__COCOTEXT__.styles = null;
				__CLASS__COCOTEXT__.indices = null;
				__CLASS__COCOTEXT__.mappings = null;
				__CLASS__COCOTEXT__.lineBreaks = null;
				__CLASS__COCOTEXT__.lineWidths = null;
				__CLASS__COCOTEXT__.lineHeights = null;
				__CLASS__COCOTEXT__.totalHeight = null;
			}
			return true
		};
		//@line 77
		this.Constructor = function ()
		{
			//@line 79
			__CLASS__COCOTEXT__.styles = new Array;
			//@line 80
			__CLASS__COCOTEXT__.indices = new Array;
			//@line 81
			__CLASS__COCOTEXT__.mappings = new Array;
			//@line 82
			__CLASS__COCOTEXT__.lineBreaks = new Array;
			//@line 83
			__CLASS__COCOTEXT__.lineWidths = new Array;
			//@line 84
			__CLASS__COCOTEXT__.lineHeights = new Array;
			//@line 85
			__CLASS__COCOTEXT__.totalHeight = 0;
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor();
		return this;
	}
	return new __CocoText();
}
CocoText.__PRIVATE__ = {};
CocoText.__PROTECTED__ = {};
//@line 44
CocoText.c2d = null;
//@line 56
CocoText.npo2 = function (i)
{
	//@line 58
	--i;
	//@line 59
	i |= i >> 1;
	//@line 60
	i |= i >> 2;
	//@line 61
	i |= i >> 4;
	//@line 62
	i |= i >> 8;
	//@line 63
	i |= i >> 16;
	//@line 64
	return ++i;
	return 0
};
//@line 68
CocoText.init = function (width, height)
{
	//@line 70
	var canvas = document.createElement("canvas");
	//@line 71
	canvas.width = (CocoText.npo2(width));
	//@line 72
	canvas.height = (CocoText.npo2(height));
	//@line 73
	CocoText.c2d = (canvas.getContext("2d"));
};