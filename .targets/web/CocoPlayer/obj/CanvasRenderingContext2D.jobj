"#include HTMLCanvasContext.jobj";
//@line 38

function CanvasRenderingContext2D(__CLASS__CANVASRENDERINGCONTEXT2D__$canvas__)
{
	var __BASE__ = null;

	function CanvasRenderingContext2DClass(__BASE__, __CLASS__CANVASRENDERINGCONTEXT2D__$canvas__)
	{
		var __CLASS__CANVASRENDERINGCONTEXT2D__ = this;
		__PDEFINE__ = Object.defineProperty, __NOENUM__ = {enumerable:false};
		this.__PRIVATE__ = {};
		this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		var __SUPER__ = this.__SUPER__ =
		{};
		this.__BASE__ = __BASE__;
		//@line 82
		var arc = this.arc = function (x, y, radius, startAngle, endAngle, anticlockwise)
		{};
		//@line 83
		var arcTo = this.arcTo = function (x1, y1, x2, y2, radius)
		{};
		//@line 84
		var beginPath = this.beginPath = function ()
		{};
		//@line 85
		var bezierCurveTo = this.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y)
		{};
		//@line 86
		var clearRect = this.clearRect = function (x, y, width, height)
		{};
		//@line 87
		var clip = this.clip = function ()
		{};
		//@line 88
		var closePath = this.closePath = function ()
		{};
		//@line 89
		var createImageData = this.createImageData = function (width, height)
		{
			return null;
		};
		//@line 90
		var createLinearGradient = this.createLinearGradient = function (x0, y0, x1, y1)
		{
			return null;
		};
		//@line 91
		var createPattern = this.createPattern = function (image, repetition)
		{
			return null;
		};
		//@line 92
		var createRadialGradient = this.createRadialGradient = function (x0, y0, r0, x1, y1, r1)
		{
			return null;
		};
		//@line 93
		var drawCustomFocusRing = this.drawCustomFocusRing = function (element)
		{
			return false;
			return false
		};
		//@line 94
		var drawSystemFocusRing = this.drawSystemFocusRing = function (element)
		{};
		//@line 95
		var fill = this.fill = function ()
		{};
		//@line 96
		var fillRect = this.fillRect = function (x, y, width, height)
		{};
		//@line 97
		var getImageData = this.getImageData = function (x, y, width, height)
		{
			return null;
		};
		//@line 98
		var getLineDash = this.getLineDash = function ()
		{};
		//@line 99
		var isPointInPath = this.isPointInPath = function (x, y)
		{
			return false;
			return false
		};
		//@line 100
		var isPointInStroke = this.isPointInStroke = function (x, y)
		{
			return false;
			return false
		};
		//@line 101
		var lineTo = this.lineTo = function (x, y)
		{};
		//@line 102
		var moveTo = this.moveTo = function (x, y)
		{};
		//@line 103
		var quadraticCurveTo = this.quadraticCurveTo = function (cpx, cpy, x, y)
		{};
		//@line 104
		var rect = this.rect = function (x, y, width, height)
		{};
		//@line 105
		var restore = this.restore = function ()
		{};
		//@line 106
		var rotate = this.rotate = function (angle)
		{};
		//@line 107
		var save = this.save = function ()
		{};
		//@line 108
		var scale = this.scale = function (x, y)
		{};
		//@line 109
		var scrollPathIntoView = this.scrollPathIntoView = function ()
		{};
		//@line 110
		var setLineDash = this.setLineDash = function (segments)
		{};
		//@line 111
		var setTransform = this.setTransform = function (m11, m12, m21, m22, dx, dy)
		{};
		//@line 112
		var stroke = this.stroke = function ()
		{};
		//@line 113
		var strokeRect = this.strokeRect = function (x, y, w, h)
		{};
		//@line 114
		var strokeText = this.strokeText = function (text, x, y, maxWidth)
		{};
		//@line 115
		var transform = this.transform = function (m11, m12, m21, m22, dx, dy)
		{};
		//@line 116
		var translate = this.translate = function (x, y)
		{};
		//@line 117
		var drawImage = this.drawImage = function (image, a1, a2, a3, a4, a5, a6, a7, a8)
		{};
		//@line 118
		var putImageData = this.putImageData = function (imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight)
		{};
		//@line 121
		Object.defineProperty(this, 'fillStyle', {
			enumerable: true,
			//@line 123
			get: function ()
			{
				//@line 125
				return __CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__fillStyle;
				return ""
			},
			//@line 127
			set: function (v)
			{
				//@line 129
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__fillStyle = v;
			}
		});
		//@line 134
		Object.defineProperty(this, 'font', {
			enumerable: true,
			//@line 138
			get: function ()
			{
				//@line 140
				return __CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__fontSetting;
				return ""
			},
			//@line 143
			set: function (v)
			{
				//@line 145
				var fontChars = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()/.,?><';\":]|[}{\\}]`~-_";
				//@line 146
				var spl = v.split(" ");
				//@line 147
				var fontStyle = "normal";
				//@line 148
				var fontVariant = "normal";
				//@line 149
				var fontWeight = "normal";
				//@line 150
				var fontSize = "medium";
				//@line 151
				var lineHeight = "normal";
				//@line 152
				var fontFamily = "arial,sans-serif";
				//@line 153
				var s = 0;
				//@line 154
				var str = "";
				//@line 155
				for (var i = 0; i < spl.size(); i++)
				//@line 156
				{
					//@line 157
					str = spl[i];
					//@line 158
					if (!str) continue;
					//@line 159
					switch (s)
					{
						//@line 161
					case 3:
						{
							//@line 162
							{
								//@line 163
								var idx = str.indexOf("/");
								//@line 164
								if (idx != -1)
								//@line 165
								{
									//@line 166
									fontSize = str.substr(0, idx);
									//@line 167
									var lh = str.substr(idx + 1);
									//@line 168
									if (lh)
									//@line 169
									{
										//@line 170
										lineHeight = lh;
										//@line 171
										s++;
									}
								}
								else
								//@line 175
								fontSize = str;
								//@line 176
								s++;
								//@line 177
								break;
							}
						}
						break;
						//@line 179
					case 4:
						{
							//@line 180
							{
								//@line 181
								var idx = str.indexOf("/");
								//@line 182
								if (idx != -1)
								//@line 183
								{
									//@line 184
									var lh = str.substr(idx + 1);
									//@line 185
									if (lh)
									//@line 186
									{
										//@line 187
										lineHeight = lh;
										//@line 188
										s++;
									}
								}
								else
								//@line 192
								{
									//@line 193
									fontFamily = spl.slice(i).join("");
									//@line 194
									i = spl.size();
								}
								//@line 196
								s++;
								//@line 197
								break;
							}
						}
						break;
						//@line 199
					case 5:
						{
							//@line 200
							{
								//@line 201
								fontFamily = spl.slice(i + 1).join("");
								//@line 202
								i = spl.size();
								//@line 203
								break;
							}
						}
						break;
						//@line 205
					default:
						{
							//@line 206
							{
								//@line 207
								if (str == "inherit")
								//@line 208
								{
									//@line 210
									return;
								}
								else
								//@line 212
								if (str == "normal")
								//@line 213
								{
									//@line 214
									switch (s)
									{
										//@line 216
									case 0:
										{
											s++;
											break;
										}
										break;
										//@line 217
									case 1:
										{
											s++;
											break;
										}
										break;
										//@line 218
									case 2:
										{
											s++;
											break;
										}
										break;
										//@line 219
									case 4:
										{
											s++;
											break;
										}
										break;
										//@line 220
									default:
										{
											return;
										}
										break;
									}
								}
								else
								//@line 223
								if (str == "italic" || str == "oblique")
								//@line 224
								{
									//@line 225
									switch (s)
									{
										//@line 227
									case 0:
										{
											fontStyle = str;
											s = 1;
											break;
										}
										break;
										//@line 228
									default:
										{
											return;
										}
										break;
									}
								}
								else
								//@line 231
								if (str == "small-caps")
								//@line 232
								{
									//@line 233
									switch (s)
									{
										//@line 235
									case 0:
										{
											fontVariant = str;
											s = 2;
											break;
										}
										break;
										//@line 236
									case 1:
										{
											fontVariant = str;
											s = 2;
											break;
										}
										break;
										//@line 237
									default:
										{
											return;
										}
										break;
									}
								}
								else
								//@line 240
								if (str == "bold" || str == "bolder" || str == "lighter" || str == "100" || str == "200" || str == "300" || str == "400" || str == "500" || str == "600" || str == "700" || str == "800" || str == "900")
								//@line 241
								{
									//@line 242
									switch (s)
									{
										//@line 244
									case 2:
										{
											fontWeight = str;
											s = 3;
											break;
										}
										break;
										//@line 245
									default:
										{
											return;
										}
										break;
									}
								}
							}
						}
						break;
					}
				}
				//@line 251
				var fontSizeInPixels = 0;
				//@line 252
				if (fontSize == "xx-small") fontSizeInPixels = 9;
				else
				//@line 253
				if (fontSize == "x-small") fontSizeInPixels = 10;
				else
				//@line 254
				if (fontSize == "small") fontSizeInPixels = 13;
				else
				//@line 255
				if (fontSize == "medium") fontSizeInPixels = 16;
				else
				//@line 256
				if (fontSize == "large") fontSizeInPixels = 18;
				else
				//@line 257
				if (fontSize == "x-large") fontSizeInPixels = 24;
				else
				//@line 258
				if (fontSize == "xx-large") fontSizeInPixels = 32;
				else
				//@line 259
				if (fontSize == "smaller") fontSizeInPixels = 13;
				else
				//@line 260
				if (fontSize == "larger") fontSizeInPixels = 18;
				else
				//@line 262
				{
					//@line 263
					if (fontSize.indexOf("px") != -1)
					//@line 264
					{
						//@line 265
						fontSizeInPixels = parseFloat(fontSize);
					}
					else
					//@line 267
					if (fontSize.indexOf("in") != -1)
					//@line 268
					{
						//@line 269
						fontSizeInPixels = parseFloat(fontSize) * window.devicePixelRatio * 160.0;
					}
					else
					//@line 271
					if (fontSize.indexOf("cm") != -1)
					//@line 272
					{
						//@line 273
						fontSizeInPixels = parseFloat(fontSize) * window.devicePixelRatio * 160.0 / 2.54;
					}
					else
					//@line 276
					return;
				}
				//@line 278
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__fontSetting = v;
				//@line 279
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font = new CocoFont(fontSizeInPixels, fontFamily, fontChars);
			}
		});
		//@line 284
		var fillText = this.fillText = function (text, x, y, maxWidth)
		{
			//@line 286
			if (__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font)
			//@line 287
			__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font.fillText(__CLASS__CANVASRENDERINGCONTEXT2D__.canvas.__imageData.buffer, __CLASS__CANVASRENDERINGCONTEXT2D__.canvas.__imageData.width, text, x, y);
		};
		//@line 291
		var measureText = this.measureText = function (text)
		{
			//@line 293
			return null;
		};
		//@line 40
		this.DRAWWINDOW_DRAW_CARET = 1;
		//@line 41
		this.DRAWWINDOW_DO_NOT_FLUSH = 2;
		//@line 42
		this.DRAWWINDOW_DRAW_VIEW = 4;
		//@line 43
		this.DRAWWINDOW_USE_WIDGET_LAYERS = 8;
		//@line 44
		this.DRAWWINDOW_ASYNC_DECODE_IMAGES = 16;
		//@line 46
		this.canvas = null;
		//@line 48
		this.globalAlpha = 0;
		//@line 49
		this.lineCap = "";
		//@line 50
		this.lineDashOffset = 0;
		//@line 51
		this.lineJoin = "";
		//@line 52
		this.lineWidth = 0;
		//@line 53
		this.miterLimit = 0;
		//@line 54
		this.shadowBlur = 0;
		//@line 55
		this.shadowColor = "";
		//@line 56
		this.shadowOffsetX = 0;
		//@line 57
		this.shadowOffsetY = 0;
		//@line 58
		this.strokeStyle = 0;
		//@line 59
		this.textAlign = "";
		//@line 60
		this.textBaseline = "";
		//@line 61
		this.globalCompositeOperation = "";
		//@line 63
		this.__PRIVATE__.__fillStyle = "";
		//@line 64
		this.__PRIVATE__.__fontSetting = "";
		//@line 65
		this.__PRIVATE__.__font = null;
		var Destructor = this.Destructor = function ()
		{
			//@line 77
			{
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font && ((__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font.hasOwnProperty('Destructor') && __CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font.Destructor()) || !__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font.hasOwnProperty('Destructor')) && (delete __CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font);
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font = null
			};
			{
				__CLASS__CANVASRENDERINGCONTEXT2D__.fillStyle = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.font = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.DRAWWINDOW_DRAW_CARET = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.DRAWWINDOW_DO_NOT_FLUSH = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.DRAWWINDOW_DRAW_VIEW = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.DRAWWINDOW_USE_WIDGET_LAYERS = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.DRAWWINDOW_ASYNC_DECODE_IMAGES = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.canvas = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.globalAlpha = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.lineCap = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.lineDashOffset = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.lineJoin = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.lineWidth = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.miterLimit = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.shadowBlur = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.shadowColor = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.shadowOffsetX = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.shadowOffsetY = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.strokeStyle = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.textAlign = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.textBaseline = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.globalCompositeOperation = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__fillStyle = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__fontSetting = null;
				__CLASS__CANVASRENDERINGCONTEXT2D__.__PRIVATE__.__font = null;
				__BASE__ && ((__BASE__.hasOwnProperty('Destructor') && __BASE__.Destructor()) || !__BASE__.hasOwnProperty('Destructor')) && (delete __BASE__);
			}
			return true
		};
		//@line 68
		this.Constructor = function ()
		{
			var canvas = arguments[0];
			//@line 70
			__CLASS__CANVASRENDERINGCONTEXT2D__.canvas = canvas;
			//@line 71
			canvas.__imageData = new ImageData((canvas.width), (canvas.height));
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor(__CLASS__CANVASRENDERINGCONTEXT2D__$canvas__);
		return this;
	}
	__BASE__ = new HTMLCanvasContext(__CLASS__CANVASRENDERINGCONTEXT2D__$canvas__);
	CanvasRenderingContext2DClass.prototype = __BASE__;
	return new CanvasRenderingContext2DClass(__BASE__, __CLASS__CANVASRENDERINGCONTEXT2D__$canvas__);
}
CanvasRenderingContext2D.prototype =
{};
CanvasRenderingContext2D.prototype.__PRIVATE__ = {};
CanvasRenderingContext2D.prototype.__PROTECTED__ = {};