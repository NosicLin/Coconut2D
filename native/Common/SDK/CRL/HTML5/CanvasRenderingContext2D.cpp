#include "CanvasRenderingContext2D.hpp"


////////////////////////////////////////////////////////////////////////////////////////////////////
CanvasRenderingContext2D::~CanvasRenderingContext2D()
{
	if(__imageData)
	{
		__imageData = (delete __imageData, nullptr);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::arc(float x, float y, float radius, float startAngle, float endAngle, bool anticlockwise)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::arcTo(float x1, float y1, float x2, float y2, float radius)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::beginPath()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::bezierCurveTo(float cp1x, float cp1y, float cp2x, float cp2y, float x, float y)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::clearRect(float x, float y, float width, float height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::clip()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::closePath()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
ImageData* CanvasRenderingContext2D::createImageData(float width, float height)
{
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
HTMLCanvasGradient* CanvasRenderingContext2D::createLinearGradient(float x0, float y0, float x1, float y1)
{
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
HTMLCanvasPattern* CanvasRenderingContext2D::createPattern(Image* image, String repetition)
{
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
HTMLCanvasGradient* CanvasRenderingContext2D::createRadialGradient(float x0, float y0, float r0, float x1, float y1, float r1)
{
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CanvasRenderingContext2D::drawCustomFocusRing(HTMLElement* element)
{
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::drawSystemFocusRing(HTMLElement* element)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::fill()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::fillRect(float x, float y, float width, float height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
ImageData* CanvasRenderingContext2D::getImageData(float x, float y, float width, float height)
{
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::getLineDash()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CanvasRenderingContext2D::isPointInPath(float x, float y)
{
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool CanvasRenderingContext2D::isPointInStroke(float x, float y)
{
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::lineTo(float x, float y)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::moveTo(float x, float y)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::quadraticCurveTo(float cpx, float cpy, float x, float y)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::rect(float x, float y, float width, float height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::restore()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::rotate(float angle)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::save()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::scale(float x, float y)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::scrollPathIntoView()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::setLineDash(Array<float> segments)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::setTransform(float m11, float m12, float m21, float m22, float dx, float dy)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::stroke()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::strokeRect(float x, float y, float w, float h)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::strokeText(String text, float x, float y, float maxWidth)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::transform(float m11, float m12, float m21, float m22, float dx, float dy)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::translate(float x, float y)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::drawImage(Image* image, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::putImageData(ImageData* imagedata, float dx, float dy, float dirtyX, float dirtyY, float dirtyWidth, float dirtyHeight)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::fillText(String text, float x, float y, float maxWidth)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
HTMLTextMetrics* CanvasRenderingContext2D::measureText(String text)
{
	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
String CanvasRenderingContext2D::get_fillStyle()
{
	return __fillStyle;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::set_fillStyle(String v)
{
	__fillStyle = v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
String CanvasRenderingContext2D::get_font()
{
	return __fontSetting;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void CanvasRenderingContext2D::set_font(String v)
{
	__fontSetting = v;
}