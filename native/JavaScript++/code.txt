"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/ECMA/externs.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                             __ ___   ____     _   __      __  _               ____  _           ___
//	  / ____/___  _________  ____  __  __/ /|__ \ / __ \   / | / /___ _/ /_(_)   _____     / __ )(_)___  ____/ (_)___  ____ ______
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/_/ // / / /  /  |/ / __ `/ __/ / | / / _ \   / __  / / __ \/ __  / / __ \/ __ `/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_/ __// /_/ /  / /|  / /_/ / /_/ /| |/ /  __/  / /_/ / / / / / /_/ / / / / / /_/ (__  )
//	\____/\____/\___/\____/_/ /_/\__,_/\__/____/_____/  /_/ |_/\__,_/\__/_/ |___/\___/  /_____/_/_/ /_/\__,_/_/_/ /_/\__, /____/
//	                                                                                                                /____/
// ==================================================================================================================================

var __registerManager = function(manager){};
var __registerCallback = function(uid, type){};
var __unRegisterCallback = function(uid, type){};
var __ImageData_loadImage = function(data){};

function __Audio_load(url:String,obj:Audio) :Integer {}
var __Audio_position = function(id:Integer,time:Float) {}
var __Audio_play = function(id:Integer){};
var __Audio_pause = function(id:Integer){};
var __Audio_stop = function(id:Integer){};

var __WebGLRenderingContext_activeTexture = function(uid, texture){};
var __WebGLRenderingContext_attachShader = function(uid, program_uid, shader_uid){};
var __WebGLRenderingContext_bindAttribLocation = function(uid, program_uid, index, name){};
var __WebGLRenderingContext_bindBuffer = function(uid, target, buffer_uid){};
var __WebGLRenderingContext_bindFramebuffer = function(uid, target, framebuffer_uid){};
var __WebGLRenderingContext_bindRenderbuffer = function(uid, target, renderbuffer_uid){};
var __WebGLRenderingContext_bindTexture = function(uid, target, texture_uid){};
var __WebGLRenderingContext_blendColor = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_blendEquation = function(uid, mode){};
var __WebGLRenderingContext_blendEquationSeparate = function(uid, modeRGB, modeAlpha){};
var __WebGLRenderingContext_blendFunc = function(uid, sfactor, dfactor){};
var __WebGLRenderingContext_blendFuncSeparate = function(uid, srcRGB, dstRGB, srcAlpha, dstAlpha){};
var __WebGLRenderingContext_bufferData = function(){};
var __WebGLRenderingContext_bufferSubData = function(uid, target, offset, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_checkFramebufferStatus:Integer = function(uid, target){};
var __WebGLRenderingContext_clear = function(uid, mask){};
var __WebGLRenderingContext_clearColor = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_clearDepth = function(uid, depth){};
var __WebGLRenderingContext_clearStencil = function(uid, s){};
var __WebGLRenderingContext_colorMask = function(uid, red, green, blue, alpha){};
var __WebGLRenderingContext_compileShader = function(uid, shader_uid){};
var __WebGLRenderingContext_compressedTexImage2D = function(uid, target, level, internalformat, width, height, border, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_compressedTexSubImage2D = function(uid, target, level, xoffset, yoffset, width, height, format, data_buffer_uid, data_byteOffset, data_length){};
var __WebGLRenderingContext_copyTexImage2D = function(uid, target, level, internalformat, x, y, width, height, border){};
var __WebGLRenderingContext_copyTexSubImage2D = function(uid, target, level, xoffset, yoffset, x, y, width, height){};
var __WebGLRenderingContext_createBuffer:Integer = function(uid){};
var __WebGLRenderingContext_createFramebuffer:Integer = function(uid){};
var __WebGLRenderingContext_createProgram:Integer = function(uid){};
var __WebGLRenderingContext_createRenderbuffer:Integer = function(uid){};
var __WebGLRenderingContext_createShader:Integer = function(uid, type){};
var __WebGLRenderingContext_createTexture:Integer = function(uid){};
var __WebGLRenderingContext_cullFace = function(uid, mode){};
var __WebGLRenderingContext_deleteBuffer = function(uid, buffer_uid){};
var __WebGLRenderingContext_deleteFramebuffer = function(uid, framebuffer_uid){};
var __WebGLRenderingContext_deleteProgram = function(uid, program_uid){};
var __WebGLRenderingContext_deleteRenderbuffer = function(uid, renderbuffer_uid){};
var __WebGLRenderingContext_deleteShader = function(uid, shader_uid){};
var __WebGLRenderingContext_deleteTexture = function(uid, texture_uid){};
var __WebGLRenderingContext_depthFunc = function(uid, func){};
var __WebGLRenderingContext_depthMask = function(uid, flag){};
var __WebGLRenderingContext_depthRange = function(uid, zNear, zFar){};
var __WebGLRenderingContext_detachShader = function(uid, program_uid, shader_uid){};
var __WebGLRenderingContext_disable = function(uid, cap){};
var __WebGLRenderingContext_disableVertexAttribArray = function(uid, index){};
var __WebGLRenderingContext_drawArrays = function(uid, mode, first, count){};
var __WebGLRenderingContext_drawElements = function(uid, mode, count, type, offset){};
var __WebGLRenderingContext_enable = function(uid, cap){};
var __WebGLRenderingContext_enableVertexAttribArray = function(uid, index){};
var __WebGLRenderingContext_execute = function(uid, payload){};
var __WebGLRenderingContext_finish = function(uid){};
var __WebGLRenderingContext_flush = function(uid){};
var __WebGLRenderingContext_framebufferRenderbuffer = function(uid, target, attachment, renderbuffertarget, renderbuffer_uid){};
var __WebGLRenderingContext_framebufferTexture2D = function(uid, target, attachment, textarget, texture_uid, level){};
var __WebGLRenderingContext_frontFace = function(uid, mode){};
var __WebGLRenderingContext_generateMipmap = function(uid, target){};
var __WebGLRenderingContext_getActiveAttrib:Integer = function(uid, program_uid, index){};
var __WebGLRenderingContext_getActiveUniform:Integer = function(uid, program_uid, index){};
var __WebGLRenderingContext_getAttachedShaders:Array<WebGLShader> = function(uid, program_uid){};
var __WebGLRenderingContext_getAttribLocation:Integer = function(uid, program_uid, name){};
var __WebGLRenderingContext_getBufferParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getContextAttributes:Integer = function(uid){};
var __WebGLRenderingContext_getError:Integer = function(uid){};
var __WebGLRenderingContext_getExtension:Object = function(uid, name){};
var __WebGLRenderingContext_getFramebufferAttachmentParameter:String = function(uid, target, attachment, pname){};
var __WebGLRenderingContext_getParameter:String = function(uid, pname){};
var __WebGLRenderingContext_getProgramInfoLog:String = function(uid, program_uid){};
var __WebGLRenderingContext_getProgramParameter:Boolean = function(uid, program_uid, pname){};
var __WebGLRenderingContext_getRenderbufferParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getShaderInfoLog:String = function(uid, shader_uid){};
var __WebGLRenderingContext_getShaderParameter:Boolean = function(uid, shader_uid, pname){};
var __WebGLRenderingContext_getShaderPrecisionFormat:Integer = function(uid, shadertype, precisiontype){};
var __WebGLRenderingContext_getShaderSource:String = function(uid, shader_uid){};
var __WebGLRenderingContext_getSupportedExtensions:Array<String> = function(uid){};
var __WebGLRenderingContext_getTexParameter:String = function(uid, target, pname){};
var __WebGLRenderingContext_getUniform:String = function(uid, program_uid, location_uid){};
var __WebGLRenderingContext_getUniformLocation:Integer = function(uid, program_uid, name){};
var __WebGLRenderingContext_getVertexAttrib:String = function(uid, index, pname){};
var __WebGLRenderingContext_getVertexAttribOffset:Integer = function(uid, index, pname){};
var __WebGLRenderingContext_hint = function(uid, target, mode){};
var __WebGLRenderingContext_isBuffer:Boolean = function(uid, buffer_uid){};
var __WebGLRenderingContext_isContextLost:Boolean = function(uid){};
var __WebGLRenderingContext_isEnabled:Boolean = function(uid, cap){};
var __WebGLRenderingContext_isFramebuffer:Boolean = function(uid, framebuffer_uid){};
var __WebGLRenderingContext_isProgram:Boolean = function(uid, program_uid){};
var __WebGLRenderingContext_isRenderbuffer:Boolean = function(uid, renderbuffer_uid){};
var __WebGLRenderingContext_isShader:Boolean = function(uid, shader_uid){};
var __WebGLRenderingContext_isTexture:Boolean = function(uid, texture_uid){};
var __WebGLRenderingContext_lineWidth = function(uid, width){};
var __WebGLRenderingContext_linkProgram = function(uid, program_uid){};
var __WebGLRenderingContext_pixelStorei = function(uid, pname, param){};
var __WebGLRenderingContext_polygonOffset = function(uid, factor, units){};
var __WebGLRenderingContext_readPixels = function(uid, x, y, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length){};
var __WebGLRenderingContext_renderbufferStorage = function(uid, target, internalformat, width, height){};
var __WebGLRenderingContext_sampleCoverage = function(uid, value, invert){};
var __WebGLRenderingContext_scissor = function(uid, x, y, width, height){};
var __WebGLRenderingContext_shaderSource = function(uid, shader_uid, source){};
var __WebGLRenderingContext_stencilFunc = function(uid, func, ref, mask){};
var __WebGLRenderingContext_stencilFuncSeparate = function(uid, face, func, ref, mask){};
var __WebGLRenderingContext_stencilMask = function(uid, mask){};
var __WebGLRenderingContext_stencilMaskSeparate = function(uid, face, mask){};
var __WebGLRenderingContext_stencilOp = function(uid, fail, zfail, zpass){};
var __WebGLRenderingContext_stencilOpSeparate = function(uid, face, fail, zfail, zpass){};
var __WebGLRenderingContext_texImage2D = function(){};
var __WebGLRenderingContext_texParameterf = function(uid, target, pname, param){};
var __WebGLRenderingContext_texParameteri = function(uid, target, pname, param){};
var __WebGLRenderingContext_texSubImage2D = function(uid, target, level, xoffset, yoffset, width, height, format, type, pixels_buffer_uid, pixels_byteOffset, pixels_length){};
var __WebGLRenderingContext_uniform1f = function(uid, location_uid, x){};
var __WebGLRenderingContext_uniform1fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform1i = function(uid, location_uid, x){};
var __WebGLRenderingContext_uniform1iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform2f = function(uid, location_uid, x, y){};
var __WebGLRenderingContext_uniform2fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform2i = function(uid, location_uid, x, y){};
var __WebGLRenderingContext_uniform2iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform3f = function(uid, location_uid, x, y, z){};
var __WebGLRenderingContext_uniform3fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform3i = function(uid, location_uid, x, y, z){};
var __WebGLRenderingContext_uniform3iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform4f = function(uid, location_uid, x, y, z, w){};
var __WebGLRenderingContext_uniform4fv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniform4i = function(uid, location_uid, x, y, z, w){};
var __WebGLRenderingContext_uniform4iv = function(uid, location_uid, v_buffer_uid, v_byteOffset, v_length){};
var __WebGLRenderingContext_uniformMatrix2fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_uniformMatrix3fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_uniformMatrix4fv = function(uid, location_uid, transpose, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_useProgram = function(uid, program_uid){};
var __WebGLRenderingContext_validateProgram = function(uid, program_uid){};
var __WebGLRenderingContext_vertexAttrib1f = function(uid, indx, x){};
var __WebGLRenderingContext_vertexAttrib1fv = function(uid, indx, value_buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib2f = function(uid, indx, x, y){};
var __WebGLRenderingContext_vertexAttrib2fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib3f = function(uid, indx, x, y, z){};
var __WebGLRenderingContext_vertexAttrib3fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttrib4f = function(uid, indx, x, y, z, w){};
var __WebGLRenderingContext_vertexAttrib4fv = function(uid, indx, value__buffer_uid, value_byteOffset, value_length){};
var __WebGLRenderingContext_vertexAttribPointer = function(uid, indx, size, type, normalized, stride, offset){};
var __WebGLRenderingContext_viewport = function(uid, x, y, width, height){};

// ==================================================================================================================================
//	    ______________  ______           __                  _____           _       __     ____  __      _           __
//	   / ____/ ____/  |/  /   |         / /___ __   ______ _/ ___/__________(_)___  / /_   / __ \/ /_    (_)__  _____/ /______
//	  / __/ / /   / /|_/ / /| |    __  / / __ `/ | / / __ `/\__ \/ ___/ ___/ / __ \/ __/  / / / / __ \  / / _ \/ ___/ __/ ___/
//	 / /___/ /___/ /  / / ___ |   / /_/ / /_/ /| |/ / /_/ /___/ / /__/ /  / / /_/ / /_   / /_/ / /_/ / / /  __/ /__/ /_(__  )
//	/_____/\____/_/  /_/_/  |_|   \____/\__,_/ |___/\__,_//____/\___/_/  /_/ .___/\__/   \____/_.___/_/ /\___/\___/\__/____/
//	                                                                      /_/                      /___/
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
class Null {}
class Untyped {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Object
{
	public var prototype:Object;
	public function Destructor() {}
	public function toString():String {}
	public function toLocaleString():String {}
	public function valueOf():Object {}
	public function hasOwnProperty(name:String):Boolean {}
	public function isPrototypeOf(o:Object):Boolean {}
	public function propertyIsEnumerable(name:String):Boolean {}
	public function defineProperty(object:Object, name:String, params:Object){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Array
{
	public var length:Number;
	public function concat(args:Array):Array {}
	public function join(seperator:String):String {}
	public function pop():Array {}
	public function push(args:Object):Object {}
	public function reverse():Array {}
	public function shift():Array {}
	public function slice(start:Number, optional end:Number):Array {}
	public function sort(funct:Function):Array {}
	public function splice(start:Number, deletecount:Number, optional items:Number):Array {}
	public function unshift(start:Number):Array {}
	public function forEach(item:Object):Array {}
	public function size():Number {}
	public function clear() {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Function
{
	public var length:Number;
	public function apply(thisObject:Object, args:Object):Object {}
	public function call(thisObject:Object, args:Object):Object {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Global
{
	public var NaN:Number;
	public var Infinity:Number;
	public var innerWidth:Integer;
	public var innerHeight:Integer;
	public var deviceRotation:Float;
	public var devicePixelRatio:Float;
	public function Destructor() {}
	public function eval(s:String):Object {}
	public function parseInt(s:String, optional radix:Number):Integer {}
	public function parseFloat(s:String):Float {}
	public function escape(s:String):String {}
	public function unescape(s:String):String {}
	public function isNaN(number:Object):Boolean {}
	public function isFinite(number:Object):Boolean {}
	public function decodeURI(encodedURI:String):String {}
	public function decodeURIComponent(uriComponent:String):String {}
	public function encodeURIComponent(uriComponent:String):String {}
	public function encodeURI(URI:String):String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class String
{
	public var length:Number;
	public function fromCharCode(charCode:Number):String {}
	public function charAt(position:Number):String {}
	public function charCodeAt(position:Number):Number {}
	public function concat(value:String):String {}
	public function indexOf(searchString:String, startPosition:Number):Number {}
	public function lastIndexOf(searchString:String, startPosition:Number):Number {}
	public function localeCompare(otherString:String):Number {}
	public function match(regexp:RegExp):Array {}
	public function replace(regexp:RegExp, replaceValue:String):String {}
	public function search(regexp:RegExp):Number {}
	public function slice(start:Number, end:Number):String {}
	public function split(separator:String, limit:Number):Array {}
	public function substring(start:Number, end:Number):String {}
	public function toLowerCase():String {}
	public function toLocaleLowerCase():String {}
	public function toUpperCase():String {}
	public function toLocaleUpperCase():String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Number
{
	public var MIN_VALUE:Number;
	public var MAX_VALUE:Number;
	public var NEGATIVE_INFINITY:Number;
	public var POSITIVE_INFINITY:Number;
	public function toFixed(fractionDigits:Number):String {}
	public function toExponential(fractionDigits:Number):String {}
	public function toPrecision(fractionDigits:Number):String {}
}

class Integer : Number 	{}
class Float : Number 	{}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Time : Number
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Boolean
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Date
{
	public function UTC(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function parse(string:String):Number {}
	public function toDateString():String {}
	public function toTimeString():String {}
	public function toLocaleString():String {}
	public function toLocaleDateString():String {}
	public function toLocaleTimeString():String {}
	public function valueOf():Object {}
	public function getFullYear():Number {}
	public function getTime():Number {}
	public function getUTCFullYear():Number {}
	public function getMonth():Number {}
	public function getUTCMonth():Number {}
	public function getDate():Number {}
	public function getUTCDate():Number {}
	public function getDay():Number {}
	public function getUTCDay():Number {}
	public function getHours():Number {}
	public function getUTCHours():Number {}
	public function getMinutes():Number {}
	public function getUTCMinutes():Number {}
	public function getSeconds():Number {}
	public function getUTCSeconds():Number {}
	public function getMilliseconds():Number {}
	public function getUTCMilliseconds():Number {}
	public function getTimezoneOffset():Number {}
	public function setTime(value:Number):Number {}
	public function setMilliseconds(value:Number):Number {}
	public function setUTCMilliseconds(ms:Number):Number {}
	public function setSeconds(sec:Number, ms:Number):Number {}
	public function setUTCSeconds(sec:Number, ms:Number):Number {}
	public function setMinutes(min:Number, sec:Number, ms:Number):Number {}
	public function setUTCMinute(min:Number, sec:Number, ms:Number):Number {}
	public function setHours(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function setUTCHours(hour:Number, min:Number, sec:Number, ms:Number):Number {}
	public function setDate(date:Number):Number {}
	public function setUTCDate(date:Number):Number {}
	public function setMonth(month:Number, date:Number):Number {}
	public function setUTCMonth(month:Number, date:Number):Number {}
	public function setFullYear(year:Number, month:Number, date:Number):Number {}
	public function setUTCFullYear(year:Number, month:Number, date:Number){};
	public function toUTCString():String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Math
{
	public static var E:Float;
	public static var LN10:Float;
	public static var LN2:Float;
	public static var LOG2E:Float;
	public static var LOG10E:Float;
	public static var PI:Float;
	public static var SQRT1_2:Float;
	public static var SQRT2:Float;
	public static function abs(x:Number):Number {}
	public static function acos(x:Number):Float {}
	public static function asin(x:Number):Float {}
	public static function atan(x:Number):Float {}
	public static function atan2(x:Number, y:Number):Float {}
	public static function ceil(x:Number):Number {}
	public static function cos(x:Number):Float {}
	public static function exp(x:Number):Float {}
	public static function floor(x:Number):Integer {}
	public static function log(x:Number):Float {}
	public static function max(a:Number, b:Number):Number {}
	public static function min(a:Number, b:Number):Number {}
	public static function pow(x:Number, y:Number):Float {}
	public static function random():Float {}
	public static function round(x:Number):Number {}
	public static function sin(x:Number):Float {}
	public static function sqrt(x:Number):Float {}
	public static function tan(x:Number):Float {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class RegExp
{
	public var source:String;
	public var global:Boolean;
	public var ignoreCase:Boolean;
	public var multiline:Boolean;
	public var lastIndex:Number;
	public function exec(string:String):Array {}
	public function test(string:String):Boolean {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBuffer
{
	public var byteLength:Number;
    public function slice(begin:Number, end:Number): ArrayBuffer {}
    public var __uid:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBufferView
{
	public var buffer:ArrayBuffer;
	public var byteLength:Number;
	public var __uid:Integer;
	public function Destructor() {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Float32Array : ArrayBufferView
{
	public var length:Number;
	public var byteOffset:Number;
	public var BYTES_PER_ELEMENT:Number;
	public var __uid:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Int32Array : ArrayBufferView
{
	public var length:Number;
	public var byteOffset:Number;
	public var BYTES_PER_ELEMENT:Number;
	public var __uid:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Uint8Array : ArrayBufferView
{
	public var length:Number;
	public var byteOffset:Number;
	public var BYTES_PER_ELEMENT:Number;
	public var __uid:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Error
{
	public var name:String;
	public var message:String
}

class EvalError :Error {}
class RangeError :Error {}
class ReferenceError :Error {}
class SyntaxError :Error {}
class TypeError :Error {}

// ==================================================================================================================================
//	   ________      __          __   _    __           _       __    __
//	  / ____/ /___  / /_  ____ _/ /  | |  / /___ ______(_)___ _/ /_  / /__  _____
//	 / / __/ / __ \/ __ \/ __ `/ /   | | / / __ `/ ___/ / __ `/ __ \/ / _ \/ ___/
//	/ /_/ / / /_/ / /_/ / /_/ / /    | |/ / /_/ / /  / / /_/ / /_/ / /  __(__  )
//	\____/_/\____/_.___/\__,_/_/     |___/\__,_/_/  /_/\__,_/_.___/_/\___/____/
//
// ==================================================================================================================================

var global:Global;
var engine:CocoEngine;
var window:HTMLWindow;
var document:HTMLDocument;
var gl:WebGLRenderingContext;
var canvas:HTMLCanvasElement;


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/ECMA/externs.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/Constants.js";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 __              __
//	  / ____/___  ____  _____/ /_____ _____  / /______
//	 / /   / __ \/ __ \/ ___/ __/ __ `/ __ \/ __/ ___/
//	/ /___/ /_/ / / / (__  ) /_/ /_/ / / / / /_(__  )
//	\____/\____/_/ /_/____/\__/\__,_/_/ /_/\__/____/
//
// ==================================================================================================================================

"#ignore_errors_begin";
var global = this;
var engine = null;
var gl = null;

if(global["EventTarget"])
{
	// Replace EventTarget native object with JavaScript object
	global.EventTarget = function() {};
}

"#ignore_errors_end";

var RADIANS = Math.PI / 180.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
if(!global["trace"])
{
	global.trace = function(msg) { console.log(msg); };

	"#ignore_errors_begin";
	Image.prototype.load = function(src) { this.src = src; };
	"#ignore_errors_end";

	function State(){};
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Extensions of JavaScript Array and Object classes to match C++ Vector and Map.

Object.defineProperty(Array.prototype, "size", { value: function()
{
	return this.length;
}});

Object.defineProperty(Array.prototype, "clear", { value: function()
{
	while(this.length) { this.pop(); }
}});


////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Enum for screen resolution dpi.
 * @enum {number}
 */
var SCREEN_RESOLUTION_DPI_ENUM =
{
    RESOLUTION_nodpi							: 0,
    RESOLUTION_ldpi								: 1,
    RESOLUTION_mdpi								: 2,
    RESOLUTION_tvdpi							: 3,
    RESOLUTION_hdpi								: 4,
    RESOLUTION_xhdpi							: 5,
    RESOLUTION_Retina							: 5,
    RESOLUTION_DefaultDpi						: 0
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Enum for clip symbol loop synchronization.
 * @enum {number}
 */
var COCO_CLIP_SYMBOL_LOOP_ENUM =
{
    CLIP_SYMBOL_LOOP_CONTINUOUS					: 0,
    CLIP_SYMBOL_LOOP_SYNCHRONIZED_WITH_PARENT	: 1,
    CLIP_SYMBOL_LOOP_ONCE						: 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Enum for keyframe interpolation calculation.
 * @enum {number}
 */
var COCO_KEYFRAME_INTERPOLATION_ENUM =
{
    KEYFRAME_INTERPOLATION_NONE					: 0,
    KEYFRAME_INTERPOLATION_MOTION_TWEEN			: 1,
    KEYFRAME_INTERPOLATION_ECHO					: 2,
    KEYFRAME_INTERPOLATION_PHYSICS				: 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////
var COCO_STOP_ON_CURRENT_FRAME					= -1;

















"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/Constants.js";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/Coconut.js";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                             __     ____              __  _                   __
//	  / ____/___  _________  ____  __  __/ /_   / __ \__  ______  / /_(_)___ ___  ___     / /   ____ ___  _____  _____
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/  / /_/ / / / / __ \/ __/ / __ `__ \/ _ \   / /   / __ `/ / / / _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_   / _, _/ /_/ / / / / /_/ / / / / / /  __/  / /___/ /_/ / /_/ /  __/ /
//	\____/\____/\___/\____/_/ /_/\__,_/\__/  /_/ |_|\__,_/_/ /_/\__/_/_/ /_/ /_/\___/  /_____/\__,_/\__, /\___/_/
//	                                                                                               /____/
// ==================================================================================================================================

"use strict";

"#include Constants.js"

var ___COCONUT_VERSION = 1.0;


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/Coconut.js";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoState.jspp";

////////////////////////////////////////////////////////////////////////////////////////////////////
class State
{
	public var __name:String;
	public var params:Object;
	public function Destructor() {}
	public virtual function enter() {}
	public virtual function exit() {}
	public abstract function tick(time:Time) {}
	public virtual function paint(gl:WebGLRenderingContext, time:Time) {}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoState.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoTest.jspp";
state class CocoTest
{
	public var v1:Boolean;
	private var v2:Boolean;
	protected var v3:Boolean;

	public function Constructor()
	{
		v1 = v2 = v3 = false;
		p1 = p2 = p3 = false;
	}

	public function Destructor()
	{
		v1 = v2 = v3 = false;
		p1 = p2 = p3 = false;
	}

	public function f1():Boolean { return v1 && v2 && v3 && p1 && p2 && p3; }
	private function f2():Boolean { return v1 && v2 && v3 && p1 && p2 && p3; }
	protected function f3():Boolean { return v1 && v2 && v3 && p1 && p2 && p3; }

	public state s1
	{
		function enter() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function exit() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function tick() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function paint() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
	}

	private state s2
	{
		function enter() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function exit() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function tick() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function paint() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
	}

	protected state s3
	{
		function enter() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function exit() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function tick() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
		function paint() 	{ v1 = v2 = v3 = p1 = p2 = p3 = false; }
	}

	public property p1
	{
		function get():Boolean  { return v1 && v2 && v3 && f1() && f2() && f3(); }
		function set(v:Boolean) { v1=v; v2=v; v3=v; p1=v; p2=v; p3=v; }
	}

	private property p2
	{
		function get():Boolean  { return v1 && v2 && v3 && f1() && f2() && f3(); }
		function set(v:Boolean) { v1=v; v2=v; v3=v; p1=v; p2=v; p3=v; }
	}

	protected property p3
	{
		function get():Boolean  { return v1 && v2 && v3 && f1() && f2() && f3(); }
		function set(v:Boolean) { v1=v; v2=v; v3=v; p1=v; p2=v; p3=v; }
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoTest.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/EventTarget.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    ______                 __ ______                      __
//	   / ____/   _____  ____  / //_  __/___ __________ ____  / /_
//	  / __/ | | / / _ \/ __ \/ __// / / __ `/ ___/ __ `/ _ \/ __/
//	 / /___ | |/ /  __/ / / / /_ / / / /_/ / /  / /_/ /  __/ /_
//	/_____/ |___/\___/_/ /_/\__//_/  \__,_/_/   \__, /\___/\__/
//	                                           /____/
// ==================================================================================================================================

class EventTarget
{
	public function Constructor()
	{
	}
}
"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/EventTarget.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/DeviceEvent.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    ______                 __
//	   / ____/   _____  ____  / /_
//	  / __/ | | / / _ \/ __ \/ __/
//	 / /___ | |/ /  __/ / / / /_
//	/_____/ |___/\___/_/ /_/\__/
//
// ==================================================================================================================================

"#include EventTarget.jspp"

class DeviceEvent
{
	public const CAPTURING_PHASE:Integer 	= 1;
	public const AT_TARGET:Integer 			= 2;
	public const BUBBLING_PHASE:Integer 	= 3;

	public var type:String;
	public var target:EventTarget;
	public var currentTarget:EventTarget;
	public var eventPhase:Integer;
	public var bubbles:Boolean;
	public var cancelable:Boolean;
	public var timeStamp:Integer;
	public var defaultPrevented:Boolean;

	public var view:HTMLWindow;
	public var detail:Integer;

	public var touches:TouchList;           // all touches
	public var targetTouches:TouchList;     // all touches in this TouchEvent Target
	public var changedTouches:TouchList;    // all touches changed in the current event
	public var scale:Float;     			// distance (since event start) between fingers as multiplier of initial value. Initially 1.0, zoom out (pinch) < 1.0, zoom in > 1.0.
	public var rotation:Float;  			// rotation delta (since event start) in degrees (clockwise is positive). Initially 0.0.

	public var __clientX:Integer;
	public var __clientY:Integer;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		type="";
		target=null;
		currentTarget=null;
		eventPhase=CAPTURING_PHASE;
		bubbles=true;
		cancelable=true;
		timeStamp=0;
		defaultPrevented=false;
		scale = 0.0;
		rotation = 0.0;
		__clientX = 0;
		__clientY = 0;
		touches = new TouchList();
		targetTouches = new TouchList();
		changedTouches = new TouchList();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete touches;
		delete targetTouches;
		delete changedTouches;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function stopPropagation()
	{
		bubbles = false;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function preventDefault()
	{
		defaultPrevented = true;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function initEvent(type:String, canBubble:Boolean, cancelable:Boolean)
	{
		eventPhase = CAPTURING_PHASE;
		this.type = type;
		this.bubbles = canBubble;
		this.cancelable = cancelable;
		this.timeStamp = (new Date()).getTime();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function initUIEvent(type:String, canBubble:Boolean, cancelable:Boolean, view:HTMLWindow, detail:Integer)
	{
		this.initEvent(type, canBubble, cancelable);
		this.view = view;
		this.detail = detail;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function initTouchEvent(type:String, canBubble:Boolean, cancelable:Boolean, view:HTMLWindow, detail:Integer, screenX:Integer, screenY:Integer, clientX:Integer, clientY:Integer, ctrlKey:Boolean, altKey:Boolean, shiftKey:Boolean, metaKey:Boolean, touches:TouchList, targetTouches:TouchList, changedTouches:TouchList, scale:Float, rotation:Float)
     {
     	this.initUIEvent(type, canBubble, cancelable, view, detail);
     	this.scale = scale;
     	this.rotation = rotation;
     	this.touches = touches;
     	this.targetTouches = targetTouches;
     	this.changedTouches = changedTouches;
     }
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/DeviceEvent.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLAudioElement.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____    ___             ___       ________                          __
//	   / / / /_  __/  |/  / /   /   | __  ______/ (_)___  / ____/ /__  ____ ___  ___  ____  / /_
//	  / /_/ / / / / /|_/ / /   / /| |/ / / / __  / / __ \/ __/ / / _ \/ __ `__ \/ _ \/ __ \/ __/
//	 / __  / / / / /  / / /___/ ___ / /_/ / /_/ / / /_/ / /___/ /  __/ / / / / /  __/ / / / /_
//	/_/ /_/ /_/ /_/  /_/_____/_/  |_\__,_/\__,_/_/\____/_____/_/\___/_/ /_/ /_/\___/_/ /_/\__/
//
// ==================================================================================================================================

class Audio
{
	private var __uid:Integer;
	private var __currentTime:Float;

	// Playback state
	public var duration:Float;
	public var paused:Boolean;
	public var ended:Boolean;
	public var autoplay:Boolean;
	public var loop:Boolean;
	public var src:String;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(url:String)
	{
		__uid = __Audio_load(url, this);
		if(__uid) src = url;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		trace("Delete Audio " + src);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function play()
	{
		__Audio_play(__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function pause()
	{
		__Audio_pause(__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property currentTime
	{
		function get():Float
		{
			return __currentTime;
		}

		function set(time:Float)
		{
			__Audio_position(__uid, time);
		}
	}
}
"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLAudioElement.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLCanvasElement.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____    ______                            ________                          __
//	   / / / /_  __/  |/  / /   / ____/___ _____ _   ______ ______/ ____/ /__  ____ ___  ___  ____  / /_
//	  / /_/ / / / / /|_/ / /   / /   / __ `/ __ \ | / / __ `/ ___/ __/ / / _ \/ __ `__ \/ _ \/ __ \/ __/
//	 / __  / / / / /  / / /___/ /___/ /_/ / / / / |/ / /_/ (__  ) /___/ /  __/ / / / / /  __/ / / / /_
//	/_/ /_/ /_/ /_/  /_/_____/\____/\__,_/_/ /_/|___/\__,_/____/_____/_/\___/_/ /_/ /_/\___/_/ /_/\__/
//
// ==================================================================================================================================

"#include Constants.js"

class HTMLCanvasElement
{
	public var width:Float;
	public var height:Float;

	public function Constructor()
	{
		width = 0;
		height = 0;
	}

	public function getContext(contextId:String) :WebGLRenderingContext
	{
		return new WebGLRenderingContext(this);
	}
}




"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLCanvasElement.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLElement.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____    ________                          __
//	   / / / /_  __/  |/  / /   / ____/ /__  ____ ___  ___  ____  / /_
//	  / /_/ / / / / /|_/ / /   / __/ / / _ \/ __ `__ \/ _ \/ __ \/ __/
//	 / __  / / / / /  / / /___/ /___/ /  __/ / / / / /  __/ / / / /_
//	/_/ /_/ /_/ /_/  /_/_____/_____/_/\___/_/ /_/ /_/\___/_/ /_/\__/
//
// ==================================================================================================================================

"#include Constants.js"
"#include HTMLCanvasElement.jspp"

class HTMLElement
{
	public function Constructor()
	{
	}

	public function appendChild(node:HTMLCanvasElement) :HTMLCanvasElement
	{
		return node;
	}
}







"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLElement.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLDocument.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____    ____                                        __
//	   / / / /_  __/  |/  / /   / __ \____  _______  ______ ___  ___  ____  / /_
//	  / /_/ / / / / /|_/ / /   / / / / __ \/ ___/ / / / __ `__ \/ _ \/ __ \/ __/
//	 / __  / / / / /  / / /___/ /_/ / /_/ / /__/ /_/ / / / / / /  __/ / / / /_
//	/_/ /_/ /_/ /_/  /_/_____/_____/\____/\___/\__,_/_/ /_/ /_/\___/_/ /_/\__/
//
// ==================================================================================================================================

"#include Constants.js"
"#include HTMLElement.jspp"
"#include HTMLCanvasElement.jspp"

class HTMLDocument
{
	public var body:HTMLElement;

	public function Constructor()
	{
		body = new HTMLElement();
	}

	public function Destructor()
	{
		delete body;
	}

	public function createElement(tagName:String) :HTMLCanvasElement
	{
		return new HTMLCanvasElement();
	}
}





"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLDocument.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLWindow.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____ _       ___           __
//	   / / / /_  __/  |/  / /| |     / (_)___  ____/ /___ _      __
//	  / /_/ / / / / /|_/ / / | | /| / / / __ \/ __  / __ \ | /| / /
//	 / __  / / / / /  / / /__| |/ |/ / / / / / /_/ / /_/ / |/ |/ /
//	/_/ /_/ /_/ /_/  /_/_____/__/|__/_/_/ /_/\__,_/\____/|__/|__/
//
// ==================================================================================================================================

"#include Constants.js"
"#include HTMLDocument.jspp"
"#include DeviceEvent.jspp"

class HTMLWindow
{
	public var __uid:Integer;
	public var document:HTMLDocument;
	public var innerHeight:Integer;
	public var innerWidth:Integer;
	public var devicePixelRatio:Float;

	public var __deviceEvent:DeviceEvent;
	public var __elements:Array<Function>;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__uid = 0;
		document = new HTMLDocument();
		innerHeight = global.innerHeight;
		innerWidth = global.innerWidth;
		devicePixelRatio = global.devicePixelRatio;
		__deviceEvent = new DeviceEvent();
		__registerManager(this, dispatchEvent, __deviceEvent);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete document;
		delete __deviceEvent;
		delete __elements;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addEventListener(eventType:String, listener:Function, optional useCapture:Boolean)
	{
		__registerCallback(__uid, eventType);
		__elements[eventType] = listener;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeEventListener(eventType:String, listener:Function, optional useCapture:Boolean)
	{
		__elements[eventType] = null;
		__unRegisterCallback(__uid, eventType);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function dispatchEvent(uid:Integer, eventType:String)
	{
		__deviceEvent.type = eventType;
		var callback:Function = __elements[eventType];
		if(callback) callback(this.__deviceEvent);
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLWindow.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/ImageData.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    ____                           ____        __
//	   /  _/___ ___  ____ _____ ____  / __ \____ _/ /_____ _
//	   / // __ `__ \/ __ `/ __ `/ _ \/ / / / __ `/ __/ __ `/
//	 _/ // / / / / / /_/ / /_/ /  __/ /_/ / /_/ / /_/ /_/ /
//	/___/_/ /_/ /_/\__,_/\__, /\___/_____/\__,_/\__/\__,_/
//	                    /____/
// ==================================================================================================================================

"#include Constants.js"

class ImageData
{
	public var buffer:ArrayBuffer;
	public var data:Int32Array;
	public var src:String;
	public var width:Integer;
	public var height:Integer;

	public function Constructor(a0:String, optional a1:String)
	{
		buffer = null;
		data = null;
		width = 0;
		height = 0;
		src = "";

		if(isNaN(a0))
		{
			var data:ImageDataBuffer = __ImageData_loadImage(a0);
			if(data)
			{
				src = a0;
				buffer = data.buffer;
				width = data.width;
				height = data.height;
			}
		}
		else if(!isNaN(a0) && !isNaN(a1))
		{
			width = parseInt(a0);
			height = parseInt(a1);
			data = new Int32Array(width * height);
			buffer = data.buffer;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete buffer;
		delete data;
	}
}










"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/ImageData.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLImageElement.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____    ____                           ________                          __
//	   / / / /_  __/  |/  / /   /  _/___ ___  ____ _____ ____  / ____/ /__  ____ ___  ___  ____  / /_
//	  / /_/ / / / / /|_/ / /    / // __ `__ \/ __ `/ __ `/ _ \/ __/ / / _ \/ __ `__ \/ _ \/ __ \/ __/
//	 / __  / / / / /  / / /____/ // / / / / / /_/ / /_/ /  __/ /___/ /  __/ / / / / /  __/ / / / /_
//	/_/ /_/ /_/ /_/  /_/_____/___/_/ /_/ /_/\__,_/\__, /\___/_____/_/\___/_/ /_/ /_/\___/_/ /_/\__/
//	                                             /____/
// ==================================================================================================================================

"#include Constants.js"
"#include ImageData.jspp"

class Image // HTMLImageElement
{
	public var __imageData:ImageData;
	public var src:String;
	public var width:Integer;
	public var height:Integer;
	public var naturalWidth:Integer;
	public var naturalHeight:Integer;
	public var complete:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__imageData = null;
		src = "";
		width = 0;
		height = 0;
		naturalWidth = 0;
		naturalHeight = 0;
		complete = false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __imageData;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function load(url:String)
	{
		__imageData = new ImageData(url);
		src = __imageData.src;
		width = __imageData.width;
		height = __imageData.height;
		naturalWidth = __imageData.width;
		naturalHeight = __imageData.height;
		complete = true;
	}
}



"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/HTMLImageElement.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/ImageDataBuffer.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    ____                           ____        __        ____        ________
//	   /  _/___ ___  ____ _____ ____  / __ \____ _/ /_____ _/ __ )__  __/ __/ __/__  _____
//	   / // __ `__ \/ __ `/ __ `/ _ \/ / / / __ `/ __/ __ `/ __  / / / / /_/ /_/ _ \/ ___/
//	 _/ // / / / / / /_/ / /_/ /  __/ /_/ / /_/ / /_/ /_/ / /_/ / /_/ / __/ __/  __/ /
//	/___/_/ /_/ /_/\__,_/\__, /\___/_____/\__,_/\__/\__,_/_____/\__,_/_/ /_/  \___/_/
//	                    /____/
// ==================================================================================================================================

"#include Constants.js"

class ImageDataBuffer
{
	public var buffer:ArrayBuffer;
	public var width:Integer;
	public var height:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete buffer;
	}
}



"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/ImageDataBuffer.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/Touch.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	  ______                 __
//	 /_  __/___  __  _______/ /_
//	  / / / __ \/ / / / ___/ __ \
//	 / / / /_/ / /_/ / /__/ / / /
//	/_/  \____/\__,_/\___/_/ /_/
//
// ==================================================================================================================================

"#include EventTarget.jspp"

///////////////////////////////////////////////////////////////////////////////////////////////
class Touch
{
    public var identifier:Integer;
    public var screenX:Integer;
    public var screenY:Integer;
    public var clientX:Integer;
    public var clientY:Integer;
    public var pageX:Integer;
    public var pageY:Integer;
    public var target:EventTarget;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		identifier	= 0;
		target		= null;
		screenX		= 0;
		screenY		= 0;
		clientX		= 0;
		clientY		= 0;
		pageX		= 0;
		pageY		= 0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function initTouch(identifier:Integer, target:EventTarget, screenX:Integer, screenY:Integer, clientX:Integer, clientY:Integer, pageX:Integer, pageY:Integer)
	{
		this.identifier	= identifier;
		this.target		= target;
		this.screenX	= screenX;
		this.screenY	= screenY;
		this.clientX	= clientX;
		this.clientY	= clientY;
		this.pageX		= pageX;
		this.pageY		= pageY;
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/Touch.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/TouchList.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	  ______                 __    __    _      __
//	 /_  __/___  __  _______/ /_  / /   (_)____/ /_
//	  / / / __ \/ / / / ___/ __ \/ /   / / ___/ __/
//	 / / / /_/ / /_/ / /__/ / / / /___/ (__  ) /_
//	/_/  \____/\__,_/\___/_/ /_/_____/_/____/\__/
//
// ==================================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////
class TouchList : Array<Touch>
{
	public var length:Integer;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		for(var i:Integer=0; i<=5; i++)
		{
			var touch:Touch = new Touch();
			touch.initTouch(i, null, 0, 0, 0, 0, 0, 0);
			this.push(touch);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function item(index:Integer) : Touch
	{
		return this[index];
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/html5/TouchList.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLActiveInfo.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ___        __  _            ____      ____
//	| |     / /__  / /_  / ____/ /   /   | _____/ /_(_)   _____  /  _/___  / __/___
//	| | /| / / _ \/ __ \/ / __/ /   / /| |/ ___/ __/ / | / / _ \ / // __ \/ /_/ __ \
//	| |/ |/ /  __/ /_/ / /_/ / /___/ ___ / /__/ /_/ /| |/ /  __// // / / / __/ /_/ /
//	|__/|__/\___/_.___/\____/_____/_/  |_\___/\__/_/ |___/\___/___/_/ /_/_/  \____/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLActiveInfo : WebGLObject
{
	public function Constructor(uid:Integer, program_uid:Integer, index:Integer)
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLActiveInfo.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLBuffer.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ____        ________
//	| |     / /__  / /_  / ____/ /   / __ )__  __/ __/ __/__  _____
//	| | /| / / _ \/ __ \/ / __/ /   / __  / / / / /_/ /_/ _ \/ ___/
//	| |/ |/ /  __/ /_/ / /_/ / /___/ /_/ / /_/ / __/ __/  __/ /
//	|__/|__/\___/_.___/\____/_____/_____/\__,_/_/ /_/  \___/_/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLBuffer : WebGLObject
{
	public function Constructor(uid:Integer)
	{
	}
}




"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLBuffer.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLContextAttributes.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ______            __            __  ___   __  __       _ __          __
//	| |     / /__  / /_  / ____/ /   / ____/___  ____  / /____  _  __/ /_/   | / /_/ /______(_) /_  __  __/ /____  _____
//	| | /| / / _ \/ __ \/ / __/ /   / /   / __ \/ __ \/ __/ _ \| |/_/ __/ /| |/ __/ __/ ___/ / __ \/ / / / __/ _ \/ ___/
//	| |/ |/ /  __/ /_/ / /_/ / /___/ /___/ /_/ / / / / /_/  __/>  </ /_/ ___ / /_/ /_/ /  / / /_/ / /_/ / /_/  __(__  )
//	|__/|__/\___/_.___/\____/_____/\____/\____/_/ /_/\__/\___/_/|_|\__/_/  |_\__/\__/_/  /_/_.___/\__,_/\__/\___/____/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLContextAttributes : WebGLObject
{
	public function Constructor(uid:Integer)
	{
	}
}



"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLContextAttributes.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLFramebuffer.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ______                          __          ________
//	| |     / /__  / /_  / ____/ /   / ____/________ _____ ___  ___  / /_  __  __/ __/ __/__  _____
//	| | /| / / _ \/ __ \/ / __/ /   / /_  / ___/ __ `/ __ `__ \/ _ \/ __ \/ / / / /_/ /_/ _ \/ ___/
//	| |/ |/ /  __/ /_/ / /_/ / /___/ __/ / /  / /_/ / / / / / /  __/ /_/ / /_/ / __/ __/  __/ /
//	|__/|__/\___/_.___/\____/_____/_/   /_/   \__,_/_/ /_/ /_/\___/_.___/\__,_/_/ /_/  \___/_/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLFramebuffer : WebGLObject
{
	public function Constructor(uid:Integer)
	{
	}
}




"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLFramebuffer.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLObject.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ____  __      _           __
//	| |     / /__  / /_  / ____/ /   / __ \/ /_    (_)__  _____/ /_
//	| | /| / / _ \/ __ \/ / __/ /   / / / / __ \  / / _ \/ ___/ __/
//	| |/ |/ /  __/ /_/ / /_/ / /___/ /_/ / /_/ / / /  __/ /__/ /_
//	|__/|__/\___/_.___/\____/_____/\____/_.___/_/ /\___/\___/\__/
//	                                         /___/
// ==================================================================================================================================

"#include Constants.js"

class WebGLObject
{
	public var __uid:Integer;

	public function Constructor(uid:Integer)
	{
		__uid = uid;
	}
}
"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLObject.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLRenderbuffer.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ____                 __          __          ________
//	| |     / /__  / /_  / ____/ /   / __ \___  ____  ____/ /__  _____/ /_  __  __/ __/ __/__  _____
//	| | /| / / _ \/ __ \/ / __/ /   / /_/ / _ \/ __ \/ __  / _ \/ ___/ __ \/ / / / /_/ /_/ _ \/ ___/
//	| |/ |/ /  __/ /_/ / /_/ / /___/ _, _/  __/ / / / /_/ /  __/ /  / /_/ / /_/ / __/ __/  __/ /
//	|__/|__/\___/_.___/\____/_____/_/ |_|\___/_/ /_/\__,_/\___/_/  /_.___/\__,_/_/ /_/  \___/_/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLRenderbuffer : WebGLObject
{
	public function Constructor(uid:Integer)
	{
	}
}




"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLRenderbuffer.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLShader.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________   _____ __              __
//	| |     / /__  / /_  / ____/ /  / ___// /_  ____ _____/ /__  _____
//	| | /| / / _ \/ __ \/ / __/ /   \__ \/ __ \/ __ `/ __  / _ \/ ___/
//	| |/ |/ /  __/ /_/ / /_/ / /______/ / / / / /_/ / /_/ /  __/ /
//	|__/|__/\___/_.___/\____/_____/____/_/ /_/\__,_/\__,_/\___/_/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLShader : WebGLObject
{
	protected var type:Integer;

	public function Constructor(uid:Integer, type:Integer)
	{
		this.type = type;
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLShader.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLShaderPrecisionFormat.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________   _____ __              __          ____                 _      _             ______                           __
//	| |     / /__  / /_  / ____/ /  / ___// /_  ____ _____/ /__  _____/ __ \________  _____(_)____(_)___  ____  / ____/___  _________ ___  ____ _/ /_
//	| | /| / / _ \/ __ \/ / __/ /   \__ \/ __ \/ __ `/ __  / _ \/ ___/ /_/ / ___/ _ \/ ___/ / ___/ / __ \/ __ \/ /_  / __ \/ ___/ __ `__ \/ __ `/ __/
//	| |/ |/ /  __/ /_/ / /_/ / /______/ / / / / /_/ / /_/ /  __/ /  / ____/ /  /  __/ /__/ (__  ) / /_/ / / / / __/ / /_/ / /  / / / / / / /_/ / /_
//	|__/|__/\___/_.___/\____/_____/____/_/ /_/\__,_/\__,_/\___/_/  /_/   /_/   \___/\___/_/____/_/\____/_/ /_/_/    \____/_/  /_/ /_/ /_/\__,_/\__/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLShaderPrecisionFormat : WebGLObject
{
	public function Constructor(uid:Integer, shadertype:Integer, precisiontype:Integer)
	{
	}
}



"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLShaderPrecisionFormat.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLTexture.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________  ______          __
//	| |     / /__  / /_  / ____/ / /_  __/__  _  __/ /___  __________
//	| | /| / / _ \/ __ \/ / __/ /   / / / _ \| |/_/ __/ / / / ___/ _ \
//	| |/ |/ /  __/ /_/ / /_/ / /___/ / /  __/>  </ /_/ /_/ / /  /  __/
//	|__/|__/\___/_.___/\____/_____/_/  \___/_/|_|\__/\__,_/_/   \___/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLTexture : WebGLObject
{
	public function Constructor(uid:Integer)
	{
	}

	public function Destructor(uid:Integer)
	{
		trace("Disposed texture " + String(this.__uid));
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLTexture.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLUniformLocation.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    __  __      _ ____                     __                     __  _
//	| |     / /__  / /_  / ____/ /   / / / /___  (_) __/___  _________ ___  / /   ____  _________ _/ /_(_)___  ____
//	| | /| / / _ \/ __ \/ / __/ /   / / / / __ \/ / /_/ __ \/ ___/ __ `__ \/ /   / __ \/ ___/ __ `/ __/ / __ \/ __ \
//	| |/ |/ /  __/ /_/ / /_/ / /___/ /_/ / / / / / __/ /_/ / /  / / / / / / /___/ /_/ / /__/ /_/ / /_/ / /_/ / / / /
//	|__/|__/\___/_.___/\____/_____/\____/_/ /_/_/_/  \____/_/  /_/ /_/ /_/_____/\____/\___/\__,_/\__/_/\____/_/ /_/
//
// ==================================================================================================================================

"#include Constants.js"

class WebGLUniformLocation : WebGLObject
{
	public function Constructor(uid:Integer, program_uid:Integer, name:String)
	{
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLUniformLocation.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLProgram.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ____
//	| |     / /__  / /_  / ____/ /   / __ \_________  ____ __________ _____ ___
//	| | /| / / _ \/ __ \/ / __/ /   / /_/ / ___/ __ \/ __ `/ ___/ __ `/ __ `__ \
//	| |/ |/ /  __/ /_/ / /_/ / /___/ ____/ /  / /_/ / /_/ / /  / /_/ / / / / / /
//	|__/|__/\___/_.___/\____/_____/_/   /_/   \____/\__, /_/   \__,_/_/ /_/ /_/
//	                                               /____/
// ==================================================================================================================================

"#include Constants.js"
"#include WebGLUniformLocation.jspp"

class WebGLProgram : WebGLObject
{
	public var GLSLiTexCoords:Integer;
	public var GLSLiVec2Coords:Integer;
	public var GLSLiVecCoords:Integer;

	public var GLSLuColor:WebGLUniformLocation;
	public var GLSLuMVMat:WebGLUniformLocation;
	public var GLSLuProjMat:WebGLUniformLocation;
	public var GLSLuSampler:WebGLUniformLocation;
	public var GLSLuSprFrame:WebGLUniformLocation;
	public var GLSLuSprSize:WebGLUniformLocation;
	public var GLSLuSprFlip:WebGLUniformLocation;

	public function Constructor(uid:Integer)
	{
		this.GLSLiTexCoords = 0;
		this.GLSLiVec2Coords = 0;
		this.GLSLiVecCoords = 0;
		this.GLSLuColor = null;
		this.GLSLuMVMat = null;
		this.GLSLuProjMat = null;
		this.GLSLuSampler = null;
		this.GLSLuSprFrame = null;
		this.GLSLuSprSize = null;
		this.GLSLuSprFlip = null;
	}

	public function Destructor()
	{
		delete GLSLuColor;
		delete GLSLuMVMat;
		delete GLSLuProjMat;
		delete GLSLuSampler;
		delete GLSLuSprFrame;
		delete GLSLuSprSize;
		delete GLSLuSprFlip;
	}
}







"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLProgram.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLRenderingContext.jspp";
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ____                 __          _             ______            __            __
//	| |     / /__  / /_  / ____/ /   / __ \___  ____  ____/ /__  _____(_)___  ____ _/ ____/___  ____  / /____  _  __/ /_
//	| | /| / / _ \/ __ \/ / __/ /   / /_/ / _ \/ __ \/ __  / _ \/ ___/ / __ \/ __ `/ /   / __ \/ __ \/ __/ _ \| |/_/ __/
//	| |/ |/ /  __/ /_/ / /_/ / /___/ _, _/  __/ / / / /_/ /  __/ /  / / / / / /_/ / /___/ /_/ / / / / /_/  __/>  </ /_
//	|__/|__/\___/_.___/\____/_____/_/ |_|\___/_/ /_/\__,_/\___/_/  /_/_/ /_/\__, /\____/\____/_/ /_/\__/\___/_/|_|\__/
//	                                                                       /____/
// ==================================================================================================================================

"#include Constants.js"
"#include WebGLActiveInfo.jspp"
"#include WebGLBuffer.jspp"
"#include WebGLContextAttributes.jspp"
"#include WebGLFramebuffer.jspp"
"#include WebGLProgram.jspp"
"#include WebGLRenderbuffer.jspp"
"#include WebGLShader.jspp"
"#include WebGLShaderPrecisionFormat.jspp"
"#include WebGLTexture.jspp"
"#include WebGLUniformLocation.jspp"
"#include HTMLCanvasElement.jspp"

class WebGLRenderingContext
{
	public const ACTIVE_ATTRIBUTES:Integer = 0x8B89;
	public const ACTIVE_TEXTURE:Integer = 0x84E0;
	public const ACTIVE_UNIFORMS:Integer = 0x8B86;
	public const ALIASED_LINE_WIDTH_RANGE:Integer = 0x846E;
	public const ALIASED_POINT_SIZE_RANGE:Integer = 0x846D;
	public const ALPHA:Integer = 0x1906;
	public const ALPHA_BITS:Integer = 0x0D55;
	public const ALWAYS:Integer = 0x0207;
	public const ARRAY_BUFFER:Integer = 0x8892;
	public const ARRAY_BUFFER_BINDING:Integer = 0x8894;
	public const ATTACHED_SHADERS:Integer = 0x8B85;
	public const BACK:Integer = 0x0405;
	public const BLEND:Integer = 0x0BE2;
	public const BLEND_COLOR:Integer = 0x8005;
	public const BLEND_DST_ALPHA:Integer = 0x80CA;
	public const BLEND_DST_RGB:Integer = 0x80C8;
	public const BLEND_EQUATION:Integer = 0x8009;
	public const BLEND_EQUATION_ALPHA:Integer = 0x883D;
	public const BLEND_EQUATION_RGB:Integer = 0x8009;
	public const BLEND_SRC_ALPHA:Integer = 0x80CB;
	public const BLEND_SRC_RGB:Integer = 0x80C9;
	public const BLUE_BITS:Integer = 0x0D54;
	public const BOOL:Integer = 0x8B56;
	public const BOOL_VEC2:Integer = 0x8B57;
	public const BOOL_VEC3:Integer = 0x8B58;
	public const BOOL_VEC4:Integer = 0x8B59;
	public const BROWSER_DEFAULT_WEBGL:Integer = 0x9244;
	public const BUFFER_SIZE:Integer = 0x8764;
	public const BUFFER_USAGE:Integer = 0x8765;
	public const BYTE:Integer = 0x1400;
	public const CCW:Integer = 0x0901;
	public const CLAMP_TO_EDGE:Integer = 0x812F;
	public const COLOR_ATTACHMENT0:Integer = 0x8CE0;
	public const COLOR_BUFFER_BIT:Integer = 0x00004000;
	public const COLOR_CLEAR_VALUE:Integer = 0x0C22;
	public const COLOR_WRITEMASK:Integer = 0x0C23;
	public const COMPILE_STATUS:Integer = 0x8B81;
	public const COMPRESSED_TEXTURE_FORMATS:Integer = 0x86A3;
	public const CONSTANT_ALPHA:Integer = 0x8003;
	public const CONSTANT_COLOR:Integer = 0x8001;
	public const CONTEXT_LOST_WEBGL:Integer = 0x9242;
	public const CULL_FACE:Integer = 0x0B44;
	public const CULL_FACE_MODE:Integer = 0x0B45;
	public const CURRENT_PROGRAM:Integer = 0x8B8D;
	public const CURRENT_VERTEX_ATTRIB:Integer = 0x8626;
	public const CW:Integer = 0x0900;
	public const DECR:Integer = 0x1E03;
	public const DECR_WRAP:Integer = 0x8508;
	public const DELETE_STATUS:Integer = 0x8B80;
	public const DEPTH_ATTACHMENT:Integer = 0x8D00;
	public const DEPTH_BITS:Integer = 0x0D56;
	public const DEPTH_BUFFER_BIT:Integer = 0x00000100;
	public const DEPTH_CLEAR_VALUE:Integer = 0x0B73;
	public const DEPTH_COMPONENT:Integer = 0x1902;
	public const DEPTH_COMPONENT16:Integer = 0x81A5;
	public const DEPTH_FUNC:Integer = 0x0B74;
	public const DEPTH_RANGE:Integer = 0x0B70;
	public const DEPTH_STENCIL:Integer = 0x84F9;
	public const DEPTH_STENCIL_ATTACHMENT:Integer = 0x821A;
	public const DEPTH_TEST:Integer = 0x0B71;
	public const DEPTH_WRITEMASK:Integer = 0x0B72;
	public const DITHER:Integer = 0x0BD0;
	public const DONT_CARE:Integer = 0x1100;
	public const DST_ALPHA:Integer = 0x0304;
	public const DST_COLOR:Integer = 0x0306;
	public const DYNAMIC_DRAW:Integer = 0x88E8;
	public const ELEMENT_ARRAY_BUFFER:Integer = 0x8893;
	public const ELEMENT_ARRAY_BUFFER_BINDING:Integer = 0x8895;
	public const EQUAL:Integer = 0x0202;
	public const FASTEST:Integer = 0x1101;
	public const FLOAT:Integer = 0x1406;
	public const FLOAT_MAT2:Integer = 0x8B5A;
	public const FLOAT_MAT3:Integer = 0x8B5B;
	public const FLOAT_MAT4:Integer = 0x8B5C;
	public const FLOAT_VEC2:Integer = 0x8B50;
	public const FLOAT_VEC3:Integer = 0x8B51;
	public const FLOAT_VEC4:Integer = 0x8B52;
	public const FRAGMENT_SHADER:Integer = 0x8B30;
	public const FRAMEBUFFER:Integer = 0x8D40;
	public const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:Integer = 0x8CD1;
	public const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:Integer = 0x8CD0;
	public const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:Integer = 0x8CD3;
	public const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:Integer = 0x8CD2;
	public const FRAMEBUFFER_BINDING:Integer = 0x8CA6;
	public const FRAMEBUFFER_COMPLETE:Integer = 0x8CD5;
	public const FRAMEBUFFER_INCOMPLETE_ATTACHMENT:Integer = 0x8CD6;
	public const FRAMEBUFFER_INCOMPLETE_DIMENSIONS:Integer = 0x8CD9;
	public const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:Integer = 0x8CD7;
	public const FRAMEBUFFER_UNSUPPORTED:Integer = 0x8CDD;
	public const FRONT:Integer = 0x0404;
	public const FRONT_AND_BACK:Integer = 0x0408;
	public const FRONT_FACE:Integer = 0x0B46;
	public const FUNC_ADD:Integer = 0x8006;
	public const FUNC_REVERSE_SUBTRACT:Integer = 0x800B;
	public const FUNC_SUBTRACT:Integer = 0x800A;
	public const GENERATE_MIPMAP_HINT:Integer = 0x8192;
	public const GEQUAL:Integer = 0x0206;
	public const GREATER:Integer = 0x0204;
	public const GREEN_BITS:Integer = 0x0D53;
	public const HIGH_FLOAT:Integer = 0x8DF2;
	public const HIGH_INT:Integer = 0x8DF5;
	public const INCR:Integer = 0x1E02;
	public const INCR_WRAP:Integer = 0x8507;
	public const INT:Integer = 0x1404;
	public const INT_VEC2:Integer = 0x8B53;
	public const INT_VEC3:Integer = 0x8B54;
	public const INT_VEC4:Integer = 0x8B55;
	public const INVALID_ENUM:Integer = 0x0500;
	public const INVALID_FRAMEBUFFER_OPERATION:Integer = 0x0506;
	public const INVALID_OPERATION:Integer = 0x0502;
	public const INVALID_VALUE:Integer = 0x0501;
	public const INVERT:Integer = 0x150A;
	public const KEEP:Integer = 0x1E00;
	public const LEQUAL:Integer = 0x0203;
	public const LESS:Integer = 0x0201;
	public const LINE_LOOP:Integer = 0x0002;
	public const LINE_STRIP:Integer = 0x0003;
	public const LINE_WIDTH:Integer = 0x0B21;
	public const LINEAR:Integer = 0x2601;
	public const LINEAR_MIPMAP_LINEAR:Integer = 0x2703;
	public const LINEAR_MIPMAP_NEAREST:Integer = 0x2701;
	public const LINES:Integer = 0x0001;
	public const LINK_STATUS:Integer = 0x8B82;
	public const LOW_FLOAT:Integer = 0x8DF0;
	public const LOW_INT:Integer = 0x8DF3;
	public const LUMINANCE:Integer = 0x1909;
	public const LUMINANCE_ALPHA:Integer = 0x190A;
	public const MAX_COMBINED_TEXTURE_IMAGE_UNITS:Integer = 0x8B4D;
	public const MAX_CUBE_MAP_TEXTURE_SIZE:Integer = 0x851C;
	public const MAX_FRAGMENT_UNIFORM_VECTORS:Integer = 0x8DFD;
	public const MAX_RENDERBUFFER_SIZE:Integer = 0x84E8;
	public const MAX_TEXTURE_IMAGE_UNITS:Integer = 0x8872;
	public const MAX_TEXTURE_SIZE:Integer = 0x0D33;
	public const MAX_VARYING_VECTORS:Integer = 0x8DFC;
	public const MAX_VERTEX_ATTRIBS:Integer = 0x8869;
	public const MAX_VERTEX_TEXTURE_IMAGE_UNITS:Integer = 0x8B4C;
	public const MAX_VERTEX_UNIFORM_VECTORS:Integer = 0x8DFB;
	public const MAX_VIEWPORT_DIMS:Integer = 0x0D3A;
	public const MEDIUM_FLOAT:Integer = 0x8DF1;
	public const MEDIUM_INT:Integer = 0x8DF4;
	public const MIRRORED_REPEAT:Integer = 0x8370;
	public const NEAREST:Integer = 0x2600;
	public const NEAREST_MIPMAP_LINEAR:Integer = 0x2702;
	public const NEAREST_MIPMAP_NEAREST:Integer = 0x2700;
	public const NEVER:Integer = 0x0200;
	public const NICEST:Integer = 0x1102;
	public const NO_ERROR:Integer = 0;
	public const NONE:Integer = 0;
	public const NOTEQUAL:Integer = 0x0205;
	public const ONE:Integer = 1;
	public const ONE_MINUS_CONSTANT_ALPHA:Integer = 0x8004;
	public const ONE_MINUS_CONSTANT_COLOR:Integer = 0x8002;
	public const ONE_MINUS_DST_ALPHA:Integer = 0x0305;
	public const ONE_MINUS_DST_COLOR:Integer = 0x0307;
	public const ONE_MINUS_SRC_ALPHA:Integer = 0x0303;
	public const ONE_MINUS_SRC_COLOR:Integer = 0x0301;
	public const OUT_OF_MEMORY:Integer = 0x0505;
	public const PACK_ALIGNMENT:Integer = 0x0D05;
	public const POINTS:Integer = 0x0000;
	public const POLYGON_OFFSET_FACTOR:Integer = 0x8038;
	public const POLYGON_OFFSET_FILL:Integer = 0x8037;
	public const POLYGON_OFFSET_UNITS:Integer = 0x2A00;
	public const RED_BITS:Integer = 0x0D52;
	public const RENDERBUFFER:Integer = 0x8D41;
	public const RENDERBUFFER_ALPHA_SIZE:Integer = 0x8D53;
	public const RENDERBUFFER_BINDING:Integer = 0x8CA7;
	public const RENDERBUFFER_BLUE_SIZE:Integer = 0x8D52;
	public const RENDERBUFFER_DEPTH_SIZE:Integer = 0x8D54;
	public const RENDERBUFFER_GREEN_SIZE:Integer = 0x8D51;
	public const RENDERBUFFER_HEIGHT:Integer = 0x8D43;
	public const RENDERBUFFER_INTERNAL_FORMAT:Integer = 0x8D44;
	public const RENDERBUFFER_RED_SIZE:Integer = 0x8D50;
	public const RENDERBUFFER_STENCIL_SIZE:Integer = 0x8D55;
	public const RENDERBUFFER_WIDTH:Integer = 0x8D42;
	public const RENDERER:Integer = 0x1F01;
	public const REPEAT:Integer = 0x2901;
	public const REPLACE:Integer = 0x1E01;
	public const RGB:Integer = 0x1907;
	public const RGB5_A1:Integer = 0x8057;
	public const RGB565:Integer = 0x8D62;
	public const RGBA:Integer = 0x1908;
	public const RGBA4:Integer = 0x8056;
	public const SAMPLE_ALPHA_TO_COVERAGE:Integer = 0x809E;
	public const SAMPLE_BUFFERS:Integer = 0x80A8;
	public const SAMPLE_COVERAGE:Integer = 0x80A0;
	public const SAMPLE_COVERAGE_INVERT:Integer = 0x80AB;
	public const SAMPLE_COVERAGE_VALUE:Integer = 0x80AA;
	public const SAMPLER_2D:Integer = 0x8B5E;
	public const SAMPLER_CUBE:Integer = 0x8B60;
	public const SAMPLES:Integer = 0x80A9;
	public const SCISSOR_BOX:Integer = 0x0C10;
	public const SCISSOR_TEST:Integer = 0x0C11;
	public const SHADER_TYPE:Integer = 0x8B4F;
	public const SHADING_LANGUAGE_VERSION:Integer = 0x8B8C;
	public const SHORT:Integer = 0x1402;
	public const SRC_ALPHA:Integer = 0x0302;
	public const SRC_ALPHA_SATURATE:Integer = 0x0308;
	public const SRC_COLOR:Integer = 0x0300;
	public const STATIC_DRAW:Integer = 0x88E4;
	public const STENCIL_ATTACHMENT:Integer = 0x8D20;
	public const STENCIL_BACK_FAIL:Integer = 0x8801;
	public const STENCIL_BACK_FUNC:Integer = 0x8800;
	public const STENCIL_BACK_PASS_DEPTH_FAIL:Integer = 0x8802;
	public const STENCIL_BACK_PASS_DEPTH_PASS:Integer = 0x8803;
	public const STENCIL_BACK_REF:Integer = 0x8CA3;
	public const STENCIL_BACK_VALUE_MASK:Integer = 0x8CA4;
	public const STENCIL_BACK_WRITEMASK:Integer = 0x8CA5;
	public const STENCIL_BITS:Integer = 0x0D57;
	public const STENCIL_BUFFER_BIT:Integer = 0x00000400;
	public const STENCIL_CLEAR_VALUE:Integer = 0x0B91;
	public const STENCIL_FAIL:Integer = 0x0B94;
	public const STENCIL_FUNC:Integer = 0x0B92;
	public const STENCIL_INDEX:Integer = 0x1901;
	public const STENCIL_INDEX8:Integer = 0x8D48;
	public const STENCIL_PASS_DEPTH_FAIL:Integer = 0x0B95;
	public const STENCIL_PASS_DEPTH_PASS:Integer = 0x0B96;
	public const STENCIL_REF:Integer = 0x0B97;
	public const STENCIL_TEST:Integer = 0x0B90;
	public const STENCIL_VALUE_MASK:Integer = 0x0B93;
	public const STENCIL_WRITEMASK:Integer = 0x0B98;
	public const STREAM_DRAW:Integer = 0x88E0;
	public const SUBPIXEL_BITS:Integer = 0x0D50;
	public const TEXTURE:Integer = 0x1702;
	public const TEXTURE_2D:Integer = 0x0DE1;
	public const TEXTURE_BINDING_2D:Integer = 0x8069;
	public const TEXTURE_BINDING_CUBE_MAP:Integer = 0x8514;
	public const TEXTURE_CUBE_MAP:Integer = 0x8513;
	public const TEXTURE_CUBE_MAP_NEGATIVE_X:Integer = 0x8516;
	public const TEXTURE_CUBE_MAP_NEGATIVE_Y:Integer = 0x8518;
	public const TEXTURE_CUBE_MAP_NEGATIVE_Z:Integer = 0x851A;
	public const TEXTURE_CUBE_MAP_POSITIVE_X:Integer = 0x8515;
	public const TEXTURE_CUBE_MAP_POSITIVE_Y:Integer = 0x8517;
	public const TEXTURE_CUBE_MAP_POSITIVE_Z:Integer = 0x8519;
	public const TEXTURE_MAG_FILTER:Integer = 0x2800;
	public const TEXTURE_MIN_FILTER:Integer = 0x2801;
	public const TEXTURE_WRAP_S:Integer = 0x2802;
	public const TEXTURE_WRAP_T:Integer = 0x2803;
	public const TEXTURE0:Integer = 0x84C0;
	public const TEXTURE1:Integer = 0x84C1;
	public const TEXTURE10:Integer = 0x84CA;
	public const TEXTURE11:Integer = 0x84CB;
	public const TEXTURE12:Integer = 0x84CC;
	public const TEXTURE13:Integer = 0x84CD;
	public const TEXTURE14:Integer = 0x84CE;
	public const TEXTURE15:Integer = 0x84CF;
	public const TEXTURE16:Integer = 0x84D0;
	public const TEXTURE17:Integer = 0x84D1;
	public const TEXTURE18:Integer = 0x84D2;
	public const TEXTURE19:Integer = 0x84D3;
	public const TEXTURE2:Integer = 0x84C2;
	public const TEXTURE20:Integer = 0x84D4;
	public const TEXTURE21:Integer = 0x84D5;
	public const TEXTURE22:Integer = 0x84D6;
	public const TEXTURE23:Integer = 0x84D7;
	public const TEXTURE24:Integer = 0x84D8;
	public const TEXTURE25:Integer = 0x84D9;
	public const TEXTURE26:Integer = 0x84DA;
	public const TEXTURE27:Integer = 0x84DB;
	public const TEXTURE28:Integer = 0x84DC;
	public const TEXTURE29:Integer = 0x84DD;
	public const TEXTURE3:Integer = 0x84C3;
	public const TEXTURE30:Integer = 0x84DE;
	public const TEXTURE31:Integer = 0x84DF;
	public const TEXTURE4:Integer = 0x84C4;
	public const TEXTURE5:Integer = 0x84C5;
	public const TEXTURE6:Integer = 0x84C6;
	public const TEXTURE7:Integer = 0x84C7;
	public const TEXTURE8:Integer = 0x84C8;
	public const TEXTURE9:Integer = 0x84C9;
	public const TRIANGLE_FAN:Integer = 0x0006;
	public const TRIANGLE_STRIP:Integer = 0x0005;
	public const TRIANGLES:Integer = 0x0004;
	public const UNPACK_ALIGNMENT:Integer = 0x0CF5;
	public const UNPACK_COLORSPACE_CONVERSION_WEBGL:Integer = 0x9243;
	public const UNPACK_FLIP_Y_WEBGL:Integer = 0x9240;
	public const UNPACK_PREMULTIPLY_ALPHA_WEBGL:Integer = 0x9241;
	public const UNSIGNED_BYTE:Integer = 0x1401;
	public const UNSIGNED_INT:Integer = 0x1405;
	public const UNSIGNED_SHORT:Integer = 0x1403;
	public const UNSIGNED_SHORT_4_4_4_4:Integer = 0x8033;
	public const UNSIGNED_SHORT_5_5_5_1:Integer = 0x8034;
	public const UNSIGNED_SHORT_5_6_5:Integer = 0x8363;
	public const VALIDATE_STATUS:Integer = 0x8B83;
	public const VENDOR:Integer = 0x1F00;
	public const VERSION:Integer = 0x1F02;
	public const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:Integer = 0x889F;
	public const VERTEX_ATTRIB_ARRAY_ENABLED:Integer = 0x8622;
	public const VERTEX_ATTRIB_ARRAY_NORMALIZED:Integer = 0x886A;
	public const VERTEX_ATTRIB_ARRAY_POINTER:Integer = 0x8645;
	public const VERTEX_ATTRIB_ARRAY_SIZE:Integer = 0x8623;
	public const VERTEX_ATTRIB_ARRAY_STRIDE:Integer = 0x8624;
	public const VERTEX_ATTRIB_ARRAY_TYPE:Integer = 0x8625;
	public const VERTEX_SHADER:Integer = 0x8B31;
	public const VIEWPORT:Integer = 0x0BA2;
	public const ZERO:Integer = 0;

    public var __uid:Integer;
    public var canvas:HTMLCanvasElement;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    public function Constructor(canvas:HTMLCanvasElement)
    {
		this.__uid = 1;
    	this.canvas = canvas;
    }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function activeTexture(texture:Integer)
	{
		__WebGLRenderingContext_activeTexture(this.__uid, texture);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function attachShader(program:WebGLProgram, shader:WebGLShader)
	{
		__WebGLRenderingContext_attachShader(this.__uid, program.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindAttribLocation(program:WebGLProgram, index:Integer, name:String)
	{
		__WebGLRenderingContext_bindAttribLocation(this.__uid, program.__uid, index, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindBuffer(target:Integer, buffer:WebGLBuffer)
	{
		if(buffer==null)
			__WebGLRenderingContext_bindBuffer(this.__uid, target, 0);
		else
			__WebGLRenderingContext_bindBuffer(this.__uid, target, buffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindFramebuffer(target:Integer, framebuffer:WebGLFramebuffer)
	{
		__WebGLRenderingContext_bindFramebuffer(this.__uid, target, framebuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindRenderbuffer(target:Integer, renderbuffer:WebGLRenderbuffer)
	{
		if(renderbuffer==null)
			__WebGLRenderingContext_bindRenderbuffer(this.__uid, target, 0);
		else
			__WebGLRenderingContext_bindRenderbuffer(this.__uid, target, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindTexture(target:Integer, texture:WebGLTexture)
	{
		if(texture==null)
			__WebGLRenderingContext_bindTexture(this.__uid, target, 0);
		else
			__WebGLRenderingContext_bindTexture(this.__uid, target, texture.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendColor(red:Float, green:Float, blue:Float, alpha:Float)
	{
		__WebGLRenderingContext_blendColor(this.__uid, red, green, blue, alpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendEquation(mode:Integer)
	{
		__WebGLRenderingContext_blendEquation(this.__uid, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendEquationSeparate(modeRGB:Integer, modeAlpha:Integer)
	{
		__WebGLRenderingContext_blendEquationSeparate(this.__uid, modeRGB, modeAlpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendFunc(sfactor:Integer, dfactor:Integer)
	{
		__WebGLRenderingContext_blendFunc(this.__uid, sfactor, dfactor);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendFuncSeparate(srcRGB:Integer, dstRGB:Integer, srcAlpha:Integer, dstAlpha:Integer)
	{
		__WebGLRenderingContext_blendFuncSeparate(this.__uid, srcRGB, dstRGB, srcAlpha, dstAlpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bufferData(target:Integer, data:Float32Array, usage:Integer)
	{
		__WebGLRenderingContext_bufferData(this.__uid, target, data.buffer.__uid, data.byteOffset, data.length * data.BYTES_PER_ELEMENT, usage);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bufferSubData(target:Integer, offset:Integer, data:Float32Array)
	{
		__WebGLRenderingContext_bufferSubData(this.__uid, target, offset, data.buffer.__uid, data.byteOffset, data.length * data.BYTES_PER_ELEMENT);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function checkFramebufferStatus(target:Integer) :Integer
	{
		return __WebGLRenderingContext_checkFramebufferStatus(this.__uid, target);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clear(mask:Integer)
	{
		__WebGLRenderingContext_clear(this.__uid, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clearColor(red:Float, green:Float, blue:Float, alpha:Float)
	{
		__WebGLRenderingContext_clearColor(this.__uid, red, green, blue, alpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clearDepth(depth:Float)
	{
		__WebGLRenderingContext_clearDepth(this.__uid, depth);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clearStencil(s:Integer)
	{
		__WebGLRenderingContext_clearStencil(this.__uid, s);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function colorMask(red:Boolean, green:Boolean, blue:Boolean, alpha:Boolean)
	{
		__WebGLRenderingContext_colorMask(this.__uid, red, green, blue, alpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function compileShader(shader:WebGLShader)
	{
		__WebGLRenderingContext_compileShader(this.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function compressedTexImage2D(target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, data:Float32Array)
	{
		__WebGLRenderingContext_compressedTexImage2D(this.__uid, target, level, internalformat, width, height, border, data.buffer.__uid, data.byteOffset, data.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function compressedTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, data:Float32Array)
	{
		__WebGLRenderingContext_compressedTexSubImage2D(this.__uid, target, level, xoffset, yoffset, width, height, format, data.buffer.__uid, data.byteOffset, data.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function copyTexImage2D(target:Integer, level:Integer, internalformat:Integer, x:Integer, y:Integer, width:Integer, height:Integer, border:Integer)
	{
		__WebGLRenderingContext_copyTexImage2D(this.__uid, target, level, internalformat, x, y, width, height, border);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function copyTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, x:Integer, y:Integer, width:Integer, height:Integer)
	{
		__WebGLRenderingContext_copyTexSubImage2D(this.__uid, target, level, xoffset, yoffset, x, y, width, height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createBuffer() :WebGLBuffer
	{
		return new WebGLBuffer(__WebGLRenderingContext_createBuffer(this.__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createFramebuffer() :WebGLFramebuffer
	{
		return new WebGLFramebuffer(__WebGLRenderingContext_createFramebuffer(this.__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createProgram() :WebGLProgram
	{
		return new WebGLProgram(__WebGLRenderingContext_createProgram(this.__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createRenderbuffer() :WebGLRenderbuffer
	{
		return new WebGLRenderbuffer(__WebGLRenderingContext_createRenderbuffer(this.__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createShader(type:Integer) :WebGLShader
	{
		return new WebGLShader(__WebGLRenderingContext_createShader(this.__uid, type), type);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createTexture() :WebGLTexture
	{
		return new WebGLTexture(__WebGLRenderingContext_createTexture(this.__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function cullFace(mode:Integer)
	{
		__WebGLRenderingContext_cullFace(this.__uid, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteBuffer(buffer:WebGLBuffer)
	{
		__WebGLRenderingContext_deleteBuffer(this.__uid, buffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteFramebuffer(framebuffer:WebGLFramebuffer)
	{
		__WebGLRenderingContext_deleteFramebuffer(this.__uid, framebuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_deleteProgram(this.__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteRenderbuffer(renderbuffer:WebGLRenderbuffer)
	{
		__WebGLRenderingContext_deleteRenderbuffer(this.__uid, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteShader(shader:WebGLShader)
	{
		__WebGLRenderingContext_deleteShader(this.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteTexture(texture:WebGLTexture)
	{
		__WebGLRenderingContext_deleteTexture(this.__uid, texture.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function depthFunc(func:Integer)
	{
		__WebGLRenderingContext_depthFunc(this.__uid, func);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function depthMask(flag:Boolean)
	{
		__WebGLRenderingContext_depthMask(this.__uid, flag);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function depthRange(zNear:Float, zFar:Float)
	{
		__WebGLRenderingContext_depthRange(this.__uid, zNear, zFar);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function detachShader(program:WebGLProgram, shader:WebGLShader)
	{
		__WebGLRenderingContext_detachShader(this.__uid, program.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function disable(cap:Integer)
	{
		__WebGLRenderingContext_disable(this.__uid, cap);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function disableVertexAttribArray(index:Integer)
	{
		__WebGLRenderingContext_disableVertexAttribArray(this.__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawArrays(mode:Integer, first:Integer, count:Integer)
	{
		__WebGLRenderingContext_drawArrays(this.__uid, mode, first, count);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawElements(mode:Integer, count:Integer, type:Integer, offset:Integer)
	{
		__WebGLRenderingContext_drawElements(this.__uid, mode, count, type, offset);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function enable(cap:Integer)
	{
		__WebGLRenderingContext_enable(this.__uid, cap);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function enableVertexAttribArray(index:Integer)
	{
		__WebGLRenderingContext_enableVertexAttribArray(this.__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function finish()
	{
		__WebGLRenderingContext_finish(this.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function flush()
	{
		__WebGLRenderingContext_flush(this.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function framebufferRenderbuffer(target:Integer, attachment:Integer, renderbuffertarget:Integer, renderbuffer:WebGLRenderbuffer)
	{
		__WebGLRenderingContext_framebufferRenderbuffer(this.__uid, target, attachment, renderbuffertarget, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function framebufferTexture2D(target:Integer, attachment:Integer, textarget:Integer, texture:WebGLTexture, level:Integer)
	{
		__WebGLRenderingContext_framebufferTexture2D(this.__uid, target, attachment, textarget, texture.__uid, level);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function frontFace(mode:Integer)
	{
		__WebGLRenderingContext_frontFace(this.__uid, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function generateMipmap(target:Integer)
	{
		__WebGLRenderingContext_generateMipmap(this.__uid, target);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getActiveAttrib(program:WebGLProgram, index:Integer) :WebGLActiveInfo
	{
		return new WebGLActiveInfo(__WebGLRenderingContext_getActiveAttrib(this.__uid, program.__uid, index), program.__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getActiveUniform(program:WebGLProgram, index:Integer) :WebGLActiveInfo
	{
		return new WebGLActiveInfo(__WebGLRenderingContext_getActiveUniform(this.__uid, program.__uid, index), program.__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getAttachedShaders(program:WebGLProgram) :Array<WebGLShader>
	{
		return __WebGLRenderingContext_getAttachedShaders(this.__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getAttribLocation(program:WebGLProgram, name:String) :Integer
	{
		return __WebGLRenderingContext_getAttribLocation(this.__uid, program.__uid, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getBufferParameter(target:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getBufferParameter(this.__uid, target, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getContextAttributes() :WebGLContextAttributes
	{
		return new WebGLContextAttributes(__WebGLRenderingContext_getContextAttributes(this.__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getError() :Integer
	{
		return __WebGLRenderingContext_getError(this.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getExtension(name:String) :Object
	{
		return __WebGLRenderingContext_getExtension(this.__uid, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getFramebufferAttachmentParameter(target:Integer, attachment:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getFramebufferAttachmentParameter(this.__uid, target, attachment, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getParameter(pname:Integer) :String
	{
		return __WebGLRenderingContext_getParameter(this.__uid, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getProgramInfoLog(program:WebGLProgram) :String
	{
		return __WebGLRenderingContext_getProgramInfoLog(this.__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getProgramParameter(program:WebGLProgram, pname:Integer) :Boolean
	{
		return __WebGLRenderingContext_getProgramParameter(this.__uid, program.__uid, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getRenderbufferParameter(target:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getRenderbufferParameter(this.__uid, target, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderInfoLog(shader:WebGLShader) :String
	{
		return __WebGLRenderingContext_getShaderInfoLog(this.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderParameter(shader:WebGLShader, pname:Integer) :Boolean
	{
		return __WebGLRenderingContext_getShaderParameter(this.__uid, shader.__uid, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderPrecisionFormat(shadertype:Integer, precisiontype:Integer) :WebGLShaderPrecisionFormat
	{
		return new WebGLShaderPrecisionFormat(__WebGLRenderingContext_getShaderPrecisionFormat(this.__uid, shadertype, precisiontype), shadertype, precisiontype);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderSource(shader:WebGLShader) :String
	{
		return __WebGLRenderingContext_getShaderSource(this.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSupportedExtensions() :Array<String>
	{
		return __WebGLRenderingContext_getSupportedExtensions(this.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getTexParameter(target:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getTexParameter(this.__uid, target, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getUniform(program:WebGLProgram, location:WebGLUniformLocation) :String
	{
		return __WebGLRenderingContext_getUniform(this.__uid, program.__uid, location.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getUniformLocation(program:WebGLProgram, name:String) :WebGLUniformLocation
	{
		return new WebGLUniformLocation(__WebGLRenderingContext_getUniformLocation(this.__uid, program.__uid, name), program.__uid, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getVertexAttrib(index:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getVertexAttrib(this.__uid, index, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getVertexAttribOffset(index:Integer, pname:Integer) :Integer
	{
		return __WebGLRenderingContext_getVertexAttribOffset(this.__uid, index, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function hint(target:Integer, mode:Integer)
	{
		__WebGLRenderingContext_hint(this.__uid, target, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isBuffer(buffer:WebGLBuffer) :Boolean
	{
		return __WebGLRenderingContext_isBuffer(this.__uid, buffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isContextLost() :Boolean
	{
		return __WebGLRenderingContext_isContextLost(this.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isEnabled(cap:Integer) :Boolean
	{
		return __WebGLRenderingContext_isEnabled(this.__uid, cap);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isFramebuffer(framebuffer:WebGLFramebuffer) :Boolean
	{
		return __WebGLRenderingContext_isFramebuffer(this.__uid, framebuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isProgram(program:WebGLProgram) :Boolean
	{
		return __WebGLRenderingContext_isProgram(this.__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isRenderbuffer(renderbuffer:WebGLRenderbuffer) :Boolean
	{
		return __WebGLRenderingContext_isRenderbuffer(this.__uid, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isShader(shader:WebGLShader) :Boolean
	{
		return __WebGLRenderingContext_isShader(this.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isTexture(texture:WebGLTexture) :Boolean
	{
		return __WebGLRenderingContext_isTexture(this.__uid, texture.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function lineWidth(width:Float)
	{
		__WebGLRenderingContext_lineWidth(this.__uid, width);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function linkProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_linkProgram(this.__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function pixelStorei(pname:Integer, param:Integer)
	{
		__WebGLRenderingContext_pixelStorei(this.__uid, pname, param);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function polygonOffset(factor:Float, units:Float)
	{
		__WebGLRenderingContext_polygonOffset(this.__uid, factor, units);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readPixels(x:Integer, y:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array)
	{
		__WebGLRenderingContext_readPixels(this.__uid, x, y, width, height, format, type, pixels.buffer.__uid, pixels.byteOffset, pixels.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function renderbufferStorage(target:Integer, internalformat:Integer, width:Integer, height:Integer)
	{
		__WebGLRenderingContext_renderbufferStorage(this.__uid, target, internalformat, width, height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function sampleCoverage(value:Float, invert:Boolean)
	{
		__WebGLRenderingContext_sampleCoverage(this.__uid, value, invert);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function scissor(x:Integer, y:Integer, width:Integer, height:Integer)
	{
		__WebGLRenderingContext_scissor(this.__uid, x, y, width, height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function shaderSource(shader:WebGLShader, source:String)
	{
		__WebGLRenderingContext_shaderSource(this.__uid, shader.__uid, source);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilFunc(func:Integer, ref:Integer, mask:Integer)
	{
		__WebGLRenderingContext_stencilFunc(this.__uid, func, ref, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilFuncSeparate(face:Integer, func:Integer, ref:Integer, mask:Integer)
	{
		__WebGLRenderingContext_stencilFuncSeparate(this.__uid, face, func, ref, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilMask(mask:Integer)
	{
		__WebGLRenderingContext_stencilMask(this.__uid, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilMaskSeparate(face:Integer, mask:Integer)
	{
		__WebGLRenderingContext_stencilMaskSeparate(this.__uid, face, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilOp(fail:Integer, zfail:Integer, zpass:Integer)
	{
		__WebGLRenderingContext_stencilOp(this.__uid, fail, zfail, zpass);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilOpSeparate(face:Integer, fail:Integer, zfail:Integer, zpass:Integer)
	{
		__WebGLRenderingContext_stencilOpSeparate(this.__uid, face, fail, zfail, zpass);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texImage2D(target:Integer, level:Integer, internalformat:Integer, format:Integer, type:Integer, image:Image)
	{
		__WebGLRenderingContext_texImage2D(this.__uid, target, level, internalformat, image.width, image.height, 0, format, type, image.__imageData.buffer.__uid, 0, image.__imageData.buffer.byteLength);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texParameterf(target:Integer, pname:Integer, param:Float)
	{
		__WebGLRenderingContext_texParameterf(this.__uid, target, pname, param);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texParameteri(target:Integer, pname:Integer, param:Integer)
	{
		__WebGLRenderingContext_texParameteri(this.__uid, target, pname, param);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array)
	{
		__WebGLRenderingContext_texSubImage2D(this.__uid, target, level, xoffset, yoffset, width, height, format, type, pixels.buffer.__uid, pixels.byteOffset, pixels.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1f(location:WebGLUniformLocation, x:Float)
	{
		__WebGLRenderingContext_uniform1f(this.__uid, location.__uid, x);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform1fv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1i(location:WebGLUniformLocation, x:Integer)
	{
		__WebGLRenderingContext_uniform1i(this.__uid, location.__uid, x);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform1iv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2f(location:WebGLUniformLocation, x:Float, y:Float)
	{
		__WebGLRenderingContext_uniform2f(this.__uid, location.__uid, x, y);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform2fv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2i(location:WebGLUniformLocation, x:Integer, y:Integer)
	{
		__WebGLRenderingContext_uniform2i(this.__uid, location.__uid, x, y);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform2iv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3f(location:WebGLUniformLocation, x:Float, y:Float, z:Float)
	{
		__WebGLRenderingContext_uniform3f(this.__uid, location.__uid, x, y, z);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform3fv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer)
	{
		__WebGLRenderingContext_uniform3i(this.__uid, location.__uid, x, y, z);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform3iv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4f(location:WebGLUniformLocation, x:Float, y:Float, z:Float, w:Float)
	{
		__WebGLRenderingContext_uniform4f(this.__uid, location.__uid, x, y, z, w);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform4fv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer, w:Integer)
	{
		__WebGLRenderingContext_uniform4i(this.__uid, location.__uid, x, y, z, w);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform4iv(this.__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniformMatrix2fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array)
	{
		__WebGLRenderingContext_uniformMatrix2fv(this.__uid, location.__uid, transpose, value.buffer.__uid, value.byteOffset, value.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniformMatrix3fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array)
	{
		__WebGLRenderingContext_uniformMatrix3fv(this.__uid, location.__uid, transpose, value.buffer.__uid, value.byteOffset, value.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniformMatrix4fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array)
	{
		__WebGLRenderingContext_uniformMatrix4fv(this.__uid, location.__uid, transpose, value.buffer.__uid, value.byteOffset, value.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function useProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_useProgram(this.__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function validateProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_validateProgram(this.__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib1f(indx:Integer, x:Float)
	{
		__WebGLRenderingContext_vertexAttrib1f(this.__uid, indx, x);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib1fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib1fv(this.__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib2f(indx:Integer, x:Float, y:Float)
	{
		__WebGLRenderingContext_vertexAttrib2f(this.__uid, indx, x, y);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib2fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib2fv(this.__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib3f(indx:Integer, x:Float, y:Float, z:Float)
	{
		__WebGLRenderingContext_vertexAttrib3f(this.__uid, indx, x, y, z);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib3fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib3fv(this.__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib4f(indx:Integer, x:Float, y:Float, z:Float, w:Float)
	{
		__WebGLRenderingContext_vertexAttrib4f(this.__uid, indx, x, y, z, w);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib4fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib4fv(this.__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttribPointer(indx:Integer, size:Integer, type:Integer, normalized:Boolean, stride:Integer, offset:Integer)
	{
		__WebGLRenderingContext_vertexAttribPointer(this.__uid, indx, size, type, normalized, stride, offset);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function viewport(x:Integer, y:Integer, width:Integer, height:Integer)
	{
		__WebGLRenderingContext_viewport(this.__uid, x, y, width, height);
	}
}







"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/WebGL/WebGLRenderingContext.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoAudio.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ___             ___
//	  / ____/___  _________  /   | __  ______/ (_)___
//	 / /   / __ \/ ___/ __ \/ /| |/ / / / __  / / __ \
//	/ /___/ /_/ / /__/ /_/ / ___ / /_/ / /_/ / / /_/ /
//	\____/\____/\___/\____/_/  |_\__,_/\__,_/_/\____/
//
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"

class CocoAudio
{
	public var src:String;
	public var audio:Audio;
	public var autoplay:Boolean;
	public var loops:Integer;
	private var __firstPlayed:Boolean;
	private var __loopCount:Integer;

	private var __refCount:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(url:String, autoplay:Boolean, loops:Integer)
	{
		src = url;
		audio = new Audio(url);
		audio.autoplay = false;		// Controlled by CocoAudio
		audio.loop = false;			// Controlled by CocoAudio
		this.autoplay = autoplay;
		this.loops = loops;
		__firstPlayed = false;
		__loopCount = 0;
		__refCount = 1;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		if(--__refCount==0)
		{
			delete audio;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function cloneNode(deep:Boolean) :CocoAudio
	{
		__refCount++;
		return this;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function tick()
	{
		if(!audio || !audio.src) return;

		if(!__firstPlayed && autoplay)
		{
			__firstPlayed = true;
			play();
		}

		if(loops>=0 && audio.ended)
		{
			__loopCount++;
			if(loops==0 || (loops>0 || __loopCount < loops))
				play();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function play()					{ if(audio) audio.play(); }
	public function pause()					{ if(audio) audio.pause(); }
	public function stop()					{ __loopCount=0; __firstPlayed=true; if(audio) audio.pause(); setCurrentTime(0); }
	public function duration() :Float   	{ return audio ? audio.duration : 0; }
	public function paused() :Boolean		{ return audio ? audio.paused : true; }
	public function ended() :Boolean		{ return audio ? audio.ended : true; }
	public function getCurrentTime() :Float	{ return audio ? audio.currentTime : 0; }
	public function setCurrentTime(t:Float)	{ if(audio) audio.currentTime = t; }
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoAudio.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoImageSibling.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____                          _____ _ __    ___
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____ / ___/(_) /_  / (_)___  ____ _
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \\__ \/ / __ \/ / / __ \/ __ `/
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/__/ / / /_/ / / / / / / /_/ /
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/____/_/_.___/_/_/_/ /_/\__, /
//	                                          /____/                            /____/
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"

class CocoImageSibling
{
	public var url:String;
	public var pixelRatio:Float;
	public var textureWidth:Float;
	public var textureHeight:Float;

	public function Constructor(url:String, pixelRatio:Float, textureWidth:Float, textureHeight:Float)
	{
		this.url = url;
		this.pixelRatio = pixelRatio;
		this.textureWidth = textureWidth;
		this.textureHeight = textureHeight;
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoImageSibling.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoRect.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____            __
//	  / ____/___  _________  / __ \___  _____/ /_
//	 / /   / __ \/ ___/ __ \/ /_/ / _ \/ ___/ __/
//	/ /___/ /_/ / /__/ /_/ / _, _/  __/ /__/ /_
//	\____/\____/\___/\____/_/ |_|\___/\___/\__/
//
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"

class CocoRect
{
	public var left:Float;
	public var top:Float;
	public var right:Float;
	public var bottom:Float;
}



"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoRect.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoSequence.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____
//	  / ____/___  _________ / ___/___  ____ ___  _____  ____  ________
//	 / /   / __ \/ ___/ __ \\__ \/ _ \/ __ `/ / / / _ \/ __ \/ ___/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ /  __/ /_/ / /_/ /  __/ / / / /__/  __/
//	\____/\____/\___/\____/____/\___/\__, /\__,_/\___/_/ /_/\___/\___/
//	                                   /_/
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"

class CocoSequence
{
	public var name:String;
	public var frames:Array<Integer>;

	public function Constructor(name:String, framesArray:Array<Integer>)
	{
		this.name = name;
		this.frames = framesArray;
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoSequence.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoImage.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/
//	                                          /____/
// ==================================================================================================================================

"#include CocoSequence.jspp"
"#include WebGLTexture.jspp"
"#include WebGLBuffer.jspp"
"#include CocoImageSibling.jspp"
"#include WebGLRenderingContext.jspp"

class CocoImage
{
	public var symbolName:String;
	public var image:Image;

	// Texture
	public var texture:WebGLTexture;
	public var textureCellWidth:Float;
	public var textureCellHeight:Float;
	public var textureGrid:Float32Array;
	public var color:Float32Array;
	public var texSize:Float32Array;
	public var buffer:WebGLBuffer;
	public var isSpriteSheet:Boolean;
	public var __pixelRatioScale:Float;

	// Sprite
	public var sequences:Array<CocoSequence>;

	// Resolution Siblings
	public var baseUrl:String;
	public var viewOptimalWidth:Integer;
	public var viewOptimalHeight:Integer;
	public var viewSiblings:Array<CocoImageSibling>;
	public var pixelRatio:Float;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		image				= null;
		symbolName			= "";
		texture				= null;
		textureCellWidth	= 0;
		textureCellHeight	= 0;
		textureGrid			= new Float32Array([0.0, 0.0]);
		color				= new Float32Array([1.0, 1.0, 1.0, 1.0]);
		texSize				= new Float32Array([1.0, 1.0]);
		buffer				= null;
		isSpriteSheet		= false;
		sequences 			= [];
		baseUrl				= "";
		viewOptimalWidth	= 0;
		viewOptimalHeight	= 0;
		viewSiblings		= [];
		pixelRatio			= 1.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete texture;
		delete textureGrid;
		delete color;
		delete texSize;
		delete buffer;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSibling(sibling:CocoImageSibling) :CocoImageSibling
	{
		viewSiblings.push(sibling);
		return sibling;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSequence(sequence:CocoSequence) :CocoSequence
	{
		if(!sequence) return null;
		if(getSequence(sequence.name)) throw "Sequence " + sequence.name + " already exists.";
		sequences.push(sequence);
		isSpriteSheet = true;
		return sequence;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSequence(name:String) :CocoSequence
	{
		for (var i:Integer = sequences.size() - 1; i >= 0; i--)
		{
			if(sequences[i].name == name)
				return sequences[i];
		}
		return null;
	}

	/*
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createWithText(font:CocoFont, text:String)
	{
		image = new Image();
		image.__width = 512;
		image.__height = 512;
		image.__imageData = new ImageData(image.width, image.height);
		image.__imageData.__buffer.clear();
		font.fillText(image.__imageData.__buffer, image.width, text, 0, 0);
		textureCellWidth = font.measureText(text);
		textureCellHeight = font.height;
	}
	*/

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(scene:CocoScene, gl:WebGLRenderingContext)
	{
		__pixelRatioScale = scene.__view_pixel_ratio / pixelRatio;

		// Calc texture data and size.
		var w2:Float = textureCellWidth / 2.0;
		var h2:Float = textureCellHeight / 2.0;
		texSize = new Float32Array([textureCellWidth / image.naturalWidth, textureCellHeight / image.naturalHeight]);

		// Create a texture and bind it.
		texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture);

		// Load image data to texture.
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

		// Instruct WebGL how to wrap the texture.
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

		// Instruct WebGL how to filter the texture when rendering.
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);

		// Generate mipmaps.
		gl.generateMipmap(gl.TEXTURE_2D);

		// Done
		gl.bindTexture(gl.TEXTURE_2D, null);

		var texData:Float32Array = new Float32Array([0.0, 0.0, -w2, -h2, 0.0, 1.0, -w2, h2, 1.0, 0.0, w2, -h2, 1.0, 1.0, w2, h2]);
		buffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
		gl.bufferData(gl.ARRAY_BUFFER, texData, gl.STATIC_DRAW);
		gl.bindBuffer(gl.ARRAY_BUFFER, null);
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoImage.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoTimeLabel.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______               _______                __          __         __
//	  / ____/___  _________/_  __(_)___ ___  ___  / /   ____ _/ /_  ___  / /
//	 / /   / __ \/ ___/ __ \/ / / / __ `__ \/ _ \/ /   / __ `/ __ \/ _ \/ /
//	/ /___/ /_/ / /__/ /_/ / / / / / / / / /  __/ /___/ /_/ / /_/ /  __/ /
//	\____/\____/\___/\____/_/ /_/_/ /_/ /_/\___/_____/\__,_/_.___/\___/_/
//
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"

class CocoTimeLabel
{
	public var frameIndex:Integer;
	public var name:String;

	public function Constructor(FrameIndex:Integer, LabelName:String)
	{
		frameIndex = FrameIndex;
		name = LabelName;
	}
}







"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoTimeLabel.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoVector.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______               _    __          __
//	  / ____/___  _________| |  / /__  _____/ /_____  _____
//	 / /   / __ \/ ___/ __ \ | / / _ \/ ___/ __/ __ \/ ___/
//	/ /___/ /_/ / /__/ /_/ / |/ /  __/ /__/ /_/ /_/ / /
//	\____/\____/\___/\____/|___/\___/\___/\__/\____/_/
//
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"

class CocoVector
{
	public var X: Float;
	public var Y: Float;
	public var Z: Float;
	public var W: Float;

	public function Constructor()
	{
		X = 0.0;
		Y = 0.0;
		Z = 0.0;
		W = 1.0;
	}

	public function reset(x:Float, y:Float, z:Float, w:Float)
	{
		X = x;
		Y = y;
		Z = z;
		W = w;
	}
}









"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoVector.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoMatrix.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 __  ___      __       _
//	  / ____/___  _________  /  |/  /___ _/ /______(_)  __
//	 / /   / __ \/ ___/ __ \/ /|_/ / __ `/ __/ ___/ / |/_/
//	/ /___/ /_/ / /__/ /_/ / /  / / /_/ / /_/ /  / />  <
//	\____/\____/\___/\____/_/  /_/\__,_/\__/_/  /_/_/|_|
//
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"
"#include WebGLUniformLocation.jspp"
"#include CocoVector.jspp"

class CocoMatrix
{
	public var rc11:Float;
	public var rc12:Float;
	public var rc13:Float;
	public var rc14:Float;
	public var rc21:Float;
	public var rc22:Float;
	public var rc23:Float;
	public var rc24:Float;
	public var rc31:Float;
	public var rc32:Float;
	public var rc33:Float;
	public var rc34:Float;
	public var rc41:Float;
	public var rc42:Float;
	public var rc43:Float;
	public var rc44:Float;

	public var __stack:Array<Float32Array>;
	public var __data:Float32Array;
	public var __dirty:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional M:CocoMatrix)
	{
		if(M)
		{
			rc11 = M.rc11;
			rc12 = M.rc12;
			rc13 = M.rc13;
			rc14 = M.rc14;
			rc21 = M.rc21;
			rc22 = M.rc22;
			rc23 = M.rc23;
			rc24 = M.rc24;
			rc31 = M.rc31;
			rc32 = M.rc32;
			rc33 = M.rc33;
			rc34 = M.rc34;
			rc41 = M.rc41;
			rc42 = M.rc42;
			rc43 = M.rc43;
			rc44 = M.rc44;
		}
		else
			identity();

		__data = new Float32Array( [rc11, rc12, rc13, rc14, rc21, rc22, rc23, rc24, rc31, rc32, rc33, rc34, rc41, rc42, rc43, rc44 ]);
		__dirty = false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __stack;
		delete __data;
	}

	// ==================================================================================================================================
	//	    __  ___      __       _         ____                        __  _
	//	   /  |/  /___ _/ /______(_)  __   / __ \____  ___  _________ _/ /_(_)___  ____  _____
	//	  / /|_/ / __ `/ __/ ___/ / |/_/  / / / / __ \/ _ \/ ___/ __ `/ __/ / __ \/ __ \/ ___/
	//	 / /  / / /_/ / /_/ /  / />  <   / /_/ / /_/ /  __/ /  / /_/ / /_/ / /_/ / / / (__  )
	//	/_/  /_/\__,_/\__/_/  /_/_/|_|   \____/ .___/\___/_/   \__,_/\__/_/\____/_/ /_/____/
	//	                                     /_/
	// ==================================================================================================================================

	public function identity()
	{
	    rc11 = 1; rc12 = 0; rc13 = 0; rc14 = 0;
	    rc21 = 0; rc22 = 1; rc23 = 0; rc24 = 0;
	    rc31 = 0; rc32 = 0; rc33 = 1; rc34 = 0;
	    rc41 = 0; rc42 = 0; rc43 = 0; rc44 = 1;
	    __dirty = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function ortho(left:Float, right:Float, bottom:Float, top:Float, near:Float, far:Float)
	{
		rc11 = 2 / (right - left);
		rc12 = 0.0;
		rc13 = 0.0;
		rc14 = 0.0;
		rc21 = 0.0;
		rc22 = 2 / (top - bottom);
		rc23 = 0.0;
		rc24 = 0.0;
		rc31 = 0.0;
		rc32 = 0.0;
		rc33 = -2 / (far - near);
		rc34 = 0.0;
		rc41 = -(right + left) / (right - left);
		rc42 = -(top + bottom) / (top - bottom);
		rc43 = -(far + near) / (far - near);
		rc44 = 1.0;
		__dirty = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function transpose()
	{
	    var t:Float;
	    t = rc12; rc12 = rc21; rc21 = t;
	    t = rc13; rc13 = rc31; rc31 = t;
	    t = rc14; rc14 = rc41; rc41 = t;
	    t = rc21; rc21 = rc12; rc12 = t;
	    t = rc23; rc23 = rc32; rc32 = t;
	    t = rc24; rc24 = rc42; rc42 = t;
	    t = rc31; rc31 = rc13; rc13 = t;
	    t = rc32; rc32 = rc23; rc23 = t;
	    t = rc34; rc34 = rc43; rc43 = t;
	    t = rc41; rc41 = rc14; rc14 = t;
	    t = rc42; rc42 = rc24; rc24 = t;
	    t = rc43; rc43 = rc34; rc34 = t;
	    __dirty = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function determinant() :Float
	{
	    var D:Float = 	(rc14 * rc23 * rc32 * rc41) - (rc13 * rc24 * rc32 * rc41) - (rc14 * rc22 * rc33 * rc41) + (rc12 * rc24 * rc33 * rc41) +
				        (rc13 * rc22 * rc34 * rc41) - (rc12 * rc23 * rc34 * rc41) - (rc14 * rc23 * rc31 * rc42) + (rc13 * rc24 * rc31 * rc42) +
				        (rc14 * rc21 * rc33 * rc42) - (rc11 * rc24 * rc33 * rc42) - (rc13 * rc21 * rc34 * rc42) + (rc11 * rc23 * rc34 * rc42) +
				        (rc14 * rc22 * rc31 * rc43) - (rc12 * rc24 * rc31 * rc43) - (rc14 * rc21 * rc32 * rc43) + (rc11 * rc24 * rc32 * rc43) +
				        (rc12 * rc21 * rc34 * rc43) - (rc11 * rc22 * rc34 * rc43) - (rc13 * rc22 * rc31 * rc44) + (rc12 * rc23 * rc31 * rc44) +
				        (rc13 * rc21 * rc32 * rc44) - (rc11 * rc23 * rc32 * rc44) - (rc12 * rc21 * rc33 * rc44) + (rc11 * rc22 * rc33 * rc44);
		return D;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function invert()
	{
	    var D:Float = determinant();
	    if(D == 0) return;

	    var invRC11:Float = (rc23 * rc34 * rc42) - (rc24 * rc33 * rc42) + (rc24 * rc32 * rc43) - (rc22 * rc34 * rc43) - (rc23 * rc32 * rc44) + (rc22 * rc33 * rc44);
	    var invRC12:Float = (rc14 * rc33 * rc42) - (rc13 * rc34 * rc42) - (rc14 * rc32 * rc43) + (rc12 * rc34 * rc43) + (rc13 * rc32 * rc44) - (rc12 * rc33 * rc44);
	    var invRC13:Float = (rc13 * rc24 * rc42) - (rc14 * rc23 * rc42) + (rc14 * rc22 * rc43) - (rc12 * rc24 * rc43) - (rc13 * rc22 * rc44) + (rc12 * rc23 * rc44);
	    var invRC14:Float = (rc14 * rc23 * rc32) - (rc13 * rc24 * rc32) - (rc14 * rc22 * rc33) + (rc12 * rc24 * rc33) + (rc13 * rc22 * rc34) - (rc12 * rc23 * rc34);

	    var invRC21:Float = (rc24 * rc33 * rc41) - (rc23 * rc34 * rc41) - (rc24 * rc31 * rc43) + (rc21 * rc34 * rc43) + (rc23 * rc31 * rc44) - (rc21 * rc33 * rc44);
	    var invRC22:Float = (rc13 * rc34 * rc41) - (rc14 * rc33 * rc41) + (rc14 * rc31 * rc43) - (rc11 * rc34 * rc43) - (rc13 * rc31 * rc44) + (rc11 * rc33 * rc44);
	    var invRC23:Float = (rc14 * rc23 * rc41) - (rc13 * rc24 * rc41) - (rc14 * rc21 * rc43) + (rc11 * rc24 * rc43) + (rc13 * rc21 * rc44) - (rc11 * rc23 * rc44);
	    var invRC24:Float = (rc13 * rc24 * rc31) - (rc14 * rc23 * rc31) + (rc14 * rc21 * rc33) - (rc11 * rc24 * rc33) - (rc13 * rc21 * rc34) + (rc11 * rc23 * rc34);

	    var invRC31:Float = (rc22 * rc34 * rc41) - (rc24 * rc32 * rc41) + (rc24 * rc31 * rc42) - (rc21 * rc34 * rc42) - (rc22 * rc31 * rc44) + (rc21 * rc32 * rc44);
	    var invRC32:Float = (rc14 * rc32 * rc41) - (rc12 * rc34 * rc41) - (rc14 * rc31 * rc42) + (rc11 * rc34 * rc42) + (rc12 * rc31 * rc44) - (rc11 * rc32 * rc44);
	    var invRC33:Float = (rc12 * rc24 * rc41) - (rc14 * rc22 * rc41) + (rc14 * rc21 * rc42) - (rc11 * rc24 * rc42) - (rc12 * rc21 * rc44) + (rc11 * rc22 * rc44);
	    var invRC34:Float = (rc14 * rc22 * rc31) - (rc12 * rc24 * rc31) - (rc14 * rc21 * rc32) + (rc11 * rc24 * rc32) + (rc12 * rc21 * rc34) - (rc11 * rc22 * rc34);

	    var invRC41:Float = (rc23 * rc32 * rc41) - (rc22 * rc33 * rc41) - (rc23 * rc31 * rc42) + (rc21 * rc33 * rc42) + (rc22 * rc31 * rc43) - (rc21 * rc32 * rc43);
	    var invRC42:Float = (rc12 * rc33 * rc41) - (rc13 * rc32 * rc41) + (rc13 * rc31 * rc42) - (rc11 * rc33 * rc42) - (rc12 * rc31 * rc43) + (rc11 * rc32 * rc43);
	    var invRC43:Float = (rc13 * rc22 * rc41) - (rc12 * rc23 * rc41) - (rc13 * rc21 * rc42) + (rc11 * rc23 * rc42) + (rc12 * rc21 * rc43) - (rc11 * rc22 * rc43);
	    var invRC44:Float = (rc12 * rc23 * rc31) - (rc13 * rc22 * rc31) + (rc13 * rc21 * rc32) - (rc11 * rc23 * rc32) - (rc12 * rc21 * rc33) + (rc11 * rc22 * rc33);

	    rc11 = invRC11 / D;
	    rc12 = invRC12 / D;
	    rc13 = invRC13 / D;
	    rc14 = invRC14 / D;

	    rc21 = invRC21 / D;
	    rc22 = invRC22 / D;
	    rc23 = invRC23 / D;
	    rc24 = invRC24 / D;

	    rc31 = invRC31 / D;
	    rc32 = invRC32 / D;
	    rc33 = invRC33 / D;
	    rc34 = invRC34 / D;

	    rc41 = invRC41 / D;
	    rc42 = invRC42 / D;
	    rc43 = invRC43 / D;
	    rc44 = invRC44 / D;

	    __dirty = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function multiplyByVector(v:CocoVector) :CocoVector
	{
	    var out:CocoVector = new CocoVector();
        out.X = (v.X * rc11) + (v.Y * rc21) + (v.Z * rc31) + (v.W * rc41);
        out.Y = (v.X * rc12) + (v.Y * rc22) + (v.Z * rc32) + (v.W * rc42);
        out.Z = (v.X * rc13) + (v.Y * rc23) + (v.Z * rc33) + (v.W * rc43);
        out.W = (v.X * rc14) + (v.Y * rc24) + (v.Z * rc34) + (v.W * rc44);
        return out;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function multiplyByMatrix(v:CocoMatrix) :CocoMatrix
	{
		var out:CocoMatrix = new CocoMatrix();

		out.rc11 = (rc11 * v.rc11) + (rc21 * v.rc12) + (rc31 * v.rc13) + (rc41 * v.rc14);
		out.rc12 = (rc12 * v.rc11) + (rc22 * v.rc12) + (rc32 * v.rc13) + (rc42 * v.rc14);
		out.rc13 = (rc13 * v.rc11) + (rc23 * v.rc12) + (rc33 * v.rc13) + (rc43 * v.rc14);
		out.rc14 = (rc14 * v.rc11) + (rc24 * v.rc12) + (rc34 * v.rc13) + (rc44 * v.rc14);

		out.rc21 = (rc11 * v.rc21) + (rc21 * v.rc22) + (rc31 * v.rc23) + (rc41 * v.rc24);
		out.rc22 = (rc12 * v.rc21) + (rc22 * v.rc22) + (rc32 * v.rc23) + (rc42 * v.rc24);
		out.rc23 = (rc13 * v.rc21) + (rc23 * v.rc22) + (rc33 * v.rc23) + (rc43 * v.rc24);
		out.rc24 = (rc14 * v.rc21) + (rc24 * v.rc22) + (rc34 * v.rc23) + (rc44 * v.rc24);

		out.rc31 = (rc11 * v.rc31) + (rc21 * v.rc32) + (rc31 * v.rc33) + (rc41 * v.rc34);
		out.rc32 = (rc12 * v.rc31) + (rc22 * v.rc32) + (rc32 * v.rc33) + (rc42 * v.rc34);
		out.rc33 = (rc13 * v.rc31) + (rc23 * v.rc32) + (rc33 * v.rc33) + (rc43 * v.rc34);
		out.rc34 = (rc14 * v.rc31) + (rc24 * v.rc32) + (rc34 * v.rc33) + (rc44 * v.rc34);

		out.rc41 = (rc11 * v.rc41) + (rc21 * v.rc42) + (rc31 * v.rc43) + (rc41 * v.rc44);
		out.rc42 = (rc12 * v.rc41) + (rc22 * v.rc42) + (rc32 * v.rc43) + (rc42 * v.rc44);
		out.rc43 = (rc13 * v.rc41) + (rc23 * v.rc42) + (rc33 * v.rc43) + (rc43 * v.rc44);
		out.rc44 = (rc14 * v.rc41) + (rc24 * v.rc42) + (rc34 * v.rc43) + (rc44 * v.rc44);

		out.__dirty = true;
		return out;
	}

	// ==================================================================================================================================
	//	  ______                      ____                           __  _
	//	 /_  __/________ _____  _____/ __/___  _________ ___  ____ _/ /_(_)___  ____  _____
	//	  / / / ___/ __ `/ __ \/ ___/ /_/ __ \/ ___/ __ `__ \/ __ `/ __/ / __ \/ __ \/ ___/
	//	 / / / /  / /_/ / / / (__  ) __/ /_/ / /  / / / / / / /_/ / /_/ / /_/ / / / (__  )
	//	/_/ /_/   \__,_/_/ /_/____/_/  \____/_/  /_/ /_/ /_/\__,_/\__/_/\____/_/ /_/____/
	//
	// ==================================================================================================================================

	public function translate(tx:Float, ty:Float)
	{
		rc41 += rc11 * tx + rc21 * ty;
		rc42 += rc12 * tx + rc22 * ty;
		rc43 += rc13 * tx + rc23 * ty;
		__dirty = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function scale(sx:Float, sy:Float)
	{
		rc11 *= sx;
		rc21 *= sy;
		rc12 *= sx;
		rc22 *= sy;
		rc13 *= sx;
		rc23 *= sy;
		rc14 *= sx;
		rc24 *= sy;
		__dirty = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function rotateZ(rz:Float)
	{
		// counter-clockwise rotation around Z-axis (perpendicular to the screen)
		var c:Float = Math.cos(rz);
		var s:Float = Math.sin(rz);
		var t0:Float, t1:Float;

		t0 = rc11;
		t1 = rc21;
		rc11 =  t0 * c + t1 * s;
		rc21 = -t0 * s + t1 * c;

		t0 = rc12;
		t1 = rc22;
		rc12 =  t0 * c + t1 * s;
		rc22 = -t0 * s + t1 * c;

		t0 = rc13;
		t1 = rc23;
		rc13 =  t0 * c + t1 * s;
		rc23 = -t0 * s + t1 * c;

		t0 = rc14;
		t1 = rc24;
		rc14 =  t0 * c + t1 * s;
		rc24 = -t0 * s + t1 * c;

		__dirty = true;
	}

	// ==================================================================================================================================
	//	   ____                   ________
	//	  / __ \____  ___  ____  / ____/ /
	//	 / / / / __ \/ _ \/ __ \/ / __/ /
	//	/ /_/ / /_/ /  __/ / / / /_/ / /___
	//	\____/ .___/\___/_/ /_/\____/_____/
	//	    /_/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function refresh()
	{
		__data[0]  = rc11;
		__data[1]  = rc12;
		__data[2]  = rc13;
		__data[3]  = rc14;
		__data[4]  = rc21;
		__data[5]  = rc22;
		__data[6]  = rc23;
		__data[7]  = rc24;
		__data[8]  = rc31;
		__data[9]  = rc32;
		__data[10] = rc33;
		__data[11] = rc34;
		__data[12] = rc41;
		__data[13] = rc42;
		__data[14] = rc43;
		__data[15] = rc44;
		__dirty = false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function update(gl:WebGLRenderingContext, ul:WebGLUniformLocation)
	{
		if(gl && ul)
		{
			if(__dirty)	refresh();
			gl.uniformMatrix4fv(ul, false, __data);
		}
	}

	// ==================================================================================================================================
	//	   _____ __             __
	//	  / ___// /_____ ______/ /__
	//	  \__ \/ __/ __ `/ ___/ //_/
	//	 ___/ / /_/ /_/ / /__/ ,<
	//	/____/\__/\__,_/\___/_/|_|
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function push()
	{
		__stack.push( new Float32Array([rc11, rc12, rc13, rc14, rc21, rc22, rc23, rc24, rc31, rc32, rc33, rc34, rc41, rc42, rc43, rc44 ]) );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function pop()
	{
		if(__stack.size())
		{
			var data:Float32Array = __stack.pop();
			rc11 = data[0];
			rc12 = data[1];
			rc13 = data[2];
			rc14 = data[3];
			rc21 = data[4];
			rc22 = data[5];
			rc23 = data[6];
			rc24 = data[7];
			rc31 = data[8];
			rc32 = data[9];
			rc33 = data[10];
			rc34 = data[11];
			rc41 = data[12];
			rc42 = data[13];
			rc43 = data[14];
			rc44 = data[15];
			__dirty = true;
			delete data;
		}
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoMatrix.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoKeyFrame.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 __ __           ______
//	  / ____/___  _________  / //_/__  __  __/ ____/________ _____ ___  ___
//	 / /   / __ \/ ___/ __ \/ ,< / _ \/ / / / /_  / ___/ __ `/ __ `__ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /| /  __/ /_/ / __/ / /  / /_/ / / / / / /  __/
//	\____/\____/\___/\____/_/ |_\___/\__, /_/   /_/   \__,_/_/ /_/ /_/\___/
//	                                /____/
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"
"#include CocoMatrix.jspp"

class CocoKeyFrame
{
	public var frameIndex:Integer;
	public var frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var handleEvents:Boolean;
	public var visible:Boolean;
	public var red:Float;
	public var green:Float;
	public var blue:Float;
	public var alpha:Float;
	public var x:Float;
	public var y:Float;
	public var pivotX:Float;
	public var pivotY:Float;
	public var scaleX:Float;
	public var scaleY:Float;
	public var rotation:Float;
	public var action:Function;
	public var nextState:State;
	public var audio:CocoAudio;
	public var flipH:Boolean;
	public var flipV:Boolean;

	private var __lastActionExecutionTime:Time;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		frameIndex					= 0;
		frameInterpolation 			= COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN;
		handleEvents 				= false;
		visible						= true;
		x							= 0.0;
		y							= 0.0;
		scaleX						= 1.0;
		scaleY						= 1.0;
		rotation					= 0.0;
		pivotX						= 0.0;
		pivotY						= 0.0;
		red							= 1.0;
		green						= 1.0;
		blue						= 1.0;
		alpha						= 1.0;
		action						= null;
		nextState					= null;
		audio						= null;
		flipH						= false;
		flipV						= false;
		__lastActionExecutionTime 	= 0.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete audio;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clone(exact:Boolean) :CocoKeyFrame
	{
	    var c:CocoKeyFrame = new CocoKeyFrame();

		c.red						= red;
		c.green						= green;
		c.blue						= blue;
		c.alpha						= alpha;
		c.frameIndex            	= frameIndex;
		c.frameInterpolation    	= frameInterpolation;
		c.handleEvents          	= handleEvents;
		c.pivotX                	= pivotX;
		c.pivotY                	= pivotY;
		c.rotation              	= rotation;
		c.scaleX                	= scaleX;
		c.scaleY                	= scaleY;
		c.visible               	= visible;
		c.x                     	= x;
		c.y                     	= y;
		c.flipH						= flipH;
		c.flipV						= flipV;

        if(exact)
        {
			c.action				= action;
			c.nextState				= nextState;
			c.audio					= audio ? audio.cloneNode(true) : null;
        }

 		c.__lastActionExecutionTime	= __lastActionExecutionTime;

	    return c;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
		__lastActionExecutionTime = 0.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function execute(gl:WebGLRenderingContext, scene:CocoScene, clip:CocoClip) :Boolean
	{
		//gl:WebGLRenderingContext, currentTime:Float, loopTime:Float, clip:CocoClip, keyFrame:CocoKeyFrame

		var pulse:Boolean = false;

		if((__lastActionExecutionTime==0) || (__lastActionExecutionTime > 0 && clip.__currentTime - __lastActionExecutionTime > clip.__timeline.__singleFrameDurationTime))
		{
			__lastActionExecutionTime = clip.__currentTime;

			if(action)
			{
				engine.__trace(scene, clip, "@@ACTION");
				var args:Array = [gl, clip, this];
				action.apply(scene, args);
			}

			if(nextState)
			{
				engine.__trace(scene, clip, "@@NEXT_STATE");
				engine.setNextState(nextState);
			}

			if(audio)
			{
				engine.__trace(scene, clip, "@@AUDIO");
				audio.tick();
			}

			pulse = true;
		}

		return pulse;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolate(F1:CocoKeyFrame, F2:CocoKeyFrame, s:Float)
	{
		red = F1.red + s * (F2.red - F1.red);
		green = F1.green + s * (F2.green - F1.green);
		blue = F1.blue + s * (F2.blue - F1.blue);
	    alpha = F1.alpha + s * (F2.alpha - F1.alpha);
	    x = F1.x + s * (F2.x - F1.x);
	    y = F1.y + s * (F2.y - F1.y);
	    scaleX = F1.scaleX + s * (F2.scaleX - F1.scaleX);
	    scaleY = F1.scaleY + s * (F2.scaleY - F1.scaleY);
	    rotation = F1.rotation + s * (F2.rotation - F1.rotation);
	    pivotX = F1.pivotX + s * (F2.pivotX - F1.pivotX);
	    pivotY = F1.pivotY + s * (F2.pivotY - F1.pivotY);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function combine(Frame:CocoKeyFrame)
	{
		if(!Frame) return;
		red = red * Frame.red;
		green = green * Frame.green;
		blue = blue * Frame.blue;
	    alpha = alpha * Frame.alpha;
	    visible = visible && Frame.visible;
	    flipH = (flipH && !Frame.flipH) || (!flipH && Frame.flipH);
	    flipV = (flipV && !Frame.flipV) || (!flipV && Frame.flipV);
	}

	public function apply(matrix:CocoMatrix)
	{
		if(x!=0 || y!=0) matrix.translate(x, y);
		if(rotation!=0) matrix.rotateZ(rotation * RADIANS);
		if(scaleX!=1 ||scaleY!=1) matrix.scale(scaleX, scaleY);
		if(pivotX!=0 || pivotY!=0) matrix.translate(-pivotX, -pivotY);
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoKeyFrame.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoTimeline.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______               _______                ___
//	  / ____/___  _________/_  __(_)___ ___  ___  / (_)___  ___
//	 / /   / __ \/ ___/ __ \/ / / / __ `__ \/ _ \/ / / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / / / / / / / / /  __/ / / / / /  __/
//	\____/\____/\___/\____/_/ /_/_/ /_/ /_/\___/_/_/_/ /_/\___/
//
// ==================================================================================================================================

"#include CocoKeyFrame.jspp"
"#include CocoTimeLabel.jspp"

class CocoTimeline
{
	public var __labels:Array<CocoTimeLabel>;
	public var __keyFrames:Array<CocoKeyFrame>;
	public var __singleFrameDurationTime:Time;
	public var __durationInTime:Time;
	public var __durationInFrames:Integer;
	public var __paused:Boolean;
	public var __fps:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__singleFrameDurationTime	= 0.0;
		__durationInTime			= 0.0;
		__durationInFrames			= 0;
		__paused					= false;
		__fps						= 30;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __labels;
		delete __keyFrames;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clear()
	{
		reset();
		__keyFrames = [];
		__labels = [];
		normalizetimeline();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
		__paused = false;
		for (var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			__keyFrames[i].reset();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addLabel(Label:CocoTimeLabel) :CocoTimeLabel
	{
		if (Label) __labels.push(Label);
		return Label;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addLabelEx(FrameIndex:Integer, LabelName:String) :CocoTimeLabel
	{
		var Label:CocoTimeLabel = new CocoTimeLabel(FrameIndex, LabelName);
		return addLabel(Label);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findLabelByName(LabelName:String) :CocoTimeLabel
	{
		for(var i:Integer = __labels.size() - 1; i >= 0; i--)
		{
			if(__labels[i].name == LabelName)
			{
				return __labels[i];
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function keyFrame(frameIndex:Integer) :CocoKeyFrame
	{
		for(var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			if(__keyFrames[i].frameIndex == frameIndex)
			{
				return __keyFrames[i];
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function firstKeyFrame() :CocoKeyFrame
	{
		return __keyFrames[0];
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function lastKeyFrame() :CocoKeyFrame
	{
		return __keyFrames[__keyFrames.size() - 1];
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrame(KeyFrame:CocoKeyFrame) :CocoKeyFrame
	{
		if(KeyFrame)
		{
			KeyFrame.frameIndex = Math.floor(KeyFrame.frameIndex);
			__keyFrames.push(KeyFrame);
			normalizetimeline();
		}
		return KeyFrame;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrameEx(nextState:State,
								  actionCallback:Function,
								  frameIndex:Integer,
								  frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM,
								  handleEvents:Boolean,
								  visible:Boolean,
								  x:Float,
								  y:Float,
								  scaleX:Float,
								  scaleY:Float,
								  rotation:Float,
								  pivotX:Float,
								  pivotY:Float,
								  red:Float,
								  green:Float,
								  blue:Float,
								  alpha:Float,
								  audio:CocoAudio,
								  flipH:Boolean,
								  flipV:Boolean) :CocoKeyFrame
	{
	    var KeyFrame:CocoKeyFrame = new CocoKeyFrame();

	    KeyFrame.nextState			= nextState;
	    KeyFrame.action				= actionCallback;
	    KeyFrame.frameIndex 		= frameIndex;
	    KeyFrame.frameInterpolation = frameInterpolation;
	    KeyFrame.handleEvents 		= handleEvents;
	    KeyFrame.visible 			= visible;
	    KeyFrame.x 					= x;
	    KeyFrame.y 					= y;
	    KeyFrame.scaleX				= scaleX;
	    KeyFrame.scaleY				= scaleY;
	    KeyFrame.rotation 			= rotation;
	    KeyFrame.pivotX 			= pivotX;
	    KeyFrame.pivotY 			= pivotY;
	    KeyFrame.red 				= red;
	    KeyFrame.green 				= green;
	    KeyFrame.blue 				= blue;
	    KeyFrame.alpha 				= alpha;
	    KeyFrame.audio				= audio;
	    KeyFrame.flipH				= flipH;
	    KeyFrame.flipV				= flipV;

	    return addKeyFrame(KeyFrame);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(scene:CocoScene, clip:CocoClip)
	{
		__fps = scene.__fps;
		normalizetimeline();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function normalizetimeline()
	{
		reset();
		__durationInFrames = 0;
		__durationInTime = 0;
		__singleFrameDurationTime = 0;
		if (__keyFrames.size() > 0)
		{
			__durationInFrames = __keyFrames[__keyFrames.size() - 1].frameIndex + 1;
			__durationInTime = Time((__durationInFrames / __fps) * 1000);
			__singleFrameDurationTime = __durationInTime / Time(__durationInFrames);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameBeforeframeIndex(frameIndex:Integer, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame
	{
		var KeyFrame:CocoKeyFrame;
		for (var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			if (i != excludeListIndex)
			{
				KeyFrame = __keyFrames[i];
				if (inclusive)
				{
					if (KeyFrame.frameIndex <= frameIndex)
					return KeyFrame;
				}
				else
				{
					if (KeyFrame.frameIndex < frameIndex)
					return KeyFrame;
				}
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameAfterframeIndex(frameIndex:Integer, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame
	{
		var KeyFrame:CocoKeyFrame;
		for(var i:Integer = 0, L:Integer = __keyFrames.size(); i < L; i++)
		{
			if (i != excludeListIndex)
			{
				KeyFrame = __keyFrames[i];
				if (inclusive)
				{
					if (KeyFrame.frameIndex >= frameIndex)
					return KeyFrame;
				}
				else
				{
					if (KeyFrame.frameIndex > frameIndex)
					return KeyFrame;
				}
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolate(frameIndex:Integer) :CocoKeyFrame
	{
	    var F:CocoKeyFrame = null;
	    var F1:CocoKeyFrame = null;
	    var F2:CocoKeyFrame = null;
	    var s:Float = 1.0;

	    // Timeline is empty?
	    if(__keyFrames.size()==0)
	    {
	        F = new CocoKeyFrame();
	        F.frameIndex = frameIndex;
	        F.visible = false;
	        return F;
	    }

	    // Exact KeyFrame exists?
	    F1 = keyFrame(frameIndex);
	    if(F1)
	    {
	    	F1 = F1.clone(true);
	    	return F1;
	    }

	    // Seek previous KeyFrame
	    F1 = findKeyFrameBeforeframeIndex(frameIndex, false, -1);

	    if(!F1)
	    {
	        // No previous KeyFrame
	        F = new CocoKeyFrame();
	        F.frameIndex = frameIndex;
	        F.visible = false;
	        return F;
	    }
	    else
	    {
	        switch(F1.frameInterpolation)
	        {
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO:

	            F = F1.clone(false);
	            F.frameIndex = frameIndex;
	            return F;

	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE:

	            F = F1.clone(false);
	            F.frameIndex = frameIndex;
	            F.visible = false;
	            return F;

	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN:

	            // We need the next KeyFrame now
	            F2 = findKeyFrameAfterframeIndex(frameIndex, false, -1);

	            if(!F2)
	            {
	                // Fallback to echo
	                F = F1.clone(false);
	                F.frameIndex = frameIndex;
	                return F;

	            }
	            else
	            {
	                // Interpolate between frames
	                F = F1.clone(false);
	                F.frameIndex = frameIndex;
	                s = Float((frameIndex - F1.frameIndex) / (F2.frameIndex - F1.frameIndex));
	                F.interpolate(F1, F2, s);
	                return F;
	            }

	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_PHYSICS:
	        	break;
	        }
	    }
	    return null;
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoTimeline.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoClip.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______				  _________
//	  / ____/___  _________  / ____/ (_)___
//	 / /   / __ \/ ___/ __ \/ /   / / / __ \
//	/ /___/ /_/ / /__/ /_/ / /___/ / / /_/ /
//	\____/\____/\___/\____/\____/_/_/ .___/
//								   /_/
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"
"#include CocoMatrix.jspp"
"#include CocoImage.jspp"
"#include CocoAudio.jspp"
"#include CocoTimeline.jspp"

class CocoClip
{
	public var __instanceName:String;
	public var __image:CocoImage;
	public var __symbolLoop:COCO_CLIP_SYMBOL_LOOP_ENUM;
	public var __children:Array<CocoClip>;
	public var __currentSequence:CocoSequence;
	public var __currentSequenceFrameIndex:Integer;
	public var __timeline:CocoTimeline;
	public var __parent:CocoClip;
	public var __currentTime:Time;
	public var __currentFrame:CocoKeyFrame;
	public var __hasBoundingBox:Boolean;
	public var __vABS_TOP_LEFT:CocoVector;
	public var __vABS_TOP_RIGHT:CocoVector;
	public var __vABS_BOTTOM_LEFT:CocoVector;
	public var __vABS_BOTTOM_RIGHT:CocoVector;
	public var __vREL_TOP_LEFT:CocoVector;
	public var __vREL_TOP_RIGHT:CocoVector;
	public var __vREL_BOTTOM_LEFT:CocoVector;
	public var __vREL_BOTTOM_RIGHT:CocoVector;
	public var __vTemp:CocoVector;
	public var __mTemp:CocoMatrix;
	public var __childWithMaxTimelineDuration:CocoClip;
	public var __clipPath:String;

	private var __currentAudio:CocoAudio;


	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional image:CocoImage, optional sequence:String)
	{
		__symbolLoop					= COCO_CLIP_SYMBOL_LOOP_ENUM.CLIP_SYMBOL_LOOP_CONTINUOUS;
		__currentSequenceFrameIndex		= 0;
		__timeline						= new CocoTimeline();
		__parent						= null;
		__currentTime					= 0.0;
		__currentFrame					= null;
		__hasBoundingBox				= false;
		__vABS_TOP_LEFT					= new CocoVector();
		__vABS_TOP_RIGHT				= new CocoVector();
		__vABS_BOTTOM_LEFT				= new CocoVector();
		__vABS_BOTTOM_RIGHT				= new CocoVector();
		__vREL_TOP_LEFT					= new CocoVector();
		__vREL_TOP_RIGHT				= new CocoVector();
		__vREL_BOTTOM_LEFT				= new CocoVector();
		__vREL_BOTTOM_RIGHT				= new CocoVector();
		__vTemp							= new CocoVector();
		__mTemp							= new CocoMatrix();
		__childWithMaxTimelineDuration	= null;
		__currentSequence				= null;
		__currentAudio					= null;
		__clipPath						= "";

		__image = image;
		if(image && sequence) __currentSequence = image.getSequence(sequence);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __image;
		delete __children;
		delete __timeline;
		delete __vABS_TOP_LEFT;
		delete __vABS_TOP_RIGHT;
		delete __vABS_BOTTOM_LEFT;
		delete __vABS_BOTTOM_RIGHT;
		delete __vREL_TOP_LEFT;
		delete __vREL_TOP_RIGHT;
		delete __vREL_BOTTOM_LEFT;
		delete __vREL_BOTTOM_RIGHT;
		delete __vTemp;
		delete __mTemp;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(scene:CocoScene)
	{
		__timeline.prepare(scene, this);
		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			__children[i].prepare(scene);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
		if(__currentFrame) delete __currentFrame;
		__currentFrame = null;
		__currentTime = 0.0;
		__timeline.reset();

		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			__children[i].reset();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addChild(clipInstance:CocoClip) :CocoClip
	{
		if(!clipInstance) return null;
		if(!clipInstance.__instanceName) throw "Invalid instance name.";
		__children.push(clipInstance);
		normalize();
		return clipInstance;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeChild(clipInstance:CocoClip) :CocoClip
	{
		if(!clipInstance) return null;
		__children.splice( getChildIndex(clipInstance), 1);
		normalize();
		return clipInstance;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function normalize()
	{
		// Find clip with max timeline duration.
		__childWithMaxTimelineDuration = null;
		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			if(!__childWithMaxTimelineDuration)
			{
				__childWithMaxTimelineDuration = __children[i];
				continue;
			}
			if(__children[i].__timeline.__durationInTime > __childWithMaxTimelineDuration.__timeline.__durationInTime)
			{
				__childWithMaxTimelineDuration = __children[i];
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildByName(instanceName:String) :CocoClip
	{
		for(var i:Integer =__children.size()-1; i>=0; i--)
		{
			if(__children[i].__instanceName==instanceName)
			{
				return __children[i];
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildIndex(child:CocoClip) :Integer
	{
		if(child)
		{
			for(var i:Integer =__children.size()-1; i>=0; i--)
			{
				if(__children[i]==child)
				{
					return i;
				}
			}
		}
		return -1;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoFrameByName(LabelName:String, optional pause:Boolean, optional deep:Boolean) :Boolean
	{
		var Label:CocoTimeLabel = __timeline.findLabelByName(LabelName);
		if(!Label) return false;

		trace("gotoFrameByName: clip=" + __clipPath + ", label=" + LabelName + ", pause=" + String(pause) + ", deep=" + String(deep));

		return gotoFrameByIndex(Label.frameIndex, pause, deep);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoFrameByIndex(FrameIndex:Integer, optional pause:Boolean, optional deep:Boolean) :Boolean
	{
		trace("gotoFrameByIndex: clip=" + __clipPath + ", index=" + String((FrameIndex==-1 ? "STOP_ON_CURRENT_FRAME" : FrameIndex)) + ", pause=" + String(pause) + ", deep=" + String(deep));

		var clip:CocoClip;
		for (var i:Integer = __children.size() - 1; i >= 0; i--)
		{
			clip = __children[i];
			clip.__timeline.__paused = pause;
			if(FrameIndex!=COCO_STOP_ON_CURRENT_FRAME)
				clip.__currentTime = Time(FrameIndex) * clip.__timeline.__singleFrameDurationTime;

			trace("-> child: " + clip.__clipPath + ", from=" + String(clip.__currentFrame.frameIndex) + ", to=" + String((FrameIndex==-1 ? clip.__currentFrame.frameIndex : FrameIndex)));

			if (deep)
				clip.gotoFrameByIndex(COCO_STOP_ON_CURRENT_FRAME, pause, deep);
		}
		return true;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(gl:WebGLRenderingContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
	{
		// Set clip path for debugging.
		__clipPath = (parentClip ? parentClip.__clipPath : "") + "/" + this.__instanceName;

        // =============================================================================================================
        // Combine with parent clip and interpolate
        // =============================================================================================================
		if(parentClip)
		{
			// Calculate the parent timeline duraction in time from its children (which are siblings to this clip)
			var parentClipsDuration:Time = parentClip.__childWithMaxTimelineDuration.__timeline.__durationInTime;

			// Calculate this clip's LoopTime which is the projection of this clip's timeline to its parent's timeline.
			var __loopTime:Time = __currentTime - Math.floor(__currentTime / parentClipsDuration) * parentClipsDuration;

			// Calculate frameIndex from time.
			var frameIndex:Integer = Math.floor(__loopTime / __timeline.__singleFrameDurationTime);

			// Interpolate
			if(__currentFrame) delete __currentFrame;
			__currentFrame = __timeline.interpolate(frameIndex);

			// Combine parent clip currentframe values with this clip's interpolated frame values.
			 __currentFrame.combine(parentClip.__currentFrame);

			// If current frame is visible, render this clip and its children.
			if(__currentFrame.alpha == 0 || !__currentFrame.visible)
			{
				if(!__timeline.__paused)
					__currentTime += engine.TICK_TIME;
				return;
			}

			// If we need to handle and event or if our parent has asked us to
			// calc our bounding box **AND** there is an actual event waiting
			// then we set calcBoundingBox to true.
			calcBoundingBox = (__currentFrame.handleEvents || calcBoundingBox) && (engine.getTouchEvent()!=null);
		}

        // =============================================================================================================
		// RENDER!
        // =============================================================================================================
		if(__image)
		{
			__currentFrame.scaleX *= __image.__pixelRatioScale;
			__currentFrame.scaleY *= __image.__pixelRatioScale;
			__currentFrame.apply(scene.__modelViewMatrix);
			__currentFrame.scaleX /= __image.__pixelRatioScale;
			__currentFrame.scaleY /= __image.__pixelRatioScale;

			if(__image.isSpriteSheet && __currentSequence)
			{
				// Render animation sequence.
				__currentSequenceFrameIndex = __timeline.__paused ? 0 : Math.floor(__currentTime / (1000.0 / scene.__fps)) % __currentSequence.frames.size();
				var frame:Integer = __currentSequence.frames[__currentSequenceFrameIndex];
				scene.drawFrame(gl, __image, frame, __currentFrame.red, __currentFrame.green, __currentFrame.blue, __currentFrame.alpha, __currentFrame.flipH, __currentFrame.flipV);
			}
			else
			{
				// Render a standard image.
				scene.drawFrame(gl, __image, 0, __currentFrame.red, __currentFrame.green, __currentFrame.blue, __currentFrame.alpha, __currentFrame.flipH, __currentFrame.flipV);
			}
		}
		else
		{
			// Render Children
			var childrenCound:Integer = __children.size();
			if(childrenCound>0)
			{
				var child:CocoClip;
				scene.__levelParents.push(this);
				if(__currentFrame) __currentFrame.apply(scene.__modelViewMatrix);
				for (var i:Integer = 0; i < childrenCound; i++)
				{
					scene.__modelViewMatrix.push();
					child = __children[i];
					child.paint(gl, scene, this, calcBoundingBox, level+1);
					scene.__modelViewMatrix.pop();
				}
				scene.__levelParents.pop();
			}
		}

		if(this!=scene.__root)
		{
	        // =============================================================================================================
			// Calculare bounding box
	        // =============================================================================================================
			if(calcBoundingBox)
			{
				// Calculate bounding box vertices
				if(__image)
					initBoundingBoxFromTexture(scene, __image.textureCellWidth / 2, __image.textureCellHeight / 2);
				else if(__children.size()>0)
					initBoundingBoxFromChildren(scene);
			}

	        // =============================================================================================================
			// Handle touch event
	        // =============================================================================================================
			var touchEvent:DeviceEvent = engine.getTouchEvent();
			if(__currentFrame.handleEvents && touchEvent && touchEvent.type=="touchend")
			{
				// Point in quad?
	   	        var x = (touchEvent.__clientX - gl.canvas.width / 2.0) / scene.__view_scale;
				var y = (touchEvent.__clientY - gl.canvas.height / 2.0) / scene.__view_scale;
				if(hitTest(x,y))
	   	        {
	   	        	engine.pushTouched(this);
	   	        	drawBoundingBox(scene, gl);
	   	        }
			}

	        // =============================================================================================================
			// Execute KeyFrame
	        // =============================================================================================================
			if(!__timeline.__paused)
			{
				var pulse:Boolean = false;
				if(__currentFrame.action || __currentFrame.nextState || __currentFrame.audio)
				{
					this.__parent = parentClip;
					pulse = __currentFrame.execute(gl, scene, this);
					if(pulse && __currentFrame.audio!=null)
					{
						__currentAudio = __currentFrame.audio;
					}
					this.__parent = null;
				}
			}

	        // =============================================================================================================
			// Update Cursor Variables
	        // =============================================================================================================
			if(__childWithMaxTimelineDuration && __childWithMaxTimelineDuration.__currentFrame && __childWithMaxTimelineDuration.__currentFrame.frameIndex == __childWithMaxTimelineDuration.__timeline.lastKeyFrame().frameIndex)
			{
			}

	        // =============================================================================================================
			// Tick audio
	        // =============================================================================================================
			if(__currentAudio)
			{
				__currentAudio.tick();
			}
		}

		// =============================================================================================================
		// Propagate clip's timeline.
		// =============================================================================================================
		if(!__timeline.__paused)
			__currentTime += engine.TICK_TIME;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function hitTest(wx:Float, wy:Float) :Boolean
	{
		return ((((wx - __vABS_TOP_LEFT.X) * (__vABS_TOP_RIGHT.Y - __vABS_TOP_LEFT.Y) - (__vABS_TOP_RIGHT.X - __vABS_TOP_LEFT.X) * (wy - __vABS_TOP_LEFT.Y)) * ((wx - __vABS_BOTTOM_RIGHT.X) * (__vABS_BOTTOM_LEFT.Y - __vABS_BOTTOM_RIGHT.Y) - (__vABS_BOTTOM_LEFT.X - __vABS_BOTTOM_RIGHT.X) * (wy - __vABS_BOTTOM_RIGHT.Y))) > 0
			&& (((wx - __vABS_TOP_RIGHT.X) * (__vABS_BOTTOM_RIGHT.Y - __vABS_TOP_RIGHT.Y) - (__vABS_BOTTOM_RIGHT.X - __vABS_TOP_RIGHT.X) * (wy - __vABS_TOP_RIGHT.Y)) * ((wx - __vABS_BOTTOM_LEFT.X) * (__vABS_TOP_LEFT.Y - __vABS_BOTTOM_LEFT.Y) - (__vABS_TOP_LEFT.X - __vABS_BOTTOM_LEFT.X) * (wy - __vABS_BOTTOM_LEFT.Y))) > 0);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function initBoundingBoxFromTexture(scene:CocoScene, W2:Float, H2:Float)
	{
		__mTemp.identity();

		__currentFrame.scaleX *= __image.__pixelRatioScale;
		__currentFrame.scaleY *= __image.__pixelRatioScale;
		__currentFrame.apply(__mTemp);
		__currentFrame.scaleX /= __image.__pixelRatioScale;
		__currentFrame.scaleY /= __image.__pixelRatioScale;

		//__currentFrame.apply(__mTemp);

		__vTemp.reset(-W2, -H2, 0, 1);
		__vREL_TOP_LEFT	= __mTemp.multiplyByVector(__vTemp);
		__vABS_TOP_LEFT	= scene.__modelViewMatrix.multiplyByVector(__vTemp);

		__vTemp.reset(W2, -H2, 0, 1);
		__vREL_TOP_RIGHT = __mTemp.multiplyByVector(__vTemp);
		__vABS_TOP_RIGHT = scene.__modelViewMatrix.multiplyByVector(__vTemp);

		__vTemp.reset(-W2, H2, 0, 1);
		__vREL_BOTTOM_LEFT = __mTemp.multiplyByVector(__vTemp);
		__vABS_BOTTOM_LEFT = scene.__modelViewMatrix.multiplyByVector(__vTemp);

		__vTemp.reset(W2, H2, 0, 1);
		__vREL_BOTTOM_RIGHT	= __mTemp.multiplyByVector(__vTemp);
		__vABS_BOTTOM_RIGHT = scene.__modelViewMatrix.multiplyByVector(__vTemp);

	    __hasBoundingBox = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function initBoundingBoxFromChildren(scene:CocoScene)
	{
	    // This function calculates the bounding box of all our children.

	    __hasBoundingBox = false;

	    if(__children.size()==0)
	    	return;

	    __vREL_TOP_LEFT.X = 100000;
		__vREL_TOP_RIGHT.X = -100000;
	    __vREL_TOP_LEFT.Y = 100000;
	    __vREL_BOTTOM_LEFT.Y = -100000;

        var Child :CocoClip
        for (var i:Integer = 0, L:Integer = __children.size(); i < L; i++)
	    {
            Child = __children[i];
            if(Child.__hasBoundingBox)
            {
				if(Child.__vREL_TOP_LEFT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_TOP_LEFT.X;
				if(Child.__vREL_TOP_LEFT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_TOP_LEFT.X;
				if(Child.__vREL_TOP_LEFT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_TOP_LEFT.Y;
				if(Child.__vREL_TOP_LEFT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_TOP_LEFT.Y;

				if(Child.__vREL_TOP_RIGHT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_TOP_RIGHT.X;
				if(Child.__vREL_TOP_RIGHT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_TOP_RIGHT.X;
				if(Child.__vREL_TOP_RIGHT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_TOP_RIGHT.Y;
				if(Child.__vREL_TOP_RIGHT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_TOP_RIGHT.Y;

				if(Child.__vREL_BOTTOM_LEFT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_BOTTOM_LEFT.X;
				if(Child.__vREL_BOTTOM_LEFT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_BOTTOM_LEFT.X;
				if(Child.__vREL_BOTTOM_LEFT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_BOTTOM_LEFT.Y;
				if(Child.__vREL_BOTTOM_LEFT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_BOTTOM_LEFT.Y;

				if(Child.__vREL_BOTTOM_RIGHT.X < __vREL_TOP_LEFT.X) __vREL_TOP_LEFT.X = Child.__vREL_BOTTOM_RIGHT.X;
				if(Child.__vREL_BOTTOM_RIGHT.X > __vREL_TOP_RIGHT.X) __vREL_TOP_RIGHT.X = Child.__vREL_BOTTOM_RIGHT.X;
				if(Child.__vREL_BOTTOM_RIGHT.Y < __vREL_TOP_LEFT.Y) __vREL_TOP_LEFT.Y = Child.__vREL_BOTTOM_RIGHT.Y;
				if(Child.__vREL_BOTTOM_RIGHT.Y > __vREL_BOTTOM_LEFT.Y) __vREL_BOTTOM_LEFT.Y = Child.__vREL_BOTTOM_RIGHT.Y;
            }
	    }

	    __vREL_TOP_RIGHT.Y = __vREL_TOP_LEFT.Y;
	    __vREL_BOTTOM_LEFT.X = __vREL_TOP_LEFT.X;
	    __vREL_BOTTOM_RIGHT.X = __vREL_TOP_RIGHT.X;
	    __vREL_BOTTOM_RIGHT.Y = __vREL_BOTTOM_LEFT.Y;

	    __vABS_TOP_LEFT = scene.__modelViewMatrix.multiplyByVector(__vREL_TOP_LEFT);
	    __vABS_TOP_RIGHT = scene.__modelViewMatrix.multiplyByVector(__vREL_TOP_RIGHT);
	    __vABS_BOTTOM_LEFT = scene.__modelViewMatrix.multiplyByVector(__vREL_BOTTOM_LEFT);
	    __vABS_BOTTOM_RIGHT = scene.__modelViewMatrix.multiplyByVector(__vREL_BOTTOM_RIGHT);

		__mTemp.identity();

		__currentFrame.apply(__mTemp);

	    __vREL_TOP_LEFT = __mTemp.multiplyByVector(__vREL_TOP_LEFT);
	    __vREL_TOP_RIGHT = __mTemp.multiplyByVector(__vREL_TOP_RIGHT);
	    __vREL_BOTTOM_LEFT = __mTemp.multiplyByVector(__vREL_BOTTOM_LEFT);
	    __vREL_BOTTOM_RIGHT = __mTemp.multiplyByVector(__vREL_BOTTOM_RIGHT);

	    __hasBoundingBox = true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawBoundingBox(scene:CocoScene, gl:WebGLRenderingContext)
	{
		if(!__hasBoundingBox) return;

		gl.disableVertexAttribArray(scene.__glProgram.GLSLiTexCoords);
		gl.disableVertexAttribArray(scene.__glProgram.GLSLiVecCoords);

		gl.useProgram(scene.__boundingBoxProgram);
		gl.enableVertexAttribArray(scene.__boundingBoxProgram.GLSLiVec2Coords);

		gl.bindBuffer(gl.ARRAY_BUFFER, scene.__boundingBoxBuffer);
		gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([__vABS_TOP_LEFT.X, __vABS_TOP_LEFT.Y, __vABS_TOP_RIGHT.X, __vABS_TOP_RIGHT.Y, __vABS_BOTTOM_RIGHT.X, __vABS_BOTTOM_RIGHT.Y, __vABS_BOTTOM_LEFT.X, __vABS_BOTTOM_LEFT.Y]));
		gl.vertexAttribPointer(scene.__boundingBoxProgram.GLSLiVec2Coords, 2, gl.FLOAT, false, 0, 0);
		scene.__projectionMatrix.update(gl, scene.__boundingBoxProgram.GLSLuProjMat);
		gl.drawArrays(gl.LINE_LOOP, 0, 4);
		gl.bindBuffer(gl.ARRAY_BUFFER, null);

		gl.disableVertexAttribArray(scene.__boundingBoxProgram.GLSLiVec2Coords);
		gl.useProgram(scene.__glProgram);

		gl.enableVertexAttribArray(scene.__glProgram.GLSLiTexCoords);
		gl.enableVertexAttribArray(scene.__glProgram.GLSLiVecCoords);
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoClip.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoScene.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____
//	  / ____/___  _________ / ___/________  ____  ___
//	 / /   / __ \/ ___/ __ \\__ \/ ___/ _ \/ __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ / /__/  __/ / / /  __/
//	\____/\____/\___/\____/____/\___/\___/_/ /_/\___/
//
// ==================================================================================================================================

"#include CocoClip.jspp"
"#include WebGLRenderingContext.jspp"

class CocoScene
{
	// Resources
	public var __sceneName:String;
	public var __imageSymbols:Array<CocoImage>;

	// Fixed View Port
	public var __fps:Integer;
	public var __view_width:Float;
	public var __view_height:Float;
	public var __view_pixel_ratio:Float;
	public var __view_scale:Float;

	// Rendering
	public var __currentTime:Time;
	public var __elapsedTime:Time;
	public var __startTime:Time;
	public var __root:CocoClip;
	public var __modelViewMatrix:CocoMatrix;
	public var __projectionMatrix:CocoMatrix;
	public var __glProgram:WebGLProgram;
	public var __levelParents:Array<CocoClip>;

	public var __vertex_shader:String;
	public var __fragment_shader:String;

	public var __boundingBoxVertexShader:String;
	public var __boundingBoxFragmentShader:String;
	public var __boundingBoxProgram:WebGLProgram;
	public var __boundingBoxBuffer:WebGLBuffer;

	public var __ready:Boolean;
	public var __finished:Boolean;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__sceneName 				= "";
		__view_width				= 0;
		__view_height				= 0;
		__view_pixel_ratio			= 0;
		__view_scale				= 1;
		__currentTime 				= 0.0;
		__elapsedTime	 			= 0.0;
		__startTime 				= -1;
		__root 						= null;
		__modelViewMatrix			= null;
		__projectionMatrix 			= null;
		__glProgram					= null;
		__vertex_shader				= "attribute vec2 iVecCoords;attribute vec2 iTexCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec2 uSprSize;uniform vec2 uSprFrame;uniform vec2 uSprFlip;varying vec2 pTexCoord;void main(void){ gl_Position = uProjMat * uMVMat * vec4(iVecCoords, 0.0, 1.0); pTexCoord = vec2(((abs(iTexCoords.x - uSprFlip.x) + uSprFrame.x) * uSprSize.x), ((abs(iTexCoords.y - uSprFlip.y) + uSprFrame.y) * uSprSize.y));}";
		__fragment_shader			= "#ifdef GL_ES\nprecision lowp float;\n#endif\nuniform sampler2D uSampler;uniform vec4 uColor;varying vec2 pTexCoord;void main(void){ vec4 texColor = texture2D(uSampler, pTexCoord); float c = (texColor.r + texColor.g + texColor.b) / 3.0; gl_FragColor = vec4((1.0 - uColor.r) * c + texColor.r * uColor.r, (1.0 - uColor.g) * c + texColor.g * uColor.g, (1.0 - uColor.b) * c + texColor.b * uColor.b, texColor.a * uColor.a);}";
		__boundingBoxVertexShader 	= "attribute vec2 iVec2Coords;uniform mat4 uProjMat;void main(void) { gl_Position = uProjMat * vec4(iVec2Coords, 0.0, 1.0);}";
		__boundingBoxFragmentShader	= "#ifdef GL_ES\nprecision lowp float;\n#endif\nvoid main(void) { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);}";
		__boundingBoxProgram		= null;
		__boundingBoxBuffer			= null;
		__ready 					= false;
		__finished					= false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __root;
		delete __modelViewMatrix;
		delete __projectionMatrix;
		delete __glProgram;
		delete __boundingBoxProgram;
		delete __boundingBoxBuffer;

		var i:Integer;
		for(i = __imageSymbols.size() - 1; i >= 0; i--)
		{
			delete __imageSymbols[i];
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getImageSymbol(symbolName:String) :CocoImage
	{
		for(var i:Integer = __imageSymbols.size() - 1; i >= 0; i--)
		{
			if(__imageSymbols[i].symbolName == symbolName)
				return __imageSymbols[i];
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function newResourceImage(symbolName:String, baseUrl:String) :CocoImage
	{
		if(getImageSymbol(symbolName)) throw "Resource image " + symbolName + " already exists.";
		var img:CocoImage = new CocoImage();
		img.symbolName = symbolName;
		img.baseUrl = baseUrl;
		__imageSymbols.push(img);
		return img;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function prepare(gl:WebGLRenderingContext)
	{
		gl.disable(gl.DEPTH_TEST);
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		gl.disable(gl.CULL_FACE);

		__boundingBoxProgram = makeProgram(gl, __boundingBoxVertexShader, __boundingBoxFragmentShader);
		gl.useProgram(__boundingBoxProgram);
		__boundingBoxProgram.GLSLiVec2Coords	= gl.getAttribLocation(__boundingBoxProgram, "iVec2Coords");
		__boundingBoxProgram.GLSLuProjMat		= gl.getUniformLocation(__boundingBoxProgram, "uProjMat");
		__boundingBoxBuffer	= gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, __boundingBoxBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), gl.DYNAMIC_DRAW);

		__glProgram = makeProgram(gl, __vertex_shader, __fragment_shader);
		gl.useProgram(__glProgram);

		__glProgram.GLSLiVecCoords 	= gl.getAttribLocation(__glProgram, "iVecCoords");
		gl.enableVertexAttribArray(__glProgram.GLSLiVecCoords);
		__glProgram.GLSLiTexCoords 	= gl.getAttribLocation(__glProgram, "iTexCoords");
		gl.enableVertexAttribArray(__glProgram.GLSLiTexCoords);
		__glProgram.GLSLuProjMat 	= gl.getUniformLocation(__glProgram, "uProjMat");
		__glProgram.GLSLuMVMat 		= gl.getUniformLocation(__glProgram, "uMVMat");
		__glProgram.GLSLuSprSize 	= gl.getUniformLocation(__glProgram, "uSprSize");
		__glProgram.GLSLuSprFrame 	= gl.getUniformLocation(__glProgram, "uSprFrame");
		__glProgram.GLSLuSprFlip 	= gl.getUniformLocation(__glProgram, "uSprFlip");
		__glProgram.GLSLuSampler 	= gl.getUniformLocation(__glProgram, "uSampler");
		__glProgram.GLSLuColor 		= gl.getUniformLocation(__glProgram, "uColor");

		__modelViewMatrix = new CocoMatrix();
		__modelViewMatrix.update(gl, __glProgram.GLSLuMVMat);
		__view_scale = this.__view_width>0 && this.__view_height>0 ? Math.min(gl.canvas.width / this.__view_width, gl.canvas.height / this.__view_height) : window.devicePixelRatio;
		__projectionMatrix = new CocoMatrix();

		if(window.deviceRotation)
		{
			var c:Float = Math.cos(window.deviceRotation);
			var s:Float = Math.sin(window.deviceRotation);
			var orthoWidth:Float = Math.abs(c * gl.canvas.width + s * gl.canvas.height);
			var orthoHeight:Float = Math.abs(-s * gl.canvas.width + c * gl.canvas.height);
			__projectionMatrix.ortho(-orthoWidth / 2.0, orthoWidth / 2.0, orthoHeight / 2.0,  -orthoHeight / 2.0, -1.0, 1.0);
			__projectionMatrix.rotateZ(-window.deviceRotation);
		}
		else
		{
			__projectionMatrix.ortho( -(gl.canvas.width / 2), gl.canvas.width / 2, gl.canvas.height / 2,  -(gl.canvas.height / 2), -1, 1);
		}

		__projectionMatrix.scale(__view_scale, __view_scale);
		__projectionMatrix.update(gl, __glProgram.GLSLuProjMat);

		__root.prepare(this);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function makeProgram(gl:WebGLRenderingContext, vs:String, fs:String) :WebGLProgram
	{
		var vshader:WebGLShader = gl.createShader(gl.VERTEX_SHADER);
		var fshader:WebGLShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(vshader, vs);
		gl.shaderSource(fshader, fs);
		gl.compileShader(vshader);
		gl.compileShader(fshader);
		//if(!gl.getShaderParameter(vshader, gl.COMPILE_STATUS)) throw gl.getShaderInfoLog(vshader);
		//if(!gl.getShaderParameter(fshader, gl.COMPILE_STATUS)) throw gl.getShaderInfoLog(fshader);
		var program:WebGLProgram = gl.createProgram();
		gl.attachShader(program, vshader);
		gl.attachShader(program, fshader);
		gl.linkProgram(program);
		//if(!gl.getProgramParameter(program, gl.LINK_STATUS)) throw gl.getProgramInfoLog(program);
		return program;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function loadResources()
	{
		var img:CocoImage;
		var sibling:CocoImageSibling;

		// Load images depending on screen resolution and available image sizes.
		for(var i:Integer = 0, L:Integer = __imageSymbols.size(); i < L ; i++)
	    {
	    	img = __imageSymbols[i];
			if(__view_width && __view_height)
			{
				var w:Float = img.viewOptimalWidth * __view_scale * window.devicePixelRatio;
				var h:Float = img.viewOptimalHeight * __view_scale * window.devicePixelRatio;
				for(var j:Integer = 0; j < img.viewSiblings.size(); j++)
				{
					sibling = img.viewSiblings[j];
					if(sibling.textureWidth>=w && sibling.textureHeight>=h)
					{
						img.image = new Image();
						img.image.load(img.baseUrl + sibling.url);
						img.textureCellWidth = sibling.textureWidth;
						img.textureCellHeight = sibling.textureHeight;
						img.pixelRatio = sibling.pixelRatio;
						break;
					}
				}
			}
			if(!img.image)
			{
				sibling = img.viewSiblings[img.viewSiblings.size()-1];
				img.image = new Image();
				img.image.load(img.baseUrl + sibling.url);
				img.textureCellWidth = sibling.textureWidth;
				img.textureCellHeight = sibling.textureHeight;
				img.pixelRatio = sibling.pixelRatio;
			}

			if(img.image)
			{
				trace("Loaded image: " + img.image.src);
			}
	    }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function resourcesLoaded(gl:WebGLRenderingContext) :Boolean
	{
		if(!__ready)
		{
			var img:CocoImage;
			for (var i:Integer = __imageSymbols.size() - 1; i >= 0; i--)
			{
				img = __imageSymbols[i];
				if (!img.image || !img.image.width || !img.image.height)
				{
					return false;
				}
				else if (!img.texture)
				{
					img.prepare(this, gl);
					return false;
				}
			}
			__ready = true;
			trace("Resources loaded.");
			return false;
		}
		return __ready;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(gl:WebGLRenderingContext, time:Time)
	{
		if(!__glProgram)
		{
			prepare(gl);
			loadResources();
		}
		else if(resourcesLoaded(gl))
		{
			if(__startTime == -1)
			{
				__startTime = time;
				__elapsedTime = 0;
			}
			else
			{
		    	__elapsedTime = (time-__startTime) - (__currentTime);
			}
			__currentTime = time - __startTime;
		    if(__root)
		    {
				__modelViewMatrix.identity();
		    	__levelParents = [__root];
				__root.paint(gl, this, null, false, 0);
				__levelParents = [];
				var max:CocoClip = __root.__childWithMaxTimelineDuration;
				if(max && max.__currentFrame && max.__currentFrame.frameIndex == max.__timeline.lastKeyFrame().frameIndex)
				{
					__finished=true;
					//__root.reset();
					//__startTime = -1;
				}
		    }
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(gl:WebGLRenderingContext, image:CocoImage, frame:Integer, red:Float, green:Float, blue:Float, alpha:Float, flipH:Boolean, flipV:Boolean)
	{
		if(__modelViewMatrix.__dirty) __modelViewMatrix.update(gl, __glProgram.GLSLuMVMat);
		gl.uniform2f(__glProgram.GLSLuSprSize, image.texSize[0], image.texSize[1]);
		gl.uniform2f(__glProgram.GLSLuSprFrame, image.textureGrid[frame * 2 + 1], image.textureGrid[frame * 2]);
		gl.uniform2f(__glProgram.GLSLuSprFlip, (flipH ? 1.0 : 0.0), (flipV ? 1.0 : 0.0));
		gl.bindBuffer(gl.ARRAY_BUFFER, image.buffer);
		gl.vertexAttribPointer(__glProgram.GLSLiTexCoords, 2, gl.FLOAT, false, 16, 0);
		gl.vertexAttribPointer(__glProgram.GLSLiVecCoords, 2, gl.FLOAT, false, 16, 8);
		gl.bindTexture(gl.TEXTURE_2D, image.texture);
		gl.uniform1i(__glProgram.GLSLuSampler, 0);
		gl.uniform4f(__glProgram.GLSLuColor, red, green, blue, alpha);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.bindBuffer(gl.ARRAY_BUFFER, null);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlayByName(LabelName:String, optional deep:Boolean)
	{
		var scope:CocoClip = __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByName(LabelName, false, deep);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStopByName(LabelName:String, optional deep:Boolean)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByName(LabelName, true, deep);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlayByIndex(FrameIndex:Integer, optional deep:Boolean)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(FrameIndex, false, deep);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStopyByIndex(FrameIndex:Integer, optional deep:Boolean)
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(FrameIndex, true, deep);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stop()
	{
		var scope:CocoClip = __levelParents.size()==0 ? __root : __levelParents[__levelParents.size() - 1];
		scope.gotoFrameByIndex(COCO_STOP_ON_CURRENT_FRAME, true, false);
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoScene.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoEngine.jspp";
"#export native"
"#export web"
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ______            _
//	  / ____/___  _________  / ____/___  ____ _(_)___  ___
//	 / /   / __ \/ ___/ __ \/ __/ / __ \/ __ `/ / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /___/ / / / /_/ / / / / /  __/
//	\____/\____/\___/\____/_____/_/ /_/\__, /_/_/ /_/\___/
//	                                  /____/
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"
"#include CocoScene.jspp"
"#include DeviceEvent.jspp"

state class CocoEngine
{
	// To avoid frame skipping and to enable time-debugging
	// we need to enforce a fixed tick time interval. The
	// constant we choose is for 60 frames per second but
	// we must use division in order to set the float properly.
	public const TICK_TIME:Time = (1000.0/60.0);

	private var __currentState:State;
	private var __nextState:State;
	private var __deviceEvent:DeviceEvent;
	private var __clicked:Array<CocoClip>;
	private var __clock:Time;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		// Set event handlers
		__clicked = [];
		__deviceEvent = null;
		__clock = 0;

		// Set event handlers
		window.addEventListener("touchstart", __setTouchEvent);
		window.addEventListener("touchmove", __setTouchEvent);
		window.addEventListener("touchend", __setTouchEvent);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function setNextState(s:State)
	{
		__nextState = s;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function run(gl:WebGLRenderingContext, time:Time)
	{
		if(!__currentState && !__nextState) return;

		if(__nextState!=null)
		{
			if(__currentState) __currentState.exit();
			__currentState = __nextState;
			__nextState = null;
			trace("\n@@STATE " + __currentState.__name);
			__clicked = [];
			if(__currentState) __currentState.enter();
		}

		if(__currentState) __currentState.tick(__clock);
		__clicked = [];

		if(__nextState==null && __currentState!=null)
		{
			gl.clearColor(0,0,0,1);
			gl.clear(gl.COLOR_BUFFER_BIT);
			__currentState.paint(gl, __clock);
		}

		__deviceEvent = null;

		// To avoid frame skipping we enfore a fixed time interval of 16.66~ ms.
		__clock += TICK_TIME;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __setTouchEvent(e:DeviceEvent)
	{
		__deviceEvent = e;
		__deviceEvent.__clientX = e.touches[0].clientX;
		__deviceEvent.__clientY = e.touches[0].clientY;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function getTouchEvent() :DeviceEvent
	{
		// In the future we need to filter the event type
		return __deviceEvent;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function pushTouched(clip:CocoClip)
	{
		trace("click: " + clip.__instanceName);
		__clicked.push(clip);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function isClicked(check:Array<CocoClip>):Integer
	{
		for(var i:Integer = __clicked.size()-1; i>=0; i--)
			for(var r:Integer = check.size()-1; r>=0; r--)
				if(check[r] == __clicked[i])
					return r;
		return -1;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __trace(scene:CocoScene, clip:CocoClip, message: String)
	{
		if(scene && clip)
		{
			var t:Time = 1000/scene.__fps;
			var rf:Float = Math.floor(scene.__root.__currentTime/t);
			var rc:Float = Math.floor(clip.__currentTime/t);

			message = "\n" + message +
					  ": state=" + __currentState.__name +
					  ", clip=" + scene.__sceneName + clip.__clipPath +
					  ", root_frame=" + String(rf) +
					  ", clip_frame=" + String(rc) +
					  ", root_time=" + scene.__root.__currentTime.toFixed(2) +
					  ", clip_time=" + clip.__currentTime.toFixed(2);
		}
		trace(message);
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/anim/CocoEngine.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSprite.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____            _ __
//	  / ____/___  _________ / ___/____  _____(_) /____
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ ___/ / __/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ / /_/ / /  / / /_/  __/
//	\____/\____/\___/\____/____/ .___/_/  /_/\__/\___/
//	                          /_/
// ==================================================================================================================================

"#include CocoClip.jspp"

class CocoSprite
{
	public function Constructor()
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSprite.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteActor.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____            _ __       ___        __
//	  / ____/___  _________ / ___/____  _____(_) /____  /   | _____/ /_____  _____
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ ___/ / __/ _ \/ /| |/ ___/ __/ __ \/ ___/
//	/ /___/ /_/ / /__/ /_/ /__/ / /_/ / /  / / /_/  __/ ___ / /__/ /_/ /_/ / /
//	\____/\____/\___/\____/____/ .___/_/  /_/\__/\___/_/  |_\___/\__/\____/_/
//	                          /_/
// ==================================================================================================================================

"#include CocoSprite.jspp"

class CocoSpriteActor : CocoSprite
{
	public function Constructor()
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteActor.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteBonus.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____            _ __       ____
//	  / ____/___  _________ / ___/____  _____(_) /____  / __ )____  ____  __  _______
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ ___/ / __/ _ \/ __  / __ \/ __ \/ / / / ___/
//	/ /___/ /_/ / /__/ /_/ /__/ / /_/ / /  / / /_/  __/ /_/ / /_/ / / / / /_/ (__  )
//	\____/\____/\___/\____/____/ .___/_/  /_/\__/\___/_____/\____/_/ /_/\__,_/____/
//	                          /_/
// ==================================================================================================================================

"#include CocoSprite.jspp"

class CocoSpriteBonus : CocoSprite
{
	public function Constructor()
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteBonus.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteBullet.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____            _ __       ____        ____     __
//	  / ____/___  _________ / ___/____  _____(_) /____  / __ )__  __/ / /__  / /_
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ ___/ / __/ _ \/ __  / / / / / / _ \/ __/
//	/ /___/ /_/ / /__/ /_/ /__/ / /_/ / /  / / /_/  __/ /_/ / /_/ / / /  __/ /_
//	\____/\____/\___/\____/____/ .___/_/  /_/\__/\___/_____/\__,_/_/_/\___/\__/
//	                          /_/
// ==================================================================================================================================

"#include CocoSprite.jspp"

class CocoSpriteBullet : CocoSprite
{
	public function Constructor()
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteBullet.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteEnemy.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____            _ __       ______
//	  / ____/___  _________ / ___/____  _____(_) /____  / ____/___  ___  ____ ___  __  __
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ ___/ / __/ _ \/ __/ / __ \/ _ \/ __ `__ \/ / / /
//	/ /___/ /_/ / /__/ /_/ /__/ / /_/ / /  / / /_/  __/ /___/ / / /  __/ / / / / / /_/ /
//	\____/\____/\___/\____/____/ .___/_/  /_/\__/\___/_____/_/ /_/\___/_/ /_/ /_/\__, /
//	                          /_/                                               /____/
// ==================================================================================================================================

"#include CocoSpriteActor.jspp"

class CocoSpriteEnemy : CocoSpriteActor
{
	public function Constructor()
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteEnemy.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpritePlayer.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____            _ __       ____  __
//	  / ____/___  _________ / ___/____  _____(_) /____  / __ \/ /___ ___  _____  _____
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ ___/ / __/ _ \/ /_/ / / __ `/ / / / _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ /__/ / /_/ / /  / / /_/  __/ ____/ / /_/ / /_/ /  __/ /
//	\____/\____/\___/\____/____/ .___/_/  /_/\__/\___/_/   /_/\__,_/\__, /\___/_/
//	                          /_/                                  /____/
// ==================================================================================================================================

"#include CocoSpriteActor.jspp"

class CocoSpritePlayer : CocoSpriteActor
{
	public function Constructor()
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpritePlayer.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteVisual.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____            _ __     _    ___                  __
//	  / ____/___  _________ / ___/____  _____(_) /____| |  / (_)______  ______ _/ /
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ ___/ / __/ _ \ | / / / ___/ / / / __ `/ /
//	/ /___/ /_/ / /__/ /_/ /__/ / /_/ / /  / / /_/  __/ |/ / (__  ) /_/ / /_/ / /
//	\____/\____/\___/\____/____/ .___/_/  /_/\__/\___/|___/_/____/\__,_/\__,_/_/
//	                          /_/
// ==================================================================================================================================

"#include CocoSprite.jspp"

class CocoSpriteVisual : CocoSprite
{
	public function Constructor()
	{
	}
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoSpriteVisual.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoTiledLayer.jspp";
"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______               _______ __         ____
//	  / ____/___  _________/_  __(_) /__  ____/ / /   ____ ___  _____  _____
//	 / /   / __ \/ ___/ __ \/ / / / / _ \/ __  / /   / __ `/ / / / _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / / /  __/ /_/ / /___/ /_/ / /_/ /  __/ /
//	\____/\____/\___/\____/_/ /_/_/\___/\__,_/_____/\__,_/\__, /\___/_/
//	                                                     /____/
// ==================================================================================================================================

"#include CocoClip.jspp"

class CocoTiledLayer
{
	public function Constructor()
	{
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/game/CocoTiledLayer.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  _______    ___
//	  / / / /  _/ |  / (_)__ _      __
//	 / / / // / | | / / / _ \ | /| / /
//	/ /_/ // /  | |/ / /  __/ |/ |/ /
//	\____/___/  |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoClip.jspp"

class CocoUIView : CocoClip
{
}




"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIControlView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  ____________            __             ___    ___
//	  / / / /  _/ ____/___  ____  / /__________  / / |  / (_)__ _      __
//	 / / / // // /   / __ \/ __ \/ __/ ___/ __ \/ /| | / / / _ \ | /| / /
//	/ /_/ // // /___/ /_/ / / / / /_/ /  / /_/ / / | |/ / /  __/ |/ |/ /
//	\____/___/\____/\____/_/ /_/\__/_/   \____/_/  |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIView.jspp"

class CocoUIControlView : CocoUIView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIControlView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIButtonView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  __________        __  __            _    ___
//	  / / / /  _/ __ )__  __/ /_/ /_____  ____| |  / (_)__ _      __
//	 / / / // // __  / / / / __/ __/ __ \/ __ \ | / / / _ \ | /| / /
//	/ /_/ // // /_/ / /_/ / /_/ /_/ /_/ / / / / |/ / /  __/ |/ |/ /
//	\____/___/_____/\__,_/\__/\__/\____/_/ /_/|___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIControlView.jspp"

class CocoUIButtonView : CocoUIControlView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIButtonView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUICheckboxView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  ______________              __   __              _    ___
//	  / / / /  _/ ____/ /_  ___  _____/ /__/ /_  ____  _  _| |  / (_)__ _      __
//	 / / / // // /   / __ \/ _ \/ ___/ //_/ __ \/ __ \| |/_/ | / / / _ \ | /| / /
//	/ /_/ // // /___/ / / /  __/ /__/ ,< / /_/ / /_/ />  < | |/ / /  __/ |/ |/ /
//	\____/___/\____/_/ /_/\___/\___/_/|_/_.___/\____/_/|_| |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIControlView.jspp"

class CocoUICheckboxView : CocoUIControlView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUICheckboxView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUILabelView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  ________          __         ___    ___
//	  / / / /  _/ /   ____ _/ /_  ___  / / |  / (_)__ _      __
//	 / / / // // /   / __ `/ __ \/ _ \/ /| | / / / _ \ | /| / /
//	/ /_/ // // /___/ /_/ / /_/ /  __/ / | |/ / /  __/ |/ |/ /
//	\____/___/_____/\__,_/_.___/\___/_/  |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIControlView.jspp"

class CocoUILabelView : CocoUIControlView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUILabelView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUINavbarView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  _______   __            __              _    ___
//	  / / / /  _/ | / /___ __   __/ /_  ____ _____| |  / (_)__ _      __
//	 / / / // //  |/ / __ `/ | / / __ \/ __ `/ ___/ | / / / _ \ | /| / /
//	/ /_/ // // /|  / /_/ /| |/ / /_/ / /_/ / /   | |/ / /  __/ |/ |/ /
//	\____/___/_/ |_/\__,_/ |___/_.___/\__,_/_/    |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIControlView.jspp"

class CocoUINavbarView : CocoUIControlView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUINavbarView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIPageView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  __________                 _    ___
//	  / / / /  _/ __ \____ _____ ____| |  / (_)__ _      __
//	 / / / // // /_/ / __ `/ __ `/ _ \ | / / / _ \ | /| / /
//	/ /_/ // // ____/ /_/ / /_/ /  __/ |/ / /  __/ |/ |/ /
//	\____/___/_/    \__,_/\__, /\___/|___/_/\___/|__/|__/
//	                     /____/
// ==================================================================================================================================

"#include CocoUIView.jspp"

class CocoUIPageView : CocoUIView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIPageView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIPickerView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  __________  _      __            _    ___
//	  / / / /  _/ __ \(_)____/ /_____  ____| |  / (_)__ _      __
//	 / / / // // /_/ / / ___/ //_/ _ \/ ___/ | / / / _ \ | /| / /
//	/ /_/ // // ____/ / /__/ ,< /  __/ /   | |/ / /  __/ |/ |/ /
//	\____/___/_/   /_/\___/_/|_|\___/_/    |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIControlView.jspp"

class CocoUIPickerView : CocoUIControlView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIPickerView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIScrollView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  ___________                 _____    ___
//	  / / / /  _/ ___/______________  / / / |  / (_)__ _      __
//	 / / / // / \__ \/ ___/ ___/ __ \/ / /| | / / / _ \ | /| / /
//	/ /_/ // / ___/ / /__/ /  / /_/ / / / | |/ / /  __/ |/ |/ /
//	\____/___//____/\___/_/   \____/_/_/  |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIView.jspp"

class CocoUIScrollView : CocoUIView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUIScrollView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUITabView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  ____________      __  _    ___
//	  / / / /  _/_  __/___ _/ /_| |  / (_)__ _      __
//	 / / / // /  / / / __ `/ __ \ | / / / _ \ | /| / /
//	/ /_/ // /  / / / /_/ / /_/ / |/ / /  __/ |/ |/ /
//	\____/___/ /_/  \__,_/_.___/|___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIControlView.jspp"

class CocoUITabView : CocoUIControlView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUITabView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUITextView.jspp";
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   __  ____________          __ _    ___
//	  / / / /  _/_  __/__  _  __/ /| |  / (_)__ _      __
//	 / / / // /  / / / _ \| |/_/ __/ | / / / _ \ | /| / /
//	/ /_/ // /  / / /  __/>  </ /_ | |/ / /  __/ |/ |/ /
//	\____/___/ /_/  \___/_/|_|\__/ |___/_/\___/|__/|__/
//
// ==================================================================================================================================

"#include CocoUIControlView.jspp"

class CocoUITextView : CocoUIControlView
{
}


"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/Coconut2D/ui/CocoUITextView.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/usr/GameEngine.jspp";
"#export native"
"#export web"

"#include Coconut.js"

// ==================================================================================================================================
//	   ______                     ______            _
//	  / ____/___ _____ ___  ___  / ____/___  ____ _(_)___  ___
//	 / / __/ __ `/ __ `__ \/ _ \/ __/ / __ \/ __ `/ / __ \/ _ \
//	/ /_/ / /_/ / / / / / /  __/ /___/ / / / /_/ / / / / /  __/
//	\____/\__,_/_/ /_/ /_/\___/_____/_/ /_/\__, /_/_/ /_/\___/
//	                                      /____/
// ==================================================================================================================================

state class GameEngine : CocoEngine
{
	public var scene:CocoScene;

	public var balance:Number;
	public var winnings:Number;

	public var avatars:Array<CocoClip>;
	public var avatar_leo:CocoClip;
	public var avatar_xerxes:CocoClip;
	public var avatar_spartan:CocoClip;
	public var avatar_persian:CocoClip;
	public var avatar_swords:CocoClip;
	public var avatar_armor:CocoClip;

	public var btnOpenAll:CocoClip;
	public var btnBuyTicket:CocoClip;

	public var selectedAvatar:Number;

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		setNextState(STATE_TITLE_SCREEN);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete scene;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_TITLE_SCREEN
	{
		function enter()
		{
			scene = new SceneTitle();
		}

		function exit()
		{
			delete scene;
		}

		function tick(time:Time)
		{
			if(scene.__finished)
				setNextState(STATE_GAME_BOARD);
		}

		function paint(gl:WebGLRenderingContext, time:Time)
		{
			scene.paint(gl, time);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_GAME_BOARD
	{
		function enter()
		{
			scene = new SceneGameBoard();
			avatar_leo 		= scene.__root.getChildByName("Avatar_Leonidas");
			avatar_xerxes	= scene.__root.getChildByName("Avatar_Xerxes");
			avatar_spartan	= scene.__root.getChildByName("Avatar_Spartan");
			avatar_persian	= scene.__root.getChildByName("Avatar_Persian");
			avatar_swords  	= scene.__root.getChildByName("Avatar_Swords");
			avatar_armor	= scene.__root.getChildByName("Avatar_Armor");
			btnBuyTicket	= scene.__root.getChildByName("BuyTicketButton");
			btnOpenAll		= scene.__root.getChildByName("OpenAllButton");
			avatars = [avatar_leo, avatar_xerxes, avatar_spartan, avatar_persian, avatar_swords, avatar_armor];
		}

		function exit()
		{
		}

		function tick(time:Time)
		{
		}

		function paint(gl:WebGLRenderingContext, time:Time)
		{
			scene.paint(gl, time);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_GAME_BOARD_CHOOSE_AVATAR
	{
		function enter()
		{
			scene.stop();
		}

		function exit()
		{
		}

		function tick(time:Time)
		{
			selectedAvatar = engine.isClicked(avatars);
			if(selectedAvatar!=-1)
				setNextState(STATE_GAME_BOARD_BUY_TICKET);
		}

		function paint(gl:WebGLRenderingContext, time:Time)
		{
			scene.paint(gl, time);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_GAME_BOARD_BUY_TICKET
	{
		function enter()
		{
        	// Progress the scene animation
        	scene.gotoAndStopByName("WaitToBuyTicket");

			// Disable avatar buttons
        	for(var i:Integer=0; i<avatars.length; i++)
        		if(i!=selectedAvatar)
        			avatars[i].gotoFrameByName("Disable", false, false);

			// Indicate selected avatar
        	avatars[selectedAvatar].gotoFrameByName("Select", false, false);
		}

		function exit()
		{
		}

		function tick(time:Time)
		{
			if(engine.isClicked([btnBuyTicket])!=-1)
				setNextState(STATE_GAME_BOARD_SCRATCH_OR_OPEN_ALL);
		}

		function paint(gl:WebGLRenderingContext, time:Time)
		{
			scene.paint(gl, time);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_GAME_BOARD_SCRATCH_OR_OPEN_ALL
	{
		var cells:Array<CocoClip>;

		function enter()
		{
        	scene.gotoAndStopByName("WaitToScratch");
        	cells = scene.__root.getChildByName("Grid").__children.slice(0);
        	for(var i:Integer = cells.size(); i--;)
        	{
        		var c:CocoClip = cells[i].getChildByName("Placeholder");
        		if(c)
        		{
                    var inst10:CocoClip = new  CocoClip(scene.getImageSymbol('XerxesOnly'), '');
					inst10.__instanceName = ':: XerxesOnly';
					c.addChild(inst10);
					inst10.__timeline.clear();
					inst10.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.33333, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
        		}
        	}
		}

		function exit()
		{
		}

		function tick(time:Float)
		{
			if(engine.isClicked([btnOpenAll]) != -1)
				setNextState(STATE_GAME_BOARD_OPEN_ALL);

			var i:Integer = engine.isClicked(cells);
			if(i != -1)
			{
				cells[i].gotoFrameByIndex(6, false, false);
				cells.splice(i, 1);
			}

			if(cells.size() <= 1)
				setNextState(STATE_GAME_BOARD_WIN);
		}

		function paint(gl:WebGLRenderingContext, time:Float)
		{
			scene.paint(gl, time);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_GAME_BOARD_OPEN_ALL
	{
		function enter()
		{
		}

		function exit()
		{
		}

		function tick(time:Float)
		{
		}

		function paint(gl:WebGLRenderingContext, time:Float)
		{
			scene.paint(gl, time);
		}
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_GAME_BOARD_WIN
	{
		function enter()
		{
			scene.gotoAndStopByName("WinAnim");
		}

		function exit()
		{
		}

		function tick(time:Float)
		{
		}

		function paint(gl:WebGLRenderingContext, time:Float)
		{
			scene.paint(gl, time);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public state STATE_GAME_BOARD_LOSE
	{
		function enter()
		{
			//reset the Timeline and gotoAndPlay JumpingAvatars label
			//Disable all buttons except buy ticket
			//gotoAndPlay("JumpingAvatars");
		}

		function exit()
		{
		}

		function tick(time:Float)
		{
		}

		function paint(gl:WebGLRenderingContext, time:Float)
		{
			scene.paint(gl, time);
		}

	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/usr/GameEngine.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/usr/animations/SceneGameBoard.jspp";
"#export web"
"#export native"
"#include Coconut.js"
"#include CocoScene.jspp"

class SceneGameBoard : CocoScene
{
	public function Constructor()
	{
		/* -- DESIGNER GENERATED CODE BEGIN -- */
		__sceneName = 'SceneGameBoard';
		__fps = 30;
		__view_width = 480;
		__view_height = 320;
		__view_pixel_ratio = 1;

		//////////////////////////////////////////////////////////////////////////////////////////////////////
		// CocoImage Symbols
		//////////////////////////////////////////////////////////////////////////////////////////////////////

		// Symbol Image: backround
		//====================================================================================================
		var Image_backround:CocoImage = newResourceImage('backround', './assets/images/');
		{
			Image_backround.viewOptimalWidth = 572;
			Image_backround.viewOptimalHeight = 429;
			Image_backround.addSibling(new CocoImageSibling('backround_ldpi.png', 0.75, 429, 322));
			Image_backround.addSibling(new CocoImageSibling('backround_mdpi.png', 1, 572, 429));
			Image_backround.addSibling(new CocoImageSibling('backround_tvdpi.png', 1.25, 715, 536));
			Image_backround.addSibling(new CocoImageSibling('backround_hdpi.png', 1.5, 858, 644));
			Image_backround.addSibling(new CocoImageSibling('backround_xhdpi.png', 2, 1144, 858));
			Image_backround.textureCellWidth = 572;
			Image_backround.textureCellHeight = 429;
			Image_backround.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: AVATAR_BAR
		//====================================================================================================
		var Image_AVATAR_BAR:CocoImage = newResourceImage('AVATAR_BAR', './assets/images/');
		{
			Image_AVATAR_BAR.viewOptimalWidth = 222;
			Image_AVATAR_BAR.viewOptimalHeight = 41;
			Image_AVATAR_BAR.addSibling(new CocoImageSibling('AVATAR_BAR_ldpi.png', 0.75, 166, 31));
			Image_AVATAR_BAR.addSibling(new CocoImageSibling('AVATAR_BAR_mdpi.png', 1, 222, 41));
			Image_AVATAR_BAR.addSibling(new CocoImageSibling('AVATAR_BAR_tvdpi.png', 1.25, 278, 51));
			Image_AVATAR_BAR.addSibling(new CocoImageSibling('AVATAR_BAR_hdpi.png', 1.5, 333, 62));
			Image_AVATAR_BAR.addSibling(new CocoImageSibling('AVATAR_BAR_xhdpi.png', 2, 444, 82));
			Image_AVATAR_BAR.textureCellWidth = 222;
			Image_AVATAR_BAR.textureCellHeight = 41;
			Image_AVATAR_BAR.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: Balance
		//====================================================================================================
		var Image_Balance:CocoImage = newResourceImage('Balance', './assets/images/');
		{
			Image_Balance.viewOptimalWidth = 93;
			Image_Balance.viewOptimalHeight = 44;
			Image_Balance.addSibling(new CocoImageSibling('Balance_ldpi.png', 0.75, 69, 33));
			Image_Balance.addSibling(new CocoImageSibling('Balance_mdpi.png', 1, 92, 44));
			Image_Balance.addSibling(new CocoImageSibling('Balance_tvdpi.png', 1.25, 115, 55));
			Image_Balance.addSibling(new CocoImageSibling('Balance_hdpi.png', 1.5, 138, 66));
			Image_Balance.addSibling(new CocoImageSibling('Balance_xhdpi.png', 2, 184, 88));
			Image_Balance.textureCellWidth = 92;
			Image_Balance.textureCellHeight = 44;
			Image_Balance.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: winnings
		//====================================================================================================
		var Image_winnings:CocoImage = newResourceImage('winnings', './assets/images/');
		{
			Image_winnings.viewOptimalWidth = 93;
			Image_winnings.viewOptimalHeight = 44;
			Image_winnings.addSibling(new CocoImageSibling('winnings_ldpi.png', 0.75, 69, 33));
			Image_winnings.addSibling(new CocoImageSibling('winnings_mdpi.png', 1, 92, 44));
			Image_winnings.addSibling(new CocoImageSibling('winnings_tvdpi.png', 1.25, 115, 55));
			Image_winnings.addSibling(new CocoImageSibling('winnings_hdpi.png', 1.5, 138, 66));
			Image_winnings.addSibling(new CocoImageSibling('winnings_xhdpi.png', 2, 184, 88));
			Image_winnings.textureCellWidth = 92;
			Image_winnings.textureCellHeight = 44;
			Image_winnings.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: XerxesOnly
		//====================================================================================================
		var Image_XerxesOnly:CocoImage = newResourceImage('XerxesOnly', './assets/images/');
		{
			Image_XerxesOnly.viewOptimalWidth = 50;
			Image_XerxesOnly.viewOptimalHeight = 51;
			Image_XerxesOnly.addSibling(new CocoImageSibling('XerxesOnly_ldpi.png', 0.75, 38, 38));
			Image_XerxesOnly.addSibling(new CocoImageSibling('XerxesOnly_mdpi.png', 1, 50, 51));
			Image_XerxesOnly.addSibling(new CocoImageSibling('XerxesOnly_tvdpi.png', 1.25, 62, 64));
			Image_XerxesOnly.addSibling(new CocoImageSibling('XerxesOnly_hdpi.png', 1.5, 75, 76));
			Image_XerxesOnly.addSibling(new CocoImageSibling('XerxesOnly_xhdpi.png', 2, 100, 102));
			Image_XerxesOnly.textureCellWidth = 50;
			Image_XerxesOnly.textureCellHeight = 51;
			Image_XerxesOnly.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: LeoEye
		//====================================================================================================
		var Image_LeoEye:CocoImage = newResourceImage('LeoEye', './assets/images/');
		{
			Image_LeoEye.viewOptimalWidth = 2;
			Image_LeoEye.viewOptimalHeight = 3;
			Image_LeoEye.addSibling(new CocoImageSibling('LeoEye_ldpi.png', 0.75, 2, 2));
			Image_LeoEye.addSibling(new CocoImageSibling('LeoEye_mdpi.png', 1, 2, 3));
			Image_LeoEye.addSibling(new CocoImageSibling('LeoEye_tvdpi.png', 1.25, 2, 4));
			Image_LeoEye.addSibling(new CocoImageSibling('LeoEye_hdpi.png', 1.5, 3, 4));
			Image_LeoEye.addSibling(new CocoImageSibling('LeoEye_xhdpi.png', 2, 4, 6));
			Image_LeoEye.textureCellWidth = 2;
			Image_LeoEye.textureCellHeight = 3;
			Image_LeoEye.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: SpartanOnly
		//====================================================================================================
		var Image_SpartanOnly:CocoImage = newResourceImage('SpartanOnly', './assets/images/');
		{
			Image_SpartanOnly.viewOptimalWidth = 48;
			Image_SpartanOnly.viewOptimalHeight = 49;
			Image_SpartanOnly.addSibling(new CocoImageSibling('SpartanOnly_ldpi.png', 0.75, 36, 37));
			Image_SpartanOnly.addSibling(new CocoImageSibling('SpartanOnly_mdpi.png', 1, 48, 49));
			Image_SpartanOnly.addSibling(new CocoImageSibling('SpartanOnly_tvdpi.png', 1.25, 60, 61));
			Image_SpartanOnly.addSibling(new CocoImageSibling('SpartanOnly_hdpi.png', 1.5, 72, 74));
			Image_SpartanOnly.addSibling(new CocoImageSibling('SpartanOnly_xhdpi.png', 2, 96, 98));
			Image_SpartanOnly.textureCellWidth = 48;
			Image_SpartanOnly.textureCellHeight = 49;
			Image_SpartanOnly.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: PersianOnly
		//====================================================================================================
		var Image_PersianOnly:CocoImage = newResourceImage('PersianOnly', './assets/images/');
		{
			Image_PersianOnly.viewOptimalWidth = 48;
			Image_PersianOnly.viewOptimalHeight = 49;
			Image_PersianOnly.addSibling(new CocoImageSibling('PersianOnly_ldpi.png', 0.75, 36, 37));
			Image_PersianOnly.addSibling(new CocoImageSibling('PersianOnly_mdpi.png', 1, 48, 49));
			Image_PersianOnly.addSibling(new CocoImageSibling('PersianOnly_tvdpi.png', 1.25, 60, 61));
			Image_PersianOnly.addSibling(new CocoImageSibling('PersianOnly_hdpi.png', 1.5, 72, 74));
			Image_PersianOnly.addSibling(new CocoImageSibling('PersianOnly_xhdpi.png', 2, 96, 98));
			Image_PersianOnly.textureCellWidth = 48;
			Image_PersianOnly.textureCellHeight = 49;
			Image_PersianOnly.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: SwordLeft
		//====================================================================================================
		var Image_SwordLeft:CocoImage = newResourceImage('SwordLeft', './assets/images/');
		{
			Image_SwordLeft.viewOptimalWidth = 49;
			Image_SwordLeft.viewOptimalHeight = 49;
			Image_SwordLeft.addSibling(new CocoImageSibling('SwordLeft_ldpi.png', 0.75, 37, 37));
			Image_SwordLeft.addSibling(new CocoImageSibling('SwordLeft_mdpi.png', 1, 49, 49));
			Image_SwordLeft.addSibling(new CocoImageSibling('SwordLeft_tvdpi.png', 1.25, 61, 61));
			Image_SwordLeft.addSibling(new CocoImageSibling('SwordLeft_hdpi.png', 1.5, 74, 74));
			Image_SwordLeft.addSibling(new CocoImageSibling('SwordLeft_xhdpi.png', 2, 98, 98));
			Image_SwordLeft.textureCellWidth = 49;
			Image_SwordLeft.textureCellHeight = 49;
			Image_SwordLeft.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: SwordRight
		//====================================================================================================
		var Image_SwordRight:CocoImage = newResourceImage('SwordRight', './assets/images/');
		{
			Image_SwordRight.viewOptimalWidth = 49;
			Image_SwordRight.viewOptimalHeight = 49;
			Image_SwordRight.addSibling(new CocoImageSibling('SwordRight_ldpi.png', 0.75, 37, 37));
			Image_SwordRight.addSibling(new CocoImageSibling('SwordRight_mdpi.png', 1, 49, 49));
			Image_SwordRight.addSibling(new CocoImageSibling('SwordRight_tvdpi.png', 1.25, 61, 61));
			Image_SwordRight.addSibling(new CocoImageSibling('SwordRight_hdpi.png', 1.5, 74, 74));
			Image_SwordRight.addSibling(new CocoImageSibling('SwordRight_xhdpi.png', 2, 98, 98));
			Image_SwordRight.textureCellWidth = 49;
			Image_SwordRight.textureCellHeight = 49;
			Image_SwordRight.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: grWhiteStar
		//====================================================================================================
		var Image_grWhiteStar:CocoImage = newResourceImage('grWhiteStar', './assets/images/');
		{
			Image_grWhiteStar.viewOptimalWidth = 24;
			Image_grWhiteStar.viewOptimalHeight = 24;
			Image_grWhiteStar.addSibling(new CocoImageSibling('grWhiteStar_ldpi.png', 0.75, 18, 18));
			Image_grWhiteStar.addSibling(new CocoImageSibling('grWhiteStar_mdpi.png', 1, 24, 24));
			Image_grWhiteStar.addSibling(new CocoImageSibling('grWhiteStar_tvdpi.png', 1.25, 30, 30));
			Image_grWhiteStar.addSibling(new CocoImageSibling('grWhiteStar_hdpi.png', 1.5, 36, 36));
			Image_grWhiteStar.addSibling(new CocoImageSibling('grWhiteStar_xhdpi.png', 2, 48, 48));
			Image_grWhiteStar.textureCellWidth = 24;
			Image_grWhiteStar.textureCellHeight = 24;
			Image_grWhiteStar.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: openunpressed
		//====================================================================================================
		var Image_openunpressed:CocoImage = newResourceImage('openunpressed', './assets/images/');
		{
			Image_openunpressed.viewOptimalWidth = 69;
			Image_openunpressed.viewOptimalHeight = 69;
			Image_openunpressed.addSibling(new CocoImageSibling('openunpressed_ldpi.png', 0.75, 52, 52));
			Image_openunpressed.addSibling(new CocoImageSibling('openunpressed_mdpi.png', 1, 69, 69));
			Image_openunpressed.addSibling(new CocoImageSibling('openunpressed_tvdpi.png', 1.25, 86, 86));
			Image_openunpressed.addSibling(new CocoImageSibling('openunpressed_hdpi.png', 1.5, 104, 104));
			Image_openunpressed.addSibling(new CocoImageSibling('openunpressed_xhdpi.png', 2, 138, 138));
			Image_openunpressed.textureCellWidth = 69;
			Image_openunpressed.textureCellHeight = 69;
			Image_openunpressed.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: LEONIDAS_body
		//====================================================================================================
		var Image_LEONIDAS_body:CocoImage = newResourceImage('LEONIDAS_body', './assets/images/');
		{
			Image_LEONIDAS_body.viewOptimalWidth = 294;
			Image_LEONIDAS_body.viewOptimalHeight = 330;
			Image_LEONIDAS_body.addSibling(new CocoImageSibling('LEONIDAS_body_ldpi.png', 0.75, 220, 248));
			Image_LEONIDAS_body.addSibling(new CocoImageSibling('LEONIDAS_body_mdpi.png', 1, 294, 330));
			Image_LEONIDAS_body.addSibling(new CocoImageSibling('LEONIDAS_body_tvdpi.png', 1.25, 368, 412));
			Image_LEONIDAS_body.addSibling(new CocoImageSibling('LEONIDAS_body_hdpi.png', 1.5, 441, 495));
			Image_LEONIDAS_body.addSibling(new CocoImageSibling('LEONIDAS_body_xhdpi.png', 2, 588, 659));
			Image_LEONIDAS_body.textureCellWidth = 294;
			Image_LEONIDAS_body.textureCellHeight = 330;
			Image_LEONIDAS_body.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: LEONIDAS_hand
		//====================================================================================================
		var Image_LEONIDAS_hand:CocoImage = newResourceImage('LEONIDAS_hand', './assets/images/');
		{
			Image_LEONIDAS_hand.viewOptimalWidth = 43;
			Image_LEONIDAS_hand.viewOptimalHeight = 105;
			Image_LEONIDAS_hand.addSibling(new CocoImageSibling('LEONIDAS_hand_ldpi.png', 0.75, 32, 79));
			Image_LEONIDAS_hand.addSibling(new CocoImageSibling('LEONIDAS_hand_mdpi.png', 1, 43, 105));
			Image_LEONIDAS_hand.addSibling(new CocoImageSibling('LEONIDAS_hand_tvdpi.png', 1.25, 54, 131));
			Image_LEONIDAS_hand.addSibling(new CocoImageSibling('LEONIDAS_hand_hdpi.png', 1.5, 64, 158));
			Image_LEONIDAS_hand.addSibling(new CocoImageSibling('LEONIDAS_hand_xhdpi.png', 2, 86, 210));
			Image_LEONIDAS_hand.textureCellWidth = 43;
			Image_LEONIDAS_hand.textureCellHeight = 105;
			Image_LEONIDAS_hand.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: XERXES_Body
		//====================================================================================================
		var Image_XERXES_Body:CocoImage = newResourceImage('XERXES_Body', './assets/images/');
		{
			Image_XERXES_Body.viewOptimalWidth = 68;
			Image_XERXES_Body.viewOptimalHeight = 102;
			Image_XERXES_Body.addSibling(new CocoImageSibling('XERXES_Body_ldpi.png', 0.75, 51, 76));
			Image_XERXES_Body.addSibling(new CocoImageSibling('XERXES_Body_mdpi.png', 1, 68, 102));
			Image_XERXES_Body.addSibling(new CocoImageSibling('XERXES_Body_tvdpi.png', 1.25, 85, 128));
			Image_XERXES_Body.addSibling(new CocoImageSibling('XERXES_Body_hdpi.png', 1.5, 102, 153));
			Image_XERXES_Body.addSibling(new CocoImageSibling('XERXES_Body_xhdpi.png', 2, 136, 204));
			Image_XERXES_Body.textureCellWidth = 68;
			Image_XERXES_Body.textureCellHeight = 102;
			Image_XERXES_Body.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: Xerxes_Sleeve
		//====================================================================================================
		var Image_Xerxes_Sleeve:CocoImage = newResourceImage('Xerxes_Sleeve', './assets/images/');
		{
			Image_Xerxes_Sleeve.viewOptimalWidth = 12;
			Image_Xerxes_Sleeve.viewOptimalHeight = 11;
			Image_Xerxes_Sleeve.addSibling(new CocoImageSibling('Xerxes_Sleeve_ldpi.png', 0.75, 9, 8));
			Image_Xerxes_Sleeve.addSibling(new CocoImageSibling('Xerxes_Sleeve_mdpi.png', 1, 12, 11));
			Image_Xerxes_Sleeve.addSibling(new CocoImageSibling('Xerxes_Sleeve_tvdpi.png', 1.25, 15, 14));
			Image_Xerxes_Sleeve.addSibling(new CocoImageSibling('Xerxes_Sleeve_hdpi.png', 1.5, 18, 16));
			Image_Xerxes_Sleeve.addSibling(new CocoImageSibling('Xerxes_Sleeve_xhdpi.png', 2, 24, 22));
			Image_Xerxes_Sleeve.textureCellWidth = 12;
			Image_Xerxes_Sleeve.textureCellHeight = 11;
			Image_Xerxes_Sleeve.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: XERXES_hand
		//====================================================================================================
		var Image_XERXES_hand:CocoImage = newResourceImage('XERXES_hand', './assets/images/');
		{
			Image_XERXES_hand.viewOptimalWidth = 28;
			Image_XERXES_hand.viewOptimalHeight = 25;
			Image_XERXES_hand.addSibling(new CocoImageSibling('XERXES_hand_ldpi.png', 0.75, 21, 19));
			Image_XERXES_hand.addSibling(new CocoImageSibling('XERXES_hand_mdpi.png', 1, 28, 25));
			Image_XERXES_hand.addSibling(new CocoImageSibling('XERXES_hand_tvdpi.png', 1.25, 35, 31));
			Image_XERXES_hand.addSibling(new CocoImageSibling('XERXES_hand_hdpi.png', 1.5, 42, 38));
			Image_XERXES_hand.addSibling(new CocoImageSibling('XERXES_hand_xhdpi.png', 2, 56, 50));
			Image_XERXES_hand.textureCellWidth = 28;
			Image_XERXES_hand.textureCellHeight = 25;
			Image_XERXES_hand.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: XerxesClipHead2
		//====================================================================================================
		var Image_XerxesClipHead2:CocoImage = newResourceImage('XerxesClipHead2', './assets/images/');
		{
			Image_XerxesClipHead2.viewOptimalWidth = 21;
			Image_XerxesClipHead2.viewOptimalHeight = 31;
			Image_XerxesClipHead2.addSibling(new CocoImageSibling('XerxesClipHead2_ldpi.png', 0.75, 16, 24));
			Image_XerxesClipHead2.addSibling(new CocoImageSibling('XerxesClipHead2_mdpi.png', 1, 21, 32));
			Image_XerxesClipHead2.addSibling(new CocoImageSibling('XerxesClipHead2_tvdpi.png', 1.25, 26, 40));
			Image_XerxesClipHead2.addSibling(new CocoImageSibling('XerxesClipHead2_hdpi.png', 1.5, 32, 48));
			Image_XerxesClipHead2.addSibling(new CocoImageSibling('XerxesClipHead2_xhdpi.png', 2, 42, 64));
			Image_XerxesClipHead2.textureCellWidth = 21;
			Image_XerxesClipHead2.textureCellHeight = 32;
			Image_XerxesClipHead2.textureGrid = new Float32Array([0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,1,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,2,0,2,1,2,2,2,3,2,4,2,5,2,6,2,7,3,0,3,1,3,2]);
			Image_XerxesClipHead2.addSequence(new CocoSequence('Idle', [0,0,0,0,1,1,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26]));
		}

		// Symbol Image: grid_tile
		//====================================================================================================
		var Image_grid_tile:CocoImage = newResourceImage('grid_tile', './assets/images/');
		{
			Image_grid_tile.viewOptimalWidth = 53;
			Image_grid_tile.viewOptimalHeight = 53;
			Image_grid_tile.addSibling(new CocoImageSibling('grid_tile_ldpi.png', 0.75, 40, 40));
			Image_grid_tile.addSibling(new CocoImageSibling('grid_tile_mdpi.png', 1, 53, 53));
			Image_grid_tile.addSibling(new CocoImageSibling('grid_tile_tvdpi.png', 1.25, 66, 66));
			Image_grid_tile.addSibling(new CocoImageSibling('grid_tile_hdpi.png', 1.5, 80, 80));
			Image_grid_tile.addSibling(new CocoImageSibling('grid_tile_xhdpi.png', 2, 106, 106));
			Image_grid_tile.textureCellWidth = 53;
			Image_grid_tile.textureCellHeight = 53;
			Image_grid_tile.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: LeonidasClipHead
		//====================================================================================================
		var Image_LeonidasClipHead:CocoImage = newResourceImage('LeonidasClipHead', './assets/images/');
		{
			Image_LeonidasClipHead.viewOptimalWidth = 32;
			Image_LeonidasClipHead.viewOptimalHeight = 31;
			Image_LeonidasClipHead.addSibling(new CocoImageSibling('LeonidasClipHead_ldpi.png', 0.75, 24, 23));
			Image_LeonidasClipHead.addSibling(new CocoImageSibling('LeonidasClipHead_mdpi.png', 1, 32, 31));
			Image_LeonidasClipHead.addSibling(new CocoImageSibling('LeonidasClipHead_tvdpi.png', 1.25, 40, 39));
			Image_LeonidasClipHead.addSibling(new CocoImageSibling('LeonidasClipHead_hdpi.png', 1.5, 48, 46));
			Image_LeonidasClipHead.addSibling(new CocoImageSibling('LeonidasClipHead_xhdpi.png', 2, 64, 62));
			Image_LeonidasClipHead.textureCellWidth = 32;
			Image_LeonidasClipHead.textureCellHeight = 31;
			Image_LeonidasClipHead.textureGrid = new Float32Array([0,0,0,1,0,2,1,0]);
			Image_LeonidasClipHead.addSequence(new CocoSequence('Idle', [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3]));
		}

		// Symbol Image: ticket_price
		//====================================================================================================
		var Image_ticket_price:CocoImage = newResourceImage('ticket_price', './assets/images/');
		{
			Image_ticket_price.viewOptimalWidth = 86;
			Image_ticket_price.viewOptimalHeight = 14;
			Image_ticket_price.addSibling(new CocoImageSibling('ticket_price_ldpi.png', 0.75, 64, 10));
			Image_ticket_price.addSibling(new CocoImageSibling('ticket_price_mdpi.png', 1, 86, 14));
			Image_ticket_price.addSibling(new CocoImageSibling('ticket_price_tvdpi.png', 1.25, 108, 18));
			Image_ticket_price.addSibling(new CocoImageSibling('ticket_price_hdpi.png', 1.5, 129, 21));
			Image_ticket_price.addSibling(new CocoImageSibling('ticket_price_xhdpi.png', 2, 172, 28));
			Image_ticket_price.textureCellWidth = 86;
			Image_ticket_price.textureCellHeight = 14;
			Image_ticket_price.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: PriceTable
		//====================================================================================================
		var Image_PriceTable:CocoImage = newResourceImage('PriceTable', './assets/images/');
		{
			Image_PriceTable.viewOptimalWidth = 89;
			Image_PriceTable.viewOptimalHeight = 92;
			Image_PriceTable.addSibling(new CocoImageSibling('PriceTable_ldpi.png', 0.75, 67, 69));
			Image_PriceTable.addSibling(new CocoImageSibling('PriceTable_mdpi.png', 1, 89, 92));
			Image_PriceTable.addSibling(new CocoImageSibling('PriceTable_tvdpi.png', 1.25, 111, 115));
			Image_PriceTable.addSibling(new CocoImageSibling('PriceTable_hdpi.png', 1.5, 134, 138));
			Image_PriceTable.addSibling(new CocoImageSibling('PriceTable_xhdpi.png', 2, 178, 184));
			Image_PriceTable.textureCellWidth = 89;
			Image_PriceTable.textureCellHeight = 92;
			Image_PriceTable.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: StoneTile_Back
		//====================================================================================================
		var Image_StoneTile_Back:CocoImage = newResourceImage('StoneTile_Back', './assets/images/');
		{
			Image_StoneTile_Back.viewOptimalWidth = 63;
			Image_StoneTile_Back.viewOptimalHeight = 63;
			Image_StoneTile_Back.addSibling(new CocoImageSibling('StoneTile_Back_ldpi.png', 0.75, 47, 47));
			Image_StoneTile_Back.addSibling(new CocoImageSibling('StoneTile_Back_mdpi.png', 1, 63, 63));
			Image_StoneTile_Back.addSibling(new CocoImageSibling('StoneTile_Back_tvdpi.png', 1.25, 79, 79));
			Image_StoneTile_Back.addSibling(new CocoImageSibling('StoneTile_Back_hdpi.png', 1.5, 94, 94));
			Image_StoneTile_Back.addSibling(new CocoImageSibling('StoneTile_Back_xhdpi.png', 2, 126, 126));
			Image_StoneTile_Back.textureCellWidth = 63;
			Image_StoneTile_Back.textureCellHeight = 63;
			Image_StoneTile_Back.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: ImageSymbol_txtChooseAvatar
		//====================================================================================================
		var Image_ImageSymbol_txtChooseAvatar:CocoImage = newResourceImage('ImageSymbol_txtChooseAvatar', './assets/images/');
		{
			Image_ImageSymbol_txtChooseAvatar.viewOptimalWidth = 178;
			Image_ImageSymbol_txtChooseAvatar.viewOptimalHeight = 18;
			Image_ImageSymbol_txtChooseAvatar.addSibling(new CocoImageSibling('txtChooseAvatar_mdpi.png', 1, 178, 18));
			Image_ImageSymbol_txtChooseAvatar.addSibling(new CocoImageSibling('txtChooseAvatar_xhdpi.png', 2, 356, 36));
			Image_ImageSymbol_txtChooseAvatar.textureCellWidth = 178;
			Image_ImageSymbol_txtChooseAvatar.textureCellHeight = 18;
			Image_ImageSymbol_txtChooseAvatar.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: ImageSymbol_WIN_Shield
		//====================================================================================================
		var Image_ImageSymbol_WIN_Shield:CocoImage = newResourceImage('ImageSymbol_WIN_Shield', './assets/images/');
		{
			Image_ImageSymbol_WIN_Shield.viewOptimalWidth = 357;
			Image_ImageSymbol_WIN_Shield.viewOptimalHeight = 321;
			Image_ImageSymbol_WIN_Shield.addSibling(new CocoImageSibling('WIN_Shield_mdpi.png', 1, 357, 321));
			Image_ImageSymbol_WIN_Shield.addSibling(new CocoImageSibling('WIN_Shield_xhdpi.png', 2, 714, 642));
			Image_ImageSymbol_WIN_Shield.textureCellWidth = 357;
			Image_ImageSymbol_WIN_Shield.textureCellHeight = 321;
			Image_ImageSymbol_WIN_Shield.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: ImageSymbol_WIN_Logo
		//====================================================================================================
		var Image_ImageSymbol_WIN_Logo:CocoImage = newResourceImage('ImageSymbol_WIN_Logo', './assets/images/');
		{
			Image_ImageSymbol_WIN_Logo.viewOptimalWidth = 334;
			Image_ImageSymbol_WIN_Logo.viewOptimalHeight = 300;
			Image_ImageSymbol_WIN_Logo.addSibling(new CocoImageSibling('WIN_Logo_mdpi.png', 1, 334, 300));
			Image_ImageSymbol_WIN_Logo.addSibling(new CocoImageSibling('WIN_Logo_xhdpi.png', 2, 668, 600));
			Image_ImageSymbol_WIN_Logo.textureCellWidth = 334;
			Image_ImageSymbol_WIN_Logo.textureCellHeight = 300;
			Image_ImageSymbol_WIN_Logo.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: ImageSymbol_cloud2
		//====================================================================================================
		var Image_ImageSymbol_cloud2:CocoImage = newResourceImage('ImageSymbol_cloud2', './assets/images/');
		{
			Image_ImageSymbol_cloud2.viewOptimalWidth = 190;
			Image_ImageSymbol_cloud2.viewOptimalHeight = 58;
			Image_ImageSymbol_cloud2.addSibling(new CocoImageSibling('cloud2_mdpi.png', 1, 190, 58));
			Image_ImageSymbol_cloud2.addSibling(new CocoImageSibling('cloud2_xhdpi.png', 2, 380, 116));
			Image_ImageSymbol_cloud2.textureCellWidth = 190;
			Image_ImageSymbol_cloud2.textureCellHeight = 58;
			Image_ImageSymbol_cloud2.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: ImageSymbol_cloud1
		//====================================================================================================
		var Image_ImageSymbol_cloud1:CocoImage = newResourceImage('ImageSymbol_cloud1', './assets/images/');
		{
			Image_ImageSymbol_cloud1.viewOptimalWidth = 454;
			Image_ImageSymbol_cloud1.viewOptimalHeight = 157;
			Image_ImageSymbol_cloud1.addSibling(new CocoImageSibling('cloud1_mdpi.png', 1, 454, 157));
			Image_ImageSymbol_cloud1.addSibling(new CocoImageSibling('cloud1_xhdpi.png', 2, 908, 314));
			Image_ImageSymbol_cloud1.textureCellWidth = 454;
			Image_ImageSymbol_cloud1.textureCellHeight = 157;
			Image_ImageSymbol_cloud1.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: ImageSymbol_cloud5
		//====================================================================================================
		var Image_ImageSymbol_cloud5:CocoImage = newResourceImage('ImageSymbol_cloud5', './assets/images/');
		{
			Image_ImageSymbol_cloud5.viewOptimalWidth = 102;
			Image_ImageSymbol_cloud5.viewOptimalHeight = 25;
			Image_ImageSymbol_cloud5.addSibling(new CocoImageSibling('cloud5_mdpi.png', 1, 102, 25));
			Image_ImageSymbol_cloud5.addSibling(new CocoImageSibling('cloud5_xhdpi.png', 2, 204, 50));
			Image_ImageSymbol_cloud5.textureCellWidth = 102;
			Image_ImageSymbol_cloud5.textureCellHeight = 25;
			Image_ImageSymbol_cloud5.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: TileOnly
		//====================================================================================================
		var Image_TileOnly:CocoImage = newResourceImage('TileOnly', './assets/images/');
		{
			Image_TileOnly.viewOptimalWidth = 48;
			Image_TileOnly.viewOptimalHeight = 49;
			Image_TileOnly.addSibling(new CocoImageSibling('TileOnly_ldpi.png', 0.75, 36, 37));
			Image_TileOnly.addSibling(new CocoImageSibling('TileOnly_mdpi.png', 1, 48, 49));
			Image_TileOnly.addSibling(new CocoImageSibling('TileOnly_tvdpi.png', 1.25, 60, 61));
			Image_TileOnly.addSibling(new CocoImageSibling('TileOnly_hdpi.png', 1.5, 72, 74));
			Image_TileOnly.addSibling(new CocoImageSibling('TileOnly_xhdpi.png', 2, 96, 98));
			Image_TileOnly.textureCellWidth = 48;
			Image_TileOnly.textureCellHeight = 49;
			Image_TileOnly.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: ArmorOnly
		//====================================================================================================
		var Image_ArmorOnly:CocoImage = newResourceImage('ArmorOnly', './assets/images/');
		{
			Image_ArmorOnly.viewOptimalWidth = 53;
			Image_ArmorOnly.viewOptimalHeight = 49;
			Image_ArmorOnly.addSibling(new CocoImageSibling('ArmorOnly_ldpi.png', 0.75, 40, 37));
			Image_ArmorOnly.addSibling(new CocoImageSibling('ArmorOnly_mdpi.png', 1, 53, 49));
			Image_ArmorOnly.addSibling(new CocoImageSibling('ArmorOnly_tvdpi.png', 1.25, 66, 61));
			Image_ArmorOnly.addSibling(new CocoImageSibling('ArmorOnly_hdpi.png', 1.5, 80, 74));
			Image_ArmorOnly.addSibling(new CocoImageSibling('ArmorOnly_xhdpi.png', 2, 106, 98));
			Image_ArmorOnly.textureCellWidth = 53;
			Image_ArmorOnly.textureCellHeight = 49;
			Image_ArmorOnly.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: SwordsOnly
		//====================================================================================================
		var Image_SwordsOnly:CocoImage = newResourceImage('SwordsOnly', './assets/images/');
		{
			Image_SwordsOnly.viewOptimalWidth = 48;
			Image_SwordsOnly.viewOptimalHeight = 49;
			Image_SwordsOnly.addSibling(new CocoImageSibling('SwordsOnly_ldpi.png', 0.75, 36, 37));
			Image_SwordsOnly.addSibling(new CocoImageSibling('SwordsOnly_mdpi.png', 1, 48, 49));
			Image_SwordsOnly.addSibling(new CocoImageSibling('SwordsOnly_tvdpi.png', 1.25, 60, 61));
			Image_SwordsOnly.addSibling(new CocoImageSibling('SwordsOnly_hdpi.png', 1.5, 72, 74));
			Image_SwordsOnly.addSibling(new CocoImageSibling('SwordsOnly_xhdpi.png', 2, 96, 98));
			Image_SwordsOnly.textureCellWidth = 48;
			Image_SwordsOnly.textureCellHeight = 49;
			Image_SwordsOnly.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: LeoOnly2
		//====================================================================================================
		var Image_LeoOnly2:CocoImage = newResourceImage('LeoOnly2', './assets/images/');
		{
			Image_LeoOnly2.viewOptimalWidth = 50;
			Image_LeoOnly2.viewOptimalHeight = 51;
			Image_LeoOnly2.addSibling(new CocoImageSibling('LeoOnly2_ldpi.png', 0.75, 38, 38));
			Image_LeoOnly2.addSibling(new CocoImageSibling('LeoOnly2_mdpi.png', 1, 50, 51));
			Image_LeoOnly2.addSibling(new CocoImageSibling('LeoOnly2_tvdpi.png', 1.25, 62, 64));
			Image_LeoOnly2.addSibling(new CocoImageSibling('LeoOnly2_hdpi.png', 1.5, 75, 76));
			Image_LeoOnly2.addSibling(new CocoImageSibling('LeoOnly2_xhdpi.png', 2, 100, 102));
			Image_LeoOnly2.textureCellWidth = 50;
			Image_LeoOnly2.textureCellHeight = 51;
			Image_LeoOnly2.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: buyunpressed
		//====================================================================================================
		var Image_buyunpressed:CocoImage = newResourceImage('buyunpressed', './assets/images/');
		{
			Image_buyunpressed.viewOptimalWidth = 125;
			Image_buyunpressed.viewOptimalHeight = 125;
			Image_buyunpressed.addSibling(new CocoImageSibling('buyunpressed_mdpi.png', 1, 125, 125));
			Image_buyunpressed.addSibling(new CocoImageSibling('buyunpressed_xhdpi.png', 2, 250, 250));
			Image_buyunpressed.textureCellWidth = 125;
			Image_buyunpressed.textureCellHeight = 125;
			Image_buyunpressed.textureGrid = new Float32Array([0,0]);
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////
		// Scene Root Clip
		//////////////////////////////////////////////////////////////////////////////////////////////////////

		__root = new CocoClip();
		__root.__instanceName = 'root';
		__root.__timeline.clear();
		__root.__timeline.addLabelEx(48, "IntroAnimationDone");
		__root.__timeline.addLabelEx(49, "JumpingAvatars");
		__root.__timeline.addLabelEx(71, "WaitToChooseAvatar");
		__root.__timeline.addLabelEx(72, "WaitToBuyTicket");
		__root.__timeline.addLabelEx(73, "WaitToScratch");
		__root.__timeline.addLabelEx(74, "WinAnim");
		__root.__timeline.addLabelEx(75, "EnterDemoMode");
		__root.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
		{
			var inst1:CocoClip = new  CocoClip(null, '');
			inst1.__instanceName = 'Background';
			__root.addChild(inst1);
			inst1.__timeline.clear();
			inst1.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, new CocoAudio('./assets/sounds/Background.ogg', true, 0), false, false);
			{
				var inst2:CocoClip = new  CocoClip(Image_backround, '');
				inst2.__instanceName = ':: backround';
				inst1.addChild(inst2);
				inst2.__timeline.clear();
				inst2.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst3:CocoClip = new  CocoClip(null, '');
			inst3.__instanceName = 'ChooseAvatar';
			__root.addChild(inst3);
			inst3.__timeline.clear();
			inst3.__timeline.addKeyFrameEx(null, null, 71, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 87, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst3.__timeline.addKeyFrameEx(null, null, 72, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 87, 1, 1, 0, 0, 0, 1, 1, 1, 0, null, false, false);
			{
				var inst4:CocoClip = new  CocoClip(null, '');
				inst4.__instanceName = 'AVATAR_BAR1';
				inst3.addChild(inst4);
				inst4.__timeline.clear();
				inst4.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.901623, 0.868781, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst4.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.001803, 1.002439, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst4.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.901623, 0.868781, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst5:CocoClip = new  CocoClip(Image_AVATAR_BAR, '');
					inst5.__instanceName = ':: AVATAR_BAR';
					inst4.addChild(inst5);
					inst5.__timeline.clear();
					inst5.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst6:CocoClip = new  CocoClip(null, '');
				inst6.__instanceName = 'text';
				inst3.addChild(inst6);
				inst6.__timeline.clear();
				inst6.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.883147, 0.866666, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst6.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.000899, 0.982222, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst6.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.883147, 0.866666, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst7:CocoClip = new  CocoClip(Image_ImageSymbol_txtChooseAvatar, '');
					inst7.__instanceName = ':: ImageSymbol_txtChooseAvatar';
					inst6.addChild(inst7);
					inst7.__timeline.clear();
					inst7.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
			}
			var inst8:CocoClip = new  CocoClip(null, '');
			inst8.__instanceName = 'Avatar_Armor';
			__root.addChild(inst8);
			inst8.__timeline.clear();
			inst8.__timeline.addLabelEx(0, "Init");
			inst8.__timeline.addLabelEx(10, "Enable");
			inst8.__timeline.addLabelEx(20, "Disable");
			inst8.__timeline.addLabelEx(30, "Select");
			inst8.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 107.5, 242, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst8.__timeline.addKeyFrameEx(null, null, 34, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 107.5, 110, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst8.__timeline.addKeyFrameEx(null, null, 39, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 107.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst8.__timeline.addKeyFrameEx(null, null, 58, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 107.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst8.__timeline.addKeyFrameEx(null, null, 64, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 107.5, 105, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, new CocoAudio('./assets/sounds/AvatarJump.ogg', true, 1), false, false);
			inst8.__timeline.addKeyFrameEx(null, null, 70, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 107.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst9:CocoClip = new  CocoClip(null, '');
				inst9.__instanceName = 'TileOnly1';
				inst8.addChild(inst9);
				inst9.__timeline.clear();
				inst9.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst9.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst9.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst9.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst9.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst9.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst9.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst10:CocoClip = new  CocoClip(Image_TileOnly, '');
					inst10.__instanceName = ':: TileOnly';
					inst9.addChild(inst10);
					inst10.__timeline.clear();
					inst10.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.33333, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst11:CocoClip = new  CocoClip(null, '');
				inst11.__instanceName = 'inst1_ArmorOnly';
				inst8.addChild(inst11);
				inst11.__timeline.clear();
				inst11.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst11.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst11.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst11.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst11.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst11.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst11.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.66, 0.6, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst12:CocoClip = new  CocoClip(null, '');
					inst12.__instanceName = 'ArmorOnly1';
					inst11.addChild(inst12);
					inst12.__timeline.clear();
					inst12.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 6.037735, 6.530612, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst13:CocoClip = new  CocoClip(Image_ArmorOnly, '');
						inst13.__instanceName = ':: ArmorOnly';
						inst12.addChild(inst13);
						inst13.__timeline.clear();
						inst13.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 6.666667, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
						inst13.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst14:CocoClip = new  CocoClip(null, '');
					inst14.__instanceName = 'inst1_grWhiteStar';
					inst11.addChild(inst14);
					inst14.__timeline.clear();
					inst14.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 1.686667, 1.686667, 135, 0, 0, 1, 1, 1, 1, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 2.22, 2.22, 180, 0, 0, 1, 1, 1, 1, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 39, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 65.1, -85.25, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 66, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 77, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 0.969333, 0.969333, 135, 0, 0, 1, 1, 1, 1, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 87, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 96, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 1.478, 1.478, 180, 0, 0, 1, 1, 1, 1, null, false, false);
					inst14.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 65.1, -85.25, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst15:CocoClip = new  CocoClip(Image_grWhiteStar, '');
						inst15.__instanceName = ':: grWhiteStar';
						inst14.addChild(inst15);
						inst15.__timeline.clear();
						inst15.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst16:CocoClip = new  CocoClip(null, '');
					inst16.__instanceName = 'inst2_grWhiteStar';
					inst11.addChild(inst16);
					inst16.__timeline.clear();
					inst16.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 1.047333, 1.047333, 135, 0, 0, 1, 1, 1, 1, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 1.316667, 1.316667, 180, 0, 0, 1, 1, 1, 1, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 39, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -56, 53.5, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 66, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 77, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 1.922, 1.922, 135, 0, 0, 1, 1, 1, 1, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 87, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 96, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 2.548, 2.548, 180, 0, 0, 1, 1, 1, 1, null, false, false);
					inst16.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -56, 53.5, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst17:CocoClip = new  CocoClip(Image_grWhiteStar, '');
						inst17.__instanceName = ':: grWhiteStar';
						inst16.addChild(inst17);
						inst17.__timeline.clear();
						inst17.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
				}
				var inst18:CocoClip = new  CocoClip(null, '');
				inst18.__instanceName = 'Actions';
				inst8.addChild(inst18);
				inst18.__timeline.clear();
				inst18.__timeline.addKeyFrameEx(null, stop, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst18.__timeline.addKeyFrameEx(null, stop, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst18.__timeline.addKeyFrameEx(null, stop, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst18.__timeline.addKeyFrameEx(null, stop, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst19:CocoClip = new  CocoClip(null, '');
			inst19.__instanceName = 'Avatar_Swords';
			__root.addChild(inst19);
			inst19.__timeline.clear();
			inst19.__timeline.addLabelEx(0, "Init");
			inst19.__timeline.addLabelEx(10, "Enable");
			inst19.__timeline.addLabelEx(20, "Disable");
			inst19.__timeline.addLabelEx(30, "Select");
			inst19.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 64.5, 242, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst19.__timeline.addKeyFrameEx(null, null, 38, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 64.5, 110, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst19.__timeline.addKeyFrameEx(null, null, 43, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 64.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst19.__timeline.addKeyFrameEx(null, null, 56, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 64.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst19.__timeline.addKeyFrameEx(null, null, 62, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 64.5, 105, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, new CocoAudio('./assets/sounds/AvatarJump.ogg', true, 1), false, false);
			inst19.__timeline.addKeyFrameEx(null, null, 68, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 64.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst20:CocoClip = new  CocoClip(null, '');
				inst20.__instanceName = 'TileOnly1';
				inst19.addChild(inst20);
				inst20.__timeline.clear();
				inst20.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst20.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst20.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst20.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst20.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst20.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst20.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst21:CocoClip = new  CocoClip(Image_TileOnly, '');
					inst21.__instanceName = ':: TileOnly';
					inst20.addChild(inst21);
					inst21.__timeline.clear();
					inst21.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.33333, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst22:CocoClip = new  CocoClip(null, '');
				inst22.__instanceName = 'inst1_SwordsOnly';
				inst19.addChild(inst22);
				inst22.__timeline.clear();
				inst22.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 3.333333, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst22.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.333333, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst22.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 3.333333, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst22.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.333333, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst22.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.333333, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst22.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.333333, 0.5, 0.5, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst22.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.333333, 0.6, 0.6, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst23:CocoClip = new  CocoClip(null, '');
					inst23.__instanceName = 'SwordsOnly1';
					inst22.addChild(inst23);
					inst23.__timeline.clear();
					inst23.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 6.666667, 6.530612, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst24:CocoClip = new  CocoClip(Image_SwordsOnly, '');
						inst24.__instanceName = ':: SwordsOnly';
						inst23.addChild(inst24);
						inst24.__timeline.clear();
						inst24.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
						inst24.__timeline.addKeyFrameEx(null, null, 32, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
						inst24.__timeline.addKeyFrameEx(null, null, 33, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, false, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
						inst24.__timeline.addKeyFrameEx(null, null, 63, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, false, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst25:CocoClip = new  CocoClip(null, '');
					inst25.__instanceName = 'inst1_SwordRight';
					inst22.addChild(inst25);
					inst25.__timeline.clear();
					inst25.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, false, 0, 0, 6.530612, 6.530612, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst25.__timeline.addKeyFrameEx(null, null, 33, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 153.1818, 14.54553, 6.530612, 6.530612, -725, 0, 0, 1, 1, 1, 1, null, false, false);
					inst25.__timeline.addKeyFrameEx(null, null, 63, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0.454544, 0, 6.530612, 6.530612, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst26:CocoClip = new  CocoClip(Image_SwordRight, '');
						inst26.__instanceName = ':: SwordRight';
						inst25.addChild(inst26);
						inst26.__timeline.clear();
						inst26.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst27:CocoClip = new  CocoClip(null, '');
					inst27.__instanceName = 'inst1_SwordLeft';
					inst22.addChild(inst27);
					inst27.__timeline.clear();
					inst27.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, false, 0, 0, 6.530612, 6.530612, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst27.__timeline.addKeyFrameEx(null, null, 33, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -209.5454, 0, 6.530612, 6.530612, 724, 0, 0, 1, 1, 1, 1, null, false, false);
					inst27.__timeline.addKeyFrameEx(null, null, 63, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -0.454544, -1.363678, 6.530612, 6.530612, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst28:CocoClip = new  CocoClip(Image_SwordLeft, '');
						inst28.__instanceName = ':: SwordLeft';
						inst27.addChild(inst28);
						inst28.__timeline.clear();
						inst28.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
				}
				var inst29:CocoClip = new  CocoClip(null, '');
				inst29.__instanceName = 'ActionsSwords';
				inst19.addChild(inst29);
				inst29.__timeline.clear();
				inst29.__timeline.addKeyFrameEx(null, stop, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst29.__timeline.addKeyFrameEx(null, stop, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst29.__timeline.addKeyFrameEx(null, stop, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst29.__timeline.addKeyFrameEx(null, stop, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst30:CocoClip = new  CocoClip(null, '');
			inst30.__instanceName = 'Avatar_Persian';
			__root.addChild(inst30);
			inst30.__timeline.clear();
			inst30.__timeline.addLabelEx(0, "Init");
			inst30.__timeline.addLabelEx(10, "Enable");
			inst30.__timeline.addLabelEx(20, "Disable");
			inst30.__timeline.addLabelEx(30, "Select");
			inst30.__timeline.addKeyFrameEx(null, null, 33, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 21.5, 243.1364, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst30.__timeline.addKeyFrameEx(null, null, 42, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 21.5, 110, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst30.__timeline.addKeyFrameEx(null, null, 47, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 21.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst30.__timeline.addKeyFrameEx(null, null, 55, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 21.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst30.__timeline.addKeyFrameEx(null, null, 61, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 21.5, 105, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, new CocoAudio('./assets/sounds/AvatarJump.ogg', true, 1), false, false);
			inst30.__timeline.addKeyFrameEx(null, null, 67, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 21.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst31:CocoClip = new  CocoClip(null, '');
				inst31.__instanceName = 'TileOnly1';
				inst30.addChild(inst31);
				inst31.__timeline.clear();
				inst31.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst31.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst31.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst31.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst31.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst31.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst31.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst32:CocoClip = new  CocoClip(Image_TileOnly, '');
					inst32.__instanceName = ':: TileOnly';
					inst31.addChild(inst32);
					inst32.__timeline.clear();
					inst32.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.33333, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst33:CocoClip = new  CocoClip(null, '');
				inst33.__instanceName = 'inst1_PersianOnly';
				inst30.addChild(inst33);
				inst33.__timeline.clear();
				inst33.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst33.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst33.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst33.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst33.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst33.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst33.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -0.454529, -0.454559, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst34:CocoClip = new  CocoClip(Image_PersianOnly, '');
					inst34.__instanceName = ':: PersianOnly';
					inst33.addChild(inst34);
					inst34.__timeline.clear();
					inst34.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 6, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.183, 1.183, 6.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.167, 1.167, -7.7, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 44, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 50, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.183, 1.183, 6.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 55, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 63, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst34.__timeline.addKeyFrameEx(null, null, 84, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst35:CocoClip = new  CocoClip(null, '');
				inst35.__instanceName = 'Actions';
				inst30.addChild(inst35);
				inst35.__timeline.clear();
				inst35.__timeline.addKeyFrameEx(null, stop, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst35.__timeline.addKeyFrameEx(null, stop, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst35.__timeline.addKeyFrameEx(null, stop, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst35.__timeline.addKeyFrameEx(null, stop, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst36:CocoClip = new  CocoClip(null, '');
			inst36.__instanceName = 'Avatar_Spartan';
			__root.addChild(inst36);
			inst36.__timeline.clear();
			inst36.__timeline.addLabelEx(10, "Enable");
			inst36.__timeline.addLabelEx(0, "Init");
			inst36.__timeline.addLabelEx(20, "Disable");
			inst36.__timeline.addLabelEx(30, "Select");
			inst36.__timeline.addKeyFrameEx(null, null, 33, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -21.5, 243.1364, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst36.__timeline.addKeyFrameEx(null, null, 42, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -21.5, 110, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst36.__timeline.addKeyFrameEx(null, null, 47, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -21.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst36.__timeline.addKeyFrameEx(null, null, 53, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -21.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst36.__timeline.addKeyFrameEx(null, null, 59, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -21.5, 105, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, new CocoAudio('./assets/sounds/AvatarJump.ogg', true, 1), false, false);
			inst36.__timeline.addKeyFrameEx(null, null, 65, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, -21.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst37:CocoClip = new  CocoClip(null, '');
				inst37.__instanceName = 'TileOnly1';
				inst36.addChild(inst37);
				inst37.__timeline.clear();
				inst37.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst37.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst37.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst37.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst37.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst37.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst37.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst38:CocoClip = new  CocoClip(Image_TileOnly, '');
					inst38.__instanceName = ':: TileOnly';
					inst37.addChild(inst38);
					inst38.__timeline.clear();
					inst38.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.33333, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst39:CocoClip = new  CocoClip(null, '');
				inst39.__instanceName = 'inst1_SpartanOnly';
				inst36.addChild(inst39);
				inst39.__timeline.clear();
				inst39.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst39.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst39.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst39.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst39.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst39.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0.454529, -0.454559, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst39.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0.454529, -0.454559, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst40:CocoClip = new  CocoClip(Image_SpartanOnly, '');
					inst40.__instanceName = ':: SpartanOnly';
					inst39.addChild(inst40);
					inst40.__timeline.clear();
					inst40.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst40.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.183, 1.183, -15, 0, 0, 1, 1, 1, 1, null, false, false);
					inst40.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst40.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.183, 1.183, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst40.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst40.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.166, 1.166, 15, 0, 0, 1, 1, 1, 1, null, false, false);
					inst40.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst40.__timeline.addKeyFrameEx(null, null, 82, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst41:CocoClip = new  CocoClip(null, '');
				inst41.__instanceName = 'Actions';
				inst36.addChild(inst41);
				inst41.__timeline.clear();
				inst41.__timeline.addKeyFrameEx(null, stop, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst41.__timeline.addKeyFrameEx(null, stop, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst41.__timeline.addKeyFrameEx(null, stop, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst41.__timeline.addKeyFrameEx(null, stop, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst42:CocoClip = new  CocoClip(null, '');
			inst42.__instanceName = 'Avatar_Xerxes';
			__root.addChild(inst42);
			inst42.__timeline.clear();
			inst42.__timeline.addLabelEx(0, "Init");
			inst42.__timeline.addLabelEx(10, "Enable");
			inst42.__timeline.addLabelEx(20, "Disable");
			inst42.__timeline.addLabelEx(30, "Select");
			inst42.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -64.5, 243.96, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst42.__timeline.addKeyFrameEx(null, null, 38, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -64.5, 110, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst42.__timeline.addKeyFrameEx(null, null, 43, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -64.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst42.__timeline.addKeyFrameEx(null, null, 50, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -64.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst42.__timeline.addKeyFrameEx(null, null, 56, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -64.5, 105, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, new CocoAudio('./assets/sounds/AvatarJump.ogg', true, 1), false, false);
			inst42.__timeline.addKeyFrameEx(null, null, 62, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, -64.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst43:CocoClip = new  CocoClip(null, '');
				inst43.__instanceName = 'TileOnly1';
				inst42.addChild(inst43);
				inst43.__timeline.clear();
				inst43.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst43.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst43.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst43.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst43.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst43.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst43.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst44:CocoClip = new  CocoClip(Image_TileOnly, '');
					inst44.__instanceName = ':: TileOnly';
					inst43.addChild(inst44);
					inst44.__timeline.clear();
					inst44.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.33333, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst45:CocoClip = new  CocoClip(null, '');
				inst45.__instanceName = 'inst1_XerxesOnly';
				inst42.addChild(inst45);
				inst45.__timeline.clear();
				inst45.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.328, 3.262745, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst45.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.328, 3.262745, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst45.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.328, 3.262745, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst45.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.328, 3.262745, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst45.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.328, 3.262745, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst45.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.328, 3.262745, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst45.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.968, 3.890196, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst46:CocoClip = new  CocoClip(Image_XerxesOnly, '');
					inst46.__instanceName = ':: XerxesOnly';
					inst45.addChild(inst46);
					inst46.__timeline.clear();
					inst46.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst47:CocoClip = new  CocoClip(null, '');
				inst47.__instanceName = 'Actions';
				inst42.addChild(inst47);
				inst47.__timeline.clear();
				inst47.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst47.__timeline.addKeyFrameEx(null, stop, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst47.__timeline.addKeyFrameEx(null, stop, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst47.__timeline.addKeyFrameEx(null, stop, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst48:CocoClip = new  CocoClip(null, '');
			inst48.__instanceName = 'Avatar_Leonidas';
			__root.addChild(inst48);
			inst48.__timeline.clear();
			inst48.__timeline.addLabelEx(0, "Init");
			inst48.__timeline.addLabelEx(10, "Enable");
			inst48.__timeline.addLabelEx(20, "Disable");
			inst48.__timeline.addLabelEx(30, "Select");
			inst48.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -107.5, 243.96, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst48.__timeline.addKeyFrameEx(null, null, 34, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -107.5, 110, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst48.__timeline.addKeyFrameEx(null, null, 39, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -107.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst48.__timeline.addKeyFrameEx(null, null, 49, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -107.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst48.__timeline.addKeyFrameEx(null, null, 54, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -107.5, 105, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, new CocoAudio('./assets/sounds/AvatarJump.ogg', true, 1), false, false);
			inst48.__timeline.addKeyFrameEx(null, null, 60, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, -107.5, 125, 0.251923, 0.256225, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst49:CocoClip = new  CocoClip(null, '');
				inst49.__instanceName = 'TileOnly1';
				inst48.addChild(inst49);
				inst49.__timeline.clear();
				inst49.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst49.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst49.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst49.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst49.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst49.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 3.333333, 3.265306, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst49.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 4, 3.918367, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst50:CocoClip = new  CocoClip(Image_TileOnly, '');
					inst50.__instanceName = ':: TileOnly';
					inst49.addChild(inst50);
					inst50.__timeline.clear();
					inst50.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 3.33333, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst51:CocoClip = new  CocoClip(null, '');
				inst51.__instanceName = 'inst1_LeoOnly2';
				inst48.addChild(inst51);
				inst51.__timeline.clear();
				inst51.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.52, 0.52, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst51.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.52, 0.52, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst51.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.52, 0.52, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst51.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.52, 0.52, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst51.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.52, 0.52, 0, 0, 0, 0, 0, 0, 1, null, false, false);
				inst51.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.52, 0.52, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst51.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.62, 0.62, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst52:CocoClip = new  CocoClip(null, '');
					inst52.__instanceName = 'LeoOnly21';
					inst51.addChild(inst52);
					inst52.__timeline.clear();
					inst52.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 6.4, 6.27451, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst53:CocoClip = new  CocoClip(Image_LeoOnly2, '');
						inst53.__instanceName = ':: LeoOnly2';
						inst52.addChild(inst53);
						inst53.__timeline.clear();
						inst53.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst54:CocoClip = new  CocoClip(null, '');
					inst54.__instanceName = 'inst1_LeoEye';
					inst51.addChild(inst54);
					inst54.__timeline.clear();
					inst54.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -63.75, -80.65, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 8, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -63.75, -80.65, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 16, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -60.25, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -60.25, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -61.05, -82.55, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -61.9, -81.75, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -62.75, -80.9, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 72, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -62.75, -80.9, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 77, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -61.9, -81.75, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 82, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -61.05, -82.55, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 87, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -60.25, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 91, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -60.25, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 99, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -63.75, -80.65, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst54.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -63.75, -80.65, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst55:CocoClip = new  CocoClip(Image_LeoEye, '');
						inst55.__instanceName = ':: LeoEye';
						inst54.addChild(inst55);
						inst55.__timeline.clear();
						inst55.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst56:CocoClip = new  CocoClip(null, '');
					inst56.__instanceName = 'inst2_LeoEye';
					inst51.addChild(inst56);
					inst56.__timeline.clear();
					inst56.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -34.5, -78.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 8, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -34.5, -78.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 16, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -27, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -27, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -26.9, -82.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -26.85, -81.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -26.75, -80.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 72, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -26.75, -80.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 77, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -26.85, -81.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 82, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -26.9, -82.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 87, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -27, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 91, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -27, -83.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 99, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -34.5, -78.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst56.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -34.5, -78.4, 7.500019, 5.333333, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst57:CocoClip = new  CocoClip(Image_LeoEye, '');
						inst57.__instanceName = ':: LeoEye';
						inst56.addChild(inst57);
						inst57.__timeline.clear();
						inst57.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst58:CocoClip = new  CocoClip(null, '');
					inst58.__instanceName = 'inst1_grWhiteStar';
					inst51.addChild(inst58);
					inst58.__timeline.clear();
					inst58.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 1.047333, 1.047333, 135, 0, 0, 1, 1, 1, 1, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 1.316667, 1.316667, 180, 0, 0, 1, 1, 1, 1, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 39, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -4.1, -33.35, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 65, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 77, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 0.969333, 0.969333, 135, 0, 0, 1, 1, 1, 1, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 87, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 95, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 1.418, 1.418, 180, 0, 0, 1, 1, 1, 1, null, false, false);
					inst58.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -4.1, -33.35, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst59:CocoClip = new  CocoClip(Image_grWhiteStar, '');
						inst59.__instanceName = ':: grWhiteStar';
						inst58.addChild(inst59);
						inst59.__timeline.clear();
						inst59.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
				}
				var inst60:CocoClip = new  CocoClip(null, '');
				inst60.__instanceName = 'Actions';
				inst48.addChild(inst60);
				inst60.__timeline.clear();
				inst60.__timeline.addKeyFrameEx(null, stop, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst60.__timeline.addKeyFrameEx(null, stop, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst60.__timeline.addKeyFrameEx(null, stop, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst60.__timeline.addKeyFrameEx(null, stop, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst61:CocoClip = new  CocoClip(null, '');
			inst61.__instanceName = 'Clouds';
			__root.addChild(inst61);
			inst61.__timeline.clear();
			inst61.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst62:CocoClip = new  CocoClip(null, '');
				inst62.__instanceName = 'cloud21';
				inst61.addChild(inst62);
				inst62.__timeline.clear();
				inst62.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -388.5, -110, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst62.__timeline.addKeyFrameEx(null, null, 50, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 388.5, -149, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst63:CocoClip = new  CocoClip(Image_ImageSymbol_cloud2, '');
					inst63.__instanceName = ':: ImageSymbol_cloud2';
					inst62.addChild(inst63);
					inst63.__timeline.clear();
					inst63.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst64:CocoClip = new  CocoClip(null, '');
				inst64.__instanceName = 'cloud51';
				inst61.addChild(inst64);
				inst64.__timeline.clear();
				inst64.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -470.5, -136, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst64.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 344.5, -194, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst65:CocoClip = new  CocoClip(Image_ImageSymbol_cloud5, '');
					inst65.__instanceName = ':: ImageSymbol_cloud5';
					inst64.addChild(inst65);
					inst65.__timeline.clear();
					inst65.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst66:CocoClip = new  CocoClip(null, '');
				inst66.__instanceName = 'cloud11';
				inst61.addChild(inst66);
				inst66.__timeline.clear();
				inst66.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -211.5, -104.96, 1.001101, 1, 0, 0, 0, 1, 1, 1, 0, null, false, false);
				{
					var inst67:CocoClip = new  CocoClip(Image_ImageSymbol_cloud1, '');
					inst67.__instanceName = ':: ImageSymbol_cloud1';
					inst66.addChild(inst67);
					inst67.__timeline.clear();
					inst67.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
			}
			var inst68:CocoClip = new  CocoClip(null, '');
			inst68.__instanceName = 'Leonidas';
			__root.addChild(inst68);
			inst68.__timeline.clear();
			inst68.__timeline.addLabelEx(1, "Animate");
			inst68.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -77, -28.5, 0.7, 0.7, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst69:CocoClip = new  CocoClip(null, '');
				inst69.__instanceName = 'inst1_LEONIDAS_hand';
				inst68.addChild(inst69);
				inst69.__timeline.clear();
				inst69.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -114.5, -51.5, 1.437208, 1.434288, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst69.__timeline.addKeyFrameEx(null, null, 22, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -114.5, -50.5, 1.437208, 1.434288, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst69.__timeline.addKeyFrameEx(null, null, 27, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -114.5, -70.6, 1.437208, 1.434288, -21.5, 0, 0, 1, 1, 1, 1, null, false, false);
				inst69.__timeline.addKeyFrameEx(null, null, 31, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -114.5, -50.5, 1.437208, 1.434288, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst69.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -114.5, -70.6, 1.437208, 1.434288, -21.5, 0, 0, 1, 1, 1, 1, null, false, false);
				inst69.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -114.5, -50.5, 1.437208, 1.434288, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst69.__timeline.addKeyFrameEx(null, null, 71, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -114.5, -51.5, 1.437208, 1.434288, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst70:CocoClip = new  CocoClip(Image_LEONIDAS_hand, '');
					inst70.__instanceName = ':: LEONIDAS_hand';
					inst69.addChild(inst70);
					inst70.__timeline.clear();
					inst70.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst71:CocoClip = new  CocoClip(null, '');
				inst71.__instanceName = 'inst1_LEONIDAS_body';
				inst68.addChild(inst71);
				inst71.__timeline.clear();
				inst71.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -162.6429, -19.21429, 1.428571, 1.263636, 0, 52.85714, -30.71429, 1, 1, 1, 1, null, false, false);
				inst71.__timeline.addKeyFrameEx(null, null, 22, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -162.6429, -19.21429, 1.428571, 1.263636, 0, 52.85714, -30.71429, 1, 1, 1, 1, null, false, false);
				inst71.__timeline.addKeyFrameEx(null, null, 27, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -162.6429, -29.21429, 1.428571, 1.427909, 0, 52.85714, -30.71429, 1, 1, 1, 1, null, false, false);
				inst71.__timeline.addKeyFrameEx(null, null, 31, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -162.6429, -19.21429, 1.428571, 1.263636, 0, 52.85714, -30.71429, 1, 1, 1, 1, null, false, false);
				inst71.__timeline.addKeyFrameEx(null, null, 71, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -162.6429, -19.21429, 1.428571, 1.263636, 0, 52.85714, -30.71429, 1, 1, 1, 1, null, false, false);
				{
					var inst72:CocoClip = new  CocoClip(Image_LEONIDAS_body, '');
					inst72.__instanceName = ':: LEONIDAS_body';
					inst71.addChild(inst72);
					inst72.__timeline.clear();
					inst72.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 50.5, -31.39999, 0.3, 0.3, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst73:CocoClip = new  CocoClip(null, '');
				inst73.__instanceName = 'inst1_LeonidasClipHead';
				inst68.addChild(inst73);
				inst73.__timeline.clear();
				inst73.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -142.25, -76.75, 1.434377, 1.412902, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst73.__timeline.addKeyFrameEx(null, null, 22, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -142.25, -76.75, 1.434377, 1.412902, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst73.__timeline.addKeyFrameEx(null, null, 27, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -142.25, -92.75, 1.434377, 1.412902, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst73.__timeline.addKeyFrameEx(null, null, 31, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -142.25, -76.75, 1.434377, 1.412902, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst73.__timeline.addKeyFrameEx(null, null, 71, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -142.25, -76.75, 1.434377, 1.412902, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst74:CocoClip = new  CocoClip(Image_LeonidasClipHead, '');
					inst74.__instanceName = ':: LeonidasClipHead';
					inst73.addChild(inst74);
					inst74.__timeline.clear();
					inst74.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst75:CocoClip = new  CocoClip(null, '');
				inst75.__instanceName = 'Actions';
				inst68.addChild(inst75);
				inst75.__timeline.clear();
				inst75.__timeline.addKeyFrameEx(null, stop, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst76:CocoClip = new  CocoClip(null, '');
			inst76.__instanceName = 'Xerxes';
			__root.addChild(inst76);
			inst76.__timeline.clear();
			inst76.__timeline.addLabelEx(1, "Animate");
			inst76.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 70.5, -51, 0.7, 0.7, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst77:CocoClip = new  CocoClip(null, '');
				inst77.__instanceName = 'inst1_Xerxes_Sleeve';
				inst76.addChild(inst77);
				inst77.__timeline.clear();
				inst77.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 170.1, -29.1, 1.458334, 1.454545, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst77.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 170.1, -35.1, 1.458334, 1.454545, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst77.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 170.1, -29.1, 1.458334, 1.454545, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst77.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 170.1, -29.1, 1.458334, 1.454545, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst78:CocoClip = new  CocoClip(Image_Xerxes_Sleeve, '');
					inst78.__instanceName = ':: Xerxes_Sleeve';
					inst77.addChild(inst78);
					inst78.__timeline.clear();
					inst78.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst79:CocoClip = new  CocoClip(null, '');
				inst79.__instanceName = 'inst1_XERXES_hand';
				inst76.addChild(inst79);
				inst79.__timeline.clear();
				inst79.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 163.25, -23, 1.428571, 1.399999, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst79.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 164.25, -28, 1.428571, 1.399999, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst79.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 163.25, -23, 1.428571, 1.399999, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst79.__timeline.addKeyFrameEx(null, null, 37, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 161.25, -30, 1.428571, 1.399999, 35.7, 0, 0, 1, 1, 1, 1, null, false, false);
				inst79.__timeline.addKeyFrameEx(null, null, 44, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 163.25, -23, 1.428571, 1.399999, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst79.__timeline.addKeyFrameEx(null, null, 51, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 161.25, -30, 1.428571, 1.399999, 35.7, 0, 0, 1, 1, 1, 1, null, false, false);
				inst79.__timeline.addKeyFrameEx(null, null, 59, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 163.25, -23, 1.428571, 1.399999, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst79.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 163.25, -23, 1.428571, 1.399999, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst80:CocoClip = new  CocoClip(Image_XERXES_hand, '');
					inst80.__instanceName = ':: XERXES_hand';
					inst79.addChild(inst80);
					inst80.__timeline.clear();
					inst80.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst81:CocoClip = new  CocoClip(null, '');
				inst81.__instanceName = 'inst1_XERXES_Body';
				inst76.addChild(inst81);
				inst81.__timeline.clear();
				inst81.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 190.5, 2.5, 1.426472, 1.343136, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst81.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 190.5, -1.5, 1.426472, 1.423725, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst81.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 190.5, 2.5, 1.426472, 1.343136, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst81.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 190.5, 2.5, 1.426472, 1.343136, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst82:CocoClip = new  CocoClip(Image_XERXES_Body, '');
					inst82.__instanceName = ':: XERXES_Body';
					inst81.addChild(inst82);
					inst82.__timeline.clear();
					inst82.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst83:CocoClip = new  CocoClip(null, '');
				inst83.__instanceName = 'inst1_XerxesClipHead2';
				inst76.addChild(inst83);
				inst83.__timeline.clear();
				inst83.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 184.8, -55.8, 1.452382, 1.406248, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst83.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 184.8, -62.8, 1.452382, 1.406248, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst83.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 184.8, -55.8, 1.452382, 1.406248, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst83.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 184.8, -55.8, 1.452382, 1.406248, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst84:CocoClip = new  CocoClip(Image_XerxesClipHead2, '');
					inst84.__instanceName = ':: XerxesClipHead2';
					inst83.addChild(inst84);
					inst84.__timeline.clear();
					inst84.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst85:CocoClip = new  CocoClip(null, '');
				inst85.__instanceName = 'Actions';
				inst76.addChild(inst85);
				inst85.__timeline.clear();
				inst85.__timeline.addKeyFrameEx(null, stop, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst86:CocoClip = new  CocoClip(null, '');
			inst86.__instanceName = 'PrizeTable';
			__root.addChild(inst86);
			inst86.__timeline.clear();
			inst86.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -192, 40, 0.4, 0.4, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst87:CocoClip = new  CocoClip(null, '');
				inst87.__instanceName = 'PriceTable1';
				inst86.addChild(inst87);
				inst87.__timeline.clear();
				inst87.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.173483, 0.173043, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst87.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.493819, 2.487498, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst87.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.734831, 1.730433, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst87.__timeline.addKeyFrameEx(null, stop, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.168539, 2.163041, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst88:CocoClip = new  CocoClip(Image_PriceTable, '');
					inst88.__instanceName = ':: PriceTable';
					inst87.addChild(inst88);
					inst88.__timeline.clear();
					inst88.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
			}
			var inst89:CocoClip = new  CocoClip(null, '');
			inst89.__instanceName = 'OpenAllButton';
			__root.addChild(inst89);
			inst89.__timeline.clear();
			inst89.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 191.78, 243.96, 0.996377, 0.996377, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst89.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 191.78, 125, 0.996377, 0.996377, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst90:CocoClip = new  CocoClip(Image_openunpressed, '');
				inst90.__instanceName = ':: openunpressed';
				inst89.addChild(inst90);
				inst90.__timeline.clear();
				inst90.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst91:CocoClip = new  CocoClip(null, '');
			inst91.__instanceName = 'BuyTicketButton';
			__root.addChild(inst91);
			inst91.__timeline.clear();
			inst91.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -192, 243.96, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst91.__timeline.addKeyFrameEx(null, null, 30, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, -192, 125, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst92:CocoClip = new  CocoClip(null, '');
				inst92.__instanceName = 'buyunpressed1';
				inst91.addChild(inst92);
				inst92.__timeline.clear();
				inst92.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst93:CocoClip = new  CocoClip(Image_buyunpressed, '');
					inst93.__instanceName = ':: buyunpressed';
					inst92.addChild(inst93);
					inst93.__timeline.clear();
					inst93.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.55, 0.55, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst94:CocoClip = new  CocoClip(null, '');
				inst94.__instanceName = 'inst1_ticket_price';
				inst91.addChild(inst94);
				inst94.__timeline.clear();
				inst94.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, -38.20996, 0.994186, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst95:CocoClip = new  CocoClip(Image_ticket_price, '');
					inst95.__instanceName = ':: ticket_price';
					inst94.addChild(inst95);
					inst95.__timeline.clear();
					inst95.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
			}
			var inst96:CocoClip = new  CocoClip(null, '');
			inst96.__instanceName = 'Winnings';
			__root.addChild(inst96);
			inst96.__timeline.clear();
			inst96.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 193.5, -243, 1.005435, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst96.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 193.5, -134, 1.005435, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst97:CocoClip = new  CocoClip(Image_winnings, '');
				inst97.__instanceName = ':: winnings';
				inst96.addChild(inst97);
				inst97.__timeline.clear();
				inst97.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst98:CocoClip = new  CocoClip(null, '');
			inst98.__instanceName = 'Balance';
			__root.addChild(inst98);
			inst98.__timeline.clear();
			inst98.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -190.5, -243, 1.005435, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst98.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -190.5, -134, 1.005435, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst99:CocoClip = new  CocoClip(Image_Balance, '');
				inst99.__instanceName = ':: Balance';
				inst98.addChild(inst99);
				inst99.__timeline.clear();
				inst99.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst100:CocoClip = new  CocoClip(null, '');
			inst100.__instanceName = 'Grid';
			__root.addChild(inst100);
			inst100.__timeline.clear();
			inst100.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, -10, 0.05, 0.05, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst100.__timeline.addKeyFrameEx(null, null, 47, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, -10, 0.4, 0.4, -90, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst101:CocoClip = new  CocoClip(null, '');
				inst101.__instanceName = 'AnimationClip_Cell1';
				inst100.addChild(inst101);
				inst101.__timeline.clear();
				inst101.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -110, 210, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst101.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, -110, 210, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst102:CocoClip = new  CocoClip(null, '');
					inst102.__instanceName = 'Back';
					inst101.addChild(inst102);
					inst102.__timeline.clear();
					inst102.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst102.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst102.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst102.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst102.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst102.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst102.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst103:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst103.__instanceName = ':: StoneTile_Back';
						inst102.addChild(inst103);
						inst103.__timeline.clear();
						inst103.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst104:CocoClip = new  CocoClip(null, '');
					inst104.__instanceName = 'Front';
					inst101.addChild(inst104);
					inst104.__timeline.clear();
					inst104.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst104.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst104.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst104.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst104.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst105:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst105.__instanceName = ':: grid_tile';
						inst104.addChild(inst105);
						inst105.__timeline.clear();
						inst105.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst106:CocoClip = new  CocoClip(null, '');
					inst106.__instanceName = 'Actions';
					inst101.addChild(inst106);
					inst106.__timeline.clear();
					inst106.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst107:CocoClip = new  CocoClip(null, '');
				inst107.__instanceName = 'AnimationClip_Cell2';
				inst100.addChild(inst107);
				inst107.__timeline.clear();
				inst107.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 180, -68.33332, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst107.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 180, -68.33332, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst108:CocoClip = new  CocoClip(null, '');
					inst108.__instanceName = 'Back';
					inst107.addChild(inst108);
					inst108.__timeline.clear();
					inst108.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst108.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst108.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst108.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst108.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst108.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst108.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst109:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst109.__instanceName = ':: StoneTile_Back';
						inst108.addChild(inst109);
						inst109.__timeline.clear();
						inst109.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst110:CocoClip = new  CocoClip(null, '');
					inst110.__instanceName = 'Front';
					inst107.addChild(inst110);
					inst110.__timeline.clear();
					inst110.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst110.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst110.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst110.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst110.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst111:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst111.__instanceName = ':: grid_tile';
						inst110.addChild(inst111);
						inst111.__timeline.clear();
						inst111.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst112:CocoClip = new  CocoClip(null, '');
					inst112.__instanceName = 'Actions';
					inst107.addChild(inst112);
					inst112.__timeline.clear();
					inst112.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst113:CocoClip = new  CocoClip(null, '');
				inst113.__instanceName = 'AnimationClip_Cell3';
				inst100.addChild(inst113);
				inst113.__timeline.clear();
				inst113.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 34.99999, -207.5, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst113.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 34.99999, -207.5, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst114:CocoClip = new  CocoClip(null, '');
					inst114.__instanceName = 'Back';
					inst113.addChild(inst114);
					inst114.__timeline.clear();
					inst114.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst114.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst114.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst114.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst114.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst114.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst114.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst115:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst115.__instanceName = ':: StoneTile_Back';
						inst114.addChild(inst115);
						inst115.__timeline.clear();
						inst115.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst116:CocoClip = new  CocoClip(null, '');
					inst116.__instanceName = 'Front';
					inst113.addChild(inst116);
					inst116.__timeline.clear();
					inst116.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst116.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst116.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst116.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst116.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst117:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst117.__instanceName = ':: grid_tile';
						inst116.addChild(inst117);
						inst117.__timeline.clear();
						inst117.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst118:CocoClip = new  CocoClip(null, '');
					inst118.__instanceName = 'Actions';
					inst113.addChild(inst118);
					inst118.__timeline.clear();
					inst118.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst119:CocoClip = new  CocoClip(null, '');
				inst119.__instanceName = 'AnimationClip_Cell4';
				inst100.addChild(inst119);
				inst119.__timeline.clear();
				inst119.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 180, 70.83334, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst119.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 180, 70.83334, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst120:CocoClip = new  CocoClip(null, '');
					inst120.__instanceName = 'Back';
					inst119.addChild(inst120);
					inst120.__timeline.clear();
					inst120.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst120.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst120.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst120.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst120.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst120.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst120.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst121:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst121.__instanceName = ':: StoneTile_Back';
						inst120.addChild(inst121);
						inst121.__timeline.clear();
						inst121.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst122:CocoClip = new  CocoClip(null, '');
					inst122.__instanceName = 'Front';
					inst119.addChild(inst122);
					inst122.__timeline.clear();
					inst122.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst122.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst122.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst122.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst122.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst123:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst123.__instanceName = ':: grid_tile';
						inst122.addChild(inst123);
						inst123.__timeline.clear();
						inst123.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst124:CocoClip = new  CocoClip(null, '');
					inst124.__instanceName = 'Actions';
					inst119.addChild(inst124);
					inst124.__timeline.clear();
					inst124.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst125:CocoClip = new  CocoClip(null, '');
				inst125.__instanceName = 'AnimationClip_Cell5';
				inst100.addChild(inst125);
				inst125.__timeline.clear();
				inst125.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 34.99999, -68.33332, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst125.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 34.99999, -68.33332, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst126:CocoClip = new  CocoClip(null, '');
					inst126.__instanceName = 'Back';
					inst125.addChild(inst126);
					inst126.__timeline.clear();
					inst126.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst126.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst126.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst126.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst126.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst126.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst126.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst127:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst127.__instanceName = ':: StoneTile_Back';
						inst126.addChild(inst127);
						inst127.__timeline.clear();
						inst127.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst128:CocoClip = new  CocoClip(null, '');
					inst128.__instanceName = 'Front';
					inst125.addChild(inst128);
					inst128.__timeline.clear();
					inst128.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst128.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst128.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst128.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst128.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst129:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst129.__instanceName = ':: grid_tile';
						inst128.addChild(inst129);
						inst129.__timeline.clear();
						inst129.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst130:CocoClip = new  CocoClip(null, '');
					inst130.__instanceName = 'Actions';
					inst125.addChild(inst130);
					inst130.__timeline.clear();
					inst130.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst131:CocoClip = new  CocoClip(null, '');
				inst131.__instanceName = 'AnimationClip_Cell6';
				inst100.addChild(inst131);
				inst131.__timeline.clear();
				inst131.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -110, -207.5, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst131.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, -110, -207.5, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst132:CocoClip = new  CocoClip(null, '');
					inst132.__instanceName = 'Back';
					inst131.addChild(inst132);
					inst132.__timeline.clear();
					inst132.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst132.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst132.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst132.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst132.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst132.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst132.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst133:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst133.__instanceName = ':: StoneTile_Back';
						inst132.addChild(inst133);
						inst133.__timeline.clear();
						inst133.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst134:CocoClip = new  CocoClip(null, '');
					inst134.__instanceName = 'Front';
					inst131.addChild(inst134);
					inst134.__timeline.clear();
					inst134.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst134.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst134.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst134.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst134.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst135:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst135.__instanceName = ':: grid_tile';
						inst134.addChild(inst135);
						inst135.__timeline.clear();
						inst135.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst136:CocoClip = new  CocoClip(null, '');
					inst136.__instanceName = 'Actions';
					inst131.addChild(inst136);
					inst136.__timeline.clear();
					inst136.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst137:CocoClip = new  CocoClip(null, '');
				inst137.__instanceName = 'AnimationClip_Cell7';
				inst100.addChild(inst137);
				inst137.__timeline.clear();
				inst137.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 180, 210, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst137.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 180, 210, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst138:CocoClip = new  CocoClip(null, '');
					inst138.__instanceName = 'Back';
					inst137.addChild(inst138);
					inst138.__timeline.clear();
					inst138.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst138.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst138.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst138.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst138.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst138.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst138.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst139:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst139.__instanceName = ':: StoneTile_Back';
						inst138.addChild(inst139);
						inst139.__timeline.clear();
						inst139.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst140:CocoClip = new  CocoClip(null, '');
					inst140.__instanceName = 'Front';
					inst137.addChild(inst140);
					inst140.__timeline.clear();
					inst140.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst140.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst140.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst140.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst140.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst141:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst141.__instanceName = ':: grid_tile';
						inst140.addChild(inst141);
						inst141.__timeline.clear();
						inst141.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst142:CocoClip = new  CocoClip(null, '');
					inst142.__instanceName = 'Actions';
					inst137.addChild(inst142);
					inst142.__timeline.clear();
					inst142.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst143:CocoClip = new  CocoClip(null, '');
				inst143.__instanceName = 'AnimationClip_Cell8';
				inst100.addChild(inst143);
				inst143.__timeline.clear();
				inst143.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 34.99999, 70.83334, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst143.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 34.99999, 70.83334, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst144:CocoClip = new  CocoClip(null, '');
					inst144.__instanceName = 'Back';
					inst143.addChild(inst144);
					inst144.__timeline.clear();
					inst144.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst144.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst144.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst144.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst144.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst144.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst144.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst145:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst145.__instanceName = ':: StoneTile_Back';
						inst144.addChild(inst145);
						inst145.__timeline.clear();
						inst145.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst146:CocoClip = new  CocoClip(null, '');
					inst146.__instanceName = 'Front';
					inst143.addChild(inst146);
					inst146.__timeline.clear();
					inst146.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst146.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst146.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst146.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst146.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst147:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst147.__instanceName = ':: grid_tile';
						inst146.addChild(inst147);
						inst147.__timeline.clear();
						inst147.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst148:CocoClip = new  CocoClip(null, '');
					inst148.__instanceName = 'Actions';
					inst143.addChild(inst148);
					inst148.__timeline.clear();
					inst148.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst148.__timeline.addKeyFrameEx(null, stop, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, false, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst149:CocoClip = new  CocoClip(null, '');
				inst149.__instanceName = 'AnimationClip_Cell9';
				inst100.addChild(inst149);
				inst149.__timeline.clear();
				inst149.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -110, -68.33332, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst149.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, -110, -68.33332, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst150:CocoClip = new  CocoClip(null, '');
					inst150.__instanceName = 'Back';
					inst149.addChild(inst150);
					inst150.__timeline.clear();
					inst150.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst150.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst150.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst150.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst150.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst150.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst150.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst151:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst151.__instanceName = ':: StoneTile_Back';
						inst150.addChild(inst151);
						inst151.__timeline.clear();
						inst151.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst152:CocoClip = new  CocoClip(null, '');
					inst152.__instanceName = 'Front';
					inst149.addChild(inst152);
					inst152.__timeline.clear();
					inst152.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst152.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst152.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst152.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst152.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst153:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst153.__instanceName = ':: grid_tile';
						inst152.addChild(inst153);
						inst153.__timeline.clear();
						inst153.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst154:CocoClip = new  CocoClip(null, '');
					inst154.__instanceName = 'Actions';
					inst149.addChild(inst154);
					inst154.__timeline.clear();
					inst154.__timeline.addKeyFrameEx(null, stop, 1, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst155:CocoClip = new  CocoClip(null, '');
				inst155.__instanceName = 'AnimationClip_Cell10';
				inst100.addChild(inst155);
				inst155.__timeline.clear();
				inst155.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 34.99999, 210, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst155.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 34.99999, 210, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst156:CocoClip = new  CocoClip(null, '');
					inst156.__instanceName = 'Back';
					inst155.addChild(inst156);
					inst156.__timeline.clear();
					inst156.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst156.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst156.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst156.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst156.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst156.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst156.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst157:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst157.__instanceName = ':: StoneTile_Back';
						inst156.addChild(inst157);
						inst157.__timeline.clear();
						inst157.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst158:CocoClip = new  CocoClip(null, '');
					inst158.__instanceName = 'Front';
					inst155.addChild(inst158);
					inst158.__timeline.clear();
					inst158.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst158.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst158.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst158.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst159:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst159.__instanceName = ':: grid_tile';
						inst158.addChild(inst159);
						inst159.__timeline.clear();
						inst159.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst160:CocoClip = new  CocoClip(null, '');
					inst160.__instanceName = 'Actions';
					inst155.addChild(inst160);
					inst160.__timeline.clear();
					inst160.__timeline.addKeyFrameEx(null, stop, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst161:CocoClip = new  CocoClip(null, '');
				inst161.__instanceName = 'AnimationClip_Cell11';
				inst100.addChild(inst161);
				inst161.__timeline.clear();
				inst161.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -110, 70.83334, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst161.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, -110, 70.83334, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst162:CocoClip = new  CocoClip(null, '');
					inst162.__instanceName = 'Back';
					inst161.addChild(inst162);
					inst162.__timeline.clear();
					inst162.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst162.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst162.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst162.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst162.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst162.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst162.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst163:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst163.__instanceName = ':: StoneTile_Back';
						inst162.addChild(inst163);
						inst163.__timeline.clear();
						inst163.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst164:CocoClip = new  CocoClip(null, '');
					inst164.__instanceName = 'Front';
					inst161.addChild(inst164);
					inst164.__timeline.clear();
					inst164.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst164.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst164.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst164.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst165:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst165.__instanceName = ':: grid_tile';
						inst164.addChild(inst165);
						inst165.__timeline.clear();
						inst165.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst166:CocoClip = new  CocoClip(null, '');
					inst166.__instanceName = 'Actions';
					inst161.addChild(inst166);
					inst166.__timeline.clear();
					inst166.__timeline.addKeyFrameEx(null, stop, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst167:CocoClip = new  CocoClip(null, '');
				inst167.__instanceName = 'AnimationClip_Cell12';
				inst100.addChild(inst167);
				inst167.__timeline.clear();
				inst167.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 180, -207.5, 1, 1, 180, 0, 0, 1, 1, 1, 1, null, false, false);
				inst167.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, true, true, 180, -207.5, 1, 1, 90, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst168:CocoClip = new  CocoClip(null, '');
					inst168.__instanceName = 'Back';
					inst167.addChild(inst168);
					inst168.__timeline.clear();
					inst168.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst168.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst168.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst168.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst168.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst168.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst168.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst169:CocoClip = new  CocoClip(Image_StoneTile_Back, '');
						inst169.__instanceName = ':: StoneTile_Back';
						inst168.addChild(inst169);
						inst169.__timeline.clear();
						inst169.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst170:CocoClip = new  CocoClip(null, '');
					inst170.__instanceName = 'Placeholder';
					inst167.addChild(inst170);
					inst170.__timeline.clear();
					inst170.__timeline.addKeyFrameEx(null, null, 9, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.211111, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst170.__timeline.addKeyFrameEx(null, null, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst170.__timeline.addKeyFrameEx(null, null, 23, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst170.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.491112, 2.491112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst170.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.111112, 2.111112, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst170.__timeline.addKeyFrameEx(null, null, 45, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst170.__timeline.addKeyFrameEx(null, null, 46, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.900001, 1.900001, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					var inst171:CocoClip = new  CocoClip(null, '');
					inst171.__instanceName = 'Front';
					inst167.addChild(inst171);
					inst171.__timeline.clear();
					inst171.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst171.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 2.509435, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst171.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst171.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.250944, 2.509435, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst172:CocoClip = new  CocoClip(Image_grid_tile, '');
						inst172.__instanceName = ':: grid_tile';
						inst171.addChild(inst172);
						inst172.__timeline.clear();
						inst172.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst173:CocoClip = new  CocoClip(null, '');
					inst173.__instanceName = 'Actions';
					inst167.addChild(inst173);
					inst173.__timeline.clear();
					inst173.__timeline.addKeyFrameEx(null, stop, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, false, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst173.__timeline.addKeyFrameEx(null, stop, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst173.__timeline.addKeyFrameEx(null, stop, 12, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, false, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst174:CocoClip = new  CocoClip(null, '');
				inst174.__instanceName = 'Actions';
				inst100.addChild(inst174);
				inst174.__timeline.clear();
				inst174.__timeline.addKeyFrameEx(null, stop, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst175:CocoClip = new  CocoClip(null, '');
			inst175.__instanceName = 'YouWin';
			__root.addChild(inst175);
			inst175.__timeline.clear();
			inst175.__timeline.addKeyFrameEx(null, null, 74, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst176:CocoClip = new  CocoClip(null, '');
				inst176.__instanceName = 'WIN_Shield';
				inst175.addChild(inst176);
				inst176.__timeline.clear();
				inst176.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.009356, 0.009346, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst176.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1.001065, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst176.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.74846, 0.747663, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst176.__timeline.addKeyFrameEx(null, null, 16, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.935575, 0.934579, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst177:CocoClip = new  CocoClip(Image_ImageSymbol_WIN_Shield, '');
					inst177.__instanceName = ':: ImageSymbol_WIN_Shield';
					inst176.addChild(inst177);
					inst177.__timeline.clear();
					inst177.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				}
				var inst178:CocoClip = new  CocoClip(null, '');
				inst178.__instanceName = 'AnimationClip_YouWinLogo1';
				inst175.addChild(inst178);
				inst178.__timeline.clear();
				inst178.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst178.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.8, 0.8, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst178.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				inst178.__timeline.addKeyFrameEx(null, null, 16, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
				{
					var inst179:CocoClip = new  CocoClip(null, '');
					inst179.__instanceName = 'WIN_Logo1';
					inst178.addChild(inst179);
					inst179.__timeline.clear();
					inst179.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst179.__timeline.addKeyFrameEx(null, null, 60, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					{
						var inst180:CocoClip = new  CocoClip(Image_ImageSymbol_WIN_Logo, '');
						inst180.__instanceName = ':: ImageSymbol_WIN_Logo';
						inst179.addChild(inst180);
						inst180.__timeline.clear();
						inst180.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst181:CocoClip = new  CocoClip(null, '');
					inst181.__instanceName = 'grWhiteStar1';
					inst178.addChild(inst181);
					inst181.__timeline.clear();
					inst181.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -120.5, -93, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst181.__timeline.addKeyFrameEx(null, null, 10, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -120.5, -93, 0.866667, 0.866667, -110.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst181.__timeline.addKeyFrameEx(null, null, 20, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -120.5, -93, 0.466667, 0.466667, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					inst181.__timeline.addKeyFrameEx(null, null, 21, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -120.5, -93, 0.466667, 0.466667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst181.__timeline.addKeyFrameEx(null, null, 52, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 118, -100, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst181.__timeline.addKeyFrameEx(null, null, 57, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 118, -100, 0.866667, 0.866667, -110.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst181.__timeline.addKeyFrameEx(null, null, 60, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 118, -100, 0.533333, 0.533333, -110.5, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst182:CocoClip = new  CocoClip(Image_grWhiteStar, '');
						inst182.__instanceName = ':: grWhiteStar';
						inst181.addChild(inst182);
						inst182.__timeline.clear();
						inst182.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst183:CocoClip = new  CocoClip(null, '');
					inst183.__instanceName = 'grWhiteStar2';
					inst178.addChild(inst183);
					inst183.__timeline.clear();
					inst183.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -115, 32, 1, 1, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst183.__timeline.addKeyFrameEx(null, null, 11, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -115, 32, 0.666667, 0.666667, -12.3, 0, 0, 1, 1, 1, 1, null, false, false);
					inst183.__timeline.addKeyFrameEx(null, null, 15, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -115, 32, 0.8, 0.8, -110.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst183.__timeline.addKeyFrameEx(null, null, 19, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -115, 32, 0.466667, 0.466667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst184:CocoClip = new  CocoClip(Image_grWhiteStar, '');
						inst184.__instanceName = ':: grWhiteStar';
						inst183.addChild(inst184);
						inst184.__timeline.clear();
						inst184.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst185:CocoClip = new  CocoClip(null, '');
					inst185.__instanceName = 'grWhiteStar3';
					inst178.addChild(inst185);
					inst185.__timeline.clear();
					inst185.__timeline.addKeyFrameEx(null, null, 18, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -16, -95, 0.533333, 0.533333, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst185.__timeline.addKeyFrameEx(null, null, 21, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, -16, -95, 0.8, 0.8, -110.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst185.__timeline.addKeyFrameEx(null, null, 31, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, -16, -95, 0.533333, 0.533333, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst185.__timeline.addKeyFrameEx(null, null, 39, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 125, -95, 0.666667, 0.666667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst185.__timeline.addKeyFrameEx(null, null, 44, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 125, -98, 1, 1, -110.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst185.__timeline.addKeyFrameEx(null, null, 49, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 125, -95, 0.666667, 0.666667, -110.5, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst186:CocoClip = new  CocoClip(Image_grWhiteStar, '');
						inst186.__instanceName = ':: grWhiteStar';
						inst185.addChild(inst186);
						inst186.__timeline.clear();
						inst186.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
					var inst187:CocoClip = new  CocoClip(null, '');
					inst187.__instanceName = 'grWhiteStar4';
					inst178.addChild(inst187);
					inst187.__timeline.clear();
					inst187.__timeline.addKeyFrameEx(null, null, 29, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 7, 28, 0.533333, 0.533333, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					inst187.__timeline.addKeyFrameEx(null, null, 35, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 7, 25, 0.666667, 0.666667, -110.5, 0, 0, 1, 1, 1, 1, null, false, false);
					inst187.__timeline.addKeyFrameEx(null, null, 36, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 7, 25, 0.6, 0.6, -92, 0, 0, 1, 1, 1, 1, null, false, false);
					inst187.__timeline.addKeyFrameEx(null, null, 40, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 7, 25, 0.466667, 0.466667, 0, 0, 0, 1, 1, 1, 0, null, false, false);
					{
						var inst188:CocoClip = new  CocoClip(Image_grWhiteStar, '');
						inst188.__instanceName = ':: grWhiteStar';
						inst187.addChild(inst188);
						inst188.__timeline.clear();
						inst188.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
					}
				}
				var inst189:CocoClip = new  CocoClip(null, '');
				inst189.__instanceName = 'Actions';
				inst175.addChild(inst189);
				inst189.__timeline.clear();
				inst189.__timeline.addKeyFrameEx(engine.STATE_GAME_BOARD_CHOOSE_AVATAR, null, 16, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst190:CocoClip = new  CocoClip(null, '');
			inst190.__instanceName = 'Actions';
			__root.addChild(inst190);
			inst190.__timeline.clear();
			inst190.__timeline.addKeyFrameEx(engine.STATE_GAME_BOARD_CHOOSE_AVATAR, null, 71, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst190.__timeline.addKeyFrameEx(null, null, 74, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE, false, false, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
		}

		/* -- DESIGNER GENERATED CODE END -- */
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/usr/animations/SceneGameBoard.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/usr/animations/SceneTitle.jspp";
"#export web"
"#export native"
"#include Coconut.js"
"#include CocoScene.jspp"

class SceneTitle : CocoScene
{
	public function Constructor()
	{
		/* -- DESIGNER GENERATED CODE BEGIN -- */
		__sceneName = 'SceneTitle';
		__fps = 30;
		__view_width = 480;
		__view_height = 320;
		__view_pixel_ratio = 1;

		//////////////////////////////////////////////////////////////////////////////////////////////////////
		// CocoImage Symbols
		//////////////////////////////////////////////////////////////////////////////////////////////////////

		// Symbol Image: INTRO_PAPYRI
		//====================================================================================================
		var Image_INTRO_PAPYRI:CocoImage = newResourceImage('INTRO_PAPYRI', './assets/images/');
		{
			Image_INTRO_PAPYRI.viewOptimalWidth = 572;
			Image_INTRO_PAPYRI.viewOptimalHeight = 429;
			Image_INTRO_PAPYRI.addSibling(new CocoImageSibling('INTRO_PAPYRI_mdpi.png', 1, 1024, 768));
			Image_INTRO_PAPYRI.addSibling(new CocoImageSibling('INTRO_PAPYRI_xhdpi.png', 2, 2048, 1536));
			Image_INTRO_PAPYRI.textureCellWidth = 1024;
			Image_INTRO_PAPYRI.textureCellHeight = 768;
			Image_INTRO_PAPYRI.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: INTRO_SHIELD
		//====================================================================================================
		var Image_INTRO_SHIELD:CocoImage = newResourceImage('INTRO_SHIELD', './assets/images/');
		{
			Image_INTRO_SHIELD.viewOptimalWidth = 521;
			Image_INTRO_SHIELD.viewOptimalHeight = 391;
			Image_INTRO_SHIELD.addSibling(new CocoImageSibling('INTRO_SHIELD_mdpi.png', 1, 1024, 768));
			Image_INTRO_SHIELD.addSibling(new CocoImageSibling('INTRO_SHIELD_xhdpi.png', 2, 2048, 1536));
			Image_INTRO_SHIELD.textureCellWidth = 1024;
			Image_INTRO_SHIELD.textureCellHeight = 768;
			Image_INTRO_SHIELD.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: title_screen
		//====================================================================================================
		var Image_title_screen:CocoImage = newResourceImage('title_screen', './assets/images/');
		{
			Image_title_screen.viewOptimalWidth = 572;
			Image_title_screen.viewOptimalHeight = 429;
			Image_title_screen.addSibling(new CocoImageSibling('title_screen_mdpi.png', 1, 1024, 768));
			Image_title_screen.addSibling(new CocoImageSibling('title_screen_xhdpi.png', 2, 2048, 1536));
			Image_title_screen.textureCellWidth = 1024;
			Image_title_screen.textureCellHeight = 768;
			Image_title_screen.textureGrid = new Float32Array([0,0]);
		}

		// Symbol Image: TITLE_SCREEN_LOGO
		//====================================================================================================
		var Image_TITLE_SCREEN_LOGO:CocoImage = newResourceImage('TITLE_SCREEN_LOGO', './assets/images/');
		{
			Image_TITLE_SCREEN_LOGO.viewOptimalWidth = 257;
			Image_TITLE_SCREEN_LOGO.viewOptimalHeight = 293;
			Image_TITLE_SCREEN_LOGO.addSibling(new CocoImageSibling('TITLE_SCREEN_LOGO_mdpi.png', 1, 561, 638));
			Image_TITLE_SCREEN_LOGO.addSibling(new CocoImageSibling('TITLE_SCREEN_LOGO_xhdpi.png', 2, 1122, 1276));
			Image_TITLE_SCREEN_LOGO.textureCellWidth = 561;
			Image_TITLE_SCREEN_LOGO.textureCellHeight = 638;
			Image_TITLE_SCREEN_LOGO.textureGrid = new Float32Array([0,0]);
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////
		// Scene Root Clip
		//////////////////////////////////////////////////////////////////////////////////////////////////////

		__root = new CocoClip();
		__root.__instanceName = 'root';
		__root.__timeline.clear();
		__root.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
		{
			var inst1:CocoClip = new  CocoClip(null, '');
			inst1.__instanceName = 'inst1_INTRO_PAPYRI';
			__root.addChild(inst1);
			inst1.__timeline.clear();
			inst1.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst1.__timeline.addKeyFrameEx(null, null, 88, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst1.__timeline.addKeyFrameEx(null, null, 95, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 0, null, false, false);
			inst1.__timeline.addKeyFrameEx(null, null, 96, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, false, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 0, null, false, false);
			{
				var inst2:CocoClip = new  CocoClip(Image_INTRO_PAPYRI, '');
				inst2.__instanceName = ':: INTRO_PAPYRI';
				inst1.addChild(inst2);
				inst2.__timeline.clear();
				inst2.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst3:CocoClip = new  CocoClip(null, '');
			inst3.__instanceName = 'inst1_INTRO_SHIELD';
			__root.addChild(inst3);
			inst3.__timeline.clear();
			inst3.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.008594, 0.008594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst3.__timeline.addKeyFrameEx(null, null, 18, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.508594, 0.508594, 0, 0, 0, 1, 1, 1, 0.7, null, false, false);
			inst3.__timeline.addKeyFrameEx(null, null, 24, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.408594, 0.408594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst3.__timeline.addKeyFrameEx(null, null, 25, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.408594, 0.408594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst3.__timeline.addKeyFrameEx(null, null, 88, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.408594, 0.408594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst3.__timeline.addKeyFrameEx(null, null, 89, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, false, 0, 0, 0.408594, 0.408594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			{
				var inst4:CocoClip = new  CocoClip(Image_INTRO_SHIELD, '');
				inst4.__instanceName = ':: INTRO_SHIELD';
				inst3.addChild(inst4);
				inst4.__timeline.clear();
				inst4.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst5:CocoClip = new  CocoClip(null, '');
			inst5.__instanceName = 'inst1_title_screen';
			__root.addChild(inst5);
			inst5.__timeline.clear();
			inst5.__timeline.addKeyFrameEx(null, null, 88, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 0, null, false, false);
			inst5.__timeline.addKeyFrameEx(null, null, 96, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst5.__timeline.addKeyFrameEx(null, null, 214, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst5.__timeline.addKeyFrameEx(null, null, 223, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 0.558594, 0.558594, 0, 0, 0, 1, 1, 1, 0, null, false, false);
			{
				var inst6:CocoClip = new  CocoClip(Image_title_screen, '');
				inst6.__instanceName = ':: title_screen';
				inst5.addChild(inst6);
				inst6.__timeline.clear();
				inst6.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
			var inst7:CocoClip = new  CocoClip(null, '');
			inst7.__instanceName = 'inst1_TITLE_SCREEN_LOGO';
			__root.addChild(inst7);
			inst7.__timeline.clear();
			inst7.__timeline.addKeyFrameEx(null, null, 5, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, -10, 0.458594, 0.458594, 0, 0, 0, 1, 1, 1, 0, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 18, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, -10, 0.208594, 0.208594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 24, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, false, true, 0, -10, 0.308594, 0.308594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 88, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, -10, 0.308594, 0.308594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 96, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 106, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, -5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 116, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 125, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, -5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 135, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 145, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, -5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 155, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 164, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, -5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 174, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 183, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, -5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 193, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 202, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, -5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 212, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 5, 0, 0, 1, 1, 1, 1, null, false, false);
			inst7.__timeline.addKeyFrameEx(null, null, 223, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 168, -79, 0.258594, 0.258594, 0, 0, 0, 1, 1, 1, 0, null, false, false);
			{
				var inst8:CocoClip = new  CocoClip(Image_TITLE_SCREEN_LOGO, '');
				inst8.__instanceName = ':: TITLE_SCREEN_LOGO';
				inst7.addChild(inst8);
				inst8.__timeline.clear();
				inst8.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, null, false, false);
			}
		}

		/* -- DESIGNER GENERATED CODE END -- */
	}
}

"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/usr/animations/SceneTitle.jspp";
"script_begin:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/main.js";
"#export web"
"#include Coconut.js"

////////////////////////////////////////////////////////////////////////////////////////////////////
if(!global.window)
{
	global.window = new HTMLWindow();
	global.document = window.document;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
function main()
{
	// Create a CANVAS element in document BODY.
	var canvas = document.body.appendChild(document.createElement("canvas"));
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;

	// Get WebGL context
	gl = canvas.getContext("webgl");
	gl.clearColor(1.0, 1.0, 1.0, 1.0);

	// Create a new Engine
	engine = new GameEngine();

	// Run
	requestAnimationFrame(tickAndPaint);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
function tickAndPaint(time)
{
	engine.run(gl, time);
	requestAnimationFrame(tickAndPaint);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
window.addEventListener("load", main);




"script_end:///D:/mobileFX/Projects/Software/Coconut/Projects/Leonidas.project/web/src/main.js";
