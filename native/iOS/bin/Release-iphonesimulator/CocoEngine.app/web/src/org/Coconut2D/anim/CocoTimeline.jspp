//@compile{true}
//@depends{CocoObject.jspp,CocoKeyFrame.jspp,CocoTimeLabel.jspp}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______               _______                ___          
//	  / ____/___  _________/_  __(_)___ ___  ___  / (_)___  ___ 
//	 / /   / __ \/ ___/ __ \/ / / / __ `__ \/ _ \/ / / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / / / / / / / / /  __/ / / / / /  __/
//	\____/\____/\___/\____/_/ /_/_/ /_/ /_/\___/_/_/_/ /_/\___/ 
//	                                                            
// ==================================================================================================================================

class CocoTimeline
{ 
	public var __labels:Array 					= [];
	public var __keyFramesCount:Number 			= 0;
	public var __keyFrames:CocoKeyFrame			= {};
	public var __firstKeyFrame:CocoKeyFrame		= null;
	public var __lastKeyFrame:CocoKeyFrame		= null;
	public var __singleFrameDurationTime:Number	= 0;
	public var __durationInTime:Number			= 0;
	public var __durationInFrames:Number		= 0;
	public var __firstframeIndex:Number			= 0;
	public var __lastframeIndex:Number			= 0;
	
	protected var __paused:Boolean				= false;	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{ 
		addKeyFrameEx(0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1);	
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function keyFrames() :Array
	{
		var v:String, list:Array = [];
		for(v in __keyFrames)
		{			
			list.push(__keyFrames[v]);
		}
		return list;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clear()
	{
	    __keyFrames = null;
	    __keyFrames = {};
	    __keyFramesCount = 0;
	    normalizetimeline();
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function keyFrame(frameIndex:Number) :CocoKeyFrame
	{		
		return (__keyFrames[""+frameIndex] || null);    
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrame(KeyFrame:CocoKeyFrame) :CocoKeyFrame
	{
		if(!KeyFrame) return null;
	    KeyFrame.frameIndex = roundIndex(KeyFrame.frameIndex);
	    __keyFrames[""+KeyFrame.frameIndex] = KeyFrame;
	    normalizetimeline();
	    return KeyFrame;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrameEx(frameIndex:Number, 
								  frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM, 
								  handleEvents:Boolean, 
								  visible:Boolean, 
								  x:Number, 
								  y:Number,
								  scaleX:Number,
								  scaleY:Number,
								  rotation:Number,
								  pivotX:Number,
								  pivotY:Number,
								  alpha:Number) :CocoKeyFrame
	{    
	    var KeyFrame:CocoKeyFrame = new CocoKeyFrame();
	    
	    KeyFrame.frameIndex 		= frameIndex;
	    KeyFrame.frameInterpolation = frameInterpolation;
	    KeyFrame.handleEvents 		= handleEvents;
	    KeyFrame.visible 			= visible;
	    KeyFrame.x 					= x;
	    KeyFrame.y 					= y;
	    KeyFrame.scaleX				= scaleX;
	    KeyFrame.scaleY				= scaleY;
	    KeyFrame.rotation 			= rotation;
	    KeyFrame.pivotX 			= pivotX;
	    KeyFrame.pivotY 			= pivotY;
	    KeyFrame.alpha 				= alpha;
	    
	    return addKeyFrame(KeyFrame);    
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function insertKeyFrame(frameIndex:Number) :CocoKeyFrame
	{
	    frameIndex = roundIndex(frameIndex);	       
	    var key:String = frameIndex.toString();
	    var KeyFrame:CocoKeyFrame = (__keyFrames[key] || interpolateByFrame(frameIndex));
	    return addKeyFrame(KeyFrame);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteKeyFrame(KeyFrame:CocoKeyFrame)
	{
		if(!KeyFrame) return;    
	    __keyFrames[""+KeyFrame.frameIndex] = null;
		normalizetimeline();
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function insertFrames(AtTimeIndex:Number, FramesCount:Number)
	{      
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteFrames(FromTimeIndex:Number, ToTimeIndex:Number)
	{
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function setKeyFrameIndex(KeyFrame:CocoKeyFrame, frameIndex:Number)
	{
		if(!KeyFrame || (frameIndex == KeyFrame.frameIndex)) return;    
	    
	    frameIndex = roundIndex(frameIndex);
	    KeyFrame.frameIndex = roundIndex(KeyFrame.frameIndex);
	    if(frameIndex == KeyFrame.frameIndex) return;
	    
	    __keyFrames[""+KeyFrame.frameIndex] = null;    
	    KeyFrame.frameIndex = frameIndex;
	    __keyFrames[""+KeyFrame.frameIndex] = KeyFrame;
	    
	    normalizetimeline();
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameBeforeframeIndex(frameIndex:Number, inclusive:Boolean, excludeListIndex:Number) :CocoKeyFrame
	{
		var i:Number;
		var KeyFrame:CocoKeyFrame;
	    var list:Array = keyFrames();
	    
	    for(i=list.length-1; i>=0; i--)
	    {
	        if(i!=excludeListIndex)         
	        {
	            KeyFrame = list[i];
	            if(inclusive) 
	            {
	                if(KeyFrame.frameIndex <= frameIndex) 
	                    return KeyFrame;
	            } 
	            else 
	            {
	                if(KeyFrame.frameIndex < frameIndex) 
	                    return KeyFrame;                    
	            }
	        }
	    }
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameAfterframeIndex(frameIndex:Number, inclusive:Boolean, excludeListIndex:Number) :CocoKeyFrame
	{               
		var i:Number;
	    var KeyFrame:CocoKeyFrame;
	    var list:Array = keyFrames();
	    
	    for(i=0; i<list.length; i++) 
	    {
	        if(i!=excludeListIndex)
	        {
	            KeyFrame = list[i];
	            if(inclusive) 
	            {
	                if(KeyFrame.frameIndex >= frameIndex) 
	                    return KeyFrame;
	            } 
	            else 
	            {
	                if(KeyFrame.frameIndex > frameIndex) 
	                    return KeyFrame;
	            }
	        }
	    }
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFramesBetween(startframeIndex:Number, stopframeIndex:Number) :Array
	{
	    var col:Array = [];
	    var list:Array = keyFrames();
	    var i:Number; 
	    var KeyFrame:CocoKeyFrame;
	    for(i=0; i<list.length; i++) 
	    {
	        KeyFrame = list[i];
	        if(KeyFrame.frameIndex >= startframeIndex || KeyFrame.frameIndex <= stopframeIndex) 
	            col.push(KeyFrame);
	    }
	    return col;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function listIndexOfKeyFrame(KeyFrame:CocoKeyFrame) :Number
	{
		var v:String, index:Number = -1;
	    for(v in __keyFrames) 
	    {
	        index++;
	        if(__keyFrames[v] === KeyFrame) 
	            return index;
	    }
	    return -1;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function frameIndexToLoopTime(frameIndex:Number) :Number
	{
		return frameIndex * __singleFrameDurationTime;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlay(frameIndexOrLabelName)
	{
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStop(frameIndexOrLabelName)
	{    
	}     
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function normalizetimeline()
	{    
	    var KeyFrame:CocoKeyFrame;
	    var v:String;
	    var vArr:Array;
	    var f:CocoKeyFrame;
	    var i:Number;
	    var L:Number=0;  
	    
	    __durationInFrames = 0;
	    __durationInTime = 0;
	    __singleFrameDurationTime = 0;
	    __firstframeIndex = 0;
	    __lastframeIndex = 0;
	    __firstKeyFrame = null;
	    __lastKeyFrame = null;
	    __keyFramesCount = 0;
	    
	    // Count KeyFrames
	    for(v in __keyFrames)
	    	__keyFramesCount++;
	    
	    if(__keyFramesCount) 
	    { 
	    	// First and Last KeyFrames
	    	for(v in __keyFrames)
	    	{
	    		if(!__firstKeyFrame)
	    			__firstKeyFrame = __keyFrames[v];	    		
	    	}
	    	__lastKeyFrame = __keyFrames[v];
	    		
	        // Sort KeyFrames
	        if(__keyFramesCount > 1) 
	        {
	            vArr = keyFrames();
	            __keyFrames = {};
	            for(i=0;i<vArr.length;i++)
	            {
	            	f = vArr[i];
	                if(f.frameIndex > L) 
	                    L = f.frameIndex;
	            }
	
	            var arr:Array = new Array(L);
	            for(i = 0; i < vArr.length; i++) 
	                arr[vArr[i].frameIndex] = i + 1;
	
	            for(i = 0; i < arr.length; i++) 
	            {
	                if(arr[i] > 0) 
	                {
	                    KeyFrame = vArr[arr[i] - 1];
	                    __keyFrames[""+KeyFrame.frameIndex] = KeyFrame;
	                }
	            }
	        }
	                
	        // Calc expensive time/index variables                        
	        if(__lastKeyFrame)
	        {
		        __lastframeIndex = __lastKeyFrame.frameIndex;
		        __durationInFrames = __lastKeyFrame.frameIndex + 1;
		        __durationInTime = (__durationInFrames / GLOBAL_FPS) * 1000;		        
		        __singleFrameDurationTime = __durationInTime / __durationInFrames;
		        __firstframeIndex = listIndexOfKeyFrame(__firstKeyFrame);
	        } 
	    }
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function roundIndex(index:Number) :Number
	{
	    var i:Number = Math.floor(index);
	    if((index - i) >= 0.5) i++;
	    return i;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolateByTime(LoopTime:Number) :CocoKeyFrame
	{
	    var T:Number = (LoopTime / __singleFrameDurationTime);
	    return interpolateByFrame(T);
	}     
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolateByFrame(frameIndex:Number) :CocoKeyFrame
	{ 
	    var F:CocoKeyFrame = null;
	    var F1:CocoKeyFrame = null;
	    var F2:CocoKeyFrame = null;
	    var s:Number = 1;
	    
	    // Timeline is empty?
	    if(!__keyFramesCount) 
	    {
	        F = new CocoKeyFrame();
	        F.frameIndex = frameIndex;
	        F.visible = false;
	        return F;
	    }
	        
	    // Exact KeyFrame exists?
	    F1 = keyFrame(roundIndex(frameIndex));
	    if(F1) return F1.clone();
	    
	    // Seek previous KeyFrame
	    F1 = findKeyFrameBeforeframeIndex(frameIndex, false);
	    
	    if(!F1) 
	    {    
	        // No previous KeyFrame
	        F = new CocoKeyFrame();
	        F.frameIndex = frameIndex;
	        F.visible = false;
	        return F;        
	    } 
	    else 
	    {        
	        switch(F1.frameInterpolation)
	        {        
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO:
	        
	            F = F1.clone();
	            F.frameIndex = frameIndex;
	            return F;
	        
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE:
	        
	            F = F1.clone();
	            F.frameIndex = frameIndex;
	            F.visible = false;
	            return F;
	            
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN:
	            
	            // We need the next KeyFrame now
	            F2 = findKeyFrameAfterframeIndex(frameIndex, false);
	            
	            if(!F2) 
	            {                
	                // Fallback to echo
	                F = F1.clone();
	                F.frameIndex = frameIndex;
	                return F;
	                
	            } 
	            else 
	            {            
	                // Interpolate between frames
	                F = F1.clone();
	                F.frameIndex = frameIndex;
	                s = (frameIndex - F1.frameIndex) / (F2.frameIndex - F1.frameIndex);
	                F.interpolate(F1, F2, s);
	                return F;                
	            }        
	        }        
	    }
	}
}

