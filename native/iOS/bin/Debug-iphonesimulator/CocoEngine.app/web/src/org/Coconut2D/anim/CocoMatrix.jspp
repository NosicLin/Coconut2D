//@compile{true}
//@include{CocoObject.jspp,WebGL.js}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 __  ___      __       _     
//	  / ____/___  _________  /  |/  /___ _/ /______(_)  __
//	 / /   / __ \/ ___/ __ \/ /|_/ / __ `/ __/ ___/ / |/_/
//	/ /___/ /_/ / /__/ /_/ / /  / / /_/ / /_/ /  / />  <  
//	\____/\____/\___/\____/_/  /_/\__,_/\__/_/  /_/_/|_|  
//	                                                      
// ==================================================================================================================================
   
class CocoMatrix
{ 
	private var __stack:Array = [];
	private var __data:Float32Array = null;
	
	public function Constructor()
	{
		identity();	
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function update(gl:WebGLRenderingContext, ul)
	{
		gl.uniformMatrix4fv(ul, false, __data); 
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function identity()
	{
		__data = new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]); 
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function ortho(left:Number, right:Number, bottom:Number, top:Number, near:Number, far:Number) 
	{
		__data = new Float32Array([2 / (right - left), 0.0, 0.0, 0.0, 0.0, 2 / (top - bottom), 0.0, 0.0, 0.0, 0.0, -2 / (far - near), 0.0, -(right + left) / (right - left), -(top + bottom) / (top - bottom), -(far + near) / (far - near), 1.0]); 
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function translate(tx:Number, ty:Number) //, tz)
	{
		__data[12] += __data[0] * tx + __data[4] * ty; // + __data[8] * z;
		__data[13] += __data[1] * tx + __data[5] * ty; // + __data[9] * z;
		__data[14] += __data[2] * tx + __data[6] * ty; // + __data[10] * z;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function scale(sx:Number, sy:Number) //, sz)
	{
		__data[0] *= sx;
		__data[4] *= sy;
		//__data[8] *= sz;
		__data[1] *= sx;
		__data[5] *= sy;
		//__data[9] *= sz;
		__data[2] *= sx;
		__data[6] *= sy;
		//__data[10] *= sz;
		__data[3] *= sx;
		__data[7] *= sy;
		//__data[11] *= sz;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function rotateZ(rz:Number)
	{
		// counter-clockwise rotation around Z-axis (perpendicular to the screen)
		var c:Number = Math.cos(rz);
		var s:Number = Math.sin(rz);
		var t0:Number, t1:Number;
	
		t0 = __data[0];
		t1 = __data[4];
		__data[0] =  t0 * c + t1 * s;
		__data[4] = -t0 * s + t1 * c;
		
		t0 = __data[1];
		t1 = __data[5];
		__data[1] =  t0 * c + t1 * s;
		__data[5] = -t0 * s + t1 * c;
		
		t0 = __data[2];
		t1 = __data[6];
		__data[2] =  t0 * c + t1 * s;
		__data[6] = -t0 * s + t1 * c;
		
		t0 = __data[3];
		t1 = __data[7];
		__data[3] =  t0 * c + t1 * s;
		__data[7] = -t0 * s + t1 * c;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function push()
	{
		__stack.push(new Float32Array(__data));
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function pop()
	{
		if(__stack.length) 
			__data = __stack.pop();
	}
}
