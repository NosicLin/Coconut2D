//@compile{false}
//@line 39
function CocoImage()
{
	var __SUPER__;
	return ((function ()
	{
		var __CLASS771__ = this,
			__PDEFINE__ = {}.constructor.defineProperty,
			__NOENUM__ =
			{
				enumerable: false
			};
		if (typeof __PDEFINE__ != 'function') __PDEFINE__ = null; /*@cc_on @if(1)try{({}).constructor.defineProperty({},'x',{})}catch(e){__PDEFINE__=null}@end @*/
		this.__SUPER__ = __SUPER__;
		__PDEFINE__ && __PDEFINE__(this, '__SUPER__', __NOENUM__);
		this.__PROTECTED__ = {};
		__PDEFINE__ && __PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 60
		var isSpriteSheet = this.isSpriteSheet = function ()
		{
			//@line 61
			//@line 62
			return __CLASS771__.textureCellWidth > 0 && __CLASS771__.textureCellHeight > 0 && __CLASS771__.sequences != null;
			return false
		};
		//@line 66
		var createFromFile = this.createFromFile = function (filename, onloadCallBack)
		{
			//@line 67
			//@line 68
			__CLASS771__.image = new Image;
			//@line 69
			__CLASS771__.image.onload = onloadCallBack;
			//@line 70
			__CLASS771__.image.src = filename;
		};
		//@line 74
		var createWithText = this.createWithText = function (font, text)
		{
			//@line 75
			//@line 76
			__CLASS771__.image = new Image;
			//@line 77
			__CLASS771__.image.__width = 512;
			//@line 78
			__CLASS771__.image.__height = 512;
			//@line 79
			__CLASS771__.image.__imageData = new ImageData(__CLASS771__.image.width, __CLASS771__.image.height);
			//@line 80
			__CLASS771__.image.__imageData.__buffer.clear();
			//@line 81
			font.fillText(__CLASS771__.image.__imageData.__buffer, __CLASS771__.image.width, text, 0, 0);
			//@line 82
			__CLASS771__.textureCellWidth = font.measureText(text);
			//@line 83
			__CLASS771__.textureCellHeight = font.height;
		};
		//@line 87
		var getDpiSiblingImage = this.getDpiSiblingImage = function (dpi)
		{
			//@line 88
			//@line 89
			return __CLASS771__;
		};
		//@line 93
		var addSequence = this.addSequence = function (name, sequence)
		{
			//@line 94
			//@line 95
			if (__CLASS771__.sequences[name]) throw "Cannot add sequence with same name!";
			//@line 96
			__CLASS771__.sequences[name] = sequence;
		};
		//@line 100
		var prepare = this.prepare = function (gl)
		{
			//@line 101
			//@line 103
			var w2 = __CLASS771__.textureCellWidth / 2;
			//@line 104
			var h2 = __CLASS771__.textureCellHeight / 2;
			//@line 105
			__CLASS771__.texSize = new Float32Array([__CLASS771__.textureCellWidth / __CLASS771__.image.naturalWidth, __CLASS771__.textureCellHeight / __CLASS771__.image.naturalHeight]);
			//@line 108
			__CLASS771__.texture = gl.createTexture();
			//@line 109
			gl.bindTexture(gl.TEXTURE_2D, __CLASS771__.texture);
			//@line 112
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, __CLASS771__.image);
			//@line 115
			gl.generateMipmap(gl.TEXTURE_2D);
			//@line 118
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			//@line 119
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			//@line 122
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			//@line 123
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
			//@line 126
			gl.bindTexture(gl.TEXTURE_2D, null);
			//@line 128
			var texData = new Float32Array([0, 0, -w2, -h2, 0, 1, -w2, h2, 1, 0, w2, -h2, 1, 1, w2, h2]);
			//@line 129
			__CLASS771__.buffer = gl.createBuffer();
			//@line 130
			gl.bindBuffer(gl.ARRAY_BUFFER, __CLASS771__.buffer);
			//@line 131
			gl.bufferData(gl.ARRAY_BUFFER, texData, gl.STATIC_DRAW);
			//@line 132
			gl.bindBuffer(gl.ARRAY_BUFFER, null);
		};
		//@line 136
		var dispose = this.dispose = function ()
		{
			//@line 137
			//@line 138
			gl.deleteTexture(__CLASS771__.texture);
		};
		//@line 41
		this.image = null;
		//@line 42
		this.symbolName = "";
		//@line 43
		this.texture = null;
		//@line 44
		this.textureCellWidth = 0;
		//@line 45
		this.textureCellHeight = 0;
		//@line 46
		this.textureGrid = new Float32Array([0, 0]);
		//@line 47
		this.sequences = null;
		//@line 48
		this.color = new Float32Array([1, 1, 1, 1]);
		//@line 49
		this.texSize = new Float32Array([1, 1]);
		//@line 50
		this.buffer = null;
		//@line 51
		this.dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
		//@line 52
		this.skin = null;
		this.Constructor = function ()
		{
			//@line 56
			return __CLASS771__
		};
		__PDEFINE__ && __PDEFINE__(this, 'Constructor', __NOENUM__);
		return this
	}).call(
	{
	})).Constructor.apply(this, [].slice.call(arguments))
}