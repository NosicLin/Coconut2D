//@compile{false}
//@line 39
function CocoImage()
{
	var __SUPER__;
	return ((function ()
	{
		var __CLASS765__ = this,
			__PDEFINE__ = {}.constructor.defineProperty,
			__NOENUM__ =
			{
				enumerable: false
			};
		if (typeof __PDEFINE__ != 'function') __PDEFINE__ = null; /*@cc_on @if(1)try{({}).constructor.defineProperty({},'x',{})}catch(e){__PDEFINE__=null}@end @*/
		this.__SUPER__ = __SUPER__;
		__PDEFINE__ && __PDEFINE__(this, '__SUPER__', __NOENUM__);
		this.__PROTECTED__ = {};
		__PDEFINE__ && __PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 61
		var isSpriteSheet = this.isSpriteSheet = function ()
		{
			//@line 62
			//@line 63
			return __CLASS765__.textureCellWidth > 0 && __CLASS765__.textureCellHeight > 0 && __CLASS765__.sequences != null;
			return false
		};
		//@line 67
		var createFromFile = this.createFromFile = function (filename, onloadCallBack)
		{
			//@line 68
			//@line 69
			__CLASS765__.image = new Image;
			//@line 70
			__CLASS765__.image.onload = onloadCallBack;
			//@line 71
			__CLASS765__.image.src = filename;
		};
		//@line 75
		var createWithText = this.createWithText = function (font, text)
		{
			//@line 76
			//@line 77
			__CLASS765__.image = new Image;
			//@line 78
			__CLASS765__.image.__width = 512;
			//@line 79
			__CLASS765__.image.__height = 512;
			//@line 80
			__CLASS765__.image.__imageData = new ImageData(__CLASS765__.image.width, __CLASS765__.image.height);
			//@line 81
			__CLASS765__.image.__imageData.__buffer.clear();
			//@line 82
			font.fillText(__CLASS765__.image.__imageData.__buffer, __CLASS765__.image.width, text, 0, 0);
			//@line 83
			__CLASS765__.textureCellWidth = font.measureText(text);
			//@line 84
			__CLASS765__.textureCellHeight = font.height;
		};
		//@line 88
		var getDpiSiblingImage = this.getDpiSiblingImage = function (dpi)
		{
			//@line 89
			//@line 90
			return __CLASS765__;
		};
		//@line 94
		var addSequence = this.addSequence = function (name, sequence)
		{
			//@line 95
			//@line 96
			if (__CLASS765__.sequences[name]) throw "Cannot add sequence with same name!";
			//@line 97
			__CLASS765__.sequences[name] = sequence;
		};
		//@line 101
		var prepare = this.prepare = function (gl)
		{
			//@line 102
			//@line 103
			var w2 = __CLASS765__.textureCellWidth / 2;
			//@line 104
			var h2 = __CLASS765__.textureCellHeight / 2;
			//@line 106
			__CLASS765__.texData = new Float32Array([0, 0, -w2, -h2, 0, 1, -w2, h2, 1, 0, w2, -h2, 1, 1, w2, h2]);
			//@line 107
			__CLASS765__.texSize = new Float32Array([__CLASS765__.textureCellWidth / __CLASS765__.image.naturalWidth, __CLASS765__.textureCellHeight / __CLASS765__.image.naturalHeight]);
			//@line 109
			__CLASS765__.texture = gl.createTexture();
			//@line 110
			gl.bindTexture(gl.TEXTURE_2D, __CLASS765__.texture);
			//@line 111
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, __CLASS765__.image);
			//@line 112
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			//@line 113
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
			//@line 114
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			//@line 115
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			//@line 116
			gl.bindTexture(gl.TEXTURE_2D, null);
			//@line 118
			__CLASS765__.buffer = gl.createBuffer();
			//@line 119
			gl.bindBuffer(gl.ARRAY_BUFFER, __CLASS765__.buffer);
			//@line 120
			gl.bufferData(gl.ARRAY_BUFFER, __CLASS765__.texData, gl.STATIC_DRAW);
			//@line 121
			gl.bindBuffer(gl.ARRAY_BUFFER, null);
		};
		//@line 125
		var drawFrame = this.drawFrame = function (gl, glp, frame, alpha)
		{
			//@line 126
			//@line 127
			__CLASS765__.color[3] = alpha;
			//@line 128
			gl.uniform2fv(glp.GLSLuSprSize, __CLASS765__.texSize);
			//@line 129
			gl.uniform2f(glp.GLSLuSprFrame, __CLASS765__.textureGrid[frame * 2 + 1], __CLASS765__.textureGrid[frame * 2]);
			//@line 130
			gl.bindBuffer(gl.ARRAY_BUFFER, __CLASS765__.buffer);
			//@line 131
			gl.vertexAttribPointer(glp.GLSLiTexCoords, 2, gl.FLOAT, false, 4 * Float32Array.BYTES_PER_ELEMENT, 0);
			//@line 132
			gl.vertexAttribPointer(glp.GLSLiVecCoords, 2, gl.FLOAT, false, 4 * Float32Array.BYTES_PER_ELEMENT, 2 * Float32Array.BYTES_PER_ELEMENT);
			//@line 133
			gl.bindTexture(gl.TEXTURE_2D, __CLASS765__.texture);
			//@line 134
			gl.uniform1i(glp.GLSLuSampler, 0);
			//@line 135
			gl.uniform4fv(glp.GLSLuColor, __CLASS765__.color);
			//@line 136
			gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		};
		//@line 41
		this.image = null;
		//@line 42
		this.symbolName = "";
		//@line 43
		this.texture = null;
		//@line 44
		this.textureCellWidth = 0;
		//@line 45
		this.textureCellHeight = 0;
		//@line 46
		this.textureGrid = new Float32Array([0, 0]);
		//@line 47
		this.sequences = null;
		//@line 48
		this.color = new Float32Array([1, 1, 1, 1]);
		//@line 49
		this.texSize = new Float32Array([1, 1]);
		//@line 50
		this.texData = null;
		//@line 51
		this.buffer = null;
		//@line 52
		this.dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
		//@line 53
		this.skin = null;
		this.Constructor = function ()
		{
			//@line 57
			return __CLASS765__
		};
		__PDEFINE__ && __PDEFINE__(this, 'Constructor', __NOENUM__);
		return this
	}).call(
	{
	})).Constructor.apply(this, [].slice.call(arguments))
}