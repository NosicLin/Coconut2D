//@compile{false}
//@line 29
function CocoVector()
{
	var __SUPER__;
	return ((function ()
	{
		var __CLASS781__ = this,
			__PDEFINE__ = {}.constructor.defineProperty,
			__NOENUM__ =
			{
				enumerable: false
			};
		if (typeof __PDEFINE__ != 'function') __PDEFINE__ = null; /*@cc_on @if(1)try{({}).constructor.defineProperty({},'x',{})}catch(e){__PDEFINE__=null}@end @*/
		this.__SUPER__ = __SUPER__;
		__PDEFINE__ && __PDEFINE__(this, '__SUPER__', __NOENUM__);
		this.__PROTECTED__ = {};
		__PDEFINE__ && __PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 36
		var set = this.set = function (x, y, z, w)
		{
			//@line 37
			//@line 38
			__CLASS781__.X = x;
			//@line 39
			__CLASS781__.Y = y;
			//@line 40
			__CLASS781__.Z = z;
			//@line 41
			__CLASS781__.W = w;
		};
		//@line 31
		this.X = 0;
		//@line 32
		this.Y = 0;
		//@line 33
		this.Z = 0;
		//@line 34
		this.W = 1;
		this.Constructor = function ()
		{
			return __CLASS781__
		};
		__PDEFINE__ && __PDEFINE__(this, 'Constructor', __NOENUM__);
		return this
	}).call(
	{
	})).Constructor.apply(this, [].slice.call(arguments))
}