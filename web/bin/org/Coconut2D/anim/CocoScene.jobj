//@compile{false}
//@line 40
function CocoScene()
{
	var __SUPER__;
	return ((function ()
	{
		var __CLASS1079__ = this,
			__PDEFINE__ = {}.constructor.defineProperty,
			__NOENUM__ =
			{
				enumerable: false
			};
		if (typeof __PDEFINE__ != 'function') __PDEFINE__ = null; /*@cc_on @if(1)try{({}).constructor.defineProperty({},'x',{})}catch(e){__PDEFINE__=null}@end @*/
		this.__SUPER__ = __SUPER__;
		__PDEFINE__ && __PDEFINE__(this, '__SUPER__', __NOENUM__);
		this.__PROTECTED__ = {};
		__PDEFINE__ && __PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 83
		var updateModelViewMatrix = this.updateModelViewMatrix = function (gl)
		{
			//@line 84
			//@line 85
			__CLASS1079__.__modelViewMatrix.update(gl, __CLASS1079__.__glProgram.GLSLuMVMat);
		};
		//@line 89
		var updateProjectionMatrix = this.updateProjectionMatrix = function (gl)
		{
			//@line 90
			//@line 91
			__CLASS1079__.__projectionMatrix.update(gl, __CLASS1079__.__glProgram.GLSLuProjMat);
		};
		//@line 95
		var resourceImagesCount = this.resourceImagesCount = function ()
		{
			//@line 96
			//@line 97
			var t = "",
				c = 0;
			//@line 98
			for (t in __CLASS1079__.__imageSymbols)
			//@line 99
			if (__CLASS1079__.__imageSymbols[t])
			//@line 100
			c++; //@line 101
			return c;
			return 0
		};
		//@line 105
		var resourceImagesLoaded = this.resourceImagesLoaded = function ()
		{
			//@line 106
			//@line 107
			var t = "",
				img;
			//@line 108
			for (t in __CLASS1079__.__imageSymbols)
			//@line 109
			{
				//@line 110
				img = __CLASS1079__.__imageSymbols[t].image;
				//@line 111
				if (!img.width || !img.height)
				//@line 112
				return false;
			}
			//@line 114
			return true;
			return false
		};
		//@line 118
		var getImageSymbol = this.getImageSymbol = function (symbolName)
		{
			//@line 119
			//@line 120
			var img = __CLASS1079__.__imageSymbols[symbolName];
			//@line 121
			if (img)
			//@line 122
			{
				//@line 123
				var dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
				//@line 124
				switch (window.devicePixelRatio)
				{
					//@line 126
				case 0.75:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_ldpi;
						break;
					}
					break;
					//@line 127
				case 1:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi;
						break;
					}
					break;
					//@line 128
				case 1.25:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_tvdpi;
						break;
					}
					break;
					//@line 129
				case 1.5:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_hdpi;
						break;
					}
					break;
					//@line 130
				case 2:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi;
						break;
					}
					break;
					//@line 131
				default:
					{
						return img;
					}
				}
				//@line 133
				return img.getDpiSiblingImage(dpi);
			}
		};
		//@line 138
		var getSoundSymbol = this.getSoundSymbol = function (symbolName)
		{
			//@line 139
			//@line 140
			return __CLASS1079__.__soundSymbols[symbolName] || null;
		};
		//@line 144
		var getClipSymbol = this.getClipSymbol = function (symbolName)
		{
			//@line 145
			//@line 146
			return __CLASS1079__.__clipSymbols[symbolName] || null;
		};
		//@line 150
		var newResourceImage = this.newResourceImage = function (symbolName, filename)
		{
			//@line 151
			//@line 152
			if (__CLASS1079__.__imageSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 153
			var img = new CocoImage;
			//@line 154
			img.symbolName = symbolName;
			//@line 155
			img.createFromFile(filename, null);
			//@line 156
			__CLASS1079__.__imageSymbols[symbolName] = img;
			//@line 157
			return img;
		};
		//@line 161
		var newResourceSound = this.newResourceSound = function (symbolName, filename)
		{
			//@line 162
			//@line 163
			if (__CLASS1079__.__soundSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 164
			var snd = new CocoSound;
			//@line 165
			snd.symbolName = symbolName;
			//@line 166
			snd.createFromFile(filename, null);
			//@line 167
			__CLASS1079__.__soundSymbols[symbolName] = snd;
			//@line 168
			return snd;
		};
		//@line 172
		var prepared = this.prepared = function ()
		{
			//@line 173
			//@line 174
			return (__CLASS1079__.__glProgram != null);
			return false
		};
		//@line 178
		var prepare = this.prepare = function (gl)
		{
			//@line 179
			//@line 181
			gl.disable(gl.DEPTH_TEST);
			//@line 184
			gl.enable(gl.BLEND);
			//@line 185
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
			//@line 188
			gl.disable(gl.CULL_FACE);
			//@line 190
			__CLASS1079__.__boundingBoxProgram = glu.makeProgram(gl, __CLASS1079__.__boundingBoxVertexShader, __CLASS1079__.__boundingBoxFragmentShader);
			//@line 192
			gl.useProgram(__CLASS1079__.__boundingBoxProgram);
			//@line 193
			__CLASS1079__.__boundingBoxProgram.GLSLiVec2Coords = gl.getAttribLocation(__CLASS1079__.__boundingBoxProgram, "iVec2Coords");
			//@line 194
			__CLASS1079__.__boundingBoxProgram.GLSLuProjMat = gl.getUniformLocation(__CLASS1079__.__boundingBoxProgram, "uProjMat");
			//@line 195
			__CLASS1079__.__boundingBoxBuffer = gl.createBuffer();
			//@line 196
			gl.bindBuffer(gl.ARRAY_BUFFER, __CLASS1079__.__boundingBoxBuffer);
			//@line 197
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 0, 0, 0, 0, 0]), gl.DYNAMIC_DRAW);
			//@line 199
			__CLASS1079__.__glProgram = glu.makeProgram(gl, __CLASS1079__.__vertex_shader, __CLASS1079__.__fragment_shader);
			//@line 201
			gl.useProgram(__CLASS1079__.__glProgram);
			//@line 203
			__CLASS1079__.__glProgram.GLSLiVecCoords = gl.getAttribLocation(__CLASS1079__.__glProgram, "iVecCoords");
			//@line 204
			__CLASS1079__.__glProgram.GLSLiTexCoords = gl.getAttribLocation(__CLASS1079__.__glProgram, "iTexCoords");
			//@line 205
			__CLASS1079__.__glProgram.GLSLuProjMat = gl.getUniformLocation(__CLASS1079__.__glProgram, "uProjMat");
			//@line 206
			__CLASS1079__.__glProgram.GLSLuMVMat = gl.getUniformLocation(__CLASS1079__.__glProgram, "uMVMat");
			//@line 207
			__CLASS1079__.__glProgram.GLSLuSprSize = gl.getUniformLocation(__CLASS1079__.__glProgram, "uSprSize");
			//@line 208
			__CLASS1079__.__glProgram.GLSLuSprFrame = gl.getUniformLocation(__CLASS1079__.__glProgram, "uSprFrame");
			//@line 209
			__CLASS1079__.__glProgram.GLSLuSampler = gl.getUniformLocation(__CLASS1079__.__glProgram, "uSampler");
			//@line 210
			__CLASS1079__.__glProgram.GLSLuColor = gl.getUniformLocation(__CLASS1079__.__glProgram, "uColor");
			//@line 213
			__CLASS1079__.__modelViewMatrix = new CocoMatrix;
			//@line 214
			__CLASS1079__.__modelViewMatrix.update(gl, __CLASS1079__.__glProgram.GLSLuMVMat);
			//@line 217
			__CLASS1079__.__view_scale = __CLASS1079__.__view_width > 0 && __CLASS1079__.__view_height > 0 ? Math.min(gl.canvas.width / __CLASS1079__.__view_width, gl.canvas.height / __CLASS1079__.__view_height) : window.devicePixelRatio;
			//@line 219
			__CLASS1079__.__projectionMatrix = new CocoMatrix;
			//@line 220
			__CLASS1079__.__projectionMatrix.ortho(-gl.canvas.width / 2, gl.canvas.width / 2, gl.canvas.height / 2, -gl.canvas.height / 2, -1, 1);
			//@line 222
			if (window.deviceRotation) __CLASS1079__.__projectionMatrix.rotateZ(-window.deviceRotation);
			//@line 224
			__CLASS1079__.__projectionMatrix.scale(__CLASS1079__.__view_scale, __CLASS1079__.__view_scale);
			//@line 225
			__CLASS1079__.__projectionMatrix.update(gl, __CLASS1079__.__glProgram.GLSLuProjMat);
			//@line 227
			var t = "";
			//@line 228
			for (t in __CLASS1079__.__imageSymbols)
			//@line 229
			__CLASS1079__.__imageSymbols[t].prepare(gl); //@line 231
			gl.enableVertexAttribArray(__CLASS1079__.__glProgram.GLSLiTexCoords);
			//@line 232
			gl.enableVertexAttribArray(__CLASS1079__.__glProgram.GLSLiVecCoords);
		};
		//@line 236
		var tick = this.tick = function (gl, time)
		{
			//@line 237
			//@line 238
			__CLASS1079__.render(gl, time);
		};
		//@line 242
		var render = this.render = function (gl, time, picking)
		{
			//@line 243
			//@line 244
			__CLASS1079__.__modelViewMatrix.identity();
			//@line 245
			if (__CLASS1079__.__startTime == -1) __CLASS1079__.__startTime = time;
			//@line 246
			__CLASS1079__.__elapsedTime = time - __CLASS1079__.__currentTime - __CLASS1079__.__startTime;
			//@line 247
			__CLASS1079__.__currentTime = time - __CLASS1079__.__startTime;
			//@line 249
			if (__CLASS1079__.__root)
			//@line 250
			{
				//@line 252
				__CLASS1079__.__levelParents = [__CLASS1079__.__root];
				//@line 253
				{
					//@line 265
					__CLASS1079__.__glPayload = [];
					//@line 266
					__CLASS1079__.__root.render(gl, this, null, false);
				}
				//@line 269
				__CLASS1079__.__levelParents = [];
				//@line 272
				var max = __CLASS1079__.__root.childWithMaxTimelineDuration();
				//@line 273
				if (max && max.__currentFrame == max.__timeline.__lastKeyFrame)
				//@line 274
				{
				}
			}
		};
		//@line 282
		var drawFrame = this.drawFrame = function (gl, image, frame, alpha)
		{
			//@line 283
			//@line 284
			image.color[3] = alpha;
			//@line 286
			if (global.__Coconut2DPlayer)
			//@line 287
			{
				//@line 288
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.UNIFORM2F, __CLASS1079__.__glProgram.GLSLuSprSize.__uid, image.texSize[0], image.texSize[1]]);
				//@line 289
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.UNIFORM2F, __CLASS1079__.__glProgram.GLSLuSprFrame.__uid, image.textureGrid[frame * 2 + 1], image.textureGrid[frame * 2]]);
				//@line 290
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.BINDBUFFER, gl.ARRAY_BUFFER, image.buffer.__uid]);
				//@line 291
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.VERTEXATTRIBPOINTER, __CLASS1079__.__glProgram.GLSLiTexCoords.__uid, 2, gl.FLOAT, false, 4 * 4, 0]);
				//@line 292
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.VERTEXATTRIBPOINTER, __CLASS1079__.__glProgram.GLSLiVecCoords.__uid, 2, gl.FLOAT, false, 4 * 4, 2 * 4]);
				//@line 293
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.BINDTEXTURE, gl.TEXTURE_2D, image.texture.__uid]);
				//@line 294
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.UNIFORM1I, __CLASS1079__.__glProgram.GLSLuSampler.__uid, 0]);
				//@line 295
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.UNIFORM4F, __CLASS1079__.__glProgram.GLSLuColor.__uid, image.color[0], image.color[1], image.color[2], image.color[3]]);
				//@line 296
				__CLASS1079__.__glPayload = __CLASS1079__.__glPayload.concat([COCO_WEBGL_PAYLOAD_OP.DRAWARRAYS, gl.TRIANGLE_STRIP, 0, 4]);
			}
			else
			//@line 299
			{
				//@line 300
				gl.uniform2fv(__CLASS1079__.__glProgram.GLSLuSprSize, image.texSize);
				//@line 301
				gl.uniform2f(__CLASS1079__.__glProgram.GLSLuSprFrame, image.textureGrid[frame * 2 + 1], image.textureGrid[frame * 2]);
				//@line 302
				gl.bindBuffer(gl.ARRAY_BUFFER, image.buffer);
				//@line 303
				gl.vertexAttribPointer(__CLASS1079__.__glProgram.GLSLiTexCoords, 2, gl.FLOAT, false, 4 * 4, 0);
				//@line 304
				gl.vertexAttribPointer(__CLASS1079__.__glProgram.GLSLiVecCoords, 2, gl.FLOAT, false, 4 * 4, 2 * 4);
				//@line 305
				gl.bindTexture(gl.TEXTURE_2D, image.texture);
				//@line 306
				gl.uniform1i(__CLASS1079__.__glProgram.GLSLuSampler, 0);
				//@line 307
				gl.uniform4fv(__CLASS1079__.__glProgram.GLSLuColor, image.color);
				//@line 308
				gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
				//@line 309
				gl.bindBuffer(gl.ARRAY_BUFFER, null);
			}
		};
		//@line 314
		var hitTest = this.hitTest = function (MouseX, MouseY)
		{
			//@line 315
			return []
		};
		//@line 320
		var gotoAndPlay = this.gotoAndPlay = function (LabelNameOrFrameIndex, deep)
		{
			//@line 321
			//@line 322
			var scope = __CLASS1079__.__levelParents[__CLASS1079__.__levelParents.length - 1];
			//@line 323
			return scope.gotoFrame(LabelNameOrFrameIndex, false, deep);
			return false
		};
		//@line 327
		var gotoAndStop = this.gotoAndStop = function (LabelNameOrFrameIndex, deep)
		{
			//@line 328
			//@line 329
			var scope = __CLASS1079__.__levelParents[__CLASS1079__.__levelParents.length - 1];
			//@line 330
			return scope.gotoFrame(LabelNameOrFrameIndex, true, deep);
			return false
		};
		//@line 334
		var stop = this.stop = function (deep)
		{
			//@line 335
			//@line 336
			deep = (deep == "true");
			//@line 337
			var scope = __CLASS1079__.__levelParents[__CLASS1079__.__levelParents.length - 1];
			//@line 338
			return scope.gotoFrame(-1, true, deep);
			return false
		};
		//@line 43
		this.__sceneName = "";
		//@line 44
		this.__imageSymbols = {};
		//@line 45
		this.__soundSymbols = {};
		//@line 46
		this.__clipSymbols = {};
		//@line 49
		this.__view_width = 0;
		//@line 50
		this.__view_height = 0;
		//@line 51
		this.__view_pixel_ratio = 0;
		//@line 52
		this.__view_scale = 1;
		//@line 55
		this.__currentTime = 0;
		//@line 56
		this.__elapsedTime = 0;
		//@line 57
		this.__startTime = -1;
		//@line 58
		this.__root = null;
		//@line 59
		this.__modelViewMatrix = null;
		//@line 60
		this.__projectionMatrix = null;
		//@line 61
		this.__glProgram = null;
		//@line 62
		this.__levelParents = [];
		//@line 64
		this.__vertex_shader = "attribute vec2 iVecCoords;attribute vec2 iTexCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec2 uSprSize;uniform vec2 uSprFrame;varying vec2 pTexCoord;void main(void){ gl_Position = uProjMat * uMVMat * vec4(iVecCoords, 0.0, 1.0); pTexCoord = vec2(((iTexCoords.x + uSprFrame.x) * uSprSize.x), ((iTexCoords.y + uSprFrame.y) * uSprSize.y));}";
		//@line 65
		this.__fragment_shader = "#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;uniform vec4 uColor;varying vec2 pTexCoord;void main(void){ gl_FragColor = vec4(texture2D(uSampler, pTexCoord).r * uColor.r, texture2D(uSampler, pTexCoord).g * uColor.g, texture2D(uSampler, pTexCoord).b * uColor.b, texture2D(uSampler, pTexCoord).a * uColor.a);}";
		//@line 67
		this.__boundingBoxVertexShader = "attribute vec2 iVec2Coords;uniform mat4 uProjMat;void main(void) { gl_Position = uProjMat * vec4(iVec2Coords, 0.0, 1.0);}";
		//@line 68
		this.__boundingBoxFragmentShader = "#ifdef GL_ES\nprecision mediump float;\n#endif\nvoid main(void) { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);}";
		//@line 69
		this.__boundingBoxProgram = null;
		//@line 70
		this.__boundingBoxBuffer = null;
		//@line 72
		this.__glPayload = [];
		this.Constructor = function ()
		{
			var sceneName = arguments[0];
			//@line 77
			//@line 78
			__CLASS1079__.__sceneName = sceneName;
			//@line 79
			__CLASS1079__.__root = new CocoClip;
			return __CLASS1079__
		};
		__PDEFINE__ && __PDEFINE__(this, 'Constructor', __NOENUM__);
		return this
	}).call(
	{
	})).Constructor.apply(this, [].slice.call(arguments))
}