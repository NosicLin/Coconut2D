//@compile{false}
//@line 41
function CocoScene()
{
	var __SUPER__;
	return ((function ()
	{
		var __CLASS1075__ = this,
			__PDEFINE__ = {}.constructor.defineProperty,
			__NOENUM__ =
			{
				enumerable: false
			};
		if (typeof __PDEFINE__ != 'function') __PDEFINE__ = null; /*@cc_on @if(1)try{({}).constructor.defineProperty({},'x',{})}catch(e){__PDEFINE__=null}@end @*/
		this.__SUPER__ = __SUPER__;
		__PDEFINE__ && __PDEFINE__(this, '__SUPER__', __NOENUM__);
		this.__PROTECTED__ = {};
		__PDEFINE__ && __PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 109
		var updateModelViewMatrix = this.updateModelViewMatrix = function (gl)
		{
			//@line 110
			//@line 111
			__CLASS1075__.__modelViewMatrix.update(gl, __CLASS1075__.__glProgram.GLSLuMVMat);
		};
		//@line 115
		var updateProjectionMatrix = this.updateProjectionMatrix = function (gl)
		{
			//@line 116
			//@line 117
			__CLASS1075__.__projectionMatrix.update(gl, __CLASS1075__.__glProgram.GLSLuProjMat);
		};
		//@line 121
		var resourceImagesCount = this.resourceImagesCount = function ()
		{
			//@line 122
			//@line 123
			var t = "",
				c = 0;
			//@line 124
			for (t in __CLASS1075__.__imageSymbols)
			//@line 125
			if (__CLASS1075__.__imageSymbols[t])
			//@line 126
			c++; //@line 127
			return c;
			return 0
		};
		//@line 131
		var resourceImagesLoaded = this.resourceImagesLoaded = function ()
		{
			//@line 132
			//@line 133
			var t = "",
				img;
			//@line 134
			for (t in __CLASS1075__.__imageSymbols)
			//@line 135
			{
				//@line 136
				img = __CLASS1075__.__imageSymbols[t].image;
				//@line 137
				if (!img.width || !img.height)
				//@line 138
				return false;
			}
			//@line 140
			return true;
			return false
		};
		//@line 144
		var getImageSymbol = this.getImageSymbol = function (symbolName)
		{
			//@line 145
			//@line 146
			var img = __CLASS1075__.__imageSymbols[symbolName];
			//@line 147
			if (img)
			//@line 148
			{
				//@line 149
				var dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
				//@line 150
				switch (window.devicePixelRatio)
				{
					//@line 152
				case 0.75:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_ldpi;
						break;
					}
					break;
					//@line 153
				case 1:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi;
						break;
					}
					break;
					//@line 154
				case 1.25:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_tvdpi;
						break;
					}
					break;
					//@line 155
				case 1.5:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_hdpi;
						break;
					}
					break;
					//@line 156
				case 2:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi;
						break;
					}
					break;
					//@line 157
				default:
					{
						return img;
					}
				}
				//@line 159
				return img.getDpiSiblingImage(dpi);
			}
		};
		//@line 164
		var getSoundSymbol = this.getSoundSymbol = function (symbolName)
		{
			//@line 165
			//@line 166
			return __CLASS1075__.__soundSymbols[symbolName] || null;
		};
		//@line 170
		var getClipSymbol = this.getClipSymbol = function (symbolName)
		{
			//@line 171
			//@line 172
			return __CLASS1075__.__clipSymbols[symbolName] || null;
		};
		//@line 176
		var newResourceImage = this.newResourceImage = function (symbolName, filename)
		{
			//@line 177
			//@line 178
			if (__CLASS1075__.__imageSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 179
			var img = new CocoImage;
			//@line 180
			img.symbolName = symbolName;
			//@line 181
			img.createFromFile(filename, null);
			//@line 182
			__CLASS1075__.__imageSymbols[symbolName] = img;
			//@line 183
			return img;
		};
		//@line 187
		var newResourceSound = this.newResourceSound = function (symbolName, filename)
		{
			//@line 188
			//@line 189
			if (__CLASS1075__.__soundSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 190
			var snd = new CocoSound;
			//@line 191
			snd.symbolName = symbolName;
			//@line 192
			snd.createFromFile(filename, null);
			//@line 193
			__CLASS1075__.__soundSymbols[symbolName] = snd;
			//@line 194
			return snd;
		};
		//@line 198
		var prepared = this.prepared = function ()
		{
			//@line 199
			//@line 200
			return (__CLASS1075__.__glProgram != null);
			return false
		};
		//@line 204
		var prepare = this.prepare = function (gl)
		{
			//@line 205
			//@line 206
			gl.enable(gl.BLEND);
			//@line 207
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
			//@line 209
			__CLASS1075__.__imageArrayData = new Float32Array([0, 1, 0, 0, -0.5, -0.5, 0, 1, 0, 1, -0.5, 0.5, 0, 1, 1, 0, 0.5, -0.5, 0, 1, 1, 1, 0.5, 0.5, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0]);
			//@line 210
			var tmpIndex = new Uint8Array([0, 1, 2, 1, 3, 2, 4, 5, 6, 5, 7, 6, 8, 9, 10, 9, 11, 10, 12, 13, 14, 13, 15, 14, 16, 17, 18, 17, 19, 18, 20, 21, 22, 21, 23, 22, 24, 25, 26, 25, 27, 26, 28, 29, 30, 29, 31, 30]);
			//@line 212
			__CLASS1075__.__imageArrayBuffer = gl.createBuffer();
			//@line 213
			gl.bindBuffer(gl.ARRAY_BUFFER, __CLASS1075__.__imageArrayBuffer);
			//@line 214
			gl.bufferData(gl.ARRAY_BUFFER, __CLASS1075__.__imageArrayData, gl.DYNAMIC_DRAW);
			//@line 216
			__CLASS1075__.__imageIndexBuffer = gl.createBuffer();
			//@line 217
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, __CLASS1075__.__imageIndexBuffer);
			//@line 218
			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, tmpIndex, gl.STATIC_DRAW);
			//@line 220
			__CLASS1075__.__projectionMatrix = new CocoMatrix;
			//@line 221
			__CLASS1075__.__projectionMatrix.ortho(-gl.canvas.width / 2, gl.canvas.width / 2, gl.canvas.height / 2, -gl.canvas.height / 2, -1, 1);
			//@line 222
			__CLASS1075__.__projectionMatrix.scale(__CLASS1075__.__view_scale, __CLASS1075__.__view_scale);
			//@line 224
			__CLASS1075__.__boundingBoxProgram = glu.makeProgram(gl, __CLASS1075__.__boundingBoxVertexShader, __CLASS1075__.__boundingBoxFragmentShader);
			//@line 225
			gl.useProgram(__CLASS1075__.__boundingBoxProgram);
			//@line 227
			__CLASS1075__.__boundingBoxProgram.GLSLiVec2Coords = gl.getAttribLocation(__CLASS1075__.__boundingBoxProgram, "iVec2Coords");
			//@line 228
			__CLASS1075__.__boundingBoxProgram.GLSLuProjMat = gl.getUniformLocation(__CLASS1075__.__boundingBoxProgram, "uProjMat");
			//@line 230
			__CLASS1075__.__boundingBoxBuffer = gl.createBuffer();
			//@line 231
			gl.bindBuffer(gl.ARRAY_BUFFER, __CLASS1075__.__boundingBoxBuffer);
			//@line 232
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 0, 0, 0, 0, 0]), gl.DYNAMIC_DRAW);
			//@line 233
			__CLASS1075__.__projectionMatrix.update(gl, __CLASS1075__.__boundingBoxProgram.GLSLuProjMat);
			//@line 235
			__CLASS1075__.__glProgram = glu.makeProgram(gl, __CLASS1075__.__vertex_shader, __CLASS1075__.__fragment_shader);
			//@line 236
			gl.useProgram(__CLASS1075__.__glProgram);
			//@line 238
			__CLASS1075__.__glProgram.GLSLuProjMat = gl.getUniformLocation(__CLASS1075__.__glProgram, "uProjMat");
			//@line 239
			__CLASS1075__.__glProgram.GLSLiID = gl.getAttribLocation(__CLASS1075__.__glProgram, "iID");
			//@line 240
			__CLASS1075__.__glProgram.GLSLiAlpha = gl.getAttribLocation(__CLASS1075__.__glProgram, "iAlpha");
			//@line 241
			__CLASS1075__.__glProgram.GLSLiVecCoords = gl.getAttribLocation(__CLASS1075__.__glProgram, "iVecCoords");
			//@line 242
			__CLASS1075__.__glProgram.GLSLiTexCoords = gl.getAttribLocation(__CLASS1075__.__glProgram, "iTexCoords");
			//@line 243
			__CLASS1075__.__glProgram.GLSLuSampler = [];
			//@line 244
			for (var i = 0; i < MAX_TEXTURES; i++)
			//@line 245
			{
				//@line 246
				__CLASS1075__.__glProgram.GLSLuSampler[i] = gl.getUniformLocation(__CLASS1075__.__glProgram, "uSampler[" + i + "]");
				//@line 247
				gl.uniform1i(__CLASS1075__.__glProgram.GLSLuSampler[i], i);
			}
			//@line 250
			__CLASS1075__.__modelViewMatrix = new CocoMatrix;
			//@line 253
			__CLASS1075__.__view_scale = __CLASS1075__.__view_width > 0 && __CLASS1075__.__view_height > 0 ? Math.min(gl.canvas.width / __CLASS1075__.__view_width, gl.canvas.height / __CLASS1075__.__view_height) : window.devicePixelRatio;
			//@line 255
			__CLASS1075__.__projectionMatrix.update(gl, __CLASS1075__.__glProgram.GLSLuProjMat);
			//@line 256
			var t = "";
			//@line 257
			for (t in __CLASS1075__.__imageSymbols)
			//@line 258
			__CLASS1075__.__imageSymbols[t].prepare(gl);
		};
		//@line 262
		var tick = this.tick = function (gl, time)
		{
			//@line 263
			//@line 264
			__CLASS1075__.render(gl, time);
		};
		//@line 268
		var render = this.render = function (gl, time)
		{
			//@line 269
			//@line 270
			__CLASS1075__.beginDraw(gl);
			//@line 272
			__CLASS1075__.__modelViewMatrix.identity();
			//@line 273
			if (__CLASS1075__.__startTime == -1) __CLASS1075__.__startTime = time;
			//@line 274
			__CLASS1075__.__elapsedTime = time - __CLASS1075__.__currentTime - __CLASS1075__.__startTime;
			//@line 275
			__CLASS1075__.__currentTime = time - __CLASS1075__.__startTime;
			//@line 277
			if (__CLASS1075__.__root)
			//@line 278
			{
				//@line 280
				__CLASS1075__.__levelParents = [__CLASS1075__.__root];
				//@line 281
				__CLASS1075__.__imageCurrentID = 0;
				//@line 282
				__CLASS1075__.__root.render(gl, this, null);
				//@line 283
				__CLASS1075__.flush();
				//@line 284
				__CLASS1075__.__levelParents = [];
				//@line 287
				var max = __CLASS1075__.__root.childWithMaxTimelineDuration();
				//@line 288
				if (max && max.__currentFrame == max.__timeline.__lastKeyFrame)
				//@line 289
				{
					//@line 290
					__CLASS1075__.__root.reset();
					//@line 291
					__CLASS1075__.__startTime = -1;
				}
			}
			//@line 295
			__CLASS1075__.endDraw(gl);
		};
		//@line 299
		var drawFrame = this.drawFrame = function (gl, image, frame, alpha)
		{
			//@line 300
			//@line 301
			if (__CLASS1075__.__imageCurrentID == MAX_TEXTURES) __CLASS1075__.flush();
			//@line 302
			var i = __CLASS1075__.__imageCurrentID++;
			//@line 303
			gl.activeTexture(gl.TEXTURE0 + i);
			//@line 304
			gl.bindTexture(gl.TEXTURE_2D, image.texture);
			//@line 305
			__CLASS1075__.__imageArrayData[i * 24 + 1] = __CLASS1075__.__imageArrayData[i * 24 + 7] = __CLASS1075__.__imageArrayData[i * 24 + 13] = __CLASS1075__.__imageArrayData[i * 24 + 19] = alpha;
			//@line 306
			__CLASS1075__.__imageArrayData[i * 24 + 2] = __CLASS1075__.__imageArrayData[i * 24 + 8] = image.textureGrid[frame * 2 + 1] * image.texSize[0];
			//@line 307
			__CLASS1075__.__imageArrayData[i * 24 + 14] = __CLASS1075__.__imageArrayData[i * 24 + 20] = (image.textureGrid[frame * 2 + 1] + 1) * image.texSize[0];
			//@line 308
			__CLASS1075__.__imageArrayData[i * 24 + 3] = __CLASS1075__.__imageArrayData[i * 24 + 15] = image.textureGrid[frame * 2] * image.texSize[1];
			//@line 309
			__CLASS1075__.__imageArrayData[i * 24 + 9] = __CLASS1075__.__imageArrayData[i * 24 + 21] = (image.textureGrid[frame * 2] + 1) * image.texSize[1];
			//@line 310
			__CLASS1075__.__imageArrayData[i * 24 + 4] = -image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc11 - image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc21 + __CLASS1075__.__modelViewMatrix.rc41;
			//@line 311
			__CLASS1075__.__imageArrayData[i * 24 + 5] = -image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc12 - image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc22 + __CLASS1075__.__modelViewMatrix.rc42;
			//@line 312
			__CLASS1075__.__imageArrayData[i * 24 + 10] = -image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc11 + image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc21 + __CLASS1075__.__modelViewMatrix.rc41;
			//@line 313
			__CLASS1075__.__imageArrayData[i * 24 + 11] = -image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc12 + image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc22 + __CLASS1075__.__modelViewMatrix.rc42;
			//@line 314
			__CLASS1075__.__imageArrayData[i * 24 + 16] = image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc11 - image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc21 + __CLASS1075__.__modelViewMatrix.rc41;
			//@line 315
			__CLASS1075__.__imageArrayData[i * 24 + 17] = image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc12 - image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc22 + __CLASS1075__.__modelViewMatrix.rc42;
			//@line 316
			__CLASS1075__.__imageArrayData[i * 24 + 22] = image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc11 + image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc21 + __CLASS1075__.__modelViewMatrix.rc41;
			//@line 317
			__CLASS1075__.__imageArrayData[i * 24 + 23] = image.vecSize[0] * __CLASS1075__.__modelViewMatrix.rc12 + image.vecSize[1] * __CLASS1075__.__modelViewMatrix.rc22 + __CLASS1075__.__modelViewMatrix.rc42;
		};
		//@line 320
		var flush = this.flush = function ()
		{
			//@line 321
			//@line 322
			if (!__CLASS1075__.__imageCurrentID) return;
			//@line 323
			gl.bindBuffer(gl.ARRAY_BUFFER, __CLASS1075__.__imageArrayBuffer);
			//@line 324
			gl.bufferSubData(gl.ARRAY_BUFFER, 0, __CLASS1075__.__imageArrayData);
			//@line 325
			gl.vertexAttribPointer(__CLASS1075__.__glProgram.GLSLiID, 1, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 0);
			//@line 326
			gl.vertexAttribPointer(__CLASS1075__.__glProgram.GLSLiAlpha, 1, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 1 * Float32Array.BYTES_PER_ELEMENT);
			//@line 327
			gl.vertexAttribPointer(__CLASS1075__.__glProgram.GLSLiTexCoords, 2, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 2 * Float32Array.BYTES_PER_ELEMENT);
			//@line 328
			gl.vertexAttribPointer(__CLASS1075__.__glProgram.GLSLiVecCoords, 2, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 4 * Float32Array.BYTES_PER_ELEMENT);
			//@line 329
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, __CLASS1075__.__imageIndexBuffer);
			//@line 330
			gl.drawElements(gl.TRIANGLES, __CLASS1075__.__imageCurrentID * 6, gl.UNSIGNED_BYTE, 0);
			//@line 331
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 0);
			//@line 332
			gl.bindBuffer(gl.ARRAY_BUFFER, 0);
			//@line 333
			__CLASS1075__.__imageCurrentID = 0;
		};
		//@line 337
		var hitTest = this.hitTest = function (MouseX, MouseY)
		{
			//@line 338
			return []
		};
		//@line 343
		var beginDraw = this.beginDraw = function (gl)
		{
			//@line 344
			//@line 345
			gl.useProgram(__CLASS1075__.__glProgram);
			//@line 346
			gl.enableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiID);
			//@line 347
			gl.enableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiAlpha);
			//@line 348
			gl.enableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiTexCoords);
			//@line 349
			gl.enableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiVecCoords);
		};
		//@line 353
		var endDraw = this.endDraw = function (gl)
		{
			//@line 354
			//@line 355
			gl.disableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiID);
			//@line 356
			gl.disableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiAlpha);
			//@line 357
			gl.disableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiTexCoords);
			//@line 358
			gl.disableVertexAttribArray(__CLASS1075__.__glProgram.GLSLiVecCoords);
		};
		//@line 362
		var gotoAndPlay = this.gotoAndPlay = function (LabelNameOrFrameIndex, deep)
		{
			//@line 363
			//@line 364
			var scope = __CLASS1075__.__levelParents[__CLASS1075__.__levelParents.length - 1];
			//@line 365
			return scope.gotoFrame(LabelNameOrFrameIndex, false, deep);
			return false
		};
		//@line 369
		var gotoAndStop = this.gotoAndStop = function (LabelNameOrFrameIndex, deep)
		{
			//@line 370
			//@line 371
			var scope = __CLASS1075__.__levelParents[__CLASS1075__.__levelParents.length - 1];
			//@line 372
			return scope.gotoFrame(LabelNameOrFrameIndex, true, deep);
			return false
		};
		//@line 376
		var stop = this.stop = function (deep)
		{
			//@line 377
			//@line 378
			deep = (deep == "true");
			//@line 379
			var scope = __CLASS1075__.__levelParents[__CLASS1075__.__levelParents.length - 1];
			//@line 380
			return scope.gotoFrame(-1, true, deep);
			return false
		};
		//@line 44
		this.__sceneName = "";
		//@line 45
		this.__imageSymbols = {};
		//@line 46
		this.__soundSymbols = {};
		//@line 47
		this.__clipSymbols = {};
		//@line 50
		this.__view_width = 0;
		//@line 51
		this.__view_height = 0;
		//@line 52
		this.__view_pixel_ratio = 0;
		//@line 53
		this.__view_scale = 1;
		//@line 56
		this.__currentTime = 0;
		//@line 57
		this.__elapsedTime = 0;
		//@line 58
		this.__startTime = -1;
		//@line 59
		this.__root = null;
		//@line 60
		this.__modelViewMatrix = null;
		//@line 61
		this.__projectionMatrix = null;
		//@line 62
		this.__glProgram = null;
		//@line 63
		this.__levelParents = [];
		//@line 65
		this.__vertex_shader = "uniform mat4 uProjMat;attribute float iID;attribute float iAlpha;attribute vec2 iVecCoords;attribute vec2 iTexCoords;varying vec2 pTexCoords;varying float pID;varying float pAlpha;void main(void) { gl_Position = uProjMat * vec4(iVecCoords, 0.0, 1.0);    pTexCoords = iTexCoords; pID = iID; pAlpha = iAlpha;}";
		//@line 66
		this.__fragment_shader =
		//@line 88
		//@line 87
		//@line 86
		//@line 85
		//@line 84
		//@line 83
		//@line 82
		//@line 81
		//@line 80
		//@line 79
		//@line 78
		//@line 77
		//@line 76
		//@line 75
		//@line 74
		//@line 73
		//@line 72
		//@line 71
		//@line 70
		//@line 69
		//@line 68
		//@line 67
		//@line 66
		"#ifdef GL_ES\nprecision mediump float;\n#endif\n" +
		//@line 67
		"uniform sampler2D uSampler[8];" +
		//@line 68
		"varying float pID;" +
		//@line 69
		"varying float pAlpha;" +
		//@line 70
		"varying vec2 pTexCoords;" +
		//@line 71
		"void main(void) {" +
		//@line 72
		"if(pID < 0.5)" +
		//@line 73
		"gl_FragColor = texture2D(uSampler[0], pTexCoords);" +
		//@line 74
		"else if(pID < 1.5)" +
		//@line 75
		"gl_FragColor = texture2D(uSampler[1], pTexCoords);" +
		//@line 76
		"else if(pID < 2.5)" +
		//@line 77
		"gl_FragColor = texture2D(uSampler[2], pTexCoords);" +
		//@line 78
		"else if(pID < 3.5)" +
		//@line 79
		"gl_FragColor = texture2D(uSampler[3], pTexCoords);" +
		//@line 80
		"else if(pID < 4.5)" +
		//@line 81
		"gl_FragColor = texture2D(uSampler[4], pTexCoords);" +
		//@line 82
		"else if(pID < 5.5)" +
		//@line 83
		"gl_FragColor = texture2D(uSampler[5], pTexCoords);" +
		//@line 84
		"else if(pID < 6.5)" +
		//@line 85
		"gl_FragColor = texture2D(uSampler[6], pTexCoords);" +
		//@line 86
		"else " +
		//@line 87
		"gl_FragColor = texture2D(uSampler[7], pTexCoords);" +
		//@line 88
		"gl_FragColor.a *= pAlpha;" +
		//@line 89
		"}";
		//@line 91
		this.__boundingBoxVertexShader = "attribute vec2 iVec2Coords;uniform mat4 uProjMat;void main(void) { gl_Position = uProjMat * vec4(iVec2Coords, 0.0, 1.0);}";
		//@line 92
		this.__boundingBoxFragmentShader = "#ifdef GL_ES\nprecision mediump float;\n#endif\nvoid main(void) { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);}";
		//@line 93
		this.__boundingBoxProgram = null;
		//@line 94
		this.__boundingBoxBuffer = null;
		//@line 96
		this.__imageArrayData = null;
		//@line 97
		this.__imageArrayBuffer = null;
		//@line 98
		this.__imageIndexBuffer = null;
		//@line 99
		this.__imageCurrentID = 0;
		this.Constructor = function ()
		{
			var sceneName = arguments[0];
			//@line 103
			//@line 104
			__CLASS1075__.__sceneName = sceneName;
			//@line 105
			__CLASS1075__.__root = new CocoClip;
			return __CLASS1075__
		};
		__PDEFINE__ && __PDEFINE__(this, 'Constructor', __NOENUM__);
		return this
	}).call(
	{
	})).Constructor.apply(this, [].slice.call(arguments))
}