//@compile{false}
//@line 37
function CocoScene()
{
	var __SUPER__;
	return ((function ()
	{
		var __CLASS539__ = this,
			__PDEFINE__ = {}.constructor.defineProperty,
			__NOENUM__ =
			{
				enumerable: false
			};
		if (typeof __PDEFINE__ != 'function') __PDEFINE__ = null; /*@cc_on @if(1)try{({}).constructor.defineProperty({},'x',{})}catch(e){__PDEFINE__=null}@end @*/
		this.__SUPER__ = __SUPER__;
		__PDEFINE__ && __PDEFINE__(this, '__SUPER__', __NOENUM__);
		this.__PROTECTED__ = {};
		__PDEFINE__ && __PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 70
		var prepared = this.prepared = function ()
		{
			//@line 71
			//@line 72
			return __CLASS539__.__glProgram != null;
			return false
		};
		//@line 76
		var updateModelViewMatrix = this.updateModelViewMatrix = function (gl)
		{
			//@line 77
			//@line 78
			__CLASS539__.__modelViewMatrix.update(gl, __CLASS539__.__glProgram.GLSLuMVMat);
		};
		//@line 82
		var updateProjectionMatrix = this.updateProjectionMatrix = function (gl)
		{
			//@line 83
			//@line 84
			__CLASS539__.__projectionMatrix.update(gl, __CLASS539__.__glProgram.GLSLuProjMat);
		};
		//@line 88
		var resourceImagesCount = this.resourceImagesCount = function ()
		{
			//@line 89
			//@line 90
			var t = "",
				c = 0;
			//@line 91
			for (t in __CLASS539__.__imageSymbols)
			//@line 92
			if (__CLASS539__.__imageSymbols[t])
			//@line 93
			c++; //@line 94
			return c;
			return 0
		};
		//@line 98
		var resourceImagesLoaded = this.resourceImagesLoaded = function ()
		{
			//@line 99
			//@line 100
			var t = "",
				img;
			//@line 101
			for (t in __CLASS539__.__imageSymbols)
			//@line 102
			{
				//@line 103
				img = __CLASS539__.__imageSymbols[t].image;
				//@line 104
				if (!img.width || !img.height)
				//@line 105
				return false;
			}
			//@line 107
			return true;
			return false
		};
		//@line 111
		var getImageSymbol = this.getImageSymbol = function (symbolName)
		{
			//@line 112
			//@line 113
			var img = __CLASS539__.__imageSymbols[symbolName];
			//@line 114
			if (img)
			//@line 115
			{
				//@line 116
				var dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
				//@line 117
				switch (window.devicePixelRatio)
				{
					//@line 119
				case 0.75:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_ldpi;
						break;
					}
					break;
					//@line 120
				case 1:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi;
						break;
					}
					break;
					//@line 121
				case 1.25:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_tvdpi;
						break;
					}
					break;
					//@line 122
				case 1.5:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_hdpi;
						break;
					}
					break;
					//@line 123
				case 2:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi;
						break;
					}
					break;
					//@line 124
				default:
					{
						return img;
					}
				}
				//@line 126
				return img.getDpiSiblingImage(dpi);
			}
		};
		//@line 131
		var getSoundSymbol = this.getSoundSymbol = function (symbolName)
		{
			//@line 132
			//@line 133
			return __CLASS539__.__soundSymbols[symbolName] || null;
		};
		//@line 137
		var getClipSymbol = this.getClipSymbol = function (symbolName)
		{
			//@line 138
			//@line 139
			return __CLASS539__.__clipSymbols[symbolName] || null;
		};
		//@line 143
		var newResourceImage = this.newResourceImage = function (symbolName, filename)
		{
			//@line 144
			//@line 145
			if (__CLASS539__.__imageSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 146
			var img = new CocoImage;
			//@line 147
			img.symbolName = symbolName;
			//@line 148
			img.createFromFile(filename, null);
			//@line 149
			__CLASS539__.__imageSymbols[symbolName] = img;
			//@line 150
			return img;
		};
		//@line 154
		var newResourceSound = this.newResourceSound = function (symbolName, filename)
		{
			//@line 155
			//@line 156
			if (__CLASS539__.__soundSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 157
			var snd = new CocoSound;
			//@line 158
			snd.symbolName = symbolName;
			//@line 159
			snd.createFromFile(filename, null);
			//@line 160
			__CLASS539__.__soundSymbols[symbolName] = snd;
			//@line 161
			return snd;
		};
		//@line 165
		var prepare = this.prepare = function (gl)
		{
			//@line 166
			//@line 167
			__CLASS539__.__glProgram = glu.makeProgram(gl, __CLASS539__.__vertex_shader, __CLASS539__.__fragment_shader);
			//@line 169
			gl.useProgram(__CLASS539__.__glProgram);
			//@line 171
			__CLASS539__.__glProgram.GLSLiVecCoords = gl.getAttribLocation(__CLASS539__.__glProgram, "iVecCoords");
			//@line 172
			__CLASS539__.__glProgram.GLSLiTexCoords = gl.getAttribLocation(__CLASS539__.__glProgram, "iTexCoords");
			//@line 173
			__CLASS539__.__glProgram.GLSLuProjMat = gl.getUniformLocation(__CLASS539__.__glProgram, "uProjMat");
			//@line 174
			__CLASS539__.__glProgram.GLSLuMVMat = gl.getUniformLocation(__CLASS539__.__glProgram, "uMVMat");
			//@line 175
			__CLASS539__.__glProgram.GLSLuSprSize = gl.getUniformLocation(__CLASS539__.__glProgram, "uSprSize");
			//@line 176
			__CLASS539__.__glProgram.GLSLuSprFrame = gl.getUniformLocation(__CLASS539__.__glProgram, "uSprFrame");
			//@line 177
			__CLASS539__.__glProgram.GLSLuSampler = gl.getUniformLocation(__CLASS539__.__glProgram, "uSampler");
			//@line 178
			__CLASS539__.__glProgram.GLSLuColor = gl.getUniformLocation(__CLASS539__.__glProgram, "uColor");
			//@line 180
			__CLASS539__.__modelViewMatrix = new CocoMatrix;
			//@line 181
			__CLASS539__.__modelViewMatrix.update(gl, __CLASS539__.__glProgram.GLSLuMVMat);
			//@line 183
			__CLASS539__.__projectionMatrix = new CocoMatrix;
			//@line 184
			__CLASS539__.__projectionMatrix.ortho(0, gl.canvas.width, gl.canvas.height, 0, -1, 1);
			//@line 186
			__CLASS539__.__projectionMatrix.scale(window.devicePixelRatio, window.devicePixelRatio);
			//@line 187
			__CLASS539__.__projectionMatrix.update(gl, __CLASS539__.__glProgram.GLSLuProjMat);
			//@line 189
			var t = "";
			//@line 190
			for (t in __CLASS539__.__imageSymbols)
			//@line 191
			__CLASS539__.__imageSymbols[t].prepare(gl);
		};
		//@line 195
		var tick = this.tick = function (gl, time)
		{
			//@line 196
			//@line 197
			__CLASS539__.render(gl, time);
		};
		//@line 201
		var render = this.render = function (gl, time)
		{
			//@line 202
			//@line 203
			gl.useProgram(__CLASS539__.__glProgram);
			//@line 204
			gl.enable(gl.BLEND);
			//@line 205
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
			//@line 206
			gl.enableVertexAttribArray(__CLASS539__.__glProgram.GLSLiTexCoords);
			//@line 207
			gl.enableVertexAttribArray(__CLASS539__.__glProgram.GLSLiVecCoords);
			//@line 209
			__CLASS539__.__modelViewMatrix.identity();
			//@line 210
			if (__CLASS539__.__startTime == -1) __CLASS539__.__startTime = time;
			//@line 211
			__CLASS539__.__elapsedTime = time - __CLASS539__.__currentTime - __CLASS539__.__startTime;
			//@line 212
			__CLASS539__.__currentTime = time - __CLASS539__.__startTime;
			//@line 214
			if (__CLASS539__.__root)
			//@line 215
			__CLASS539__.__root.render(gl, this, null);
			//@line 217
			gl.disableVertexAttribArray(__CLASS539__.__glProgram.GLSLiTexCoords);
			//@line 218
			gl.disableVertexAttribArray(__CLASS539__.__glProgram.GLSLiVecCoords);
			//@line 219
			gl.disable(gl.BLEND);
		};
		//@line 40
		this.__sceneName = "";
		//@line 41
		this.__imageSymbols = {};
		//@line 42
		this.__soundSymbols = {};
		//@line 43
		this.__clipSymbols = {};
		//@line 46
		this.__currentTime = 0;
		//@line 47
		this.__elapsedTime = 0;
		//@line 48
		this.__startTime = -1;
		//@line 49
		this.__root = null;
		//@line 50
		this.__modelViewMatrix = null;
		//@line 51
		this.__projectionMatrix = null;
		//@line 52
		this.__glProgram = null;
		//@line 54
		this.__vertex_shader = "attribute vec2 iVecCoords;attribute vec2 iTexCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec2 uSprSize;uniform vec2 uSprFrame;varying vec2 pTexCoord;void main(void){ gl_Position = uProjMat * uMVMat * vec4(iVecCoords, 0.0, 1.0); pTexCoord = vec2(((iTexCoords.x + uSprFrame.x) * uSprSize.x), ((iTexCoords.y + uSprFrame.y) * uSprSize.y));}";
		//@line 55
		this.__fragment_shader = "precision mediump float; uniform sampler2D uSampler;uniform vec4 uColor;varying vec2 pTexCoord;void main(void){ gl_FragColor = vec4(texture2D(uSampler, pTexCoord).r * uColor.r, texture2D(uSampler, pTexCoord).g * uColor.g, texture2D(uSampler, pTexCoord).b * uColor.b, texture2D(uSampler, pTexCoord).a * uColor.a);}";
		this.Constructor = function ()
		{
			var sceneName = arguments[0];
			//@line 62
			//@line 63
			__CLASS539__.__sceneName = sceneName;
			//@line 64
			__CLASS539__.__root = new CocoClip;
			//@line 65
			__CLASS539__.__modelViewMatrix = new CocoMatrix;
			//@line 66
			__CLASS539__.__projectionMatrix = new CocoMatrix;
			return __CLASS539__
		};
		__PDEFINE__ && __PDEFINE__(this, 'Constructor', __NOENUM__);
		return this
	}).call(
	{
	})).Constructor.apply(this, [].slice.call(arguments))
}