//@compile{false}
//@line 40
function CocoScene()
{
	var __SUPER__;
	return ((function ()
	{
		var __CLASS1076__ = this,
			__PDEFINE__ = {}.constructor.defineProperty,
			__NOENUM__ =
			{
				enumerable: false
			};
		if (typeof __PDEFINE__ != 'function') __PDEFINE__ = null; /*@cc_on @if(1)try{({}).constructor.defineProperty({},'x',{})}catch(e){__PDEFINE__=null}@end @*/
		this.__SUPER__ = __SUPER__;
		__PDEFINE__ && __PDEFINE__(this, '__SUPER__', __NOENUM__);
		this.__PROTECTED__ = {};
		__PDEFINE__ && __PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 76
		var updateModelViewMatrix = this.updateModelViewMatrix = function (gl)
		{
			//@line 77
			//@line 78
			__CLASS1076__.__modelViewMatrix.update(gl, __CLASS1076__.__glProgram.GLSLuMVMat);
		};
		//@line 82
		var updateProjectionMatrix = this.updateProjectionMatrix = function (gl)
		{
			//@line 83
			//@line 84
			__CLASS1076__.__projectionMatrix.update(gl, __CLASS1076__.__glProgram.GLSLuProjMat);
		};
		//@line 88
		var resourceImagesCount = this.resourceImagesCount = function ()
		{
			//@line 89
			//@line 90
			var t = "",
				c = 0;
			//@line 91
			for (t in __CLASS1076__.__imageSymbols)
			//@line 92
			if (__CLASS1076__.__imageSymbols[t])
			//@line 93
			c++; //@line 94
			return c;
			return 0
		};
		//@line 98
		var resourceImagesLoaded = this.resourceImagesLoaded = function ()
		{
			//@line 99
			//@line 100
			var t = "",
				img;
			//@line 101
			for (t in __CLASS1076__.__imageSymbols)
			//@line 102
			{
				//@line 103
				img = __CLASS1076__.__imageSymbols[t].image;
				//@line 104
				if (!img.width || !img.height)
				//@line 105
				return false;
			}
			//@line 107
			return true;
			return false
		};
		//@line 111
		var getImageSymbol = this.getImageSymbol = function (symbolName)
		{
			//@line 112
			//@line 113
			var img = __CLASS1076__.__imageSymbols[symbolName];
			//@line 114
			if (img)
			//@line 115
			{
				//@line 116
				var dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
				//@line 117
				switch (window.devicePixelRatio)
				{
					//@line 119
				case 0.75:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_ldpi;
						break;
					}
					break;
					//@line 120
				case 1:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi;
						break;
					}
					break;
					//@line 121
				case 1.25:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_tvdpi;
						break;
					}
					break;
					//@line 122
				case 1.5:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_hdpi;
						break;
					}
					break;
					//@line 123
				case 2:
					{
						dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi;
						break;
					}
					break;
					//@line 124
				default:
					{
						return img;
					}
				}
				//@line 126
				return img.getDpiSiblingImage(dpi);
			}
		};
		//@line 131
		var getSoundSymbol = this.getSoundSymbol = function (symbolName)
		{
			//@line 132
			//@line 133
			return __CLASS1076__.__soundSymbols[symbolName] || null;
		};
		//@line 137
		var getClipSymbol = this.getClipSymbol = function (symbolName)
		{
			//@line 138
			//@line 139
			return __CLASS1076__.__clipSymbols[symbolName] || null;
		};
		//@line 143
		var newResourceImage = this.newResourceImage = function (symbolName, filename)
		{
			//@line 144
			//@line 145
			if (__CLASS1076__.__imageSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 146
			var img = new CocoImage;
			//@line 147
			img.symbolName = symbolName;
			//@line 148
			img.createFromFile(filename, null);
			//@line 149
			__CLASS1076__.__imageSymbols[symbolName] = img;
			//@line 150
			return img;
		};
		//@line 154
		var newResourceSound = this.newResourceSound = function (symbolName, filename)
		{
			//@line 155
			//@line 156
			if (__CLASS1076__.__soundSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
			//@line 157
			var snd = new CocoSound;
			//@line 158
			snd.symbolName = symbolName;
			//@line 159
			snd.createFromFile(filename, null);
			//@line 160
			__CLASS1076__.__soundSymbols[symbolName] = snd;
			//@line 161
			return snd;
		};
		//@line 165
		var prepared = this.prepared = function ()
		{
			//@line 166
			//@line 167
			return (__CLASS1076__.__glProgram != null);
			return false
		};
		//@line 171
		var prepare = this.prepare = function (gl)
		{
			//@line 172
			//@line 173
			__CLASS1076__.__glProgram = glu.makeProgram(gl, __CLASS1076__.__vertex_shader, __CLASS1076__.__fragment_shader);
			//@line 175
			gl.useProgram(__CLASS1076__.__glProgram);
			//@line 177
			__CLASS1076__.__glProgram.GLSLiVecCoords = gl.getAttribLocation(__CLASS1076__.__glProgram, "iVecCoords");
			//@line 178
			__CLASS1076__.__glProgram.GLSLiTexCoords = gl.getAttribLocation(__CLASS1076__.__glProgram, "iTexCoords");
			//@line 179
			__CLASS1076__.__glProgram.GLSLuProjMat = gl.getUniformLocation(__CLASS1076__.__glProgram, "uProjMat");
			//@line 180
			__CLASS1076__.__glProgram.GLSLuMVMat = gl.getUniformLocation(__CLASS1076__.__glProgram, "uMVMat");
			//@line 181
			__CLASS1076__.__glProgram.GLSLuSprSize = gl.getUniformLocation(__CLASS1076__.__glProgram, "uSprSize");
			//@line 182
			__CLASS1076__.__glProgram.GLSLuSprFrame = gl.getUniformLocation(__CLASS1076__.__glProgram, "uSprFrame");
			//@line 183
			__CLASS1076__.__glProgram.GLSLuSampler = gl.getUniformLocation(__CLASS1076__.__glProgram, "uSampler");
			//@line 184
			__CLASS1076__.__glProgram.GLSLuColor = gl.getUniformLocation(__CLASS1076__.__glProgram, "uColor");
			//@line 186
			__CLASS1076__.__modelViewMatrix = new CocoMatrix;
			//@line 187
			__CLASS1076__.__modelViewMatrix.update(gl, __CLASS1076__.__glProgram.GLSLuMVMat);
			//@line 190
			var s = __CLASS1076__.__view_width > 0 && __CLASS1076__.__view_height > 0 ? Math.min(gl.canvas.width / __CLASS1076__.__view_width, gl.canvas.height / __CLASS1076__.__view_height) : window.devicePixelRatio;
			//@line 192
			__CLASS1076__.__projectionMatrix = new CocoMatrix;
			//@line 193
			__CLASS1076__.__projectionMatrix.ortho(-gl.canvas.width / 2, gl.canvas.width / 2, gl.canvas.height / 2, -gl.canvas.height / 2, -1, 1);
			//@line 194
			__CLASS1076__.__projectionMatrix.scale(s, s);
			//@line 195
			__CLASS1076__.__projectionMatrix.update(gl, __CLASS1076__.__glProgram.GLSLuProjMat);
			//@line 197
			var t = "";
			//@line 198
			for (t in __CLASS1076__.__imageSymbols)
			//@line 199
			__CLASS1076__.__imageSymbols[t].prepare(gl);
		};
		//@line 203
		var tick = this.tick = function (gl, time)
		{
			//@line 204
			//@line 205
			__CLASS1076__.render(gl, time);
		};
		//@line 209
		var render = this.render = function (gl, time)
		{
			//@line 210
			//@line 211
			__CLASS1076__.beginDraw(gl);
			//@line 213
			__CLASS1076__.__modelViewMatrix.identity();
			//@line 214
			if (__CLASS1076__.__startTime == -1) __CLASS1076__.__startTime = time;
			//@line 215
			__CLASS1076__.__elapsedTime = time - __CLASS1076__.__currentTime - __CLASS1076__.__startTime;
			//@line 216
			__CLASS1076__.__currentTime = time - __CLASS1076__.__startTime;
			//@line 218
			if (__CLASS1076__.__root)
			//@line 219
			{
				//@line 221
				__CLASS1076__.__levelParents = [__CLASS1076__.__root];
				//@line 222
				__CLASS1076__.__root.render(gl, this, null);
				//@line 223
				__CLASS1076__.__levelParents = [];
				//@line 226
				var max = __CLASS1076__.__root.childWithMaxTimelineDuration();
				//@line 227
				if (max && max.__currentFrame == max.__timeline.__lastKeyFrame)
				//@line 228
				{
					//@line 229
					__CLASS1076__.__root.reset();
					//@line 230
					__CLASS1076__.__startTime = -1;
				}
			}
			//@line 234
			__CLASS1076__.endDraw(gl);
		};
		//@line 238
		var hitTest = this.hitTest = function (MouseX, MouseY)
		{
			//@line 239
			return []
		};
		//@line 244
		var beginDraw = this.beginDraw = function (gl)
		{
			//@line 245
			//@line 246
			gl.useProgram(__CLASS1076__.__glProgram);
			//@line 247
			gl.enable(gl.BLEND);
			//@line 248
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
			//@line 249
			gl.enableVertexAttribArray(__CLASS1076__.__glProgram.GLSLiTexCoords);
			//@line 250
			gl.enableVertexAttribArray(__CLASS1076__.__glProgram.GLSLiVecCoords);
		};
		//@line 254
		var endDraw = this.endDraw = function (gl)
		{
			//@line 255
			//@line 256
			gl.disableVertexAttribArray(__CLASS1076__.__glProgram.GLSLiTexCoords);
			//@line 257
			gl.disableVertexAttribArray(__CLASS1076__.__glProgram.GLSLiVecCoords);
			//@line 258
			gl.disable(gl.BLEND);
		};
		//@line 262
		var gotoAndPlay = this.gotoAndPlay = function (LabelNameOrFrameIndex, deep)
		{
			//@line 263
			//@line 264
			var scope = __CLASS1076__.__levelParents[__CLASS1076__.__levelParents.length - 1];
			//@line 265
			return scope.gotoFrame(LabelNameOrFrameIndex, false, deep);
			return false
		};
		//@line 269
		var gotoAndStop = this.gotoAndStop = function (LabelNameOrFrameIndex, deep)
		{
			//@line 270
			//@line 271
			var scope = __CLASS1076__.__levelParents[__CLASS1076__.__levelParents.length - 1];
			//@line 272
			return scope.gotoFrame(LabelNameOrFrameIndex, true, deep);
			return false
		};
		//@line 276
		var stop = this.stop = function (deep)
		{
			//@line 277
			//@line 278
			deep = (deep == "true");
			//@line 279
			var scope = __CLASS1076__.__levelParents[__CLASS1076__.__levelParents.length - 1];
			//@line 280
			return scope.gotoFrame(-1, true, deep);
			return false
		};
		//@line 43
		this.__sceneName = "";
		//@line 44
		this.__imageSymbols = {};
		//@line 45
		this.__soundSymbols = {};
		//@line 46
		this.__clipSymbols = {};
		//@line 49
		this.__view_width = 0;
		//@line 50
		this.__view_height = 0;
		//@line 51
		this.__view_pixel_ratio = 0;
		//@line 54
		this.__currentTime = 0;
		//@line 55
		this.__elapsedTime = 0;
		//@line 56
		this.__startTime = -1;
		//@line 57
		this.__root = null;
		//@line 58
		this.__modelViewMatrix = null;
		//@line 59
		this.__projectionMatrix = null;
		//@line 60
		this.__glProgram = null;
		//@line 61
		this.__levelParents = [];
		//@line 63
		this.__vertex_shader = "attribute vec2 iVecCoords;attribute vec2 iTexCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec2 uSprSize;uniform vec2 uSprFrame;varying vec2 pTexCoord;void main(void){ gl_Position = uProjMat * uMVMat * vec4(iVecCoords, 0.0, 1.0); pTexCoord = vec2(((iTexCoords.x + uSprFrame.x) * uSprSize.x), ((iTexCoords.y + uSprFrame.y) * uSprSize.y));}";
		//@line 64
		this.__fragment_shader = "#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;uniform vec4 uColor;varying vec2 pTexCoord;void main(void){ gl_FragColor = vec4(texture2D(uSampler, pTexCoord).r * uColor.r, texture2D(uSampler, pTexCoord).g * uColor.g, texture2D(uSampler, pTexCoord).b * uColor.b, texture2D(uSampler, pTexCoord).a * uColor.a);}";
		this.Constructor = function ()
		{
			var sceneName = arguments[0];
			//@line 70
			//@line 71
			__CLASS1076__.__sceneName = sceneName;
			//@line 72
			__CLASS1076__.__root = new CocoClip;
			return __CLASS1076__
		};
		__PDEFINE__ && __PDEFINE__(this, 'Constructor', __NOENUM__);
		return this
	}).call(
	{
	})).Constructor.apply(this, [].slice.call(arguments))
}