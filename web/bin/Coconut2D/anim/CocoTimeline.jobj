"#export web"
//@line 40

function CocoTimeline()
{
	var __BASE__ = null;

	function CocoTimeline(__BASE__)
	{
		var __CLASS__COCOTIMELINE__ = this;
		__PDEFINE__ = Object.defineProperty, __NOENUM__ = {enumerable:false};
		this.__PRIVATE__ = {};
		this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		//@line 68
		var clear = this.clear = function ()
		{
			//@line 70
			__CLASS__COCOTIMELINE__.reset();
			//@line 71
			__CLASS__COCOTIMELINE__.__keyFrames = [];
			//@line 72
			__CLASS__COCOTIMELINE__.__labels = [];
			//@line 73
			__CLASS__COCOTIMELINE__.normalizetimeline();
		};
		//@line 77
		var reset = this.reset = function ()
		{
			//@line 79
			__CLASS__COCOTIMELINE__.__paused = false;
			//@line 80
			for (var i = __CLASS__COCOTIMELINE__.__keyFrames.size() - 1; i >= 0; i--)
			//@line 81
			{
				//@line 82
				__CLASS__COCOTIMELINE__.__keyFrames[i].reset();
			}
		};
		//@line 87
		var addLabel = this.addLabel = function (Label)
		{
			//@line 89
			if (Label) __CLASS__COCOTIMELINE__.__labels.push(Label);
			//@line 90
			return Label;
		};
		//@line 94
		var addLabelEx = this.addLabelEx = function (FrameIndex, LabelName)
		{
			//@line 96
			var Label = new CocoTimeLabel(FrameIndex, LabelName);
			//@line 97
			return __CLASS__COCOTIMELINE__.addLabel(Label);
		};
		//@line 101
		var findLabelByName = this.findLabelByName = function (LabelName)
		{
			//@line 103
			for (var i = __CLASS__COCOTIMELINE__.__labels.size() - 1; i >= 0; i--)
			//@line 104
			{
				//@line 105
				if (__CLASS__COCOTIMELINE__.__labels[i].name == LabelName)
				//@line 106
				{
					//@line 107
					return __CLASS__COCOTIMELINE__.__labels[i];
				}
			}
			//@line 110
			return null;
		};
		//@line 114
		var keyFrame = this.keyFrame = function (frameIndex)
		{
			//@line 116
			for (var i = __CLASS__COCOTIMELINE__.__keyFrames.size() - 1; i >= 0; i--)
			//@line 117
			{
				//@line 118
				if (__CLASS__COCOTIMELINE__.__keyFrames[i].frameIndex == frameIndex)
				//@line 119
				{
					//@line 120
					return __CLASS__COCOTIMELINE__.__keyFrames[i];
				}
			}
			//@line 123
			return null;
		};
		//@line 127
		var firstKeyFrame = this.firstKeyFrame = function ()
		{
			//@line 129
			return __CLASS__COCOTIMELINE__.__keyFrames[0];
		};
		//@line 133
		var lastKeyFrame = this.lastKeyFrame = function ()
		{
			//@line 135
			return __CLASS__COCOTIMELINE__.__keyFrames[__CLASS__COCOTIMELINE__.__keyFrames.size() - 1];
		};
		//@line 139
		var addKeyFrame = this.addKeyFrame = function (KeyFrame)
		{
			//@line 141
			if (KeyFrame)
			//@line 142
			{
				//@line 143
				KeyFrame.frameIndex = Math.floor(KeyFrame.frameIndex);
				//@line 144
				__CLASS__COCOTIMELINE__.__keyFrames.push(KeyFrame);
				//@line 145
				__CLASS__COCOTIMELINE__.normalizetimeline();
			}
			//@line 147
			return KeyFrame;
		};
		//@line 151
		var addKeyFrameEx = this.addKeyFrameEx = function (nextState, actionCallback, frameIndex, frameInterpolation, handleEvents, visible, x, y, scaleX, scaleY, rotation, pivotX, pivotY, red, green, blue, alpha, audio, flipH, flipV, spriteSequenceName)
		{
			//@line 173
			var KeyFrame = new CocoKeyFrame;
			//@line 175
			KeyFrame.nextState = nextState;
			//@line 176
			KeyFrame.action = actionCallback;
			//@line 177
			KeyFrame.frameIndex = frameIndex;
			//@line 178
			KeyFrame.frameInterpolation = frameInterpolation;
			//@line 179
			KeyFrame.handleEvents = handleEvents;
			//@line 180
			KeyFrame.visible = visible;
			//@line 181
			KeyFrame.x = x;
			//@line 182
			KeyFrame.y = y;
			//@line 183
			KeyFrame.scaleX = scaleX;
			//@line 184
			KeyFrame.scaleY = scaleY;
			//@line 185
			KeyFrame.rotation = rotation;
			//@line 186
			KeyFrame.pivotX = pivotX;
			//@line 187
			KeyFrame.pivotY = pivotY;
			//@line 188
			KeyFrame.red = red;
			//@line 189
			KeyFrame.green = green;
			//@line 190
			KeyFrame.blue = blue;
			//@line 191
			KeyFrame.alpha = alpha;
			//@line 192
			KeyFrame.audio = audio;
			//@line 193
			KeyFrame.flipH = flipH;
			//@line 194
			KeyFrame.flipV = flipV;
			//@line 195
			KeyFrame.spriteSequenceName = spriteSequenceName;
			//@line 197
			return __CLASS__COCOTIMELINE__.addKeyFrame(KeyFrame);
		};
		//@line 201
		var prepare = this.prepare = function (scene, clip)
		{
			//@line 203
			__CLASS__COCOTIMELINE__.__fps = scene.__fps;
			//@line 204
			__CLASS__COCOTIMELINE__.normalizetimeline();
		};
		//@line 208
		var normalizetimeline = this.normalizetimeline = function ()
		{
			//@line 210
			__CLASS__COCOTIMELINE__.reset();
			//@line 211
			__CLASS__COCOTIMELINE__.__durationInFrames = 0;
			//@line 212
			__CLASS__COCOTIMELINE__.__durationInTime = 0;
			//@line 213
			__CLASS__COCOTIMELINE__.__singleFrameDurationTime = 0;
			//@line 214
			if (__CLASS__COCOTIMELINE__.__keyFrames.size() > 0)
			//@line 215
			{
				//@line 216
				__CLASS__COCOTIMELINE__.__durationInFrames = __CLASS__COCOTIMELINE__.__keyFrames[__CLASS__COCOTIMELINE__.__keyFrames.size() - 1].frameIndex + 1;
				//@line 217
				__CLASS__COCOTIMELINE__.__durationInTime = (__CLASS__COCOTIMELINE__.__durationInFrames / __CLASS__COCOTIMELINE__.__fps) * 1000;
				//@line 218
				__CLASS__COCOTIMELINE__.__singleFrameDurationTime = __CLASS__COCOTIMELINE__.__durationInTime / __CLASS__COCOTIMELINE__.__durationInFrames;
			}
		};
		//@line 223
		var findKeyFrameBeforeframeIndex = this.findKeyFrameBeforeframeIndex = function (frameIndex, inclusive, excludeListIndex)
		{
			//@line 225
			var KeyFrame;
			//@line 226
			for (var i = __CLASS__COCOTIMELINE__.__keyFrames.size() - 1; i >= 0; i--)
			//@line 227
			{
				//@line 228
				if (i != excludeListIndex)
				//@line 229
				{
					//@line 230
					KeyFrame = __CLASS__COCOTIMELINE__.__keyFrames[i];
					//@line 231
					if (inclusive)
					//@line 232
					{
						//@line 233
						if (KeyFrame.frameIndex <= frameIndex)
						//@line 234
						return KeyFrame;
					}
					else
					//@line 237
					{
						//@line 238
						if (KeyFrame.frameIndex < frameIndex)
						//@line 239
						return KeyFrame;
					}
				}
			}
			//@line 243
			return null;
		};
		//@line 247
		var findKeyFrameAfterframeIndex = this.findKeyFrameAfterframeIndex = function (frameIndex, inclusive, excludeListIndex)
		{
			//@line 249
			var KeyFrame;
			//@line 250
			for (var i = 0, L = __CLASS__COCOTIMELINE__.__keyFrames.size(); i < L; i++)
			//@line 251
			{
				//@line 252
				if (i != excludeListIndex)
				//@line 253
				{
					//@line 254
					KeyFrame = __CLASS__COCOTIMELINE__.__keyFrames[i];
					//@line 255
					if (inclusive)
					//@line 256
					{
						//@line 257
						if (KeyFrame.frameIndex >= frameIndex)
						//@line 258
						return KeyFrame;
					}
					else
					//@line 261
					{
						//@line 262
						if (KeyFrame.frameIndex > frameIndex)
						//@line 263
						return KeyFrame;
					}
				}
			}
			//@line 267
			return null;
		};
		//@line 271
		var interpolate = this.interpolate = function (frameIndex)
		{
			//@line 273
			var F = null;
			//@line 274
			var F1 = null;
			//@line 275
			var F2 = null;
			//@line 276
			var s = 1.0;
			//@line 279
			if (__CLASS__COCOTIMELINE__.__keyFrames.size() == 0)
			//@line 280
			{
				//@line 281
				F = new CocoKeyFrame;
				//@line 282
				F.frameIndex = frameIndex;
				//@line 283
				F.visible = false;
				//@line 284
				return F;
			}
			//@line 288
			F1 = __CLASS__COCOTIMELINE__.keyFrame(frameIndex);
			//@line 289
			if (F1)
			//@line 290
			{
				//@line 291
				return F1.clone();
			}
			//@line 295
			F1 = __CLASS__COCOTIMELINE__.findKeyFrameBeforeframeIndex(frameIndex, false, -1);
			//@line 297
			if (!F1)
			//@line 298
			{
				//@line 300
				F = new CocoKeyFrame;
				//@line 301
				F.frameIndex = frameIndex;
				//@line 302
				F.visible = false;
				//@line 303
				return F;
			}
			else
			//@line 306
			{
				//@line 307
				switch (F1.frameInterpolation)
				{
					//@line 309
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO:
					{
						//@line 311
						F = F1.clone();
						//@line 312
						F.action = null;
						//@line 313
						F.audio = null;
						//@line 314
						F.nextState = null;
						//@line 315
						F.frameIndex = frameIndex;
						//@line 316
						return F;
					}
					break;
					//@line 318
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE:
					{
						//@line 320
						F = F1.clone();
						//@line 321
						F.action = null;
						//@line 322
						F.audio = null;
						//@line 323
						F.nextState = null;
						//@line 324
						F.frameIndex = frameIndex;
						//@line 325
						F.visible = false;
						//@line 326
						return F;
					}
					break;
					//@line 328
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN:
					{
						//@line 331
						F2 = __CLASS__COCOTIMELINE__.findKeyFrameAfterframeIndex(frameIndex, false, -1);
						//@line 333
						if (!F2)
						//@line 334
						{
							//@line 336
							F = F1.clone();
							//@line 337
							F.action = null;
							//@line 338
							F.audio = null;
							//@line 339
							F.nextState = null;
							//@line 340
							F.frameIndex = frameIndex;
							//@line 341
							return F;
						}
						else
						//@line 345
						{
							//@line 347
							F = F1.clone();
							//@line 348
							F.action = null;
							//@line 349
							F.audio = null;
							//@line 350
							F.nextState = null;
							//@line 351
							F.frameIndex = frameIndex;
							//@line 352
							s = (frameIndex - F1.frameIndex) / (F2.frameIndex - F1.frameIndex);
							//@line 353
							F.interpolate(F1, F2, s);
							//@line 354
							return F;
						}
					}
					break;
					//@line 357
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_PHYSICS:
					{
						//@line 358
						break;
					}
					break;
				}
			}
			//@line 361
			return null;
		};
		//@line 42
		this.__labels = [];
		//@line 43
		this.__keyFrames = [];
		//@line 44
		this.__singleFrameDurationTime = null;
		//@line 45
		this.__durationInTime = null;
		//@line 46
		this.__durationInFrames = 0;
		//@line 47
		this.__paused = false;
		//@line 48
		this.__fps = 0;
		var Destructor = this.Destructor = function ()
		{
			//@line 63
			{
				(function (o)
				{
					for (var i = o.length; i--;)
					{
						o[i] && ((o[i].hasOwnProperty('Destructor') && o[i].Destructor()) || !o[i].hasOwnProperty('Destructor')) && (delete o[i]);
						o[i] = null;
					}
				})(__CLASS__COCOTIMELINE__.__labels);
				__CLASS__COCOTIMELINE__.__labels && ((__CLASS__COCOTIMELINE__.__labels.hasOwnProperty('Destructor') && __CLASS__COCOTIMELINE__.__labels.Destructor()) || !__CLASS__COCOTIMELINE__.__labels.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTIMELINE__.__labels);
				__CLASS__COCOTIMELINE__.__labels = null
			};
			//@line 64
			{
				(function (o)
				{
					for (var i = o.length; i--;)
					{
						o[i] && ((o[i].hasOwnProperty('Destructor') && o[i].Destructor()) || !o[i].hasOwnProperty('Destructor')) && (delete o[i]);
						o[i] = null;
					}
				})(__CLASS__COCOTIMELINE__.__keyFrames);
				__CLASS__COCOTIMELINE__.__keyFrames && ((__CLASS__COCOTIMELINE__.__keyFrames.hasOwnProperty('Destructor') && __CLASS__COCOTIMELINE__.__keyFrames.Destructor()) || !__CLASS__COCOTIMELINE__.__keyFrames.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTIMELINE__.__keyFrames);
				__CLASS__COCOTIMELINE__.__keyFrames = null
			};
			{
				__CLASS__COCOTIMELINE__.__labels = null;
				__CLASS__COCOTIMELINE__.__keyFrames = null;
				__CLASS__COCOTIMELINE__.__singleFrameDurationTime = null;
				__CLASS__COCOTIMELINE__.__durationInTime = null;
				__CLASS__COCOTIMELINE__.__durationInFrames = null;
				__CLASS__COCOTIMELINE__.__paused = null;
				__CLASS__COCOTIMELINE__.__fps = null;
			}
			return true
		};
		//@line 51
		this.Constructor = function ()
		{
			//@line 53
			__CLASS__COCOTIMELINE__.__singleFrameDurationTime = 0.0;
			//@line 54
			__CLASS__COCOTIMELINE__.__durationInTime = 0.0;
			//@line 55
			__CLASS__COCOTIMELINE__.__durationInFrames = 0;
			//@line 56
			__CLASS__COCOTIMELINE__.__paused = false;
			//@line 57
			__CLASS__COCOTIMELINE__.__fps = 30;
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor();
		return this;
	}
	return new CocoTimeline(__BASE__);
}