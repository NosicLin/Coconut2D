"#export web"
//@line 40

function CocoTimeline()
{
	var __BASE__ = null;

	function CocoTimeline(__BASE__)
	{
		var __CLASS__COCOTIMELINE__ = this;
		__PDEFINE__ = Object.defineProperty, __NOENUM__ = {enumerable:false};
		this.__PRIVATE__ = {};
		this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		//@line 70
		var clear = this.clear = function ()
		{
			//@line 72
			__CLASS__COCOTIMELINE__.reset();
			//@line 73
			__CLASS__COCOTIMELINE__.__keyFrames = [];
			//@line 74
			__CLASS__COCOTIMELINE__.__labels = [];
			//@line 75
			__CLASS__COCOTIMELINE__.normalizetimeline();
		};
		//@line 79
		var reset = this.reset = function ()
		{
			//@line 81
			__CLASS__COCOTIMELINE__.__skipTime = 0;
			//@line 82
			__CLASS__COCOTIMELINE__.__paused = false;
			//@line 83
			for (var i = __CLASS__COCOTIMELINE__.__keyFrames.size() - 1; i >= 0; i--)
			//@line 84
			{
				//@line 85
				__CLASS__COCOTIMELINE__.__keyFrames[i].reset();
			}
		};
		//@line 90
		var addLabel = this.addLabel = function (Label)
		{
			//@line 92
			if (Label) __CLASS__COCOTIMELINE__.__labels.push(Label);
			//@line 93
			return Label;
		};
		//@line 97
		var addLabelEx = this.addLabelEx = function (FrameIndex, LabelName)
		{
			//@line 99
			var Label = new CocoTimeLabel(FrameIndex, LabelName);
			//@line 100
			return __CLASS__COCOTIMELINE__.addLabel(Label);
		};
		//@line 104
		var findLabelByName = this.findLabelByName = function (LabelName)
		{
			//@line 106
			for (var i = __CLASS__COCOTIMELINE__.__labels.size() - 1; i >= 0; i--)
			//@line 107
			{
				//@line 108
				if (__CLASS__COCOTIMELINE__.__labels[i].name == LabelName)
				//@line 109
				{
					//@line 110
					return __CLASS__COCOTIMELINE__.__labels[i];
				}
			}
			//@line 113
			return null;
		};
		//@line 117
		var keyFrame = this.keyFrame = function (frameIndex)
		{
			//@line 119
			for (var i = __CLASS__COCOTIMELINE__.__keyFrames.size() - 1; i >= 0; i--)
			//@line 120
			{
				//@line 121
				if (__CLASS__COCOTIMELINE__.__keyFrames[i].frameIndex == frameIndex)
				//@line 122
				{
					//@line 123
					return __CLASS__COCOTIMELINE__.__keyFrames[i];
				}
			}
			//@line 126
			return null;
		};
		//@line 130
		var firstKeyFrame = this.firstKeyFrame = function ()
		{
			//@line 132
			return __CLASS__COCOTIMELINE__.__keyFrames[0];
		};
		//@line 136
		var lastKeyFrame = this.lastKeyFrame = function ()
		{
			//@line 138
			return __CLASS__COCOTIMELINE__.__keyFrames[__CLASS__COCOTIMELINE__.__keyFrames.size() - 1];
		};
		//@line 142
		var addKeyFrame = this.addKeyFrame = function (KeyFrame)
		{
			//@line 144
			if (KeyFrame)
			//@line 145
			{
				//@line 146
				KeyFrame.frameIndex = Math.floor(KeyFrame.frameIndex);
				//@line 147
				__CLASS__COCOTIMELINE__.__keyFrames.push(KeyFrame);
				//@line 148
				__CLASS__COCOTIMELINE__.normalizetimeline();
			}
			//@line 150
			return KeyFrame;
		};
		//@line 154
		var addKeyFrameEx = this.addKeyFrameEx = function (nextState, actionCallback, frameIndex, frameInterpolation, handleEvents, visible, x, y, scaleX, scaleY, rotation, pivotX, pivotY, red, green, blue, alpha, audio, flipH, flipV)
		{
			//@line 175
			var KeyFrame = new CocoKeyFrame;
			//@line 177
			KeyFrame.nextState = nextState;
			//@line 178
			KeyFrame.action = actionCallback;
			//@line 179
			KeyFrame.frameIndex = frameIndex;
			//@line 180
			KeyFrame.frameInterpolation = frameInterpolation;
			//@line 181
			KeyFrame.handleEvents = handleEvents;
			//@line 182
			KeyFrame.visible = visible;
			//@line 183
			KeyFrame.x = x;
			//@line 184
			KeyFrame.y = y;
			//@line 185
			KeyFrame.scaleX = scaleX;
			//@line 186
			KeyFrame.scaleY = scaleY;
			//@line 187
			KeyFrame.rotation = rotation;
			//@line 188
			KeyFrame.pivotX = pivotX;
			//@line 189
			KeyFrame.pivotY = pivotY;
			//@line 190
			KeyFrame.red = red;
			//@line 191
			KeyFrame.green = green;
			//@line 192
			KeyFrame.blue = blue;
			//@line 193
			KeyFrame.alpha = alpha;
			//@line 194
			KeyFrame.audio = audio;
			//@line 195
			KeyFrame.flipH = flipH;
			//@line 196
			KeyFrame.flipV = flipV;
			//@line 198
			return __CLASS__COCOTIMELINE__.addKeyFrame(KeyFrame);
		};
		//@line 202
		var prepare = this.prepare = function (scene, clip)
		{
			//@line 204
			__CLASS__COCOTIMELINE__.__fps = scene.__fps;
			//@line 205
			__CLASS__COCOTIMELINE__.normalizetimeline();
		};
		//@line 209
		var normalizetimeline = this.normalizetimeline = function ()
		{
			//@line 211
			__CLASS__COCOTIMELINE__.reset();
			//@line 212
			__CLASS__COCOTIMELINE__.__durationInFrames = 0;
			//@line 213
			__CLASS__COCOTIMELINE__.__durationInTime = 0;
			//@line 214
			__CLASS__COCOTIMELINE__.__singleFrameDurationTime = 0;
			//@line 215
			if (__CLASS__COCOTIMELINE__.__keyFrames.size() > 0)
			//@line 216
			{
				//@line 217
				__CLASS__COCOTIMELINE__.__durationInFrames = __CLASS__COCOTIMELINE__.__keyFrames[__CLASS__COCOTIMELINE__.__keyFrames.size() - 1].frameIndex + 1;
				//@line 218
				__CLASS__COCOTIMELINE__.__durationInTime = (__CLASS__COCOTIMELINE__.__durationInFrames / __CLASS__COCOTIMELINE__.__fps) * 1000;
				//@line 219
				__CLASS__COCOTIMELINE__.__singleFrameDurationTime = __CLASS__COCOTIMELINE__.__durationInTime / __CLASS__COCOTIMELINE__.__durationInFrames;
			}
		};
		//@line 224
		var jumpBy = this.jumpBy = function (frames, paused)
		{
			//@line 226
			__CLASS__COCOTIMELINE__.__paused = paused;
			//@line 227
			__CLASS__COCOTIMELINE__.__skipTime += frames * __CLASS__COCOTIMELINE__.__singleFrameDurationTime;
		};
		//@line 231
		var findKeyFrameBeforeframeIndex = this.findKeyFrameBeforeframeIndex = function (frameIndex, inclusive, excludeListIndex)
		{
			//@line 233
			var KeyFrame;
			//@line 234
			for (var i = __CLASS__COCOTIMELINE__.__keyFrames.size() - 1; i >= 0; i--)
			//@line 235
			{
				//@line 236
				if (i != excludeListIndex)
				//@line 237
				{
					//@line 238
					KeyFrame = __CLASS__COCOTIMELINE__.__keyFrames[i];
					//@line 239
					if (inclusive)
					//@line 240
					{
						//@line 241
						if (KeyFrame.frameIndex <= frameIndex)
						//@line 242
						return KeyFrame;
					}
					else
					//@line 245
					{
						//@line 246
						if (KeyFrame.frameIndex < frameIndex)
						//@line 247
						return KeyFrame;
					}
				}
			}
			//@line 251
			return null;
		};
		//@line 255
		var findKeyFrameAfterframeIndex = this.findKeyFrameAfterframeIndex = function (frameIndex, inclusive, excludeListIndex)
		{
			//@line 257
			var KeyFrame;
			//@line 258
			for (var i = 0, L = __CLASS__COCOTIMELINE__.__keyFrames.size(); i < L; i++)
			//@line 259
			{
				//@line 260
				if (i != excludeListIndex)
				//@line 261
				{
					//@line 262
					KeyFrame = __CLASS__COCOTIMELINE__.__keyFrames[i];
					//@line 263
					if (inclusive)
					//@line 264
					{
						//@line 265
						if (KeyFrame.frameIndex >= frameIndex)
						//@line 266
						return KeyFrame;
					}
					else
					//@line 269
					{
						//@line 270
						if (KeyFrame.frameIndex > frameIndex)
						//@line 271
						return KeyFrame;
					}
				}
			}
			//@line 275
			return null;
		};
		//@line 279
		var interpolateByTime = this.interpolateByTime = function (LoopTime)
		{
			//@line 281
			var T = (LoopTime / __CLASS__COCOTIMELINE__.__singleFrameDurationTime);
			//@line 282
			return __CLASS__COCOTIMELINE__.interpolateByFrame(T);
		};
		//@line 286
		var interpolateByFrame = this.interpolateByFrame = function (frameIndex)
		{
			//@line 288
			var F = null;
			//@line 289
			var F1 = null;
			//@line 290
			var F2 = null;
			//@line 291
			var s = 1.0;
			//@line 292
			var FrameIndex = Math.floor(frameIndex);
			//@line 295
			if (__CLASS__COCOTIMELINE__.__keyFrames.size() == 0)
			//@line 296
			{
				//@line 297
				F = new CocoKeyFrame;
				//@line 298
				F.frameIndex = FrameIndex;
				//@line 299
				F.visible = false;
				//@line 300
				return F;
			}
			//@line 304
			F1 = __CLASS__COCOTIMELINE__.keyFrame(FrameIndex);
			//@line 305
			if (F1)
			//@line 306
			{
				//@line 307
				F1 = F1.clone(true);
				//@line 308
				return F1;
			}
			//@line 312
			F1 = __CLASS__COCOTIMELINE__.findKeyFrameBeforeframeIndex(FrameIndex, false, -1);
			//@line 314
			if (!F1)
			//@line 315
			{
				//@line 317
				F = new CocoKeyFrame;
				//@line 318
				F.frameIndex = FrameIndex;
				//@line 319
				F.visible = false;
				//@line 320
				return F;
			}
			else
			//@line 323
			{
				//@line 324
				switch (F1.frameInterpolation)
				{
					//@line 326
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO:
					{
						//@line 328
						F = F1.clone(false);
						//@line 329
						F.frameIndex = FrameIndex;
						//@line 330
						return F;
					}
					break;
					//@line 332
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE:
					{
						//@line 334
						F = F1.clone(false);
						//@line 335
						F.frameIndex = FrameIndex;
						//@line 336
						F.visible = false;
						//@line 337
						return F;
					}
					break;
					//@line 339
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN:
					{
						//@line 342
						F2 = __CLASS__COCOTIMELINE__.findKeyFrameAfterframeIndex(FrameIndex, false, -1);
						//@line 344
						if (!F2)
						//@line 345
						{
							//@line 347
							F = F1.clone(false);
							//@line 348
							F.frameIndex = FrameIndex;
							//@line 349
							return F;
						}
						else
						//@line 353
						{
							//@line 355
							F = F1.clone(false);
							//@line 356
							F.frameIndex = FrameIndex;
							//@line 357
							s = (frameIndex - F1.frameIndex) / (F2.frameIndex - F1.frameIndex);
							//@line 358
							F.interpolate(F1, F2, s);
							//@line 359
							return F;
						}
					}
					break;
					//@line 362
				case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_PHYSICS:
					{
						//@line 363
						break;
					}
					break;
				}
			}
			//@line 366
			return null;
		};
		//@line 42
		this.__labels = [];
		//@line 43
		this.__keyFrames = [];
		//@line 44
		this.__singleFrameDurationTime = 0;
		//@line 45
		this.__durationInTime = 0;
		//@line 46
		this.__durationInFrames = 0;
		//@line 47
		this.__skipTime = 0;
		//@line 48
		this.__paused = false;
		//@line 49
		this.__fps = 0;
		var Destructor = this.Destructor = function ()
		{
			//@line 65
			(function (o)
			{
				for (var i = o.length; i--;)
				{
					o[i] && ((o[i].hasOwnProperty('Destructor') && o[i].Destructor()) || !o[i].hasOwnProperty('Destructor')) && (delete o[i]);
					o[i] = null;
				}
			})(__CLASS__COCOTIMELINE__.__labels);
			__CLASS__COCOTIMELINE__.__labels && ((__CLASS__COCOTIMELINE__.__labels.hasOwnProperty('Destructor') && __CLASS__COCOTIMELINE__.__labels.Destructor()) || !__CLASS__COCOTIMELINE__.__labels.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTIMELINE__.__labels);
			__CLASS__COCOTIMELINE__.__labels = null;
			//@line 66
			(function (o)
			{
				for (var i = o.length; i--;)
				{
					o[i] && ((o[i].hasOwnProperty('Destructor') && o[i].Destructor()) || !o[i].hasOwnProperty('Destructor')) && (delete o[i]);
					o[i] = null;
				}
			})(__CLASS__COCOTIMELINE__.__keyFrames);
			__CLASS__COCOTIMELINE__.__keyFrames && ((__CLASS__COCOTIMELINE__.__keyFrames.hasOwnProperty('Destructor') && __CLASS__COCOTIMELINE__.__keyFrames.Destructor()) || !__CLASS__COCOTIMELINE__.__keyFrames.hasOwnProperty('Destructor')) && (delete __CLASS__COCOTIMELINE__.__keyFrames);
			__CLASS__COCOTIMELINE__.__keyFrames = null;
			__CLASS__COCOTIMELINE__.__labels = null;
			__CLASS__COCOTIMELINE__.__keyFrames = null;
			__CLASS__COCOTIMELINE__.__singleFrameDurationTime = null;
			__CLASS__COCOTIMELINE__.__durationInTime = null;
			__CLASS__COCOTIMELINE__.__durationInFrames = null;
			__CLASS__COCOTIMELINE__.__skipTime = null;
			__CLASS__COCOTIMELINE__.__paused = null;
			__CLASS__COCOTIMELINE__.__fps = null;
			return true
		};
		//@line 52
		this.Constructor = function ()
		{
			//@line 54
			__CLASS__COCOTIMELINE__.__singleFrameDurationTime = 0.0;
			//@line 55
			__CLASS__COCOTIMELINE__.__durationInTime = 0.0;
			//@line 56
			__CLASS__COCOTIMELINE__.__durationInFrames = 0;
			//@line 57
			__CLASS__COCOTIMELINE__.__skipTime = 0.0;
			//@line 58
			__CLASS__COCOTIMELINE__.__paused = false;
			//@line 59
			__CLASS__COCOTIMELINE__.__fps = 30;
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor();
		return this;
	}
	return new CocoTimeline(__BASE__);
}