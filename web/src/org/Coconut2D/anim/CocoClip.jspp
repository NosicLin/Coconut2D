//@compile{true} 

//@include{WebGL.js}
//@include{CocoMatrix.jspp}
//@include{CocoImage.jspp}
//@include{CocoSound.jspp}
//@include{CocoTimeline.jspp}
                     
/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 _________     
//	  / ____/___  _________  / ____/ (_)___ 
//	 / /   / __ \/ ___/ __ \/ /   / / / __ \
//	/ /___/ /_/ / /__/ /_/ / /___/ / / /_/ /
//	\____/\____/\___/\____/\____/_/_/ .___/ 
//	                               /_/      
// ==================================================================================================================================

class CocoClip
{           
	public var __instanceName:String					= null;
	public var __image:CocoImage						= null;
	public var __mask:CocoImage							= null;
	public var __audio:CocoSound						= null;
	public var __symbolLoop:COCO_CLIP_SYMBOL_LOOP_ENUM	= COCO_CLIP_SYMBOL_LOOP_ENUM.CLIP_SYMBOL_LOOP_CONTINUOUS;
	public var __childrenCount:Number					= 0;
	public var __children:Object						= {};	
	public var __currentSequenceName:String				= null;
	public var __currentSequenceFrameIndex:Number		= 0;
	public var __timeline:CocoTimeline					= null;
	public var __parent:CocoClip						= null;

	public var __firstTickTime:Number					= 0.0;
	public var __currentFrame:CocoKeyFrame				= null;	
		
	public var __vTOP_LEFT:CocoVector					= null;
	public var __vTOP_RIGHT:CocoVector					= null;
	public var __vBOTTOM_LEFT:CocoVector				= null;
	public var __vBOTTOM_RIGHT:CocoVector				= null;
			
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(image:CocoImage, audio:CocoSound, sequence:String, mask:CocoImage)
	{
		__timeline = new CocoTimeline(); 
		if(image) __image = image;
		if(audio) __audio = audio;
		if(sequence) __currentSequenceName = sequence;	 
		__vTOP_LEFT = new CocoVector();
		__vTOP_RIGHT = new CocoVector();
		__vBOTTOM_LEFT = new CocoVector();
		__vBOTTOM_RIGHT = new CocoVector();		
	}  
				
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function children() :Array
	{		
		var children:Array = [];
		var vClip:String;
		for(vClip in __children)
			children.push(__children[vClip]);	
	    return children;   
	}  
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function childrenMaxFrameIndex() :Number
	{      
		var vClip:String, ci:CocoClip, T:Number = 0;
	    for(vClip in __children)
		{
			ci = __children[vClip] || null;
	        if(ci.__timeline.__lastframeIndex > T) 
	            T = ci.__timeline.__lastframeIndex;
	    }
	    return T;	    	    
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function childWithMaxTimelineDuration() :CocoClip
	{
	    var vClip:String, ci:CocoClip, T:CocoClip;
	    for(vClip in __children)
		{
			ci = __children[vClip]; 			
			if(!T) { T = ci; continue; }
	        if(ci.__timeline.__durationInTime > T.__timeline.__durationInTime) 
				T = ci;
	    }
	    return T;
	}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset() :CocoClip
	{
		__currentFrame = null;
	    __firstTickTime = -1;
	    __timeline.reset();
	    
	    var vClip:String, ci:CocoClip;
	    for(vClip in __children)
		{
			ci = __children[vClip]; 			
			if(ci) ci.reset();
	    }	    
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addChild(clipInstance:CocoClip) :CocoClip
	{
	    if(!clipInstance) return null;
	    if(!clipInstance.__instanceName) throw "Invalid instance name.";
	    if(__children[clipInstance.__instanceName]) throw "Instance " + clipInstance.__instanceName + " already exists.";
	    __children[clipInstance.__instanceName] = clipInstance;
	    __childrenCount++;
	    return clipInstance;	
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeChild(clipInstance:CocoClip) :CocoClip
	{
	    if(!clipInstance) return null;
	    if(!clipInstance.__instanceName) throw "Invalid instance name.";
	    if(!__children[clipInstance.__instanceName]) throw "Instance " + clipInstance.__instanceName + " does not exist in this parent.";
	    __children[clipInstance.__instanceName] = null;
	    __childrenCount--;
	    return clipInstance;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildByName(instanceName:String) :CocoClip
	{    
		return __children[instanceName] || null;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildByIndex(index:Number) :CocoClip
	{        
		if(!(index >= 0 && index < __childrenCount)) return null;
		var arr:Array = children();
		return arr[index];
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getChildIndex(child:CocoClip) :Number
	{
	    if(child)
	    {
	    	var vClip:String, index:Number = -1;
			for(vClip in __children)
			{
				index++;
				if(__children[vClip]==child)
					return index;
			}
		}
		return -1;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isParentOf(child:CocoClip) :Boolean
	{
	    if(!child) return false;
	    
	    if(__children[child.__instanceName]) 
	        return true;        
	     
	    var vClip:String, clip:CocoClip;
	    for(vClip in __children)
	    {
	        clip = __children[vClip] || null;
	        if(clip && clip.isParentOf(child))
				return true;
	    }
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function moveChildToIndex(child:CocoClip, newIndex:Number) :Boolean
	{  
		var a=5;
		
	    if(newIndex < 0) return false;
	    if(newIndex > __childrenCount) return false;
	    
	    var oldIndex:Number = getChildIndex(child);
	    if(oldIndex = newIndex) return false;
	    
	    var arr:Array = children();    
	    arr.splice(oldIndex, 1);
	    
	    if(newIndex + 1 > arr.length) 
	    {
	        arr.push(child);
	    } 
	    else 
	    {
	        arr.insertBefore(child, newIndex);
	    }
	    
	    __children = {};    
	    var clip:CocoClip;
	    var i:Number;
	    for(i=0; i<arr.legnth; i++)
	    {
	    	clip = arr[i];
	        __children[clip.__instanceName] = clip;
	    }
	    
	    return true;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoFrame(LabelNameOrFrameIndex, pause:Boolean, deep:Boolean) :Boolean
	{
		// Resolve LabelNameOrFrameIndex to a FrameIndex number.		
		var FrameIndex:Number = parseInt(LabelNameOrFrameIndex);
		if(isNaN(FrameIndex))
		{
			var Label:CocoTimeLabel = __timeline.findLabelByName(LabelNameOrFrameIndex);
			if(!Label) return false;
			FrameIndex = Label.frameIndex;				
		}

		// Loop on children to jump timeline head to desired position.		
		var vClip:String;
		var clip:CocoClip;				    		
		for(vClip in __children)
		{					
			clip = __children[vClip];	
						
			if(FrameIndex==COCO_STOP_ON_CURRENT_FRAME)
			{
				// Special case to stop on current frame.
				clip.__timeline.jumpBy(0, pause);	
			}
			else
			{
				// Calculate difference between current frame and jump frame.
				var frames:Number = (FrameIndex - clip.__currentFrame.frameIndex);
				clip.__timeline.jumpBy(frames, pause);
			}
			 
			// Deep works for stopping / resuming children with no timeline jumping.
			// Otherwise if you need time adjustment for childrent, use the API.
			if(deep)
			{
				clip.gotoFrame(COCO_STOP_ON_CURRENT_FRAME, pause, deep);
			}			
		}
		
		return true;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function render(gl:WebGLRenderingContext, scene:CocoScene, parentClip:CocoClip)
	{        
		// Get scene current time and add timeline skipTime (used in timeline jumps such as stop(), gotoAndPlay(), gotoAndStop() )		                                    
		var currentTime:Number = scene.__currentTime + __timeline.__skipTime;

		// Keep track of first tick time.		
		if(__firstTickTime == -1) __firstTickTime = currentTime;		
		
		// Calculate the parent timeline duraction in time from its children.
		// Note: the parent timeline might have only one KeyFrame but the actual length is defined by the max timeline size of each children.		
		var parentClipsDuration:Number = (parentClip ? parentClip.childWithMaxTimelineDuration().__timeline.__durationInTime : __timeline.__durationInTime);
		
		// Calculate this clip's LoopTime which is the projection of this clip's timeline to its parent's timeline.
		var clippingTime:Number = Math.floor((currentTime - __firstTickTime) / parentClipsDuration) * parentClipsDuration;
		
		// Adjust LoopTime start.
		var loopTime:Number = (currentTime - __firstTickTime) - clippingTime;					
        
        // Take into account time sync between this clip and its parent.
		switch(__symbolLoop)
		{
			case COCO_CLIP_SYMBOL_LOOP_ENUM.CLIP_SYMBOL_LOOP_CONTINUOUS:
			    __currentFrame = __timeline.interpolateByTime(loopTime);
				break;     
				
			case COCO_CLIP_SYMBOL_LOOP_ENUM.CLIP_SYMBOL_LOOP_SYNCHRONIZED_WITH_PARENT:
			    __currentFrame = __timeline.interpolateByTime(loopTime); // TODO
				break; 
				
			case COCO_CLIP_SYMBOL_LOOP_ENUM.CLIP_SYMBOL_LOOP_ONCE:
			    if(clippingTime > 0) 
			    	__currentFrame = __timeline.__lastKeyFrame.clone();
			    else
			    	__currentFrame = __timeline.interpolateByTime(loopTime); 
				break;
		}
		
		// Combine parent clip currentframe values with this clip's interpolated frame values.
		if(parentClip)                                      
		{
			 __currentFrame.combine(parentClip.__currentFrame);
			
			// If a child handles events and requires a bounding box calculation 
			// then the entire parent-child chain needs to calculate bounding box.
			if(__currentFrame.calcBoundingBox) 
				parentClip.__currentFrame.calcBoundingBox = true;
		}
	
		// Apply this clip's current frame values to modelview matrix.
		__currentFrame.apply(scene.__modelViewMatrix);				
		
		// If we are visible, render this clip and its children.
		if(__currentFrame.alpha != 0 && __currentFrame.visible)
		{			
			if(__image)
			{								
				// If this clip is a primitive (low-level clip with an image) then render the image.				
				if(__image.isSpriteSheet()) 
				{   
					// If the image is Spritesheet then render its current Animation Sequence.					
					if(!__currentSequenceName)
					{    
						var s:String;
						for(s in __image.sequences)
						{
							__currentSequenceName = s;
							break;
						}
					} 
					var seq:CocoSequence = __image.sequences[__currentSequenceName];				
					__currentSequenceFrameIndex = __timeline.__paused ? 0 : Math.floor(((currentTime - __firstTickTime) / GLOBAL_FPS)) % seq.frames.length;
					var frame:Number = seq.frames[__currentSequenceFrameIndex];
					scene.drawFrame(gl, __image, frame, __currentFrame.alpha);					
				} 
				else
				{
					// Render a standard image.					
					scene.drawFrame(gl, __image, 0,  __currentFrame.alpha);	
				}			
			} 
			else
			{			
				// Render Children			    
				var c:String;
				var ci:CocoClip;
				scene.__levelParents.push(this);
				for(c in __children)
				{	
					scene.__modelViewMatrix.push();		
					ci = __children[c];
					ci.render(gl, scene, this);
					scene.__modelViewMatrix.pop();			
				} 
				scene.__levelParents.pop();
			} 
		}
		 		
		// Handle touch event if no-one else has		
/*		{
			// Calculate bounding box vertices
			if(__image)		                                               
				initBoundingBoxFromTexture(scene, __image.textureCellWidth / 2, __image.textureCellHeight / 2);
			else if(__childrenCount>0)		
				initBoundingBoxFromChildren(scene);			
				
			// Draw bounds (debug)
			if(__currentFrame.alpha != 0 && __currentFrame.visible)   
			{
				drawBoundingBox(scene, gl);  
			}
				
			// Point in quad?
			if(engine.__touchEvent) {	
				var x = (engine.__touchEvent.clientX - gl.canvas.width / 2.0) / scene.__view_scale;
				var y = (engine.__touchEvent.clientY - gl.canvas.height / 2.0) / scene.__view_scale; 			
	   	        if(hitTest(x, y))
	   	        {
	   	        	engine.__touchEvent.targets.push(this);
	   	        }
			}
		}
*/
		// Execute KeyFrame action callback.
		this.__parent = parentClip;
		__currentFrame.execute(gl, currentTime, loopTime, scene, this);
		this.__parent = null;		
		
		// Did we reach the end of the main timeline?
/*		if(this==scene.__root)
		{
			var max = scene.__root.childWithMaxTimelineDuration();
			if(max.__currentFrame == max.__timeline.__lastKeyFrame)
			{
			}
		} 
*/	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function hitTest(wx:Number, wy:Number) :Boolean
	{		
		return ((((wx - __vTOP_LEFT.X) * (__vTOP_RIGHT.Y - __vTOP_LEFT.Y) - (__vTOP_RIGHT.X - __vTOP_LEFT.X) * (wy - __vTOP_LEFT.Y)) * ((wx - __vBOTTOM_RIGHT.X) * (__vBOTTOM_LEFT.Y - __vBOTTOM_RIGHT.Y) - (__vBOTTOM_LEFT.X - __vBOTTOM_RIGHT.X) * (wy - __vBOTTOM_RIGHT.Y))) > 0
		&& (((wx - __vTOP_RIGHT.X) * (__vBOTTOM_RIGHT.Y - __vTOP_RIGHT.Y) - (__vBOTTOM_RIGHT.X - __vTOP_RIGHT.X) * (wy - __vTOP_RIGHT.Y)) * ((wx - __vBOTTOM_LEFT.X) * (__vTOP_LEFT.Y - __vBOTTOM_LEFT.Y) - (__vTOP_LEFT.X - __vBOTTOM_LEFT.X) * (wy - __vBOTTOM_LEFT.Y))) > 0);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function initBoundingBoxFromTexture(scene:CocoScene, W2:Number, H2:Number)
	{    
	    // Reset vectors
	    __vTOP_LEFT.set(-W2, -H2, 0, 1);	    
	    __vTOP_RIGHT.set(W2, -H2, 0, 1);
	    __vBOTTOM_LEFT.set(-W2, H2, 0, 1);
	    __vBOTTOM_RIGHT.set(W2, H2, 0, 1);
	    	    
	    // Multiply vectors with the current modelview matrix
	    __vTOP_LEFT 	= scene.__modelViewMatrix.multiplyByVector(__vTOP_LEFT);
	    __vTOP_RIGHT 	= scene.__modelViewMatrix.multiplyByVector(__vTOP_RIGHT);
	    __vBOTTOM_LEFT 	= scene.__modelViewMatrix.multiplyByVector(__vBOTTOM_LEFT);
	    __vBOTTOM_RIGHT = scene.__modelViewMatrix.multiplyByVector(__vBOTTOM_RIGHT);
	}	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function initBoundingBoxFromChildren(scene:CocoScene)
	{	    
	    // This function calculates the bounding box of all our children.
	        
	    var MI :CocoMatrix;
	    var Child :CocoClip
	    var Rc :CocoRect;
	    var i :Number;
	    var v1 :CocoVector;
	    var v2 :CocoVector;
		var vClip :String;		
		var v:Array;
	     
	    // Define an invalid rectangle.
	    Rc = new CocoRect();
	    Rc.left = 100000;
	    Rc.right = -100000;
	    Rc.top = 100000;
	    Rc.bottom = -100000;
	    	            
	    // Invert parent matrix.
	    MI = new CocoMatrix(scene.__modelViewMatrix);
	    MI.invert();
	            
        for(vClip in __children)
	    {	   
	        Child = (__children[vClip] || null);	        
	        if(Child)
	        {
	            // For every child, multiply the inverse parent matrix with child's
	            // vertex vectors in order to unproject child coordinates.
	            	            
	            v[0] = MI.multiplyByVector(Child.__vTOP_LEFT);
	            v[1] = MI.multiplyByVector(Child.__vTOP_RIGHT);
	            v[2] = MI.multiplyByVector(Child.__vBOTTOM_LEFT);
	            v[3] = MI.multiplyByVector(Child.__vBOTTOM_RIGHT);
	            
	            // Loop verticies to expand our bounding box from the current child.
	            for(i=0; i<4; i++)
	            {
	                if(v[i].X < Rc.left) Rc.left = v[i].X;
	                if(v[i].X > Rc.right) Rc.right = v[i].X;
	                if(v[i].Y < Rc.top) Rc.top = v[i].Y;
	                if(v[i].Y > Rc.bottom) Rc.bottom = v[i].Y;
	            }
	            
	            // Ok, combine resulting bounding box with next child...
	        }
	    }
	        	    
	    __vTOP_LEFT.X = Rc.left;
	    __vTOP_LEFT.Y = Rc.top;
	    __vTOP_RIGHT.X = Rc.right;
	    __vTOP_RIGHT.Y = Rc.top;
	    __vBOTTOM_LEFT.X = Rc.left;
	    __vBOTTOM_LEFT.Y = Rc.bottom;
	    __vBOTTOM_RIGHT.X = Rc.right;
	    __vBOTTOM_RIGHT.Y = Rc.bottom;
	        
	    // Re-multiply our bounding box vertex vectors with the rotated matrix
	    MI = scene.__modelViewMatrix;
	    __vTOP_LEFT = MI.multiplyByVector(__vTOP_LEFT);
	    __vTOP_RIGHT = MI.multiplyByVector(__vTOP_RIGHT);
	    __vBOTTOM_LEFT = MI.multiplyByVector(__vBOTTOM_LEFT);
	    __vBOTTOM_RIGHT = MI.multiplyByVector(__vBOTTOM_RIGHT);	        
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawBoundingBox(scene:CocoScene, gl:WebGLRenderingContext)
	{
		gl.disableVertexAttribArray(scene.__glProgram.GLSLiTexCoords);
		gl.disableVertexAttribArray(scene.__glProgram.GLSLiVecCoords);                         
		
		gl.useProgram(scene.__boundingBoxProgram);        
		gl.enableVertexAttribArray(scene.__boundingBoxProgram.GLSLiVec2Coords);                      
		
		gl.bindBuffer(gl.ARRAY_BUFFER, scene.__boundingBoxBuffer);
		gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([__vTOP_LEFT.X, __vTOP_LEFT.Y, __vTOP_RIGHT.X, __vTOP_RIGHT.Y, __vBOTTOM_RIGHT.X,  __vBOTTOM_RIGHT.Y, __vBOTTOM_LEFT.X,  __vBOTTOM_LEFT.Y]));			
  
  		gl.vertexAttribPointer(scene.__boundingBoxProgram.GLSLiVec2Coords, 2, gl.FLOAT, false, 0, 0);
		gl.drawArrays(gl.LINE_LOOP, 0, 4); 
		               
		gl.disableVertexAttribArray(scene.__boundingBoxProgram.GLSLiVec2Coords);
		gl.useProgram(scene.__glProgram);   
		
		gl.enableVertexAttribArray(scene.__glProgram.GLSLiTexCoords);
		gl.enableVertexAttribArray(scene.__glProgram.GLSLiVecCoords);
	}
}










