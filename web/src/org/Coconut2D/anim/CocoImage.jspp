//@compile{true}

//@include{WebGL.js}
//@include{CocoSequence.jspp}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____                         
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____ 
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/ 
//	                                          /____/       
// ==================================================================================================================================

class CocoImage
{
	public var image:HTMLImageElement			= null;
	public var symbolName:String				= "";
	public var texture:WebGLTexture				= null;
	public var textureCellWidth:Number			= 0;
	public var textureCellHeight:Number			= 0;
	public var textureGrid:Array				= [0, 0];
	public var sequences:Object					= null;
	public var color:Float32Array				= new Float32Array([1.0, 1.0, 1.0, 1.0]);
	public var texSize:Array					= [1.0, 1.0];
	public var vecSize:Array					= [0.0, 0.0];
	public var buffer:WebGLBuffer				= null;
	public var dpi:SCREEN_RESOLUTION_DPI_ENUM 	= SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
	public var skin:Object						= null;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{							
	} 
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isSpriteSheet() :Boolean
	{
		return textureCellWidth>0 && textureCellHeight>0 && this.sequences != null; 
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createFromFile(filename:String, onloadCallBack:Function)
	{	
		image = new Image();
		image.onload = onloadCallBack;
		image.src = filename;	
	}                  
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createWithText(font:CocoFont, text:String)
	{
		image = new Image();                        
		image.__width = 512;
		image.__height = 512;		
		image.__imageData = new ImageData(image.width, image.height);
		image.__imageData.__buffer.clear();
		font.fillText(image.__imageData.__buffer, image.width, text, 0, 0);
		textureCellWidth = font.measureText(text);
		textureCellHeight = font.height;		
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getDpiSiblingImage(dpi) :CocoImage
	{
		return this;
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSequence(name:String, sequence:CocoSequence)
	{
		if(sequences[name]) throw "Cannot add sequence with same name!";
		sequences[name] = sequence;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(gl:WebGLRenderingContext)
	{                   
		vecSize = [textureCellWidth / 2,  textureCellHeight / 2];
		texSize = [textureCellWidth / image.naturalWidth, textureCellHeight / image.naturalHeight];
			
		texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);	
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		gl.bindTexture(gl.TEXTURE_2D, null);
	}
	
/*	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(gl:WebGLRenderingContext, scene:CocoScene, frame:Number, alpha:Number)
	{   
		if(scene.__imageCurrentID == MAX_TEXTURES) {
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, scene.__imageIndexBuffer);
			gl.bindBuffer(gl.ARRAY_BUFFER, scene.__imageArrayBuffer);
			gl.vertexAttribPointer(glp.GLSLiD, 1, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 0);
			gl.vertexAttribPointer(glp.GLSLiAlpha, 1, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 1 * Float32Array.BYTES_PER_ELEMENT);
			gl.vertexAttribPointer(glp.GLSLiTexCoords, 2, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 2 * Float32Array.BYTES_PER_ELEMENT);
			gl.vertexAttribPointer(glp.GLSLiVecCoords, 2, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 4 * Float32Array.BYTES_PER_ELEMENT);
		    gl.drawElements(gl.TRIANGLES, MAX_TEXTURES, gl.UNSIGNED_BYTE, 0);
			scene.__imageCurrentID = 0;
		}       
		var i:Number = scene.__imageCurrentID++;
		gl.activeTexture(gl.TEXTURE0 + i);
		gl.bindTexture(gl.TEXTURE_2D, texture);
		scene.__imageArrayData[i * MAX_TEXTURES + 2] = scene.__imageArrayData[i * MAX_TEXTURES + 8] = textureGrid[frame * 2 + 1] * texSize[0];
		scene.__imageArrayData[i * MAX_TEXTURES + 14] = scene.__imageArrayData[i * MAX_TEXTURES + 20] = (textureGrid[frame * 2 + 1] + 1) * texSize[0];
		scene.__imageArrayData[i * MAX_TEXTURES + 3] = scene.__imageArrayData[i * MAX_TEXTURES + 15] = textureGrid[frame * 2] * texSize[1];
		scene.__imageArrayData[i * MAX_TEXTURES + 9] = scene.__imageArrayData[i * MAX_TEXTURES + 21] = (textureGrid[frame * 2] + 1) * texSize[1];
		scene.__imageArrayData[i * MAX_TEXTURES + 4] = -vecSize[0] * scene.__modelViewMatrix.rc11 - vecSize[1] * scene.__modelViewMatrix.rc21 + scene.__modelViewMatrix.rc41;
		scene.__imageArrayData[i * MAX_TEXTURES + 5] = -vecSize[0] * scene.__modelViewMatrix.rc12 - vecSize[1] * scene.__modelViewMatrix.rc22 + scene.__modelViewMatrix.rc42;
		scene.__imageArrayData[i * MAX_TEXTURES + 10] = -vecSize[0] * scene.__modelViewMatrix.rc11 + vecSize[1] * scene.__modelViewMatrix.rc21 + scene.__modelViewMatrix.rc41;
		scene.__imageArrayData[i * MAX_TEXTURES + 11] = -vecSize[0] * scene.__modelViewMatrix.rc12 + vecSize[1] * scene.__modelViewMatrix.rc22 + scene.__modelViewMatrix.rc42;
		scene.__imageArrayData[i * MAX_TEXTURES + 16] = vecSize[0] * scene.__modelViewMatrix.rc11 - vecSize[1] * scene.__modelViewMatrix.rc21 + scene.__modelViewMatrix.rc41;
		scene.__imageArrayData[i * MAX_TEXTURES + 17] = vecSize[0] * scene.__modelViewMatrix.rc12 - vecSize[1] * scene.__modelViewMatrix.rc22 + scene.__modelViewMatrix.rc42;
		scene.__imageArrayData[i * MAX_TEXTURES + 22] = vecSize[0] * scene.__modelViewMatrix.rc11 + vecSize[1] * scene.__modelViewMatrix.rc21 + scene.__modelViewMatrix.rc41;
		scene.__imageArrayData[i * MAX_TEXTURES + 23] = vecSize[0] * scene.__modelViewMatrix.rc12 + vecSize[1] * scene.__modelViewMatrix.rc22 + scene.__modelViewMatrix.rc42;
	} */
}












