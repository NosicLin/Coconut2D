//@compile{true}

//@include{WebGL.js}
//@include{CocoSequence.jspp}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____                         
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____ 
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/ 
//	                                          /____/       
// ==================================================================================================================================

class CocoImage
{ 
	public var image:HTMLImageElement			= null;
	public var symbolName:String				= "";

	// Texture
	public var texture:WebGLTexture				= null;
	public var textureCellWidth:Number			= 0;
	public var textureCellHeight:Number			= 0;
	public var textureGrid:Float32Array			= new Float32Array([0.0, 0.0]);
	public var color:Float32Array				= new Float32Array([1.0, 1.0, 1.0, 1.0]);
	public var texSize:Float32Array				= new Float32Array([1.0, 1.0]);
	public var buffer:WebGLBuffer				= null;
	
	// Sprite
	public var sequences:Object					= null;
	
	// Skin
	public var skin:Object						= null;	           
	
	// Resolution Siblings
	public var baseUrl:String					= null;
	public var viewOptimalWidth:Number			= 0;
	public var viewOptimalHeight:Number			= 0;
	public var viewSiblings:Array				= [];
	public var pixelRatio:Number				= 1.0;
	            
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{							
	} 
			
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isSpriteSheet() :Boolean
	{
		return textureCellWidth>0 && textureCellHeight>0 && this.sequences != null; 
	}
	
	/*			
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createWithText(font:CocoFont, text:String)
	{
		image = new Image();                        
		image.__width = 512;
		image.__height = 512;		
		image.__imageData = new ImageData(image.width, image.height);
		image.__imageData.__buffer.clear();
		font.fillText(image.__imageData.__buffer, image.width, text, 0, 0);
		textureCellWidth = font.measureText(text);
		textureCellHeight = font.height;		
	} 
	*/
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSequence(name:String, sequence:CocoSequence)
	{
		if(sequences[name]) throw "Cannot add sequence with same name!";
		sequences[name] = sequence;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(gl:WebGLRenderingContext)
	{
		// Calc texture data and size.
		var w2:Number = textureCellWidth / 2.0;
		var h2:Number = textureCellHeight / 2.0;		
		texSize = new Float32Array([textureCellWidth / image.naturalWidth, textureCellHeight / image.naturalHeight]);
		
		// Create a texture and bind it.	
		texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture);
		
		// Load image data to texture.		
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
				
		// Instruct WebGL how to wrap the texture.
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

		// Instruct WebGL how to filter the texture when rendering.
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		
		// Generate mipmaps.
		gl.generateMipmap(gl.TEXTURE_2D);		

		// Done		                                      
		gl.bindTexture(gl.TEXTURE_2D, null);  		
		  
		var texData:Float32Array = new Float32Array([0.0, 0.0, -w2, -h2, 0.0, 1.0, -w2, h2, 1.0, 0.0, w2, -h2, 1.0, 1.0, w2, h2]);
		buffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
		gl.bufferData(gl.ARRAY_BUFFER, texData, gl.STATIC_DRAW);
		gl.bindBuffer(gl.ARRAY_BUFFER, null);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function dispose()
	{
		gl.deleteTexture(texture);
	}
}

























