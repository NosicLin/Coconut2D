//@compile{true}
//@include{WebGL.js}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 ____                         
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____ 
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/ 
//	                                          /____/       
// ==================================================================================================================================

class CocoImage
{
	public var image:HTMLImageElement			= null;
	public var symbolName:String				= "";
	public var texture:WebGLTexture				= null;
	public var textureCellWidth:Number			= 0;
	public var textureCellHeight:Number			= 0;
	public var textureGrid:Float32Array			= new Float32Array([0, 0]);
	public var sequences:Object					= null;
	public var color:Float32Array				= new Float32Array([1.0, 1.0, 1.0, 1.0]);
	public var texSize:Float32Array				= new Float32Array([1.0, 1.0]);
	public var texData:Float32Array				= null;
	public var buffer:WebGLBuffer				= null;
	public var dpi:SCREEN_RESOLUTION_DPI_ENUM 	= SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
	public var skin:Object						= null;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{							
	} 
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isSpriteSheet() :Boolean
	{
		return textureCellWidth>0 && textureCellHeight>0 && this.sequences != null; 
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createFromFile(filename:String, onloadCallBack:Function)
	{	
		image = new Image();
		image.onload = onloadCallBack;
		image.src = filename;	
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getDpiSiblingImage(dpi) :CocoImage
	{
		return this;
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSequence(name:String, sequence:CocoSequence)
	{
		if(sequences[name]) throw "Cannot add sequence with same name!";
		sequences[name] = sequence;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(gl:WebGLRenderingContext)
	{
		var w2:Number = textureCellWidth / 2;
		var h2:Number = textureCellHeight / 2;
		
		texData = new Float32Array([ 0.0, 0.0, -w2, -h2, 0.0, 1.0, -w2, h2, 1.0, 0.0, w2, -h2, 1.0, 1.0, w2, h2 ]);
		texSize = new Float32Array([textureCellWidth / image.naturalWidth, textureCellHeight / image.naturalHeight]);
			
		texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		gl.bindTexture(gl.TEXTURE_2D, null);
		
		buffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
		gl.bufferData(gl.ARRAY_BUFFER, texData, gl.STATIC_DRAW);
		gl.bindBuffer(gl.ARRAY_BUFFER, null);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(gl:WebGLRenderingContext, glp:WebGLProgram, frame:Number, alpha:Number)
	{                                       
		color[3] = alpha;
		gl.uniform2fv(glp.GLSLuSprSize, texSize);
		gl.uniform2f(glp.GLSLuSprFrame, textureGrid[frame * 2 + 1], textureGrid[frame * 2]);
		gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
		gl.vertexAttribPointer(glp.GLSLiTexCoords, 2, gl.FLOAT, false, 4 * Float32Array.BYTES_PER_ELEMENT, 0);
		gl.vertexAttribPointer(glp.GLSLiVecCoords, 2, gl.FLOAT, false, 4 * Float32Array.BYTES_PER_ELEMENT, 2 * Float32Array.BYTES_PER_ELEMENT);
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.uniform1i(glp.GLSLuSampler, 0);
		gl.uniform4fv(glp.GLSLuColor, color);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
	}
}






