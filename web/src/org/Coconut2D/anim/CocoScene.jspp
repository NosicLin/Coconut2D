//@compile{true} 

//@include{CocoClip.jspp}
//@include{WebGL.js}
//@include{glu.js}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____                    
//	  / ____/___  _________ / ___/________  ____  ___ 
//	 / /   / __ \/ ___/ __ \\__ \/ ___/ _ \/ __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ / /__/  __/ / / /  __/
//	\____/\____/\___/\____/____/\___/\___/_/ /_/\___/ 
//	                                                  
// ==================================================================================================================================
  
class CocoScene
{
	// Resources 
	public var __sceneName:String 					= "";   	
	public var __imageSymbols:Object 				= {};   	
	public var __soundSymbols:Object 				= {};   	
	public var __clipSymbols:Object 				= {}; 
	                                            	
	// Fixed View Port  	                    	
	public var __view_width:Number					= 0;
	public var __view_height:Number					= 0;
	public var __view_pixel_ratio:Number			= 0;	
	public var __view_scale:Number					= 1;
                                                	
	// Rendering                                	
	public var __currentTime:Number 				= 0.0;  	
	public var __elapsedTime:Number 				= 0.0;  	
	public var __startTime:Number 					= -1;   	
	public var __root:CocoClip 						= null;
	public var __modelViewMatrix:CocoMatrix			= null;
	public var __projectionMatrix:CocoMatrix 		= null;
	public var __glProgram:WebGLProgram				= null;
	public var __levelParents:Array					= [];
	                                            	
	public var __vertex_shader:String				= "attribute vec2 iVecCoords;attribute vec2 iTexCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec2 uSprSize;uniform vec2 uSprFrame;varying vec2 pTexCoord;void main(void){ gl_Position = uProjMat * uMVMat * vec4(iVecCoords, 0.0, 1.0); pTexCoord = vec2(((iTexCoords.x + uSprFrame.x) * uSprSize.x), ((iTexCoords.y + uSprFrame.y) * uSprSize.y));}";
	public var __fragment_shader:String				= "#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;uniform vec4 uColor;varying vec2 pTexCoord;void main(void){ gl_FragColor = vec4(texture2D(uSampler, pTexCoord).r * uColor.r, texture2D(uSampler, pTexCoord).g * uColor.g, texture2D(uSampler, pTexCoord).b * uColor.b, texture2D(uSampler, pTexCoord).a * uColor.a);}";
	
	public var __boundingBoxVertexShader:String 	= "attribute vec2 iVec2Coords;uniform mat4 uProjMat;void main(void) { gl_Position = uProjMat * vec4(iVec2Coords, 0.0, 1.0);}";
	public var __boundingBoxFragmentShader:String	= "#ifdef GL_ES\nprecision mediump float;\n#endif\nvoid main(void) { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);}";
	public var __boundingBoxProgram:WebGLProgram	= null;
	public var __boundingBoxBuffer:WebGLBuffer		= null;
	
	public var __glPayload:Array = [];
	public var __ready:Boolean						= false;
	
	private var __last_UNIFORM:Array				= [];

			            
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(sceneName:String)
	{ 
		__sceneName	= sceneName;
		__root 		= new CocoClip();
	}
				
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getImageSymbol(symbolName:String) :CocoImage
	{
	    return __imageSymbols[symbolName];
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSoundSymbol(symbolName:String) :CocoSound
	{
		return __soundSymbols[symbolName] || null;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getClipSymbol(symbolName:String) :CocoClip
	{
		return __clipSymbols[symbolName] || null;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function newResourceImage(symbolName:String, baseUrl:String) :CocoImage
	{
	    if(__imageSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
		var img:CocoImage = new CocoImage();		
		img.symbolName = symbolName;	
		img.baseUrl = baseUrl;
		__imageSymbols[symbolName] = img;
		return img;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function newResourceSound(symbolName:String, filename:String) :CocoSound
	{
	    if(__soundSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";	    	
	    var snd:CocoSound = new CocoSound();
	    snd.symbolName = symbolName;	    
	    snd.createFromFile(filename, null); 
	    __soundSymbols[symbolName] = snd;
	    return snd;
	}
				
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function prepare(gl:WebGLRenderingContext)
	{                                                                         		                    
		// Disable depth testing since we render using scene's clips order.		                    
		gl.disable(gl.DEPTH_TEST);
		
		// Enable alpha blending.
		gl.enable(gl.BLEND);     
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		
		// Disable culling.
		gl.disable(gl.CULL_FACE);
		
		__boundingBoxProgram = glu.makeProgram(gl, __boundingBoxVertexShader, __boundingBoxFragmentShader); 
		
		gl.useProgram(__boundingBoxProgram);
		__boundingBoxProgram.GLSLiVec2Coords	= gl.getAttribLocation(__boundingBoxProgram, "iVec2Coords");
		__boundingBoxProgram.GLSLuProjMat		= gl.getUniformLocation(__boundingBoxProgram, "uProjMat");
		__boundingBoxBuffer	= gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, __boundingBoxBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), gl.DYNAMIC_DRAW);
		
		__glProgram = glu.makeProgram(gl, __vertex_shader, __fragment_shader);
		
		gl.useProgram(__glProgram);
		
		__glProgram.GLSLiVecCoords 	= gl.getAttribLocation(__glProgram, "iVecCoords");
		__glProgram.GLSLiTexCoords 	= gl.getAttribLocation(__glProgram, "iTexCoords");
		__glProgram.GLSLuProjMat 	= gl.getUniformLocation(__glProgram, "uProjMat");
		__glProgram.GLSLuMVMat 		= gl.getUniformLocation(__glProgram, "uMVMat");
		__glProgram.GLSLuSprSize 	= gl.getUniformLocation(__glProgram, "uSprSize");
		__glProgram.GLSLuSprFrame 	= gl.getUniformLocation(__glProgram, "uSprFrame");
		__glProgram.GLSLuSampler 	= gl.getUniformLocation(__glProgram, "uSampler");
		__glProgram.GLSLuColor 		= gl.getUniformLocation(__glProgram, "uColor");
	
		__modelViewMatrix = new CocoMatrix();
		__modelViewMatrix.update(gl, __glProgram.GLSLuMVMat);
			
		// If we have a fixed view, we scale to it, otherwise we use device pixel ratio.
		__view_scale = this.__view_width>0 && this.__view_height>0 ? Math.min(gl.canvas.width / this.__view_width, gl.canvas.height / this.__view_height) : window.devicePixelRatio;
		
		__projectionMatrix = new CocoMatrix();
		__projectionMatrix.ortho(-gl.canvas.width / 2.0, gl.canvas.width / 2.0, gl.canvas.height / 2.0, -gl.canvas.height / 2.0, -1.0, 1.0);				
		
		if(window.deviceRotation) __projectionMatrix.rotateZ(-window.deviceRotation);
		
		__projectionMatrix.scale(__view_scale, __view_scale);
		__projectionMatrix.update(gl, __glProgram.GLSLuProjMat);
					
		gl.enableVertexAttribArray(__glProgram.GLSLiTexCoords);
		gl.enableVertexAttribArray(__glProgram.GLSLiVecCoords);				
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function loadResources()
	{
		var t:String;		
		var img:CocoImage;
		var sibling:Object; 
		
		
		// Load images depending on screen resolution and available image sizes.
	    for(t in __imageSymbols)    	    
	    { 
	    	img = __imageSymbols[t];
	    	
			if(__view_width && __view_height)
			{				
				var w:Number = img.viewOptimalWidth * __view_scale * window.devicePixelRatio;
				var h:Number = img.viewOptimalHeight * __view_scale * window.devicePixelRatio;
				var i:Number;
				for(i=0;i<img.viewSiblings.length; i++)
				{ 
					sibling = img.viewSiblings[i];
					if(sibling.textureWidth>=w && sibling.textureHeight>=h)
					{
						img.image = new Image();
						img.image.src = img.baseUrl + sibling.url;
						img.textureCellWidth = sibling.textureWidth;
						img.textureCellHeight = sibling.textureHeight;
						img.pixelRatio = sibling.pixelRatio;
						break; 
					}
				}			
			}
			if(!img.image)
			{  
				sibling = img.viewSiblings[img.viewSiblings.length-1];
				img.image = new Image();
				img.image.src = img.baseUrl + sibling.url;
				img.textureCellWidth = sibling.textureWidth; 
				img.textureCellHeight = sibling.textureHeight;
				img.pixelRatio = sibling.pixelRatio;				
			}
			
			if(img.image)
			{
				//trace("Loaded image: " + img.image.src);
			}
	    }
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function resourcesLoaded(gl:WebGLRenderingContext)
	{
		if(!__ready)
		{
			var t:String;
			var img:CocoImage;
			
		    for(t in __imageSymbols)    
		    {
		    	img = __imageSymbols[t];
		    	if(!img.image.width || !img.image.height)
		    	{
		    		return false;
		    	}  
		    	else if(!img.texture)
		    	{
		    		img.prepare(gl);		    				    	
		    	}
		    }
		} 
		
	    return (__ready = true);	    
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function tick(gl:WebGLRenderingContext, time:Number)
	{        
		if(!__glProgram)
		{			
			prepare(gl);
			loadResources(this);
			return;
		}
		
		if(!resourcesLoaded(gl))
			return;
			
		gl.clearColor(1.0, 1.0, 1.0, 1.0);
		gl.clear(gl.COLOR_BUFFER_BIT);

		__modelViewMatrix.identity();
		if(__startTime == -1) __startTime = time;
	    __elapsedTime = time - __currentTime - __startTime;
	    __currentTime = time - __startTime;
		
	    if(__root)    
	    {     
	    	// Render the scene's root symbol
	    	__levelParents = [__root];
	    	{
				// Offscreen rendering
				if(global.__Coconut2DPlayer)
				{
                	__glPayload = [];
					__root.render(gl, this, null, false);	                
                	gl.execute(__glPayload);
				}
				else
				{
					__root.render(gl, this, null, false);	
				} 
	    	}				
			__levelParents = [];
			
			// Did we reach the end of the main timeline?
			var max:CocoClip = __root.__childWithMaxTimelineDuration;
			if(max && max.__currentFrame == max.__timeline.__lastKeyFrame)
			{ 
				//__root.reset();			
				//__startTime = -1;	
			} 
	    }	    
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(gl:WebGLRenderingContext, image:CocoImage, frame:Number, alpha:Number)
	{
		image.color[3] = alpha;		
		
		//__modelViewMatrix.push();
		//__modelViewMatrix.scale(this.__view_pixel_ratio / image.pixelRatio, this.__view_pixel_ratio / image.pixelRatio);
		
		if(global.__Coconut2DPlayer)
		{
			var M = __modelViewMatrix; 
			__addPayload([COCO_WEBGL_PAYLOAD_OP.UNIFORMMATRIX4FV, __glProgram.GLSLuMVMat.__uid, false, M.rc11, M.rc12, M.rc13, M.rc14, M.rc21, M.rc22, M.rc23, M.rc24, M.rc31, M.rc32, M.rc33, M.rc34, M.rc41, M.rc42, M.rc43, M.rc44]);
			__addPayload([COCO_WEBGL_PAYLOAD_OP.UNIFORM2F, __glProgram.GLSLuSprSize.__uid, image.texSize[0], image.texSize[1]]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.UNIFORM2F, __glProgram.GLSLuSprFrame.__uid, image.textureGrid[frame * 2 + 1], image.textureGrid[frame * 2]]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.BINDBUFFER, gl.ARRAY_BUFFER, image.buffer.__uid]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.VERTEXATTRIBPOINTER, __glProgram.GLSLiTexCoords, 2, gl.FLOAT, false, 16, 0]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.VERTEXATTRIBPOINTER, __glProgram.GLSLiVecCoords, 2, gl.FLOAT, false, 16, 8]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.BINDTEXTURE, gl.TEXTURE_2D, image.texture.__uid]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.UNIFORM1I, __glProgram.GLSLuSampler.__uid, 0]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.UNIFORM4F, __glProgram.GLSLuColor.__uid, image.color[0], image.color[1], image.color[2], image.color[3]]);
	        __addPayload([COCO_WEBGL_PAYLOAD_OP.DRAWARRAYS, gl.TRIANGLE_STRIP, 0, 4]);	        
		}
		else
		{
			__modelViewMatrix.update(gl, __glProgram.GLSLuMVMat); 			  		
			gl.uniform2fv(__glProgram.GLSLuSprSize, image.texSize);
			gl.uniform2f(__glProgram.GLSLuSprFrame, image.textureGrid[frame * 2 + 1], image.textureGrid[frame * 2]);                
			gl.bindBuffer(gl.ARRAY_BUFFER, image.buffer);                
			gl.vertexAttribPointer(__glProgram.GLSLiTexCoords, 2, gl.FLOAT, false, 16, 0);			
			gl.vertexAttribPointer(__glProgram.GLSLiVecCoords, 2, gl.FLOAT, false, 16, 8);
			gl.bindTexture(gl.TEXTURE_2D, image.texture);                
			gl.uniform1i(__glProgram.GLSLuSampler, 0);                
			gl.uniform4fv(__glProgram.GLSLuColor, image.color);
			gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);                 
			gl.bindBuffer(gl.ARRAY_BUFFER, null); 			
			
		} 
		
		//__modelViewMatrix.pop();
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function __addPayload(v:Array)
	{      
		var s:String;
		var op:COCO_WEBGL_PAYLOAD_OP = v[0];
		
		switch(op)
		{
		case COCO_WEBGL_PAYLOAD_OP.UNIFORMMATRIX4FV, 
			 COCO_WEBGL_PAYLOAD_OP.UNIFORM2F, 
			 COCO_WEBGL_PAYLOAD_OP.UNIFORM1I, 
			 COCO_WEBGL_PAYLOAD_OP.UNIFORM4F:
            
			s = v.join("|"); 
			if(s!=__last_UNIFORM[op])
			{     
				__glPayload = __glPayload.concat(v);
				__last_UNIFORM[op] = s;						
			}
			break;		          
			
		default:
			__glPayload = __glPayload.concat(v);
			break;
		}  
	}
			
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function hitTest(MouseX:Number, MouseY:Number) :Array
	{
		
	}
			
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndPlay(LabelNameOrFrameIndex:Object, deep:Boolean) :Boolean
	{  
		var scope:CocoClip = __levelParents[__levelParents.length-1];
		return scope.gotoFrame(LabelNameOrFrameIndex, false, deep);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function gotoAndStop(LabelNameOrFrameIndex:Object, deep:Boolean) :Boolean
	{  	 
		var scope:CocoClip = __levelParents[__levelParents.length-1];
		return scope.gotoFrame(LabelNameOrFrameIndex, true, deep);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stop(deep:Boolean) :Boolean
	{
		deep = (deep=="true");
		var scope:CocoClip = __levelParents[__levelParents.length-1];		
		return scope.gotoFrame(-1, true, deep);
	}	
}









