//@compile{true}
//@include{CocoImage.jspp,CocoClip.jspp,CocoSound.jspp,WebGL.js,glu.js}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                _____                    
//	  / ____/___  _________ / ___/________  ____  ___ 
//	 / /   / __ \/ ___/ __ \\__ \/ ___/ _ \/ __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ / /__/  __/ / / /  __/
//	\____/\____/\___/\____/____/\___/\___/_/ /_/\___/ 
//	                                                  
// ==================================================================================================================================
  
class CocoScene
{
	// Resources 
	public var __sceneName:String 				= "";   	
	public var __imageSymbols:Object 			= {};   	
	public var __soundSymbols:Object 			= {};   	
	public var __clipSymbols:Object 			= {}; 
	
	// Fixed View Port  	
	public var __view_width:Number				= 0;
	public var __view_height:Number				= 0;
	public var __view_pixel_ratio:Number		= 0;	

	// Rendering
	public var __currentTime:Number 			= 0.0;  	
	public var __elapsedTime:Number 			= 0.0;  	
	public var __startTime:Number 				= -1;   	
	public var __root:CocoClip 					= null;
	public var __modelViewMatrix:CocoMatrix		= null;
	public var __projectionMatrix:CocoMatrix 	= null;
	public var __glProgram:WebGLProgram			= null;
	
	public var __vertex_shader:String			= "attribute vec2 iVecCoords;attribute vec2 iTexCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec2 uSprSize;uniform vec2 uSprFrame;varying vec2 pTexCoord;void main(void){ gl_Position = uProjMat * uMVMat * vec4(iVecCoords, 0.0, 1.0); pTexCoord = vec2(((iTexCoords.x + uSprFrame.x) * uSprSize.x), ((iTexCoords.y + uSprFrame.y) * uSprSize.y));}";
	public var __fragment_shader:String			= "precision mediump float; uniform sampler2D uSampler;uniform vec4 uColor;varying vec2 pTexCoord;void main(void){ gl_FragColor = vec4(texture2D(uSampler, pTexCoord).r * uColor.r, texture2D(uSampler, pTexCoord).g * uColor.g, texture2D(uSampler, pTexCoord).b * uColor.b, texture2D(uSampler, pTexCoord).a * uColor.a);}";
	
	            
	//public var onload = null;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(sceneName:String)
	{ 
		__sceneName			= sceneName;
		__root 				= new CocoClip();
		__modelViewMatrix 	= new CocoMatrix();
		__projectionMatrix 	= new CocoMatrix();		
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepared() :Boolean		
	{  
		return __glProgram!=null; 
	}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function updateModelViewMatrix(gl:WebGLRenderingContext) 
	{
		__modelViewMatrix.update(gl, __glProgram.GLSLuMVMat); 
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function updateProjectionMatrix(gl:WebGLRenderingContext) 
	{
		__projectionMatrix.update(gl, __glProgram.GLSLuProjMat); 
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function resourceImagesCount() :Number
	{
		var t:String, c:Number = 0;
	    for(t in __imageSymbols) 
			if(__imageSymbols[t])
				c++;
	    return c;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function resourceImagesLoaded() :Boolean
	{
	    var t:String, img:CocoImage;	    
	    for(t in __imageSymbols) 
	    {
	    	img = __imageSymbols[t].image;
	    	if(!img.width || !img.height) 
	    		return false;
	    }
	    return true;
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getImageSymbol(symbolName:String) :CocoImage
	{
	    var img:CocoImage = __imageSymbols[symbolName];
	    if(img) 
	    {
	        var dpi:SCREEN_RESOLUTION_DPI_ENUM = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_nodpi;
	        switch(window.devicePixelRatio)
	        {
	        case 0.75: dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_ldpi; break;
	        case 1.00: dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi; break;
	        case 1.25: dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_tvdpi; break;
	        case 1.50: dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_hdpi; break;
	        case 2.00: dpi = SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi; break;
	        default: return img;
	        }
	        return img.getDpiSiblingImage(dpi);
	    }
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSoundSymbol(symbolName:String) :CocoSound
	{
		return __soundSymbols[symbolName] || null;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getClipSymbol(symbolName:String) :CocoClip
	{
		return __clipSymbols[symbolName] || null;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function newResourceImage(symbolName:String, filename:String) :CocoImage
	{
	    if(__imageSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";
		var img:CocoImage = new CocoImage();
		img.symbolName = symbolName;
		img.createFromFile(filename, null);		
		__imageSymbols[symbolName] = img;
		return img;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function newResourceSound(symbolName:String, filename:String) :CocoSound
	{
	    if(__soundSymbols[symbolName]) throw "Resource " + symbolName + " already exists.";	    	
	    var snd:CocoSound = new CocoSound();
	    snd.symbolName = symbolName;	    
	    snd.createFromFile(filename, null); 
	    __soundSymbols[symbolName] = snd;
	    return snd;
	}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(gl:WebGLRenderingContext)
	{ 
		__glProgram = glu.makeProgram(gl, __vertex_shader, __fragment_shader);
		
		gl.useProgram(__glProgram);
		
		__glProgram.GLSLiVecCoords 	= gl.getAttribLocation(__glProgram, "iVecCoords");
		__glProgram.GLSLiTexCoords 	= gl.getAttribLocation(__glProgram, "iTexCoords");
		__glProgram.GLSLuProjMat 	= gl.getUniformLocation(__glProgram, "uProjMat");
		__glProgram.GLSLuMVMat 		= gl.getUniformLocation(__glProgram, "uMVMat");
		__glProgram.GLSLuSprSize 	= gl.getUniformLocation(__glProgram, "uSprSize");
		__glProgram.GLSLuSprFrame 	= gl.getUniformLocation(__glProgram, "uSprFrame");
		__glProgram.GLSLuSampler 	= gl.getUniformLocation(__glProgram, "uSampler");
		__glProgram.GLSLuColor 		= gl.getUniformLocation(__glProgram, "uColor");
		
		__modelViewMatrix = new CocoMatrix();
		__modelViewMatrix.update(gl, __glProgram.GLSLuMVMat);
		
		__projectionMatrix = new CocoMatrix();
		__projectionMatrix.ortho(0.0, gl.canvas.width, gl.canvas.height, 0.0, -1.0, 1.0);
		//__projectionMatrix.ortho(0.0, 480, 320, 0.0, -1.0, 1.0);
		__projectionMatrix.scale(window.devicePixelRatio, window.devicePixelRatio);
		__projectionMatrix.update(gl, __glProgram.GLSLuProjMat);
			
		var t:String;
	    for(t in __imageSymbols) 
	    	__imageSymbols[t].prepare(gl);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function tick(gl:WebGLRenderingContext, time:Number)
	{
		render(gl, time);		
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function render(gl:WebGLRenderingContext, time:Number)
	{
		beginDraw(gl);
		
		__modelViewMatrix.identity();
		if(__startTime == -1) __startTime = time;
	    __elapsedTime = time - __currentTime - __startTime;
	    __currentTime = time - __startTime;
	    
	    if(__root) 
			__root.render(gl, this, null);
	    	
	    endDraw(gl);
	}
	
	public function beginDraw(gl:WebGLRenderingContext)
	{
		gl.useProgram(__glProgram);
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		gl.enableVertexAttribArray(__glProgram.GLSLiTexCoords);
		gl.enableVertexAttribArray(__glProgram.GLSLiVecCoords);
	}
	
	public function endDraw(gl:WebGLRenderingContext)
	{
		gl.disableVertexAttribArray(__glProgram.GLSLiTexCoords);
		gl.disableVertexAttribArray(__glProgram.GLSLiVecCoords);
		gl.disable(gl.BLEND);
	}
}  








