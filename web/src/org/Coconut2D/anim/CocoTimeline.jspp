//@compile{true}              

//@include{CocoKeyFrame.jspp}
//@include{CocoTimeLabel.jspp}

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______               _______                ___          
//	  / ____/___  _________/_  __(_)___ ___  ___  / (_)___  ___ 
//	 / /   / __ \/ ___/ __ \/ / / / __ `__ \/ _ \/ / / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / / / / / / / / /  __/ / / / / /  __/
//	\____/\____/\___/\____/_/ /_/_/ /_/ /_/\___/_/_/_/ /_/\___/ 
//	                                                            
// ==================================================================================================================================

class CocoTimeline
{ 
	public var __labels:CocoTimeLabel			= {};
	public var __keyFramesCount:Number 			= 0;
	public var __keyFrames:CocoKeyFrame			= {};
	public var __firstKeyFrame:CocoKeyFrame		= null;
	public var __lastKeyFrame:CocoKeyFrame		= null;
	public var __singleFrameDurationTime:Number	= 0;
	public var __durationInTime:Number			= 0;
	public var __durationInFrames:Number		= 0;
	public var __firstframeIndex:Number			= 0;
	public var __lastframeIndex:Number			= 0;
	
	public var __skipTime:Number				= 0;	
	public var __paused:Boolean					= false;
	public var __lastFrame:CocoKeyFrame			= null;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{ 
		addKeyFrameEx(null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN, false, true, 0, 0, 1, 1, 0, 0, 0, 1);	
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __enumerate(fn:Function)
	{	                        
		if(!fn) return false;
		var KeyFrame:CocoKeyFrame = this.__firstKeyFrame;		
		while(KeyFrame)
		{
			if(fn(KeyFrame)===false)
				return false;
			KeyFrame = KeyFrame.nextKeyFrame;
		}
		return true;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clear()
	{
		reset();
	    __keyFrames = null;
	    __keyFrames = {};
	    __keyFramesCount = 0;
	    __labels = {};
	    normalizetimeline();
	}   
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
	    __skipTime = 0;
	    __paused = false;
	    __lastFrame = null;
        __enumerate( function(f) { f.reset(); } );
	}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addLabel(Label:CocoTimeLabel) :CocoTimeLabel
	{
		if(!Label) return null;
	    __labels[""+Label.frameIndex] = Label;	    
	    return Label;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addLabelEx(FrameIndex:Number, LabelName:String) :CocoTimeLabel
	{
		var Label:CocoTimeLabel = new CocoTimeLabel(FrameIndex, LabelName);
	    return addLabel(Label);	    
	}  
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findLabelByName(LabelName:String) :CocoTimeLabel
	{
		var Label:CocoTimeLabel;		
		var key:String;
		for(key in __labels)
		{
			Label = __labels[key];
			if(Label.name == LabelName)
				return Label;
		}
		return null;
	}	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function keyFrame(frameIndex:Number) :CocoKeyFrame
	{		
		return (__keyFrames[""+frameIndex] || null);    
	}	

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrame(KeyFrame:CocoKeyFrame) :CocoKeyFrame
	{
		if(!KeyFrame) return null;
	    KeyFrame.frameIndex = Math.floor(KeyFrame.frameIndex);
	    __keyFrames[""+KeyFrame.frameIndex] = KeyFrame;
	    normalizetimeline();
	    return KeyFrame;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrameEx(actionCallback:Function,
								  frameIndex:Number, 
								  frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM, 
								  handleEvents:Boolean, 
								  visible:Boolean, 
								  x:Number, 
								  y:Number,
								  scaleX:Number,
								  scaleY:Number,
								  rotation:Number,
								  pivotX:Number,
								  pivotY:Number,
								  alpha:Number) :CocoKeyFrame
	{    
	    var KeyFrame:CocoKeyFrame = new CocoKeyFrame();
	            
	    KeyFrame.action				= actionCallback;        
	    KeyFrame.frameIndex 		= frameIndex;
	    KeyFrame.frameInterpolation = frameInterpolation;
	    KeyFrame.handleEvents 		= handleEvents;
	    KeyFrame.visible 			= visible;
	    KeyFrame.x 					= x;
	    KeyFrame.y 					= y;
	    KeyFrame.scaleX				= scaleX;
	    KeyFrame.scaleY				= scaleY;
	    KeyFrame.rotation 			= rotation;
	    KeyFrame.pivotX 			= pivotX;
	    KeyFrame.pivotY 			= pivotY;
	    KeyFrame.alpha 				= alpha;
	    
	    return addKeyFrame(KeyFrame);    
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function insertKeyFrame(frameIndex:Number) :CocoKeyFrame
	{
	    frameIndex = Math.floor(frameIndex);	       
	    var key:String = frameIndex.toString();
	    var KeyFrame:CocoKeyFrame = (__keyFrames[key] || interpolateByFrame(frameIndex));
	    return addKeyFrame(KeyFrame);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteKeyFrame(KeyFrame:CocoKeyFrame)
	{
		if(!KeyFrame) return;    
	    __keyFrames[""+KeyFrame.frameIndex] = null;
		normalizetimeline();
	}
			
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function normalizetimeline()
	{		   
	    var KeyFrame:CocoKeyFrame;
	    var p:CocoKeyFrame;
	    var v:String;
	    var vArr:Array;
	    var f:CocoKeyFrame;
	    var i:Number;
	    var L:Number=0;  
	                     
		reset();	                     
	                     
	    __durationInFrames = 0;
	    __durationInTime = 0;
	    __singleFrameDurationTime = 0;
	    __firstframeIndex = 0;
	    __lastframeIndex = 0;
	    __firstKeyFrame = null;
	    __lastKeyFrame = null;
	    __keyFramesCount = 0;
	    
	    // Count KeyFrames
	    for(v in __keyFrames)
	    	__keyFramesCount++;
	    
	    if(__keyFramesCount) 
	    { 	    		
	        // Sort KeyFrames
	        if(__keyFramesCount > 1) 
	        {	
		    	for(v in __keyFrames)
		       		vArr.push(__keyFrames[v]);

	            __keyFrames = {};
	            for(i=0;i<vArr.length;i++)
	            {
	            	f = vArr[i];
	                if(f.frameIndex > L) 
	                    L = f.frameIndex;
	            }
	
	            var arr:Array = new Array(L);
	            for(i = 0; i < vArr.length; i++) 
	                arr[vArr[i].frameIndex] = i + 1;
	
	            for(i=0; i<arr.length; i++) 
	            {
	                if(arr[i]>0) 
	                {
	                    KeyFrame = vArr[arr[i] - 1];
				    	if(p)
				    	{
				    		KeyFrame.prevKeyFrame=p;				    	
				    		p.nextKeyFrame = KeyFrame;
				    	}				    	
	                    __keyFrames[""+KeyFrame.frameIndex] = KeyFrame;
	                    p = KeyFrame;
	                }
	            }
	            p=null;
	        }
	        
	    	// Get first and last KeyFrames
	    	for(v in __keyFrames)
	    		if(!__firstKeyFrame)
	    			__firstKeyFrame = __keyFrames[v];	    		    		
	    	__lastKeyFrame = __keyFrames[v];
	        
            // Set keyframes double linked list
            if(__keyFramesCount==1) 
	        {
				__firstKeyFrame.nextKeyFrame = __lastKeyFrame;	        	
				__lastKeyFrame.prevKeyFrame = __firstKeyFrame;
	        }	                
		    __firstKeyFrame.prevKeyFrame = null; 
		    __lastKeyFrame.nextKeyFrame = null;

	        // Calc expensive time/index variables                        
	        if(__lastKeyFrame)
	        {
		        __lastframeIndex = __lastKeyFrame.frameIndex;
		        __durationInFrames = __lastKeyFrame.frameIndex + 1;
		        __durationInTime = (__durationInFrames / GLOBAL_FPS) * 1000.0;		        
		        __singleFrameDurationTime = __durationInTime / __durationInFrames;
		        __firstframeIndex = listIndexOfKeyFrame(__firstKeyFrame);
	        }	        
	    }
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function listIndexOfKeyFrame(KeyFrame:CocoKeyFrame) :Number
	{
		var v:String, index:Number = -1;
		for(v in __keyFrames) 
		{
			index++;
			if(__keyFrames[v] === KeyFrame) 
			return index;
		}
		return -1;
	}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function frameIndexToLoopTime(frameIndex:Number) :Number
	{
		return frameIndex * __singleFrameDurationTime;
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function jumpBy(frames:Number, paused:Boolean)
	{
		__paused = paused;	
		if(frames!=0)
		{
			__skipTime += (frames * __singleFrameDurationTime);	
			__lastFrame = null;		
		}
	}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameBeforeframeIndex(frameIndex:Number, inclusive:Boolean, excludeListIndex:Number) :CocoKeyFrame
	{
		var KeyFrame:CocoKeyFrame = this.keyFrame(frameIndex) || this.__lastKeyFrame;
		if(KeyFrame)
		{
			if(inclusive && KeyFrame.frameIndex == frameIndex) return KeyFrame;				
			for(;KeyFrame!=null;KeyFrame=KeyFrame.prevKeyFrame)
			{
				if(excludeListIndex!=null && excludeListIndex==KeyFrame.frameIndex) continue;			
				if(KeyFrame.frameIndex<frameIndex) return KeyFrame;
			}  
		}
		return null;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameAfterframeIndex(frameIndex:Number, inclusive:Boolean, excludeListIndex:Number) :CocoKeyFrame
	{               
		var KeyFrame:CocoKeyFrame = this.keyFrame(frameIndex) || this.__firstKeyFrame;
		if(KeyFrame)
		{
			if(inclusive && KeyFrame.frameIndex == frameIndex) return KeyFrame;				
			for(;KeyFrame!=null;KeyFrame=KeyFrame.nextKeyFrame)
			{
				if(excludeListIndex!=null && excludeListIndex==KeyFrame.frameIndex) continue;			
				if(KeyFrame.frameIndex>frameIndex) return KeyFrame;
			}  
		}
		return null;
	}
				
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolateByTime(LoopTime:Number) :CocoKeyFrame
	{
	    var T:Number = (LoopTime / __singleFrameDurationTime);
	    return interpolateByFrame(T);
	}     
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolateByFrame(frameIndex:Number) :CocoKeyFrame
	{              
		if(__paused && __lastFrame) 
			return __lastFrame;
			
	    var F:CocoKeyFrame = null;
	    var F1:CocoKeyFrame = null;
	    var F2:CocoKeyFrame = null;
	    var s:Number = 1.0;
	    var FrameIndex = Math.floor(frameIndex);	    
	    
	    // Timeline is empty?
	    if(!__keyFramesCount) 
	    {
	        F = new CocoKeyFrame();
	        F.frameIndex = FrameIndex;
	        F.visible = false;
	        return __lastFrame = F;
	    }
	        
	    // Exact KeyFrame exists?
	    F1 = keyFrame(FrameIndex);
	    if(F1) return (__lastFrame = F1);
	    
	    // Seek previous KeyFrame
	    F1 = findKeyFrameBeforeframeIndex(FrameIndex, false);
	    
	    if(!F1) 
	    {    
	        // No previous KeyFrame
	        F = new CocoKeyFrame();
	        F.frameIndex = FrameIndex;
	        F.visible = false;
	        return (__lastFrame = F);        
	    } 
	    else 
	    {        
	        switch(F1.frameInterpolation)
	        {        
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO:
	        
	            F = F1.clone(); 
	            F.frameIndex = FrameIndex;
	            F.action=null;
	            return (__lastFrame = F);
	        
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE:
	        
	            F = F1.clone();
	            F.frameIndex = FrameIndex;
	            F.action=null;
	            F.visible = false;
	            return (__lastFrame = F);
	            
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN:
	            
	            // We need the next KeyFrame now
	            F2 = findKeyFrameAfterframeIndex(FrameIndex, false);
	            
	            if(!F2) 
	            {                
	                // Fallback to echo
	                F = F1.clone();
	                F.frameIndex = FrameIndex;
	                F.action=null;
	                return (__lastFrame = F);
	                
	            } 
	            else 
	            {            
	                // Interpolate between frames
	                F = F1.clone();	                
	                F.frameIndex = FrameIndex;
	                F.action=null;
	                s = (frameIndex - F1.frameIndex) / (F2.frameIndex - F1.frameIndex);
	                F.interpolate(F1, F2, s);
	                return (__lastFrame = F);                
	            }        
	        }        
	    }
	}
}

