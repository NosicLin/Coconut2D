#include "Constants.js"
#include "HTMLEvents.js"
#include "HTMLDocument.jspp"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013 www.coconut2D.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.   
 *
 * ***** END LICENSE BLOCK ***** */
 
class HTMLWindow
{
	public var __uid:Integer;
	public var document:HTMLDocument;
	public var innerHeight:Integer;
	public var innerWidth:Integer;
	public var devicePixelRatio:Integer;
	
	public var __data:HTMLEvent;
	public var __elements:Array<Function>;	

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		this.__uid = 0;
		this.document = new HTMLDocument();
		this.innerHeight = global.innerHeight;
		this.innerWidth = global.innerWidth;
		this.devicePixelRatio = global.devicePixelRatio;
		this.__data = new HTMLEvent();
		__registerManager(this, this.dispatchEvent, this.__data);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addEventListener(event:String, listener:Function, useCapture:Boolean)
	{
		__registerCallback(__uid, event);			
		__elements[event] = listener;		
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeEventListener(event:String, listener:Function, useCapture:Boolean)
	{
		__elements[event] = null;
		__unRegisterCallback(__uid, event);		
	} 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function dispatchEvent(uid:Integer, event:String)
	{
		var callback:Function = __elements[event];
		if(callback) callback.apply(this, this.__data);  
	}
}

