/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                            ____                 __          _             ______            __            __ ___   ____
//	  / ____/___ _____ _   ______ ______/ __ \___  ____  ____/ /__  _____(_)___  ____ _/ ____/___  ____  / /____  _  __/ /|__ \ / __ \
//	 / /   / __ `/ __ \ | / / __ `/ ___/ /_/ / _ \/ __ \/ __  / _ \/ ___/ / __ \/ __ `/ /   / __ \/ __ \/ __/ _ \| |/_/ __/_/ // / / /
//	/ /___/ /_/ / / / / |/ / /_/ (__  ) _, _/  __/ / / / /_/ /  __/ /  / / / / / /_/ / /___/ /_/ / / / / /_/  __/>  </ /_/ __// /_/ /
//	\____/\__,_/_/ /_/|___/\__,_/____/_/ |_|\___/_/ /_/\__,_/\___/_/  /_/_/ /_/\__, /\____/\____/_/ /_/\__/\___/_/|_|\__/____/_____/
//	                                                                          /____/
// ==================================================================================================================================

"#include Constants.js"
"#include HTMLTextMetrics.jspp"

class CanvasRenderingContext2D : HTMLCavnasContext
{
	public const DRAWWINDOW_DRAW_CARET			= 0x01;	// Show the caret if appropriate when drawing.
	public const DRAWWINDOW_DO_NOT_FLUSH		= 0x02;	// Do not flush pending layout notifications that could otherwise be batched up.
	public const DRAWWINDOW_DRAW_VIEW			= 0x04;	// Draw scrollbars and scroll the viewport if they are present.
	public const DRAWWINDOW_USE_WIDGET_LAYERS	= 0x08;	// Use the widget layer manager if available. This means hardware acceleration may be used, but it might actually be slower or lower quality than normal. It will, however, more accurately reflect the pixels rendered to the screen.
	public const DRAWWINDOW_ASYNC_DECODE_IMAGES	= 0x10;	// Do not synchronously decode images - draw what we have.

	public var canvas:HTMLCanvasElement;

	public var globalAlpha:Float;						// Alpha value that is applied to shapes and images before they are composited onto the canvas. Default 1.0 (opaque).
	public var lineCap:String;							// Type of endings on the end of lines. Possible values: butt (default), round, square
	public var lineDashOffset:Float;					// Specifies where to start a dasharray on a line.
	public var lineJoin:String;							// Defines the type of corners where two lines meet. Possible values: round, bevel, miter (default)
	public var lineWidth:Float;							// Width of lines. Default 1.0
	public var miterLimit:Float;						// Default 10.
	public var shadowBlur:Float;						// Specifies the blurring effect. Default 0
	public var shadowColor:String;						// Color of the shadow. Default fully-transparent black.
	public var shadowOffsetX:Float;						// Horizontal distance the shadow will be offset. Default 0.
	public var shadowOffsetY:Float;						// Vertical distance the shadow will be offset. Default 0.
	public var strokeStyle:Integer;						// Color or style to use for the lines around shapes. Default #000 (black).
	public var textAlign:String;						// ossible values: start (default), end, left, right or center.
	public var textBaseline:String;						// Possible values: top, hanging, middle, alphabetic (default), ideographic, bottom
	public var globalCompositeOperation:String;			// With globalAlpha applied this sets how shapes and images are drawn onto the existing bitmap. Possible values: "source-atop", "source-in", "source-out", "source-over", "destination-atop", "destination-in", "destination-out", "destination-over", "lighter", "darker", "copy", "xor"

	private var __fillStyle:String;
	private var __fontSetting:String;
	private var __font:CocoFont;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(canvas:HTMLCanvasElement)
	{
		this.canvas = canvas;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete __font;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
    //public function createImageData(imagedata:Imagedata):ImageData
	public function arc(x:Float, y:Float, radius:Float, startAngle:Float, endAngle:Float, optional anticlockwise:Boolean)	{}
	public function arcTo(x1:Float, y1:Float, x2:Float, y2:Float, radius:Float)                                             {}
	public function beginPath()                                                                                             {}
	public function bezierCurveTo(cp1x:Float, cp1y:Float, cp2x:Float, cp2y:Float, x:Float, y:Float)                         {}
	public function clearRect(x:Float, y:Float, width:Float, height:Float)                                                  {}
	public function clip()                                                                                                  {}
	public function closePath()                                                                                             {}
	public function createImageData(width:Float, height:Float):ImageData													{ return null; }
	public function createLinearGradient(x0:Float, y0:Float, x1:Float, y1:Float):HTMLCanvasGradient							{ return null; }
	public function createPattern(image:Image, repetition:String):HTMLCanvasPattern											{ return null; }
	public function createRadialGradient(x0:Float, y0:Float, r0:Float, x1:Float, y1:Float, r1:Float):HTMLCanvasGradient		{ return null; }
	public function drawCustomFocusRing(element:HTMLElement):Boolean														{ return false; }
	public function drawSystemFocusRing(element:HTMLElement)																{}
	public function fill()                                                     												{}
	public function fillRect(x:Float, y:Float, width:Float, height:Float)                    								{}
	public function getImageData(x:Float, y:Float, width:Float, height:Float):ImageData         							{ return null; }
	public function getLineDash()																							{}
	public function isPointInPath(x:Float, y:Float):Boolean																	{ return false; }
	public function isPointInStroke(x:Float, y:Float):Boolean																{ return false; }
	public function lineTo(x:Float, y:Float)																				{}
	public function moveTo(x:Float, y:Float)																				{}
	public function quadraticCurveTo(cpx:Float, cpy:Float, x:Float, y:Float)                                                {}
	public function rect(x:Float, y:Float, width:Float, height:Float)                                                       {}
	public function restore()                                                                                               {}
	public function rotate(angle:Float)                                                                                     {}
	public function save()                                                                                                  {}
	public function scale(x:Float, y:Float)                                                                                 {}
	public function scrollPathIntoView()                                                                                    {}
	public function setLineDash(segments:Array<Float>)                                                                      {}
	public function setTransform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float)                            {}
	public function stroke()                                                                                                {}
	public function strokeRect(x:Float, y:Float, w:Float, h:Float)                                                          {}
	public function strokeText(text:String, x:Float, y:Float, optional maxWidth:Float)                                      {}
	public function transform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float)                               {}
	public function translate(x:Float, y:Float)                                                                             {}
	public function drawImage(image:Image, a1:Float, a2:Float, optional a3:Float, optional a4:Float, optional a5:Float, optional a6:Float, optional a7:Float, optional a8:Float) {}
	public function putImageData(imagedata:ImageData, dx:Float, dy:Float, optional dirtyX:Float, optional dirtyY:Float, optional dirtyWidth:Float, optional dirtyHeight:Float) {}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/*
	public function createWithText(width:Integer, height:Integer, font:CocoFont, text:String)
	{
		image = new Image();
		image.width = width;
		image.height = height;
		image.__imageData = new ImageData(String(image.width), String(image.height));
		//image.__imageData.buffer.clear();
		font.fillText(image.__imageData.buffer, image.width, text, 0, 0);
		textureCellWidth = font.measureText(text);
		textureCellHeight = font.height;
	}
	*/

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property fillStyle
	{
		function get():String
		{
			return __fillStyle;
		}
		function set(v:String)
		{
			__fillStyle = v;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property font
	{
		// font-style font-variant font-weight font-size/line-height font-family

		function get():String
		{
			return __fontSetting;
		}

		function set(v:String)
		{
			__fontSetting = v;

           	/*
			var rx:RegExp = new RegExp("/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\"\sa-z]+?)\s*$", "i");
			var matches:Array<String>	= rx.exec(v);
			var fontStyle:String   		= matches[1];
			var fontVariant:String 		= matches[2];
			var fontWeight:String  		= matches[3];
			var fontSize:Float    		= matches[4];
			var lineHeight:Float  		= matches[5];
			var fontFamily:String  		= matches[6];
			var fontChars:String 		= " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()/.,?><';\":]|[}{\\}]`~-_";
			__font = new CocoFont(fontSize, fontFamily, fontChars);
			*/
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function fillText(text:String, x:Float, y:Float, optional maxWidth:Float)
	{
		//__font.fillText(__imageData.buffer, canvas.width, text, x, y);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function measureText(text:String):HTMLTextMetrics
	{
		return null;
	}
}