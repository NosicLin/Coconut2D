"#export native"
"#export web"

/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.coconut2D.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                 __ __           ______
//	  / ____/___  _________  / //_/__  __  __/ ____/________ _____ ___  ___
//	 / /   / __ \/ ___/ __ \/ ,< / _ \/ / / / /_  / ___/ __ `/ __ `__ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /| /  __/ /_/ / __/ / /  / /_/ / / / / / /  __/
//	\____/\____/\___/\____/_/ |_\___/\__, /_/   /_/   \__,_/_/ /_/ /_/\___/
//	                                /____/
// ==================================================================================================================================

"#include WebGLRenderingContext.jspp"
"#include CocoMatrix.jspp"

class CocoKeyFrame
{
	public var frameIndex:Integer;
	public var frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM;
	public var handleEvents:Boolean;
	public var visible:Boolean;
	public var red:Float;
	public var green:Float;
	public var blue:Float;
	public var alpha:Float;
	public var x:Float;
	public var y:Float;
	public var pivotX:Float;
	public var pivotY:Float;
	public var scaleX:Float;
	public var scaleY:Float;
	public var rotation:Float;
	public var action:Function;
	public var nextState:State;
	public var audio:CocoAudio;
	public var flipH:Boolean;
	public var flipV:Boolean;

	private var __lastActionExecutionTime:Float;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		frameIndex					= 0;
		frameInterpolation 			= COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN;
		handleEvents 				= false;
		visible						= true;
		x							= 0.0;
		y							= 0.0;
		scaleX						= 1.0;
		scaleY						= 1.0;
		rotation					= 0.0;
		pivotX						= 0.0;
		pivotY						= 0.0;
		red							= 1.0;
		green						= 1.0;
		blue						= 1.0;
		alpha						= 1.0;
		action						= null;
		nextState					= null;
		audio						= null;
		flipH						= false;
		flipV						= false;
		__lastActionExecutionTime 	= 0.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete audio;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clone(exact:Boolean) :CocoKeyFrame
	{
	    var c:CocoKeyFrame = new CocoKeyFrame();

		c.red						= red;
		c.green						= green;
		c.blue						= blue;
		c.alpha						= alpha;
		c.frameIndex            	= frameIndex;
		c.frameInterpolation    	= frameInterpolation;
		c.handleEvents          	= handleEvents;
		c.pivotX                	= pivotX;
		c.pivotY                	= pivotY;
		c.rotation              	= rotation;
		c.scaleX                	= scaleX;
		c.scaleY                	= scaleY;
		c.visible               	= visible;
		c.x                     	= x;
		c.y                     	= y;
		c.flipH						= flipH;
		c.flipV						= flipV;

        if(exact)
        {
			c.action				= action;
			c.nextState				= nextState;
			c.audio					= audio ? audio.cloneNode(true) : null;
        }

 		c.__lastActionExecutionTime	= __lastActionExecutionTime;

	    return c;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
		__lastActionExecutionTime = 0.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function execute(gl:WebGLRenderingContext, currentTime:Float, loopTime:Float, scene:CocoScene, clip:CocoClip) :Boolean
	{
		//gl:WebGLRenderingContext, currentTime:Float, loopTime:Float, clip:CocoClip, keyFrame:CocoKeyFrame

		var pulse:Boolean = false;

		if((loopTime==0) || (currentTime - __lastActionExecutionTime > clip.__timeline.__singleFrameDurationTime))
		{
			__lastActionExecutionTime = currentTime;

			if(action)
			{
				var args:Array = [gl, currentTime, loopTime, clip, this];
				action.apply(scene, args);
			}

			if(nextState)
			{
				engine.setNextState(nextState);
			}

			if(audio)
			{
				audio.tick();
			}

			pulse = true;
		}

		return pulse;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolate(F1:CocoKeyFrame, F2:CocoKeyFrame, s:Float)
	{
		red = F1.red + s * (F2.red - F1.red);
		green = F1.green + s * (F2.green - F1.green);
		blue = F1.blue + s * (F2.blue - F1.blue);
	    alpha = F1.alpha + s * (F2.alpha - F1.alpha);
	    x = F1.x + s * (F2.x - F1.x);
	    y = F1.y + s * (F2.y - F1.y);
	    scaleX = F1.scaleX + s * (F2.scaleX - F1.scaleX);
	    scaleY = F1.scaleY + s * (F2.scaleY - F1.scaleY);
	    rotation = F1.rotation + s * (F2.rotation - F1.rotation);
	    pivotX = F1.pivotX + s * (F2.pivotX - F1.pivotX);
	    pivotY = F1.pivotY + s * (F2.pivotY - F1.pivotY);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function combine(Frame:CocoKeyFrame)
	{
		if(!Frame) return;
		red = red * Frame.red;
		green = green * Frame.green;
		blue = blue * Frame.blue;
	    alpha = alpha * Frame.alpha;
	    visible = visible && Frame.visible;
	    flipH = (flipH && !Frame.flipH) || (!flipH && Frame.flipH);
	    flipV = (flipV && !Frame.flipV) || (!flipV && Frame.flipV);
	}

	public function apply(matrix:CocoMatrix)
	{
		if(x!=0 || y!=0) matrix.translate(x, y);
		if(rotation!=0) matrix.rotateZ(rotation * RADIANS);
		if(scaleX!=1 ||scaleY!=1) matrix.scale(scaleX, scaleY);
		if(pivotX!=0 || pivotY!=0) matrix.translate(-pivotX, -pivotY);
	}
}
