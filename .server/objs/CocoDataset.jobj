//@line 35
var __path = require("path");
//@line 38
var NULL_DATA_VALUE = "FF707534-E45E-4294-A242-E7B798BF96A7";
//@line 40
var DBTYPEENUM =
{
	DBTYPE_EMPTY: 0,
	DBTYPE_NULL: 1,
	DBTYPE_I2: 2,
	DBTYPE_I4: 3,
	DBTYPE_R4: 4,
	DBTYPE_R8: 5,
	DBTYPE_CY: 6,
	DBTYPE_DATE: 7,
	DBTYPE_BSTR: 8,
	DBTYPE_IDISPATCH: 9,
	DBTYPE_ERROR: 10,
	DBTYPE_BOOL: 11,
	DBTYPE_VARIANT: 12,
	DBTYPE_IUNKNOWN: 13,
	DBTYPE_DECIMAL: 14,
	DBTYPE_UI1: 17,
	DBTYPE_ARRAY: 8192,
	DBTYPE_BYREF: 16384,
	DBTYPE_I1: 16,
	DBTYPE_UI2: 18,
	DBTYPE_UI4: 19,
	DBTYPE_I8: 20,
	DBTYPE_UI8: 21,
	DBTYPE_GUID: 72,
	DBTYPE_VECTOR: 4096,
	DBTYPE_RESERVED: 32768,
	DBTYPE_BYTES: 128,
	DBTYPE_STR: 129,
	DBTYPE_WSTR: 130,
	DBTYPE_NUMERIC: 131,
	DBTYPE_UDT: 132,
	DBTYPE_DBDATE: 133,
	DBTYPE_DBTIME: 134,
	DBTYPE_DBTIMESTAMP: 135,
	DBTYPE_HCHAPTER: 136,
	DBTYPE_FILETIME: 64,
	DBTYPE_PROPVARIANT: 138,
	DBTYPE_VARNUMERIC: 139,
	DBTYPE_BLOB: 12
};
//@line 83
var SQLITE_RECORD_STATUS =
{
	RECORD_NO_RECORD: 0,
	RECORD_UNCHANGED: 1,
	RECORD_CHANGED: 2,
	RECORD_DELETED: 4,
	RECORD_INSERTED: 8,
	RECORD_ALL: 15
};
//@line 94
var SQLITE_TABLE_ACCESS =
{
	CAN_SELECT: 0,
	CAN_INSERT: 1,
	CAN_UPDATE: 2,
	CAN_DELETE: 4,
	CAN_CRUD: 7
};
//@line 104
var SQLITE_COLUMN_FLAGS =
{
	IS_UNIQUE: 1,
	IS_KEYCOLUMN: 2,
	IS_SEARCHABLE: 4,
	IS_COMPUTED: 8,
	IS_AUTOINCREMENT: 16,
	IS_SORTABLE: 64,
	IS_WRITABLE: 128,
	IS_SEARCHABLE_LIKE: 512,
	IS_NULLABLE: 1024,
	IS_ROWID: 2048,
	IS_FIXED_LENGTH: 4096,
	HAS_DEFAULT: 8192,
	DEFAULT_FLAGS: 1732
};
//@line 121
var SQLITE_SCHEMA_ENUM =
{
	SQLITE_TABLES: 1,
	SQLITE_VIEWS: 2,
	SQLITE_COLUMNS: 3,
	SQLITE_FOREIGN_KEYS: 4
};
//@line 130
var SQLITE_INTERNAL_TYPE =
{
	SQLITE_VT_INTGER: 1,
	SQLITE_VT_FLOAT: 2,
	SQLITE_VT_TEXT: 3,
	SQLITE_VT_BLOB: 4,
	SQLITE_VT_NULL: 5
};
//@line 140
var SQLITE_VARTYPE =
{
	VARTYPE_I1: 16,
	VARTYPE_I2: 2,
	VARTYPE_I4: 3,
	VARTYPE_I8: 20,
	VARTYPE_UI1: 17,
	VARTYPE_UI2: 18,
	VARTYPE_UI4: 19,
	VARTYPE_UI8: 21,
	VARTYPE_R4: 4,
	VARTYPE_R8: 5,
	VARTYPE_BOOL: 11,
	VARTYPE_DBDATE: 133,
	VARTYPE_DBTIME: 134,
	VARTYPE_DBTIMESTAMP: 135,
	VARTYPE_DATE: 7,
	VARTYPE_CY: 6,
	VARTYPE_DECIMAL: 14,
	VARTYPE_BLOB: 12,
	VARTYPE_BSTR: 8,
	VARTYPE_WSTR: 130
};
//@line 181

function CocoDataStream()
{
	var __BASE__ = null;

	function __CocoDataStream()
	{
		var __PDEFINE__ = Object.defineProperty;
		var __NOENUM__ = {enumerable:false};
		var __CLASS__COCODATASTREAM__ = this.__CLASS__COCODATASTREAM__ = this;
		var __THIS__ = this;
		this.toString = function ()
		{
			return 'CocoDataStream'
		};
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { __THIS__ = v; } });
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		};
		var __PRIVATE__ = this.__PRIVATE__ = {};
		var __PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 189
		__PRIVATE__.ELEMENTS_INCREMENT = 1024;
		//@line 543
		this.__className = "CocoDataStream";
		//@line 191
		__PRIVATE__.bi = null;
		//@line 192
		__PRIVATE__.bf = null;
		//@line 194
		__PRIVATE__.__offset = 0;
		//@line 195
		__PRIVATE__.__length = 0;
		//@line 282
		this.openFromArrayBuffer = function (data)
		{
			//@line 284
			if (!data || data.byteLength == 0)
			//@line 285
			return false;
			//@line 287
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bf.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bf);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf = null
			};
			//@line 288
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bi.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bi);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi = null
			};
			//@line 289
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi = new Int32Array(data);
			//@line 290
			__CLASS__COCODATASTREAM__.__PRIVATE__.bf = new Float32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer);
			//@line 291
			__CLASS__COCODATASTREAM__.__PRIVATE__.__offset = Math.round(0);
			//@line 292
			__CLASS__COCODATASTREAM__.__PRIVATE__.__length = Math.round(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.byteLength);
			//@line 294
			return true;
			return false //@line 295
		};
		//@line 307
		this.increaseSize = function (s)
		{
			s = Math.round(s);
			//@line 309
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + s <= __CLASS__COCODATASTREAM__.__PRIVATE__.__length) return;
			//@line 310
			__CLASS__COCODATASTREAM__.__PRIVATE__.__length = Math.round(__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + s);
			//@line 311
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + s <= __CLASS__COCODATASTREAM__.__PRIVATE__.bi.length) return;
			//@line 312
			var nbi = new Int32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.length + __CLASS__COCODATASTREAM__.__PRIVATE__.ELEMENTS_INCREMENT + s);
			//@line 313
			nbi.set(__CLASS__COCODATASTREAM__.__PRIVATE__.bi);
			//@line 314
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bf.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bf);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf = null
			};
			//@line 315
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bi.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bi);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi = null
			};
			//@line 316
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi = nbi;
			//@line 317
			__CLASS__COCODATASTREAM__.__PRIVATE__.bf = new Float32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer);
			//@line 318
		};
		//@line 321
		this.shrink = function ()
		{
			//@line 323
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.bi.length == __CLASS__COCODATASTREAM__.__PRIVATE__.__length) return;
			//@line 324
			var nbi = new Int32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.__length);
			//@line 325
			nbi.set(__CLASS__COCODATASTREAM__.__PRIVATE__.bi);
			//@line 326
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bf.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bf);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf = null
			};
			//@line 327
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bi.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bi);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi = null
			};
			//@line 328
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi = nbi;
			//@line 329
			__CLASS__COCODATASTREAM__.__PRIVATE__.bf = new Float32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer);
			//@line 330
		};
		//@line 356
		this.writeInteger = function (v)
		{
			v = Math.round(v);
			//@line 358
			__CLASS__COCODATASTREAM__.increaseSize(Math.round(1));
			//@line 359
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi[__CLASS__COCODATASTREAM__.__PRIVATE__.__offset++] = Math.round(v);
			//@line 360
		};
		//@line 363
		this.writeFloat = function (v)
		{
			//@line 365
			__CLASS__COCODATASTREAM__.increaseSize(Math.round(1));
			//@line 366
			__CLASS__COCODATASTREAM__.__PRIVATE__.bf[__CLASS__COCODATASTREAM__.__PRIVATE__.__offset++] = v;
			//@line 367
		};
		//@line 370
		this.writeString = function (v)
		{
			//@line 372
			var isNull = (v == NULL_DATA_VALUE);
			//@line 373
			var L = (isNull ? -1 : v.size());
			//@line 374
			__CLASS__COCODATASTREAM__.writeInteger(L);
			//@line 375
			for (var i = 0; i < L; i++)
			//@line 376
			{
				//@line 377
				var c = v.charCodeAt(i);
				//@line 378
				__CLASS__COCODATASTREAM__.writeInteger(c);
				//@line 379
			}
			//@line 380
		};
		//@line 383
		this.writeBoolean = function (v)
		{
			//@line 385
			__CLASS__COCODATASTREAM__.writeInteger(v ? 1 : 0);
			//@line 386
		};
		//@line 389
		this.writeInt32Array = function (v)
		{
			//@line 391
			__CLASS__COCODATASTREAM__.writeInteger(v.length);
			//@line 392
			__CLASS__COCODATASTREAM__.increaseSize(v.length);
			//@line 393
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi.set(v, __CLASS__COCODATASTREAM__.__PRIVATE__.__offset);
			//@line 394
			__CLASS__COCODATASTREAM__.__PRIVATE__.__offset += Math.round(v.length);
			//@line 395
		};
		//@line 398
		this.writeFloat32Array = function (v)
		{
			//@line 400
			__CLASS__COCODATASTREAM__.writeInteger(v.length);
			//@line 401
			__CLASS__COCODATASTREAM__.increaseSize(v.length);
			//@line 402
			__CLASS__COCODATASTREAM__.__PRIVATE__.bf.set(v, __CLASS__COCODATASTREAM__.__PRIVATE__.__offset);
			//@line 403
			__CLASS__COCODATASTREAM__.__PRIVATE__.__offset += Math.round(v.length);
			//@line 404
		};
		//@line 407
		this.writeDataStream = function (v)
		{
			//@line 409
			v.shrink();
			//@line 410
			__CLASS__COCODATASTREAM__.writeInt32Array(v.__PRIVATE__.bi);
			//@line 411
		};
		//@line 424
		this.readCocoDataStream = function ()
		{
			//@line 426
			var data = __CLASS__COCODATASTREAM__.readInt32Array();
			//@line 427
			var ret = new CocoDataStream;
			//@line 428
			ret.__PROTECTED__.set(data);
			//@line 429
			return ret;
			//@line 430
		};
		//@line 433
		this.__PROTECTED__.set = function (v)
		{
			//@line 435
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bf.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bf);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf = null
			};
			//@line 436
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bi.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bi);
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi = null
			};
			//@line 437
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi = new Int32Array(v.length);
			//@line 438
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi.set(v);
			//@line 439
			__CLASS__COCODATASTREAM__.__PRIVATE__.bf = new Float32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer);
			//@line 440
		};
		//@line 443
		this.readUint8Array = function ()
		{
			//@line 445
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + 1 > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 446
			return null;
			//@line 448
			var L = __CLASS__COCODATASTREAM__.readInteger();
			//@line 450
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + L > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 451
			return null;
			//@line 453
			var ret = new Uint8Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer, __CLASS__COCODATASTREAM__.__PRIVATE__.__offset * 4, L);
			//@line 454
			__CLASS__COCODATASTREAM__.__PRIVATE__.__offset += Math.round(L / 4);
			//@line 456
			return ret;
			//@line 457
		};
		//@line 460
		this.readInt32Array = function ()
		{
			//@line 462
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + 1 > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 463
			return null;
			//@line 465
			var L = __CLASS__COCODATASTREAM__.readInteger();
			//@line 467
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + L > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 468
			return null;
			//@line 470
			var ret = new Int32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer, __CLASS__COCODATASTREAM__.__PRIVATE__.__offset * 4, L);
			//@line 471
			__CLASS__COCODATASTREAM__.__PRIVATE__.__offset += Math.round(L);
			//@line 473
			return ret;
			//@line 474
		};
		//@line 477
		this.readFloat32Array = function ()
		{
			//@line 479
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + 1 > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 480
			return null;
			//@line 482
			var L = __CLASS__COCODATASTREAM__.readInteger();
			//@line 484
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + L > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 485
			return null;
			//@line 487
			var ret = new Float32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer, __CLASS__COCODATASTREAM__.__PRIVATE__.__offset * 4, L);
			//@line 488
			__CLASS__COCODATASTREAM__.__PRIVATE__.__offset += Math.round(L);
			//@line 490
			return ret;
			//@line 491
		};
		//@line 494
		this.readInteger = function ()
		{
			//@line 496
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + 1 > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 497
			return 0;
			//@line 498
			return __CLASS__COCODATASTREAM__.__PRIVATE__.bi[__CLASS__COCODATASTREAM__.__PRIVATE__.__offset++];
			return 0 //@line 499
		};
		//@line 502
		this.readFloat = function ()
		{
			//@line 504
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + 1 > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 505
			return 0.0;
			//@line 506
			return __CLASS__COCODATASTREAM__.__PRIVATE__.bf[__CLASS__COCODATASTREAM__.__PRIVATE__.__offset++];
			return 0 //@line 507
		};
		//@line 510
		this.readString = function ()
		{
			//@line 512
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + 1 > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 513
			return "";
			//@line 515
			var L = __CLASS__COCODATASTREAM__.readInteger();
			//@line 516
			if (L == -1)
			//@line 517
			{
				//@line 518
				return NULL_DATA_VALUE;
				//@line 519
			}
			//@line 521
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + L > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 522
			return "";
			//@line 524
			var ret = "";
			//@line 525
			for (var i = 0; i < L; i++)
			//@line 526
			{
				//@line 527
				var c = __CLASS__COCODATASTREAM__.readInteger();
				//@line 528
				ret += String.fromCharCode(c);
				//@line 529
			}
			//@line 531
			return ret;
			return "" //@line 532
		};
		//@line 535
		this.readBoolean = function ()
		{
			//@line 537
			if (__CLASS__COCODATASTREAM__.__PRIVATE__.__offset + 1 > __CLASS__COCODATASTREAM__.__PRIVATE__.__length)
			//@line 538
			return false;
			//@line 540
			var i = __CLASS__COCODATASTREAM__.readInteger();
			//@line 541
			return i ? true : false;
			return false //@line 542
		};
		//@line 298
		Object.defineProperty(this, 'buffer', {
			enumerable: true,
			//@line 300
			get: function ()
			{
				//@line 302
				return __CLASS__COCODATASTREAM__.__PRIVATE__.bi;
				//@line 303
			}
		});
		//@line 333
		Object.defineProperty(this, 'offset', {
			enumerable: true,
			//@line 335
			get: function ()
			{
				//@line 337
				return __CLASS__COCODATASTREAM__.__PRIVATE__.__offset;
				return 0 //@line 338
			},
			//@line 340
			set: function (v)
			{
				v = Math.round(v);
				//@line 342
				__CLASS__COCODATASTREAM__.__PRIVATE__.__offset = Math.round(v);
				//@line 343
			}
		});
		//@line 215
		this.Destructor = function ()
		{
			{
				//@line 217
				//@line 221
				{
					__CLASS__COCODATASTREAM__.__PRIVATE__.bf && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bf.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bf.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bf);
					__CLASS__COCODATASTREAM__.__PRIVATE__.bf = null
				};
				//@line 222
				{
					__CLASS__COCODATASTREAM__.__PRIVATE__.bi && ((__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor') && __CLASS__COCODATASTREAM__.__PRIVATE__.bi.Destructor()) || !__CLASS__COCODATASTREAM__.__PRIVATE__.bi.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASTREAM__.__PRIVATE__.bi);
					__CLASS__COCODATASTREAM__.__PRIVATE__.bi = null
				};
				//@line 223
			}
			{
				__CLASS__COCODATASTREAM__.__PRIVATE__.bi = null;
				__CLASS__COCODATASTREAM__.__PRIVATE__.bf = null;
				__CLASS__COCODATASTREAM__.buffer = null;
			}
			return true
		};
		//@line 202
		this.Constructor = function ()
		{
			//@line 204
			__CLASS__COCODATASTREAM__.__PRIVATE__.__offset = Math.round(0);
			//@line 205
			__CLASS__COCODATASTREAM__.__PRIVATE__.__length = Math.round(0);
			//@line 206
			__CLASS__COCODATASTREAM__.__PRIVATE__.bi = new Int32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.__length);
			//@line 207
			__CLASS__COCODATASTREAM__.__PRIVATE__.bf = new Float32Array(__CLASS__COCODATASTREAM__.__PRIVATE__.bi.buffer);
			//@line 212
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor();
		return this;
	}
	__CocoDataStream.prototype.constructor = __CocoDataStream;
	return new __CocoDataStream();
}
CocoDataStream.__PRIVATE__ = {};
CocoDataStream.__PROTECTED__ = {};
//@line 554

function CocoDataField(__CLASS__COCODATAFIELD__$dataset__)
{
	var __BASE__ = null;

	function __CocoDataField(__CLASS__COCODATAFIELD__$dataset__)
	{
		var __PDEFINE__ = Object.defineProperty;
		var __NOENUM__ = {enumerable:false};
		var __CLASS__COCODATAFIELD__ = this.__CLASS__COCODATAFIELD__ = this;
		var __THIS__ = this;
		this.toString = function ()
		{
			return 'CocoDataField'
		};
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { __THIS__ = v; } });
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		};
		var __PRIVATE__ = this.__PRIVATE__ = {};
		var __PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 730
		this.__className = "CocoDataField";
		//@line 556
		__PRIVATE__.dataset = null;
		//@line 558
		this.ORDINAL = 0;
		//@line 559
		this.NAME = "";
		//@line 560
		this.BASECOLUMNNAME = "";
		//@line 561
		this.BASETABLENAME = "";
		//@line 562
		this.ID = "";
		//@line 563
		this.TYPE = null;
		//@line 564
		this.LCID = 0;
		//@line 565
		this.PRECISION = 0;
		//@line 566
		this.SCALE = 0;
		//@line 567
		this.SIZE = 0;
		//@line 568
		this.LENGTH = 0;
		//@line 569
		this.FLAGS = null;
		//@line 570
		this.SQLITE_DECLARED_TYPE = "";
		//@line 571
		this.SQLITE_PK_COLUMN = "";
		//@line 572
		this.SQLITE_PK_TABLE = "";
		//@line 573
		this.SQLITE_DATATYPE = null;
		//@line 574
		this.DEFAULTVALUE = "";
		//@line 607
		this.copy = function (col)
		{
			//@line 609
			__CLASS__COCODATAFIELD__.__PRIVATE__.dataset = col.__PRIVATE__.dataset;
			//@line 611
			__CLASS__COCODATAFIELD__.ORDINAL = Math.round(col.ORDINAL);
			//@line 612
			__CLASS__COCODATAFIELD__.ID = col.ID;
			//@line 613
			__CLASS__COCODATAFIELD__.NAME = col.NAME;
			//@line 614
			__CLASS__COCODATAFIELD__.BASECOLUMNNAME = col.BASECOLUMNNAME;
			//@line 615
			__CLASS__COCODATAFIELD__.BASETABLENAME = col.BASETABLENAME;
			//@line 616
			__CLASS__COCODATAFIELD__.TYPE = col.TYPE;
			//@line 617
			__CLASS__COCODATAFIELD__.LCID = Math.round(col.LCID);
			//@line 618
			__CLASS__COCODATAFIELD__.PRECISION = Math.round(col.PRECISION);
			//@line 619
			__CLASS__COCODATAFIELD__.SCALE = Math.round(col.SCALE);
			//@line 620
			__CLASS__COCODATAFIELD__.SIZE = Math.round(col.SIZE);
			//@line 621
			__CLASS__COCODATAFIELD__.LENGTH = Math.round(col.LENGTH);
			//@line 622
			__CLASS__COCODATAFIELD__.FLAGS = col.FLAGS;
			//@line 623
			__CLASS__COCODATAFIELD__.SQLITE_DATATYPE = col.SQLITE_DATATYPE;
			//@line 624
			__CLASS__COCODATAFIELD__.SQLITE_DECLARED_TYPE = col.SQLITE_DECLARED_TYPE;
			//@line 625
			__CLASS__COCODATAFIELD__.SQLITE_PK_COLUMN = col.SQLITE_PK_COLUMN;
			//@line 626
			__CLASS__COCODATAFIELD__.SQLITE_PK_TABLE = col.SQLITE_PK_TABLE;
			//@line 627
			__CLASS__COCODATAFIELD__.DEFAULTVALUE = col.DEFAULTVALUE;
			//@line 628
		};
		//@line 631
		this.write = function (ds)
		{
			//@line 633
			ds.writeInteger(__CLASS__COCODATAFIELD__.ORDINAL);
			//@line 634
			ds.writeString(__CLASS__COCODATAFIELD__.ID);
			//@line 635
			ds.writeString(__CLASS__COCODATAFIELD__.NAME);
			//@line 636
			ds.writeString(__CLASS__COCODATAFIELD__.BASECOLUMNNAME);
			//@line 637
			ds.writeString(__CLASS__COCODATAFIELD__.BASETABLENAME);
			//@line 638
			ds.writeInteger(__CLASS__COCODATAFIELD__.TYPE);
			//@line 639
			ds.writeInteger(__CLASS__COCODATAFIELD__.LCID);
			//@line 640
			ds.writeInteger(__CLASS__COCODATAFIELD__.PRECISION);
			//@line 641
			ds.writeInteger(__CLASS__COCODATAFIELD__.SCALE);
			//@line 642
			ds.writeInteger(__CLASS__COCODATAFIELD__.SIZE);
			//@line 643
			ds.writeInteger(__CLASS__COCODATAFIELD__.LENGTH);
			//@line 644
			ds.writeInteger(__CLASS__COCODATAFIELD__.FLAGS);
			//@line 645
			ds.writeInteger(__CLASS__COCODATAFIELD__.SQLITE_DATATYPE);
			//@line 646
			ds.writeString(__CLASS__COCODATAFIELD__.SQLITE_DECLARED_TYPE);
			//@line 647
			ds.writeString(__CLASS__COCODATAFIELD__.SQLITE_PK_COLUMN);
			//@line 648
			ds.writeString(__CLASS__COCODATAFIELD__.SQLITE_PK_TABLE);
			//@line 649
			ds.writeString(__CLASS__COCODATAFIELD__.DEFAULTVALUE);
			//@line 650
		};
		//@line 653
		this.read = function (ds)
		{
			//@line 655
			__CLASS__COCODATAFIELD__.ORDINAL = Math.round(ds.readInteger());
			//@line 656
			__CLASS__COCODATAFIELD__.ID = ds.readString();
			//@line 657
			__CLASS__COCODATAFIELD__.NAME = ds.readString();
			//@line 658
			__CLASS__COCODATAFIELD__.BASECOLUMNNAME = ds.readString();
			//@line 659
			__CLASS__COCODATAFIELD__.BASETABLENAME = ds.readString();
			//@line 660
			__CLASS__COCODATAFIELD__.TYPE = (ds.readInteger());
			//@line 661
			__CLASS__COCODATAFIELD__.LCID = Math.round(ds.readInteger());
			//@line 662
			__CLASS__COCODATAFIELD__.PRECISION = Math.round(ds.readInteger());
			//@line 663
			__CLASS__COCODATAFIELD__.SCALE = Math.round(ds.readInteger());
			//@line 664
			__CLASS__COCODATAFIELD__.SIZE = Math.round(ds.readInteger());
			//@line 665
			__CLASS__COCODATAFIELD__.LENGTH = Math.round(ds.readInteger());
			//@line 666
			__CLASS__COCODATAFIELD__.FLAGS = (ds.readInteger());
			//@line 667
			__CLASS__COCODATAFIELD__.SQLITE_DATATYPE = (ds.readInteger());
			//@line 668
			__CLASS__COCODATAFIELD__.SQLITE_DECLARED_TYPE = ds.readString();
			//@line 669
			__CLASS__COCODATAFIELD__.SQLITE_PK_COLUMN = ds.readString();
			//@line 670
			__CLASS__COCODATAFIELD__.SQLITE_PK_TABLE = ds.readString();
			//@line 671
			__CLASS__COCODATAFIELD__.DEFAULTVALUE = ds.readString();
			//@line 672
		};
		//@line 675
		this.toJSON = function ()
		{
			//@line 677
			var s = "{";
			//@line 678
			s += "\"ORDINAL\":\"" + String(__CLASS__COCODATAFIELD__.ORDINAL) + "\"";
			//@line 679
			s += ",\"ID\":\"" + __CLASS__COCODATAFIELD__.ID + "\"";
			//@line 680
			s += ",\"NAME\":\"" + __CLASS__COCODATAFIELD__.NAME + "\"";
			//@line 681
			s += ",\"BASECOLUMNNAME\":\"" + __CLASS__COCODATAFIELD__.BASECOLUMNNAME + "\"";
			//@line 682
			s += ",\"BASETABLENAME\":\"" + __CLASS__COCODATAFIELD__.BASETABLENAME + "\"";
			//@line 683
			s += ",\"TYPE\":\"" + String(__CLASS__COCODATAFIELD__.TYPE) + "\"";
			//@line 684
			s += ",\"LCID\":\"" + String(__CLASS__COCODATAFIELD__.LCID) + "\"";
			//@line 685
			s += ",\"PRECISION\":\"" + String(__CLASS__COCODATAFIELD__.PRECISION) + "\"";
			//@line 686
			s += ",\"SCALE\":\"" + String(__CLASS__COCODATAFIELD__.SCALE) + "\"";
			//@line 687
			s += ",\"SIZE\":\"" + String(__CLASS__COCODATAFIELD__.SIZE) + "\"";
			//@line 688
			s += ",\"LENGTH\":\"" + String(__CLASS__COCODATAFIELD__.LENGTH) + "\"";
			//@line 689
			s += ",\"FLAGS\":\"" + String(__CLASS__COCODATAFIELD__.FLAGS) + "\"";
			//@line 690
			s += ",\"SQLITE_DATATYPE\":\"" + String(__CLASS__COCODATAFIELD__.SQLITE_DATATYPE) + "\"";
			//@line 691
			s += ",\"SQLITE_DECLARED_TYPE\":\"" + __CLASS__COCODATAFIELD__.SQLITE_DECLARED_TYPE + "\"";
			//@line 692
			s += ",\"SQLITE_PK_COLUMN\":\"" + __CLASS__COCODATAFIELD__.SQLITE_PK_COLUMN + "\"";
			//@line 693
			s += ",\"SQLITE_PK_TABLE\":\"" + __CLASS__COCODATAFIELD__.SQLITE_PK_TABLE + "\"";
			//@line 694
			s += ",\"DEFAULTVALUE\":\"" + __CLASS__COCODATAFIELD__.DEFAULTVALUE + "\"";
			//@line 695
			s += "}";
			//@line 696
			return s;
			return "" //@line 697
		};
		//@line 700
		Object.defineProperty(this, 'value', {
			enumerable: true,
			//@line 702
			get: function ()
			{
				//@line 704
				if (__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex >= 0 && __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex < __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.DATA.size() && __CLASS__COCODATAFIELD__.ORDINAL >= 0 && __CLASS__COCODATAFIELD__.ORDINAL < __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.METADATA.size())
				//@line 705
				{
					//@line 706
					var v = __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.DATA[__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex].FieldValues[__CLASS__COCODATAFIELD__.ORDINAL];
					//@line 707
					if (v == NULL_DATA_VALUE) v = __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.stringForNull;
					//@line 708
					return v;
					//@line 709
				}
				//@line 710
				throw "Invalid Record";
				return "" //@line 711
			},
			//@line 713
			set: function (v)
			{
				//@line 715
				if (__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex >= 0 && __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex < __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.DATA.size() && __CLASS__COCODATAFIELD__.ORDINAL >= 0 && __CLASS__COCODATAFIELD__.ORDINAL < __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.METADATA.size())
				//@line 716
				{
					//@line 717
					if (v == __CLASS__COCODATAFIELD__.__PRIVATE__.dataset.stringForNull) v = NULL_DATA_VALUE;
					//@line 718
					if (__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.DATA[__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex].FieldValues[__CLASS__COCODATAFIELD__.ORDINAL] != v)
					//@line 719
					{
						//@line 720
						__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.DATA[__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex].FieldValues[__CLASS__COCODATAFIELD__.ORDINAL] = v;
						//@line 722
						if (__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.DATA[__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex].STATUS != SQLITE_RECORD_STATUS.RECORD_INSERTED)
						//@line 723
						__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.DATA[__CLASS__COCODATAFIELD__.__PRIVATE__.dataset.__recordIndex].STATUS = SQLITE_RECORD_STATUS.RECORD_CHANGED;
						//@line 724
					}
					//@line 725
					return;
					//@line 726
				}
				//@line 727
				throw "Invalid Record"; //@line 728
			}
		});
		//@line 601
		this.Destructor = function ()
		{
			{
				//@line 603
				__CLASS__COCODATAFIELD__.__PRIVATE__.dataset = null;
				//@line 604
			}
			{
				__CLASS__COCODATAFIELD__.__PRIVATE__.dataset = null;
			}
			return true
		};
		//@line 577
		this.Constructor = function (dataset)
		{
			//@line 579
			__CLASS__COCODATAFIELD__.__PRIVATE__.dataset = dataset;
			//@line 581
			__CLASS__COCODATAFIELD__.ORDINAL = Math.round(0);
			//@line 582
			__CLASS__COCODATAFIELD__.ID = "";
			//@line 583
			__CLASS__COCODATAFIELD__.NAME = "";
			//@line 584
			__CLASS__COCODATAFIELD__.BASECOLUMNNAME = "";
			//@line 585
			__CLASS__COCODATAFIELD__.BASETABLENAME = "";
			//@line 586
			__CLASS__COCODATAFIELD__.TYPE = SQLITE_VARTYPE.VARTYPE_BSTR;
			//@line 587
			__CLASS__COCODATAFIELD__.LCID = Math.round(1053);
			//@line 588
			__CLASS__COCODATAFIELD__.PRECISION = Math.round(0);
			//@line 589
			__CLASS__COCODATAFIELD__.SCALE = Math.round(0);
			//@line 590
			__CLASS__COCODATAFIELD__.SIZE = Math.round(0);
			//@line 591
			__CLASS__COCODATAFIELD__.LENGTH = Math.round(0);
			//@line 592
			__CLASS__COCODATAFIELD__.FLAGS = SQLITE_COLUMN_FLAGS.DEFAULT_FLAGS;
			//@line 593
			__CLASS__COCODATAFIELD__.SQLITE_DATATYPE = SQLITE_INTERNAL_TYPE.SQLITE_VT_TEXT;
			//@line 594
			__CLASS__COCODATAFIELD__.SQLITE_DECLARED_TYPE = "Text";
			//@line 595
			__CLASS__COCODATAFIELD__.SQLITE_PK_COLUMN = "";
			//@line 596
			__CLASS__COCODATAFIELD__.SQLITE_PK_TABLE = "";
			//@line 597
			__CLASS__COCODATAFIELD__.DEFAULTVALUE = "";
			//@line 598
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor(__CLASS__COCODATAFIELD__$dataset__);
		return this;
	}
	__CocoDataField.prototype.constructor = __CocoDataField;
	return new __CocoDataField(__CLASS__COCODATAFIELD__$dataset__);
}
CocoDataField.__PRIVATE__ = {};
CocoDataField.__PROTECTED__ = {};
//@line 741

function CocoDataRow(__CLASS__COCODATAROW__$dataset__)
{
	var __BASE__ = null;

	function __CocoDataRow(__CLASS__COCODATAROW__$dataset__)
	{
		var __PDEFINE__ = Object.defineProperty;
		var __NOENUM__ = {enumerable:false};
		var __CLASS__COCODATAROW__ = this.__CLASS__COCODATAROW__ = this;
		var __THIS__ = this;
		this.toString = function ()
		{
			return 'CocoDataRow'
		};
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { __THIS__ = v; } });
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		};
		var __PRIVATE__ = this.__PRIVATE__ = {};
		var __PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 808
		this.__className = "CocoDataRow";
		//@line 743
		__PRIVATE__.dataset = null;
		//@line 744
		this.STATUS = null;
		//@line 745
		this.FieldValues = [];
		//@line 766
		this.write = function (ds)
		{
			//@line 768
			var fieldCount = __CLASS__COCODATAROW__.__PRIVATE__.dataset.METADATA.size();
			//@line 771
			ds.writeInteger(Math.round(__CLASS__COCODATAROW__.STATUS));
			//@line 774
			for (var i = 0; i < fieldCount; i++)
			//@line 775
			{
				//@line 776
				ds.writeString(__CLASS__COCODATAROW__.FieldValues[i]);
				//@line 777
			}
			//@line 778
		};
		//@line 781
		this.read = function (ds)
		{
			//@line 783
			var fieldCount = __CLASS__COCODATAROW__.__PRIVATE__.dataset.METADATA.size();
			//@line 786
			__CLASS__COCODATAROW__.STATUS = (ds.readInteger());
			//@line 789
			for (var i = 0; i < fieldCount; i++)
			//@line 790
			{
				//@line 791
				__CLASS__COCODATAROW__.FieldValues[i] = ds.readString();
				//@line 792
			}
			//@line 793
		};
		//@line 796
		this.toJSON = function ()
		{
			//@line 798
			var t = new Array;
			//@line 799
			var fieldCount = __CLASS__COCODATAROW__.__PRIVATE__.dataset.METADATA.size();
			//@line 800
			for (var i = 0; i < fieldCount; i++)
			//@line 801
			{
				//@line 802
				t.push("\"" + __CLASS__COCODATAROW__.FieldValues[i] + "\"");
				//@line 803
			}
			//@line 804
			var s = "{\"STATUS\":" + String(__CLASS__COCODATAROW__.STATUS) + ", \"DATA\":[" + t.join(",") + "]}";
			//@line 805
			{
				t && ((t.hasOwnProperty('Destructor') && t.Destructor()) || !t.hasOwnProperty('Destructor')) && (delete t);
				t = null
			};
			//@line 806
			return s;
			return "" //@line 807
		};
		//@line 759
		this.Destructor = function ()
		{
			{
				//@line 761
				__CLASS__COCODATAROW__.__PRIVATE__.dataset = null;
				//@line 762
				{
					__CLASS__COCODATAROW__.FieldValues && ((__CLASS__COCODATAROW__.FieldValues.hasOwnProperty('Destructor') && __CLASS__COCODATAROW__.FieldValues.Destructor()) || !__CLASS__COCODATAROW__.FieldValues.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATAROW__.FieldValues);
					__CLASS__COCODATAROW__.FieldValues = null
				};
				//@line 763
			}
			{
				__CLASS__COCODATAROW__.__PRIVATE__.dataset = null;
				__CLASS__COCODATAROW__.FieldValues = null;
			}
			return true
		};
		//@line 748
		this.Constructor = function (dataset)
		{
			//@line 750
			__CLASS__COCODATAROW__.__PRIVATE__.dataset = dataset;
			//@line 751
			__CLASS__COCODATAROW__.STATUS = SQLITE_RECORD_STATUS.RECORD_UNCHANGED;
			//@line 752
			__CLASS__COCODATAROW__.FieldValues = new Array;
			//@line 753
			var L = dataset.METADATA.size();
			//@line 754
			for (var i = 0; i < L; i++)
			//@line 755
			__CLASS__COCODATAROW__.FieldValues.push(NULL_DATA_VALUE);
			//@line 756
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor(__CLASS__COCODATAROW__$dataset__);
		return this;
	}
	__CocoDataRow.prototype.constructor = __CocoDataRow;
	return new __CocoDataRow(__CLASS__COCODATAROW__$dataset__);
}
CocoDataRow.__PRIVATE__ = {};
CocoDataRow.__PROTECTED__ = {};
//@line 819

function CocoDataset()
{
	var __BASE__ = null;

	function __CocoDataset()
	{
		var __PDEFINE__ = Object.defineProperty;
		var __NOENUM__ = {enumerable:false};
		var __CLASS__COCODATASET__ = this.__CLASS__COCODATASET__ = this;
		var __THIS__ = this;
		this.toString = function ()
		{
			return 'CocoDataset'
		};
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { __THIS__ = v; } });
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		};
		var __PRIVATE__ = this.__PRIVATE__ = {};
		var __PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 1541
		this.__className = "CocoDataset";
		//@line 821
		this.fileName = "";
		//@line 822
		this.SQL = "";
		//@line 823
		this.METADATA = [];
		//@line 824
		this.DATA = [];
		//@line 825
		this.ACCESS = null;
		//@line 826
		this.__recordIndex = 0;
		//@line 827
		this.DB_EOF = false;
		//@line 828
		this.DB_BOF = false;
		//@line 829
		this.stringForNull = "";
		//@line 830
		this.StatusFilter = null;
		//@line 832
		__PRIVATE__.ds = null;
		//@line 930
		this.open = function (database, SQL)
		{
			//@line 932
			var ret = false;
			//@line 933
			__CLASS__COCODATASET__.close();
			//@line 934
			database = __path.resolve(database);
			//@line 935
			var buff = Coconut2D.SELECT(database, SQL);
			//@line 936
			if (buff)
			//@line 937
			{
				//@line 938
				var ds = new CocoDataStream;
				//@line 939
				if (ds.openFromArrayBuffer(buff))
				//@line 940
				{
					//@line 941
					ret = __CLASS__COCODATASET__.openFromDataStream(ds);
					//@line 942
				}
				//@line 943
				{
					ds && ((ds.hasOwnProperty('Destructor') && ds.Destructor()) || !ds.hasOwnProperty('Destructor')) && (delete ds);
					ds = null
				};
				//@line 944
				{
					buff && ((buff.hasOwnProperty('Destructor') && buff.Destructor()) || !buff.hasOwnProperty('Destructor')) && (delete buff);
					buff = null
				};
				//@line 945
			}
			//@line 946
			return ret;
			return false //@line 947
		};
		//@line 950
		this.update = function ()
		{
			//@line 952
			var ret = false;
			//@line 953
			var in_buff = __CLASS__COCODATASET__.toArrayBuffer();
			//@line 954
			if (in_buff)
			//@line 955
			{
				//@line 956
				var out_buff = Coconut2D.UPDATE(in_buff);
				//@line 957
				if (out_buff)
				//@line 958
				{
					//@line 959
					var ds = new CocoDataStream;
					//@line 960
					if (ds.openFromArrayBuffer(out_buff))
					//@line 961
					{
						//@line 962
						ret = __CLASS__COCODATASET__.openFromDataStream(ds);
						//@line 963
					}
					//@line 964
					{
						ds && ((ds.hasOwnProperty('Destructor') && ds.Destructor()) || !ds.hasOwnProperty('Destructor')) && (delete ds);
						ds = null
					};
					//@line 965
					{
						out_buff && ((out_buff.hasOwnProperty('Destructor') && out_buff.Destructor()) || !out_buff.hasOwnProperty('Destructor')) && (delete out_buff);
						out_buff = null
					};
					//@line 966
				}
				//@line 967
				{
					in_buff && ((in_buff.hasOwnProperty('Destructor') && in_buff.Destructor()) || !in_buff.hasOwnProperty('Destructor')) && (delete in_buff);
					in_buff = null
				};
				//@line 968
			}
			//@line 969
			return ret;
			return false //@line 970
		};
		//@line 975
		this.openFromArrayBuffer = function (ab)
		{
			//@line 977
			var ret = false;
			//@line 978
			var ds = new CocoDataStream;
			//@line 979
			if (ds.openFromArrayBuffer(ab))
			//@line 980
			ret = __CLASS__COCODATASET__.openFromDataStream(ds);
			//@line 981
			{
				ds && ((ds.hasOwnProperty('Destructor') && ds.Destructor()) || !ds.hasOwnProperty('Destructor')) && (delete ds);
				ds = null
			};
			//@line 982
			return ret;
			return false //@line 983
		};
		//@line 986
		this.openFromDataStream = function (ds)
		{
			//@line 988
			__CLASS__COCODATASET__.close();
			//@line 990
			var i = 0;
			//@line 991
			var recordCount = 0;
			//@line 992
			var filedCount = 0;
			//@line 994
			if (ds.readString() == "SQLiteRowset.1")
			//@line 995
			{
				//@line 996
				__CLASS__COCODATASET__.fileName = ds.readString();
				//@line 997
				__CLASS__COCODATASET__.SQL = ds.readString();
				//@line 998
				__CLASS__COCODATASET__.ACCESS = (ds.readInteger());
				//@line 1000
				filedCount = Math.round(ds.readInteger());
				//@line 1001
				for (i = Math.round(0); i < filedCount; i++)
				//@line 1002
				{
					//@line 1003
					var COL = new CocoDataField(__THIS__);
					//@line 1004
					COL.read(ds);
					//@line 1005
					__CLASS__COCODATASET__.METADATA.push(COL);
					//@line 1006
				}
				//@line 1008
				recordCount = Math.round(ds.readInteger());
				//@line 1009
				for (i = Math.round(0); i < recordCount; i++)
				//@line 1010
				{
					//@line 1011
					var ROW = new CocoDataRow(__THIS__);
					//@line 1012
					ROW.read(ds);
					//@line 1013
					__CLASS__COCODATASET__.DATA.push(ROW);
					//@line 1014
				}
				//@line 1016
				__CLASS__COCODATASET__.moveFirst();
				//@line 1017
				return true;
				//@line 1018
			}
			//@line 1020
			return false;
			return false //@line 1021
		};
		//@line 1024
		this.write = function (ds)
		{
			//@line 1027
			var i = 0;
			//@line 1028
			var filedCount = __CLASS__COCODATASET__.METADATA.size();
			//@line 1029
			var recordCount = __CLASS__COCODATASET__.DATA.size();
			//@line 1031
			ds.writeString("SQLiteRowset.1");
			//@line 1032
			ds.writeString(__CLASS__COCODATASET__.fileName);
			//@line 1033
			ds.writeString(__CLASS__COCODATASET__.SQL);
			//@line 1034
			ds.writeInteger(__CLASS__COCODATASET__.ACCESS);
			//@line 1036
			ds.writeInteger(filedCount);
			//@line 1037
			for (i = Math.round(0); i < filedCount; i++)
			//@line 1038
			{
				//@line 1039
				__CLASS__COCODATASET__.METADATA[i].write(ds);
				//@line 1040
			}
			//@line 1042
			ds.writeInteger(recordCount);
			//@line 1043
			for (i = Math.round(0); i < recordCount; i++)
			//@line 1044
			{
				//@line 1045
				__CLASS__COCODATASET__.DATA[i].write(ds);
				//@line 1046
			}
			//@line 1048
			return true;
			return false //@line 1049
		};
		//@line 1052
		this.close = function ()
		{
			//@line 1054
			__CLASS__COCODATASET__.__recordIndex = Math.round(-1);
			//@line 1055
			__CLASS__COCODATASET__.DB_EOF = false;
			//@line 1056
			__CLASS__COCODATASET__.DB_BOF = false;
			//@line 1057
			__CLASS__COCODATASET__.ACCESS = SQLITE_TABLE_ACCESS.CAN_CRUD;
			//@line 1060
			var i = 0;
			//@line 1061
			if (__CLASS__COCODATASET__.METADATA)
			//@line 1062
			{
				//@line 1063
				var filedCount = __CLASS__COCODATASET__.METADATA.size();
				//@line 1064
				for (i = Math.round(0); i < filedCount; i++)
				//@line 1065
				{
					//@line 1066
					var COL = __CLASS__COCODATASET__.METADATA[i];
					//@line 1067
					{
						COL && ((COL.hasOwnProperty('Destructor') && COL.Destructor()) || !COL.hasOwnProperty('Destructor')) && (delete COL);
						COL = null
					};
					//@line 1068
				}
				//@line 1069
				__CLASS__COCODATASET__.METADATA.clear();
				//@line 1070
			}
			//@line 1072
			if (__CLASS__COCODATASET__.DATA)
			//@line 1073
			{
				//@line 1074
				var recordCount = __CLASS__COCODATASET__.DATA.size();
				//@line 1075
				for (i = Math.round(0); i < recordCount; i++)
				//@line 1076
				{
					//@line 1077
					var ROW = __CLASS__COCODATASET__.DATA[i];
					//@line 1078
					{
						ROW && ((ROW.hasOwnProperty('Destructor') && ROW.Destructor()) || !ROW.hasOwnProperty('Destructor')) && (delete ROW);
						ROW = null
					};
					//@line 1079
				}
				//@line 1080
				__CLASS__COCODATASET__.DATA.clear();
				//@line 1081
			}
			//@line 1082
		};
		//@line 1085
		this.ADD_META = function (ORDINAL, NAME, TYPE, PRECISION, SCALE, LENGTH, FLAGS, BASECOLUMNNAME, BASETABLENAME, ID, LCID, SIZE, SQLITE_DECLARED_TYPE, SQLITE_PK_COLUMN, SQLITE_PK_TABLE, SQLITE_DATATYPE, DEFAULTVALUE)
		{
			ORDINAL = Math.round(ORDINAL);
			PRECISION = Math.round(PRECISION);
			SCALE = Math.round(SCALE);
			LENGTH = Math.round(LENGTH);
			LCID = Math.round(LCID);
			SIZE = Math.round(SIZE);
			//@line 1105
			var COL = new CocoDataField(__THIS__);
			//@line 1107
			COL.ORDINAL = Math.round(ORDINAL);
			//@line 1108
			COL.ID = ID;
			//@line 1109
			COL.NAME = NAME;
			//@line 1110
			COL.BASECOLUMNNAME = BASECOLUMNNAME;
			//@line 1111
			COL.BASETABLENAME = BASETABLENAME;
			//@line 1112
			COL.TYPE = TYPE;
			//@line 1113
			COL.LCID = Math.round(LCID);
			//@line 1114
			COL.PRECISION = Math.round(PRECISION);
			//@line 1115
			COL.SCALE = Math.round(SCALE);
			//@line 1116
			COL.SIZE = Math.round(SIZE);
			//@line 1117
			COL.LENGTH = Math.round(LENGTH);
			//@line 1118
			COL.FLAGS = FLAGS;
			//@line 1119
			COL.SQLITE_DATATYPE = SQLITE_DATATYPE;
			//@line 1120
			COL.SQLITE_DECLARED_TYPE = SQLITE_DECLARED_TYPE;
			//@line 1121
			COL.SQLITE_PK_COLUMN = SQLITE_PK_COLUMN;
			//@line 1122
			COL.SQLITE_PK_TABLE = SQLITE_PK_TABLE;
			//@line 1123
			COL.DEFAULTVALUE = DEFAULTVALUE;
			//@line 1125
			__CLASS__COCODATASET__.METADATA.push(COL);
			//@line 1126
		};
		//@line 1129
		this.ADD_DATA = function (length)
		{
			arguments = Array.prototype.slice.call(arguments, 0);
			length = Math.round(length);
			//@line 1131
			var ROW = new CocoDataRow(__THIS__);
			//@line 1132
			var L = arguments.size();
			//@line 1133
			for (var i = 1; i < L; i++)
			//@line 1134
			{
				//@line 1135
				ROW.FieldValues[i] = arguments[i];
				//@line 1136
			}
			//@line 1137
			__CLASS__COCODATASET__.DATA.push(ROW);
			//@line 1138
		};
		//@line 1141
		this.__PRIVATE__.isSet = function (v, flags)
		{
			//@line 1143
			if ((flags & SQLITE_RECORD_STATUS.RECORD_CHANGED) == SQLITE_RECORD_STATUS.RECORD_CHANGED)
			//@line 1144
			{
				//@line 1145
				if ((v & SQLITE_RECORD_STATUS.RECORD_CHANGED) == SQLITE_RECORD_STATUS.RECORD_CHANGED)
				//@line 1146
				return true;
				//@line 1147
			}
			//@line 1149
			if ((flags & SQLITE_RECORD_STATUS.RECORD_UNCHANGED) == SQLITE_RECORD_STATUS.RECORD_UNCHANGED)
			//@line 1150
			{
				//@line 1151
				if ((v & SQLITE_RECORD_STATUS.RECORD_UNCHANGED) == SQLITE_RECORD_STATUS.RECORD_UNCHANGED)
				//@line 1152
				return true;
				//@line 1153
			}
			//@line 1155
			if ((flags & SQLITE_RECORD_STATUS.RECORD_INSERTED) == SQLITE_RECORD_STATUS.RECORD_INSERTED)
			//@line 1156
			{
				//@line 1157
				if ((v & SQLITE_RECORD_STATUS.RECORD_INSERTED) == SQLITE_RECORD_STATUS.RECORD_INSERTED)
				//@line 1158
				return true;
				//@line 1159
			}
			//@line 1161
			if ((flags & SQLITE_RECORD_STATUS.RECORD_DELETED) == SQLITE_RECORD_STATUS.RECORD_DELETED)
			//@line 1162
			{
				//@line 1163
				if ((v & SQLITE_RECORD_STATUS.RECORD_DELETED) == SQLITE_RECORD_STATUS.RECORD_DELETED)
				//@line 1164
				return true;
				//@line 1165
			}
			//@line 1167
			return false;
			return false //@line 1168
		};
		//@line 1180
		this.recordCount = function (Status)
		{
			Status = String(Status) != 'undefined' ? Status : SQLITE_RECORD_STATUS.RECORD_ALL;
			//@line 1182
			if (Status == SQLITE_RECORD_STATUS.RECORD_ALL)
			//@line 1183
			return __CLASS__COCODATASET__.DATA.size();
			//@line 1185
			var recordCount = 0;
			//@line 1186
			var i = 0;
			//@line 1187
			var L = __CLASS__COCODATASET__.DATA.size();
			//@line 1189
			for (i = Math.round(0); i < L; i++)
			//@line 1190
			{
				//@line 1191
				if (__CLASS__COCODATASET__.__PRIVATE__.isSet(__CLASS__COCODATASET__.DATA[i].STATUS, Status))
				//@line 1192
				recordCount++;
				//@line 1193
			}
			//@line 1195
			return recordCount;
			return 0 //@line 1196
		};
		//@line 1199
		this.__PRIVATE__.row_to_record = function (rowIndex, Status)
		{
			rowIndex = Math.round(rowIndex);
			//@line 1201
			var r = -1;
			//@line 1202
			var i = 0;
			//@line 1203
			var L = __CLASS__COCODATASET__.DATA.size();
			//@line 1205
			for (i = Math.round(0); i < L; i++)
			//@line 1206
			{
				//@line 1207
				if (__CLASS__COCODATASET__.__PRIVATE__.isSet(__CLASS__COCODATASET__.DATA[i].STATUS, Status))
				//@line 1208
				{
					//@line 1209
					if (++r == rowIndex)
					//@line 1210
					break;
					//@line 1211
				}
				//@line 1212
			}
			//@line 1214
			return i;
			return 0 //@line 1215
		};
		//@line 1218
		this.getMatrix = function (Row, Col)
		{
			Row = Math.round(Row);
			Col = Math.round(Col);
			//@line 1223
			__CLASS__COCODATASET__.__recordIndex = Math.round(__CLASS__COCODATASET__.__PRIVATE__.row_to_record(Row, __CLASS__COCODATASET__.StatusFilter));
			//@line 1224
			if (!__CLASS__COCODATASET__.moved()) return NULL_DATA_VALUE;
			//@line 1226
			if (__CLASS__COCODATASET__.__recordIndex >= 0 && __CLASS__COCODATASET__.__recordIndex < __CLASS__COCODATASET__.DATA.size() && Col >= 0 && Col < __CLASS__COCODATASET__.METADATA.size())
			//@line 1227
			{
				//@line 1228
				var value = __CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].FieldValues[Col];
				//@line 1230
				if (value == NULL_DATA_VALUE)
				//@line 1231
				value = __CLASS__COCODATASET__.stringForNull;
				//@line 1233
				return value;
				//@line 1234
			}
			//@line 1236
			return NULL_DATA_VALUE;
			return "" //@line 1237
		};
		//@line 1240
		this.putMatrix = function (Row, Col, value)
		{
			Row = Math.round(Row);
			Col = Math.round(Col);
			//@line 1245
			__CLASS__COCODATASET__.__recordIndex = Math.round(__CLASS__COCODATASET__.__PRIVATE__.row_to_record(Row, __CLASS__COCODATASET__.StatusFilter));
			//@line 1247
			if (__CLASS__COCODATASET__.__recordIndex >= 0 && __CLASS__COCODATASET__.__recordIndex < __CLASS__COCODATASET__.DATA.size() && Col >= 0 && Col < __CLASS__COCODATASET__.METADATA.size() && __CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].STATUS != SQLITE_RECORD_STATUS.RECORD_DELETED)
			//@line 1248
			{
				//@line 1249
				if (value == __CLASS__COCODATASET__.stringForNull)
				//@line 1250
				value = NULL_DATA_VALUE;
				//@line 1252
				if (__CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].FieldValues[Col] != value)
				//@line 1253
				{
					//@line 1254
					__CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].FieldValues[Col] = value;
					//@line 1256
					if (__CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].STATUS != SQLITE_RECORD_STATUS.RECORD_INSERTED)
					//@line 1257
					__CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].STATUS = SQLITE_RECORD_STATUS.RECORD_CHANGED;
					//@line 1258
				}
				//@line 1260
				return true;
				//@line 1261
			}
			//@line 1263
			return false;
			return false //@line 1264
		};
		//@line 1267
		this.status = function ()
		{
			//@line 1269
			if (__CLASS__COCODATASET__.__recordIndex >= 0 && __CLASS__COCODATASET__.__recordIndex < __CLASS__COCODATASET__.DATA.size())
			//@line 1270
			return __CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].STATUS;
			else
			//@line 1272
			return SQLITE_RECORD_STATUS.RECORD_NO_RECORD;
			//@line 1273
		};
		//@line 1276
		this.move = function (recordIndex)
		{
			recordIndex = Math.round(recordIndex);
			//@line 1278
			if (recordIndex >= 0 && recordIndex < __CLASS__COCODATASET__.DATA.size())
			//@line 1279
			{
				//@line 1280
				__CLASS__COCODATASET__.__recordIndex = Math.round(recordIndex);
				//@line 1281
				return __CLASS__COCODATASET__.moved();
				//@line 1282
			}
			//@line 1283
			return false;
			return false //@line 1284
		};
		//@line 1287
		this.moveFirst = function ()
		{
			//@line 1289
			__CLASS__COCODATASET__.__recordIndex = Math.round(0);
			//@line 1290
			return __CLASS__COCODATASET__.moved();
			return false //@line 1291
		};
		//@line 1294
		this.moveLast = function ()
		{
			//@line 1296
			__CLASS__COCODATASET__.__recordIndex = Math.round(__CLASS__COCODATASET__.DATA.size() - 1);
			//@line 1297
			return __CLASS__COCODATASET__.moved();
			return false //@line 1298
		};
		//@line 1301
		this.moveNext = function ()
		{
			//@line 1303
			__CLASS__COCODATASET__.__recordIndex++;
			//@line 1304
			return __CLASS__COCODATASET__.moved();
			return false //@line 1305
		};
		//@line 1308
		this.movePrev = function ()
		{
			//@line 1310
			__CLASS__COCODATASET__.__recordIndex--;
			//@line 1311
			return __CLASS__COCODATASET__.moved();
			return false //@line 1312
		};
		//@line 1315
		this.moved = function ()
		{
			//@line 1317
			var records = __CLASS__COCODATASET__.DATA.size();
			//@line 1319
			if (records == 0)
			//@line 1320
			{
				//@line 1321
				__CLASS__COCODATASET__.DB_EOF = true;
				//@line 1322
				__CLASS__COCODATASET__.DB_BOF = true;
				//@line 1323
				__CLASS__COCODATASET__.__recordIndex = Math.round(-1);
				//@line 1324
				return true;
				//@line 1325
			}
			//@line 1327
			if (records > 0 && __CLASS__COCODATASET__.__recordIndex >= records) __CLASS__COCODATASET__.__recordIndex = Math.round(records);
			//@line 1328
			if (records > 0 && __CLASS__COCODATASET__.__recordIndex < 0) __CLASS__COCODATASET__.__recordIndex = Math.round(0);
			//@line 1330
			__CLASS__COCODATASET__.DB_BOF = (records > 0 && __CLASS__COCODATASET__.__recordIndex == 0);
			//@line 1331
			__CLASS__COCODATASET__.DB_EOF = (records > 0 && __CLASS__COCODATASET__.__recordIndex == records);
			//@line 1333
			return (records > 0);
			return false //@line 1334
		};
		//@line 1337
		this.fieldByName = function (name)
		{
			//@line 1339
			var fields = __CLASS__COCODATASET__.METADATA.size();
			//@line 1340
			if (fields > 0)
			//@line 1341
			{
				//@line 1342
				for (var i = 0; i < fields; i++)
				//@line 1343
				{
					//@line 1344
					var COL = __CLASS__COCODATASET__.METADATA[i];
					//@line 1345
					if (COL != null && (COL.NAME == name || COL.ID == name))
					//@line 1346
					return COL;
					//@line 1347
				}
				//@line 1348
			}
			//@line 1349
			return null;
			//@line 1350
		};
		//@line 1353
		this.fieldByIndex = function (ordinal)
		{
			ordinal = Math.round(ordinal);
			//@line 1355
			var fields = __CLASS__COCODATASET__.METADATA.size();
			//@line 1356
			if (fields > 0 && ordinal >= 0 && ordinal < fields)
			//@line 1357
			{
				//@line 1358
				return __CLASS__COCODATASET__.METADATA[ordinal];
				//@line 1359
			}
			//@line 1360
			return null;
			//@line 1361
		};
		//@line 1364
		this.insertRecord = function ()
		{
			//@line 1366
			if ((__CLASS__COCODATASET__.ACCESS & SQLITE_TABLE_ACCESS.CAN_INSERT) != SQLITE_TABLE_ACCESS.CAN_INSERT)
			//@line 1367
			return false;
			//@line 1369
			if (__CLASS__COCODATASET__.METADATA.size())
			//@line 1370
			{
				//@line 1371
				var RECORD = new CocoDataRow(__THIS__);
				//@line 1372
				RECORD.STATUS = SQLITE_RECORD_STATUS.RECORD_INSERTED;
				//@line 1373
				__CLASS__COCODATASET__.DATA.push(RECORD);
				//@line 1374
				__CLASS__COCODATASET__.__recordIndex = Math.round(__CLASS__COCODATASET__.DATA.size() - 1);
				//@line 1375
				__CLASS__COCODATASET__.moved();
				//@line 1376
				return true;
				//@line 1377
			}
			//@line 1378
			return false;
			return false //@line 1379
		};
		//@line 1382
		this.deleteRecord = function ()
		{
			//@line 1384
			if ((__CLASS__COCODATASET__.ACCESS & SQLITE_TABLE_ACCESS.CAN_DELETE) != SQLITE_TABLE_ACCESS.CAN_DELETE)
			//@line 1385
			return false;
			//@line 1387
			if (__CLASS__COCODATASET__.METADATA.size() && __CLASS__COCODATASET__.__recordIndex >= 0 && __CLASS__COCODATASET__.__recordIndex < __CLASS__COCODATASET__.DATA.size())
			//@line 1388
			{
				//@line 1389
				__CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].STATUS = SQLITE_RECORD_STATUS.RECORD_DELETED;
				//@line 1390
				return true;
				//@line 1391
			}
			//@line 1392
			return false;
			return false //@line 1393
		};
		//@line 1396
		this.locate = function (fieldName, fieldValue)
		{
			//@line 1398
			var index = __CLASS__COCODATASET__.__recordIndex;
			//@line 1399
			var c = __CLASS__COCODATASET__.fieldByName(fieldName).ORDINAL;
			//@line 1400
			if (c >= 0 && c < __CLASS__COCODATASET__.METADATA.size())
			//@line 1401
			{
				//@line 1402
				var L = __CLASS__COCODATASET__.DATA.size();
				//@line 1403
				for (var r = 0; r < L; r++)
				//@line 1404
				{
					//@line 1405
					if (__CLASS__COCODATASET__.DATA[r].FieldValues[c] == fieldValue)
					//@line 1406
					{
						//@line 1407
						__CLASS__COCODATASET__.__recordIndex = Math.round(r);
						//@line 1408
						return __CLASS__COCODATASET__.moved();
						//@line 1409
					}
					//@line 1410
				}
				//@line 1411
				__CLASS__COCODATASET__.__recordIndex = Math.round(index);
				//@line 1412
				__CLASS__COCODATASET__.moved();
				//@line 1413
			}
			//@line 1414
			return false;
			return false //@line 1415
		};
		//@line 1418
		this.getBookmark = function ()
		{
			//@line 1420
			var bookmark = "";
			//@line 1421
			if (__CLASS__COCODATASET__.__recordIndex >= 0 && __CLASS__COCODATASET__.__recordIndex < __CLASS__COCODATASET__.DATA.size())
			//@line 1422
			{
				//@line 1423
				var fieldCount = __CLASS__COCODATASET__.METADATA.size();
				//@line 1424
				for (var i = 0; i < fieldCount; i++)
				//@line 1425
				bookmark += "{" + __CLASS__COCODATASET__.DATA[__CLASS__COCODATASET__.__recordIndex].FieldValues[i] + "}";
				//@line 1426
				bookmark = md5(bookmark);
				//@line 1427
			}
			//@line 1428
			return bookmark;
			return "" //@line 1429
		};
		//@line 1432
		this.setBookmark = function (bookmark)
		{
			//@line 1434
			if (bookmark == "") return false;
			//@line 1435
			var recordCount = __CLASS__COCODATASET__.DATA.size();
			//@line 1436
			var fieldCount = __CLASS__COCODATASET__.METADATA.size();
			//@line 1437
			for (var r = 0; r < recordCount; r++)
			//@line 1438
			{
				//@line 1439
				var bm = "";
				//@line 1440
				for (var c = 0; c < fieldCount; c++)
				//@line 1441
				{
					//@line 1442
					bm += "{" + __CLASS__COCODATASET__.DATA[r].FieldValues[c] + "}";
					//@line 1443
				}
				//@line 1444
				if (bookmark == md5(bm))
				//@line 1445
				{
					//@line 1446
					return __CLASS__COCODATASET__.moved();
					//@line 1447
				}
				//@line 1448
			}
			//@line 1449
			return false;
			return false //@line 1450
		};
		//@line 1454
		this.toArrayBuffer = function ()
		{
			//@line 1456
			var ds = new CocoDataStream;
			//@line 1457
			if (__CLASS__COCODATASET__.write(ds))
			//@line 1458
			{
				//@line 1460
				return ds.buffer.buffer;
				//@line 1461
			}
			//@line 1462
			return null;
			//@line 1463
		};
		//@line 1466
		this.toBase64 = function ()
		{
			//@line 1469
			var buffer = __CLASS__COCODATASET__.toArrayBuffer();
			//@line 1470
			var binary = "";
			//@line 1471
			var bytes = new Uint8Array(buffer);
			//@line 1472
			var len = bytes.byteLength;
			//@line 1473
			for (var i = 0; i < len; i++)
			//@line 1474
			{
				//@line 1475
				binary += String.fromCharCode(bytes[i]);
				//@line 1476
			}
			//@line 1477
			{
				buffer && ((buffer.hasOwnProperty('Destructor') && buffer.Destructor()) || !buffer.hasOwnProperty('Destructor')) && (delete buffer);
				buffer = null
			};
			//@line 1478
			{
				bytes && ((bytes.hasOwnProperty('Destructor') && bytes.Destructor()) || !bytes.hasOwnProperty('Destructor')) && (delete bytes);
				bytes = null
			};
			//@line 1479
			return "data:coconut2d/datastream;base64," + btoa(binary);
			return "" //@line 1480
		};
		//@line 1483
		this.toJSON = function ()
		{
			//@line 1485
			var s = "";
			//@line 1486
			var fieldCount = __CLASS__COCODATASET__.METADATA.size();
			//@line 1487
			var recordCount = __CLASS__COCODATASET__.DATA.size();
			//@line 1489
			if (fieldCount > 0)
			//@line 1490
			{
				//@line 1491
				var i = 0;
				//@line 1492
				var t = new Array;
				//@line 1494
				for (i = Math.round(0); i < fieldCount; i++)
				//@line 1495
				{
					//@line 1496
					t.push(__CLASS__COCODATASET__.fieldByIndex(i).toJSON());
					//@line 1497
				}
				//@line 1498
				s = "{\"METADATA\":[\n" + t.join(",\n") + "],\n\"DATA\":[";
				//@line 1500
				t.clear();
				//@line 1501
				for (i = Math.round(0); i < recordCount; i++)
				//@line 1502
				{
					//@line 1503
					t.push(__CLASS__COCODATASET__.DATA[i].toJSON());
					//@line 1504
				}
				//@line 1505
				s += t.join(",\n") + "]\n}";
				//@line 1507
				{
					t && ((t.hasOwnProperty('Destructor') && t.Destructor()) || !t.hasOwnProperty('Destructor')) && (delete t);
					t = null
				};
				//@line 1508
			}
			//@line 1509
			return s;
			return "" //@line 1510
		};
		//@line 1513
		this.toString = function ()
		{
			//@line 1515
			var s = "";
			//@line 1516
			var fieldCount = __CLASS__COCODATASET__.METADATA.size();
			//@line 1517
			if (fieldCount > 0)
			//@line 1518
			{
				//@line 1519
				var out = new Array;
				//@line 1520
				for (var i = 0; i < fieldCount; i++)
				//@line 1521
				{
					//@line 1522
					s += __CLASS__COCODATASET__.fieldByIndex(i).NAME + " | ";
					//@line 1523
				}
				//@line 1524
				out.push(s);
				//@line 1525
				__CLASS__COCODATASET__.moveFirst();
				//@line 1526
				while (!__CLASS__COCODATASET__.DB_EOF)
				//@line 1527
				{
					//@line 1528
					s = "";
					//@line 1529
					for (var i = 0; i < fieldCount; i++)
					//@line 1530
					{
						//@line 1531
						s += __CLASS__COCODATASET__.fieldByIndex(i).value + " | ";
						//@line 1532
					}
					//@line 1533
					out.push(s);
					//@line 1534
					__CLASS__COCODATASET__.moveNext();
					//@line 1535
				}
				//@line 1536
				s = out.join("\n");
				//@line 1537
				{
					out && ((out.hasOwnProperty('Destructor') && out.Destructor()) || !out.hasOwnProperty('Destructor')) && (delete out);
					out = null
				};
				//@line 1538
			}
			//@line 1539
			return s;
			return "" //@line 1540
		};
		//@line 1171
		Object.defineProperty(this, 'fieldCount', {
			enumerable: true,
			//@line 1173
			get: function ()
			{
				//@line 1175
				return __CLASS__COCODATASET__.METADATA.size();
				return 0 //@line 1176
			}
		});
		//@line 851
		this.Destructor = function ()
		{
			{
				//@line 853
				__CLASS__COCODATASET__.close();
				//@line 854
				{
					__CLASS__COCODATASET__.METADATA && ((__CLASS__COCODATASET__.METADATA.hasOwnProperty('Destructor') && __CLASS__COCODATASET__.METADATA.Destructor()) || !__CLASS__COCODATASET__.METADATA.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASET__.METADATA);
					__CLASS__COCODATASET__.METADATA = null
				};
				//@line 855
				{
					__CLASS__COCODATASET__.DATA && ((__CLASS__COCODATASET__.DATA.hasOwnProperty('Destructor') && __CLASS__COCODATASET__.DATA.Destructor()) || !__CLASS__COCODATASET__.DATA.hasOwnProperty('Destructor')) && (delete __CLASS__COCODATASET__.DATA);
					__CLASS__COCODATASET__.DATA = null
				};
				//@line 856
			}
			{
				__CLASS__COCODATASET__.METADATA = null;
				__CLASS__COCODATASET__.DATA = null;
				__CLASS__COCODATASET__.__PRIVATE__.ds = null;
			}
			return true
		};
		//@line 835
		this.Constructor = function ()
		{
			//@line 837
			__CLASS__COCODATASET__.fileName = "";
			//@line 838
			__CLASS__COCODATASET__.SQL = "";
			//@line 839
			__CLASS__COCODATASET__.METADATA = new Array;
			//@line 840
			__CLASS__COCODATASET__.DATA = new Array;
			//@line 841
			__CLASS__COCODATASET__.ACCESS = SQLITE_TABLE_ACCESS.CAN_CRUD;
			//@line 842
			__CLASS__COCODATASET__.__recordIndex = Math.round(-1);
			//@line 843
			__CLASS__COCODATASET__.DB_EOF = true;
			//@line 844
			__CLASS__COCODATASET__.DB_BOF = true;
			//@line 845
			__CLASS__COCODATASET__.StatusFilter = SQLITE_RECORD_STATUS.RECORD_ALL;
			//@line 846
			__CLASS__COCODATASET__.ACCESS = SQLITE_TABLE_ACCESS.CAN_CRUD;
			//@line 847
			__CLASS__COCODATASET__.stringForNull = "Null";
			//@line 848
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor();
		return this;
	}
	__CocoDataset.prototype.constructor = __CocoDataset;
	return new __CocoDataset();
}
CocoDataset.__PRIVATE__ = {};
CocoDataset.__PROTECTED__ = {};
module.exports.DBTYPEENUM = DBTYPEENUM;
module.exports.SQLITE_RECORD_STATUS = SQLITE_RECORD_STATUS;
module.exports.SQLITE_TABLE_ACCESS = SQLITE_TABLE_ACCESS;
module.exports.SQLITE_COLUMN_FLAGS = SQLITE_COLUMN_FLAGS;
module.exports.SQLITE_SCHEMA_ENUM = SQLITE_SCHEMA_ENUM;
module.exports.SQLITE_INTERNAL_TYPE = SQLITE_INTERNAL_TYPE;
module.exports.SQLITE_VARTYPE = SQLITE_VARTYPE;
module.exports.CocoDataStream = CocoDataStream;
module.exports.CocoDataField = CocoDataField;
module.exports.CocoDataRow = CocoDataRow;
module.exports.CocoDataset = CocoDataset;