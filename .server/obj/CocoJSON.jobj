//@line 26

function CocoJSON(__CLASS__COCOJSON__$json__)
{
	var __BASE__ = null;

	function __CocoJSON(__CLASS__COCOJSON__$json__)
	{
		var __PDEFINE__ = Object.defineProperty;
		var __NOENUM__ = {enumerable:false};
		var __CLASS__COCOJSON__ = this.__CLASS__COCOJSON__ = this;
		var __THIS__ = this;
		this.toString = function ()
		{
			return 'CocoJSON'
		};
		__PDEFINE__(this, '__THIS__', { enumerable: false, get: function () { return __THIS__; }, set: function (v) { __THIS__ = v; } });
		var __VIRTUAL__ = this.__VIRTUAL__ =
		{
			__PROTECTED__: {}
		};
		var __PRIVATE__ = this.__PRIVATE__ = {};
		var __PROTECTED__ = this.__PROTECTED__ = {};
		__PDEFINE__(this, '__PRIVATE__', __NOENUM__);
		__PDEFINE__(this, '__PROTECTED__', __NOENUM__);
		//@line 66
		this.__className = "CocoJSON";
		//@line 28
		__PRIVATE__.json = null;
		//@line 42
		this.read = function (dot)
		{
			//@line 44
			var p = __CLASS__COCOJSON__.__PRIVATE__.json;
			//@line 45
			var d = dot.split(".");
			//@line 46
			var k = "";
			//@line 47
			for (var i = 0; i < d.size() - 1; i++)
			//@line 48
			{
				//@line 49
				k = d[i];
				//@line 50
				p = p[k];
				//@line 55
			}
			//@line 56
			k = d[d.size() - 1];
			//@line 57
			var v = "";
			//@line 58
			v = p[d];
			//@line 63
			{
				d && ((d.hasOwnProperty('Destructor') && d.Destructor()) || !d.hasOwnProperty('Destructor')) && (delete d);
				d = null
			};
			//@line 64
			return v;
			return "" //@line 65
		};
		//@line 37
		this.Destructor = function ()
		{
			{
				//@line 39
				{
					__CLASS__COCOJSON__.__PRIVATE__.json && ((__CLASS__COCOJSON__.__PRIVATE__.json.hasOwnProperty('Destructor') && __CLASS__COCOJSON__.__PRIVATE__.json.Destructor()) || !__CLASS__COCOJSON__.__PRIVATE__.json.hasOwnProperty('Destructor')) && (delete __CLASS__COCOJSON__.__PRIVATE__.json);
					__CLASS__COCOJSON__.__PRIVATE__.json = null
				};
				//@line 40
			}
			{
				__CLASS__COCOJSON__.__PRIVATE__.json = null;
			}
			return true
		};
		//@line 31
		this.Constructor = function (json)
		{
			//@line 33
			__CLASS__COCOJSON__.__PRIVATE__.json = JSON.parse(json);
			//@line 34
		};
		__PDEFINE__(this, 'Constructor', __NOENUM__);
		this.Constructor(__CLASS__COCOJSON__$json__);
		return this;
	}
	__CocoJSON.prototype.constructor = __CocoJSON;
	return new __CocoJSON(__CLASS__COCOJSON__$json__);
}
CocoJSON.__PRIVATE__ = {};
CocoJSON.__PROTECTED__ = {};