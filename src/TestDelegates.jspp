"#export web"

// Delegation is like being an integrator that outsources work to a delegate.
// Delegation simply wraps public methods and properties of an delegated object
// in the integrator class and forwards calls to the delegates.
// Delegated members are always public. The delegator however can be public/private/protected.
// The compiler generates the wrapping code for you.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TestOutsourcer
{
 	public function Constructor(){}
 	public function Destructor(){}

 	public function work()
 	{
 		trace("Outsourcer is working...");
 	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TestIntegrator
{
	private delegate var delegator:TestOutsourcer;

 	public function Constructor()
 	{
 		delegator = new TestOutsourcer();
 	}

 	public function Destructor()
 	{
 		delete delegator;
 	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TestIntegratorClient
{
	private var integrator:TestIntegrator;

 	public function Constructor()
 	{
 		// The client asks his integrator to work but the
 		// integrator outsources the work to a delegate.

 		integrator = new TestIntegrator();
 		integrator.work();
 	}

 	public function Destructor()
 	{
 		delete integrator;
 	}
}
