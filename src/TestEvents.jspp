"#export web";
"#export native";

///////////////////////////////////////////////////////
// This class is an events source (produces events)
///////////////////////////////////////////////////////

class UIButtonClass : CocoClip
{
	public var id:String;

	//public event OnClick();
	//public event OnTouchStart(x:Float, y:Float);
	//public event OnTouchMove(x:Float, y:Float);
	//public event OnTouchEnd(x:Float, y:Float);

	public function Constructor(id:String) : CocoClip(null)
	{
		this.id=id;
	}

	public function Destructor()
	{
	}

 	public function work()
 	{
 		this.dispatchEvent(this.OnClick);
 	}
}

///////////////////////////////////////////////////////
// This class is an events source (produces events)
///////////////////////////////////////////////////////
class UITextBoxClass : CocoClip
{
	public var id:String;

	public event OnChange(text:String);
	//public event OnClick();
	//public event OnTouchStart(x:Float, y:Float);
	//public event OnTouchMove(x:Float, y:Float);
	//public event OnTouchEnd(x:Float, y:Float);

	public function Constructor(id:String) : CocoClip(null)
	{
		this.id=id;
	}

	public function Destructor()
	{
	}

 	public function work()
 	{
 		dispatchEvent(this.OnClick);
 		this.dispatchEvent(this.OnChange, "test1");
 		this.dispatchEvent(this.OnTouchStart, 5, 6);
 	}
}


///////////////////////////////////////////////////////
// This class is an event listener (receives events)
///////////////////////////////////////////////////////

class UIFormClass : CocoClip implements IEventListener
{
	private var button1:UIButtonClass;
	private var text1:UITextBoxClass;
	private var text2:UITextBoxClass;
	private var scrollLastTime:Time;
	private var scrollLastPointY:Float;
	private var scrollSpeedY:Float;
	private var minY:Float;
	private var maxY:Float;
	private var bounceY:Boolean;
	private var KF:CocoKeyFrame;

 	public function Constructor(name:String, scene:CocoScene) : CocoClip(null)
 	{
		scrollSpeedY = 0.0;
		minY = 250.0 - window.innerHeight / 2.0 + scene.getImageSymbol("SkinSymbol_iPhone_ActionSheet").textureCellHeight / 2.0;
		maxY = -5 * 250.0 + window.innerHeight / 2.0 - scene.getImageSymbol("SkinSymbol_iPhone_ActionSheet").textureCellHeight / 2.0;
		bounceY = false;

		__instanceName = name;
		KF = __timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 0, minY, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
		scene.__root.addChild(this);

 		button1 = new UIButtonClass("button1");
 		button1.__instanceName = "button1";
		button1.__image = scene.getImageSymbol("SkinSymbol_iPhone_AlertButton_Light");
		button1.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 150, 250, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
 		addChild(button1);

 		text1 = new UITextBoxClass("text1");
 		text1.__instanceName = "text1";
 		text1.__image = scene.getImageSymbol("SkinSymbol_iPhone_ActionSheet");
 		text1.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 0, -250, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
 		addChild(text1);

 		text2 = new UITextBoxClass("text2");
 		text2.__instanceName = "text2";
 		text2.__image = scene.getImageSymbol("SkinSymbol_iPhone_ActionSheet");
 		text2.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 0, 5 * 250, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
 		addChild(text2);

 		this.addEventListener(this.OnTouchStart, HandleStart);
 		this.addEventListener(this.OnTouchMove, HandleMove);
 		this.addEventListener(this.OnTouchEnd, HandleEnd);

 		var img:CocoImage = scene.getImageSymbol("SkinSymbol_iPhone_AlertButton_Light");
 		var btn:UIButtonClass;
 		for(var i = 10; i--;)
 		{
 			btn = new UIButtonClass("button" + String(i));
 			btn.__instanceName = btn.id;
 			btn.__image = img;
 			btn.__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 0, i * 100, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '');
 			addChild(btn);
 		}
 	}

 	public function Destructor()
 	{
 		this.removeEventListener(this.OnTouchStart, HandleStart);
 		this.removeEventListener(this.OnTouchMove, HandleMove);
 		this.removeEventListener(this.OnTouchEnd, HandleEnd);
 		delete button1;
 		delete text1;
 		delete text2;
 	}

 	public function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer)
 	{
 		scrollSpeedY *= 0.95;
 		//KF.y = Math.max(maxY, Math.min(minY, KF.y + scrollSpeedY));
 		KF.y += scrollSpeedY;
 		if(bounceY)
 		{
	 		var springY:Float = minY - KF.y;
	 		if(springY < 0.0)
	 		{
	 			scrollSpeedY = 0.0;
				KF.y += -springY / -Math.sqrt(-springY);
				if(KF.y < minY)
				{
					KF.y = minY;
					bounceY = false;
					scrollSpeedY = 0.0;
				}
	 		}
	 		else
	 		{
		 		var springY:Float = maxY - KF.y;
		 		if(springY > 0.0)
		 		{
		 			scrollSpeedY = 0.0;
		 			KF.y += springY / Math.sqrt(springY);
		 			if(KF.y > maxY)
		 			{
		 				KF.y = maxY;
		 				bounceY = false;
		 				scrollSpeedY = 0.0;
		 			}
		 		}
	 		}
 		}
 		super.paint;
 	}

 	public function HandleStart(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean
	{
		//trace(sender.__className + ", " + e.type);
		scrollLastTime = engine.__clock;
		scrollLastPointY = y;
		scrollSpeedY = 0.0;
		return false;
	}

	public function HandleMove(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean
	{
		//trace(sender.__className + ", " + e.type);
		var dY:Float = y - scrollLastPointY;
		//KF.y = Math.max(maxY, Math.min(minY, KF.y + dY));
		var sY:Float = 1.0;
 		var springY:Float = minY - KF.y;
 		if(springY < 0.0)
 		{
			sY = engine.__ctx.getHeight() / 2.0 / (engine.__ctx.getHeight() / 2.0 - springY);
 		}
 		else
 		{
	 		var springY:Float = maxY - KF.y;
	 		if(springY > 0.0)
	 		{
	 			sY = engine.__ctx.getHeight() / 2.0 / (engine.__ctx.getHeight() / 2.0 + springY);
	 		}
 		}
		KF.y += dY * sY;
		scrollLastTime = engine.__clock;
		scrollLastPointY = y;
		return false;
	}

	public function HandleEnd(sender:CocoEventSource, e:CocoEvent, x:Float, y:Float) :Boolean
	{
		//trace(sender.__className + ", " + e.type);
		var dY:Float = y - scrollLastPointY;
		scrollSpeedY = dY;
		bounceY = true;
		return false;
	}

	public function HandleOnClick(sender:CocoEventSource, e:CocoEvent) :Boolean
	{
		//trace(sender.__className + ", " + e.type);
		return false;
	}

	public function HandleOnChange(sender:UITextBoxClass, e:UITextBoxClassOnChangeEvent) :Boolean
	{
		//trace(sender.id + ", " + e.type + ", " + e.text);
		return false;
	}

	public function HandleOnValidate(sender:UITextBoxClass, e:CocoEvent, text:String) :Boolean
	{
		//trace(sender.id + ", " + e.type + ", " + text);
		return false;
	}
}
